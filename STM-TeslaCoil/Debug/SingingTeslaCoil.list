
SingingTeslaCoil.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088fc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000720  08008ad0  08008ad0  00009ad0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091f0  080091f0  0000b088  2**0
                  CONTENTS
  4 .ARM          00000008  080091f0  080091f0  0000a1f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091f8  080091f8  0000b088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091f8  080091f8  0000a1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080091fc  080091fc  0000a1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08009200  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  20000088  08009288  0000b088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  08009288  0000b3dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109e0  00000000  00000000  0000b0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b2b  00000000  00000000  0001ba98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  0001e5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a3d  00000000  00000000  0001f338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000248c3  00000000  00000000  0001fd75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e60  00000000  00000000  00044638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cea59  00000000  00000000  00058498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00126ef1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004140  00000000  00000000  00126f34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0012b074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008ab4 	.word	0x08008ab4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	08008ab4 	.word	0x08008ab4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b96a 	b.w	8000f24 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	460c      	mov	r4, r1
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d14e      	bne.n	8000d12 <__udivmoddi4+0xaa>
 8000c74:	4694      	mov	ip, r2
 8000c76:	458c      	cmp	ip, r1
 8000c78:	4686      	mov	lr, r0
 8000c7a:	fab2 f282 	clz	r2, r2
 8000c7e:	d962      	bls.n	8000d46 <__udivmoddi4+0xde>
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0320 	rsb	r3, r2, #32
 8000c86:	4091      	lsls	r1, r2
 8000c88:	fa20 f303 	lsr.w	r3, r0, r3
 8000c8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c90:	4319      	orrs	r1, r3
 8000c92:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9a:	fa1f f68c 	uxth.w	r6, ip
 8000c9e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ca2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ca6:	fb07 1114 	mls	r1, r7, r4, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb04 f106 	mul.w	r1, r4, r6
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x64>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cbe:	f080 8112 	bcs.w	8000ee6 <__udivmoddi4+0x27e>
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	f240 810f 	bls.w	8000ee6 <__udivmoddi4+0x27e>
 8000cc8:	3c02      	subs	r4, #2
 8000cca:	4463      	add	r3, ip
 8000ccc:	1a59      	subs	r1, r3, r1
 8000cce:	fa1f f38e 	uxth.w	r3, lr
 8000cd2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cd6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb00 f606 	mul.w	r6, r0, r6
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x94>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cee:	f080 80fc 	bcs.w	8000eea <__udivmoddi4+0x282>
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	f240 80f9 	bls.w	8000eea <__udivmoddi4+0x282>
 8000cf8:	4463      	add	r3, ip
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d02:	2100      	movs	r1, #0
 8000d04:	b11d      	cbz	r5, 8000d0e <__udivmoddi4+0xa6>
 8000d06:	40d3      	lsrs	r3, r2
 8000d08:	2200      	movs	r2, #0
 8000d0a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d905      	bls.n	8000d22 <__udivmoddi4+0xba>
 8000d16:	b10d      	cbz	r5, 8000d1c <__udivmoddi4+0xb4>
 8000d18:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e7f5      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000d22:	fab3 f183 	clz	r1, r3
 8000d26:	2900      	cmp	r1, #0
 8000d28:	d146      	bne.n	8000db8 <__udivmoddi4+0x150>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d302      	bcc.n	8000d34 <__udivmoddi4+0xcc>
 8000d2e:	4290      	cmp	r0, r2
 8000d30:	f0c0 80f0 	bcc.w	8000f14 <__udivmoddi4+0x2ac>
 8000d34:	1a86      	subs	r6, r0, r2
 8000d36:	eb64 0303 	sbc.w	r3, r4, r3
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	2d00      	cmp	r5, #0
 8000d3e:	d0e6      	beq.n	8000d0e <__udivmoddi4+0xa6>
 8000d40:	e9c5 6300 	strd	r6, r3, [r5]
 8000d44:	e7e3      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	f040 8090 	bne.w	8000e6c <__udivmoddi4+0x204>
 8000d4c:	eba1 040c 	sub.w	r4, r1, ip
 8000d50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d54:	fa1f f78c 	uxth.w	r7, ip
 8000d58:	2101      	movs	r1, #1
 8000d5a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb08 4416 	mls	r4, r8, r6, r4
 8000d66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6a:	fb07 f006 	mul.w	r0, r7, r6
 8000d6e:	4298      	cmp	r0, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x11c>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x11a>
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	f200 80cd 	bhi.w	8000f1c <__udivmoddi4+0x2b4>
 8000d82:	4626      	mov	r6, r4
 8000d84:	1a1c      	subs	r4, r3, r0
 8000d86:	fa1f f38e 	uxth.w	r3, lr
 8000d8a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d8e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d96:	fb00 f707 	mul.w	r7, r0, r7
 8000d9a:	429f      	cmp	r7, r3
 8000d9c:	d908      	bls.n	8000db0 <__udivmoddi4+0x148>
 8000d9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000da2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x146>
 8000da8:	429f      	cmp	r7, r3
 8000daa:	f200 80b0 	bhi.w	8000f0e <__udivmoddi4+0x2a6>
 8000dae:	4620      	mov	r0, r4
 8000db0:	1bdb      	subs	r3, r3, r7
 8000db2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db6:	e7a5      	b.n	8000d04 <__udivmoddi4+0x9c>
 8000db8:	f1c1 0620 	rsb	r6, r1, #32
 8000dbc:	408b      	lsls	r3, r1
 8000dbe:	fa22 f706 	lsr.w	r7, r2, r6
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dc8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dcc:	ea43 030c 	orr.w	r3, r3, ip
 8000dd0:	40f4      	lsrs	r4, r6
 8000dd2:	fa00 f801 	lsl.w	r8, r0, r1
 8000dd6:	0c38      	lsrs	r0, r7, #16
 8000dd8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ddc:	fbb4 fef0 	udiv	lr, r4, r0
 8000de0:	fa1f fc87 	uxth.w	ip, r7
 8000de4:	fb00 441e 	mls	r4, r0, lr, r4
 8000de8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dec:	fb0e f90c 	mul.w	r9, lr, ip
 8000df0:	45a1      	cmp	r9, r4
 8000df2:	fa02 f201 	lsl.w	r2, r2, r1
 8000df6:	d90a      	bls.n	8000e0e <__udivmoddi4+0x1a6>
 8000df8:	193c      	adds	r4, r7, r4
 8000dfa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dfe:	f080 8084 	bcs.w	8000f0a <__udivmoddi4+0x2a2>
 8000e02:	45a1      	cmp	r9, r4
 8000e04:	f240 8081 	bls.w	8000f0a <__udivmoddi4+0x2a2>
 8000e08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e0c:	443c      	add	r4, r7
 8000e0e:	eba4 0409 	sub.w	r4, r4, r9
 8000e12:	fa1f f983 	uxth.w	r9, r3
 8000e16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e26:	45a4      	cmp	ip, r4
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x1d2>
 8000e2a:	193c      	adds	r4, r7, r4
 8000e2c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e30:	d267      	bcs.n	8000f02 <__udivmoddi4+0x29a>
 8000e32:	45a4      	cmp	ip, r4
 8000e34:	d965      	bls.n	8000f02 <__udivmoddi4+0x29a>
 8000e36:	3b02      	subs	r3, #2
 8000e38:	443c      	add	r4, r7
 8000e3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e42:	eba4 040c 	sub.w	r4, r4, ip
 8000e46:	429c      	cmp	r4, r3
 8000e48:	46ce      	mov	lr, r9
 8000e4a:	469c      	mov	ip, r3
 8000e4c:	d351      	bcc.n	8000ef2 <__udivmoddi4+0x28a>
 8000e4e:	d04e      	beq.n	8000eee <__udivmoddi4+0x286>
 8000e50:	b155      	cbz	r5, 8000e68 <__udivmoddi4+0x200>
 8000e52:	ebb8 030e 	subs.w	r3, r8, lr
 8000e56:	eb64 040c 	sbc.w	r4, r4, ip
 8000e5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e5e:	40cb      	lsrs	r3, r1
 8000e60:	431e      	orrs	r6, r3
 8000e62:	40cc      	lsrs	r4, r1
 8000e64:	e9c5 6400 	strd	r6, r4, [r5]
 8000e68:	2100      	movs	r1, #0
 8000e6a:	e750      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000e6c:	f1c2 0320 	rsb	r3, r2, #32
 8000e70:	fa20 f103 	lsr.w	r1, r0, r3
 8000e74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e78:	fa24 f303 	lsr.w	r3, r4, r3
 8000e7c:	4094      	lsls	r4, r2
 8000e7e:	430c      	orrs	r4, r1
 8000e80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e88:	fa1f f78c 	uxth.w	r7, ip
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3110 	mls	r1, r8, r0, r3
 8000e94:	0c23      	lsrs	r3, r4, #16
 8000e96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e9a:	fb00 f107 	mul.w	r1, r0, r7
 8000e9e:	4299      	cmp	r1, r3
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x24c>
 8000ea2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eaa:	d22c      	bcs.n	8000f06 <__udivmoddi4+0x29e>
 8000eac:	4299      	cmp	r1, r3
 8000eae:	d92a      	bls.n	8000f06 <__udivmoddi4+0x29e>
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	4463      	add	r3, ip
 8000eb4:	1a5b      	subs	r3, r3, r1
 8000eb6:	b2a4      	uxth	r4, r4
 8000eb8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ebc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ec0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ec4:	fb01 f307 	mul.w	r3, r1, r7
 8000ec8:	42a3      	cmp	r3, r4
 8000eca:	d908      	bls.n	8000ede <__udivmoddi4+0x276>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ed4:	d213      	bcs.n	8000efe <__udivmoddi4+0x296>
 8000ed6:	42a3      	cmp	r3, r4
 8000ed8:	d911      	bls.n	8000efe <__udivmoddi4+0x296>
 8000eda:	3902      	subs	r1, #2
 8000edc:	4464      	add	r4, ip
 8000ede:	1ae4      	subs	r4, r4, r3
 8000ee0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ee4:	e739      	b.n	8000d5a <__udivmoddi4+0xf2>
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	e6f0      	b.n	8000ccc <__udivmoddi4+0x64>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e706      	b.n	8000cfc <__udivmoddi4+0x94>
 8000eee:	45c8      	cmp	r8, r9
 8000ef0:	d2ae      	bcs.n	8000e50 <__udivmoddi4+0x1e8>
 8000ef2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ef6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000efa:	3801      	subs	r0, #1
 8000efc:	e7a8      	b.n	8000e50 <__udivmoddi4+0x1e8>
 8000efe:	4631      	mov	r1, r6
 8000f00:	e7ed      	b.n	8000ede <__udivmoddi4+0x276>
 8000f02:	4603      	mov	r3, r0
 8000f04:	e799      	b.n	8000e3a <__udivmoddi4+0x1d2>
 8000f06:	4630      	mov	r0, r6
 8000f08:	e7d4      	b.n	8000eb4 <__udivmoddi4+0x24c>
 8000f0a:	46d6      	mov	lr, sl
 8000f0c:	e77f      	b.n	8000e0e <__udivmoddi4+0x1a6>
 8000f0e:	4463      	add	r3, ip
 8000f10:	3802      	subs	r0, #2
 8000f12:	e74d      	b.n	8000db0 <__udivmoddi4+0x148>
 8000f14:	4606      	mov	r6, r0
 8000f16:	4623      	mov	r3, r4
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e70f      	b.n	8000d3c <__udivmoddi4+0xd4>
 8000f1c:	3e02      	subs	r6, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	e730      	b.n	8000d84 <__udivmoddi4+0x11c>
 8000f22:	bf00      	nop

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f2a:	f2ad 4d84 	subw	sp, sp, #1156	@ 0x484
 8000f2e:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f30:	f001 f900 	bl	8002134 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f34:	f000 f870 	bl	8001018 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f38:	f000 f93a 	bl	80011b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f3c:	f000 f90e 	bl	800115c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000f40:	f003 f9e2 	bl	8004308 <MX_FATFS_Init>
  MX_SPI1_Init();
 8000f44:	f000 f8d4 	bl	80010f0 <MX_SPI1_Init>

  	 FIL fp;        // for midi file operation
  	 FATFS FatFs; 	//Fatfs handle
     MIDI_header_chunk hdr; // to container header info
     FRESULT res;
     MIDI_controller *ctrl = malloc(sizeof(MIDI_controller));
 8000f48:	200c      	movs	r0, #12
 8000f4a:	f006 f945 	bl	80071d8 <malloc>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	f8c7 3474 	str.w	r3, [r7, #1140]	@ 0x474
     // uint8_t i = 0;

     HAL_Delay(1000);
 8000f54:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f58:	f001 f95e 	bl	8002218 <HAL_Delay>

     res = f_mount(&FatFs, "/", 1); //1=mount now
 8000f5c:	f107 0310 	add.w	r3, r7, #16
 8000f60:	2201      	movs	r2, #1
 8000f62:	4927      	ldr	r1, [pc, #156]	@ (8001000 <main+0xd8>)
 8000f64:	4618      	mov	r0, r3
 8000f66:	f005 fb8d 	bl	8006684 <f_mount>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	f887 3473 	strb.w	r3, [r7, #1139]	@ 0x473
          if (res != FR_OK) {
 8000f70:	f897 3473 	ldrb.w	r3, [r7, #1139]	@ 0x473
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d007      	beq.n	8000f88 <main+0x60>
        	myprintf("f_mount error (%i)\r\n", res);
 8000f78:	f897 3473 	ldrb.w	r3, [r7, #1139]	@ 0x473
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4821      	ldr	r0, [pc, #132]	@ (8001004 <main+0xdc>)
 8000f80:	f001 f888 	bl	8002094 <myprintf>
        	while(1);
 8000f84:	bf00      	nop
 8000f86:	e7fd      	b.n	8000f84 <main+0x5c>
          }

     res = f_open(&fp, "twinkle.mid", FA_READ | FA_WRITE);
 8000f88:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	491e      	ldr	r1, [pc, #120]	@ (8001008 <main+0xe0>)
 8000f90:	4618      	mov	r0, r3
 8000f92:	f005 fbbd 	bl	8006710 <f_open>
 8000f96:	4603      	mov	r3, r0
 8000f98:	f887 3473 	strb.w	r3, [r7, #1139]	@ 0x473

     if (res != FR_OK)
 8000f9c:	f897 3473 	ldrb.w	r3, [r7, #1139]	@ 0x473
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d007      	beq.n	8000fb4 <main+0x8c>
     {
         myprintf("fopen error: %d\n", res);
 8000fa4:	f897 3473 	ldrb.w	r3, [r7, #1139]	@ 0x473
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4818      	ldr	r0, [pc, #96]	@ (800100c <main+0xe4>)
 8000fac:	f001 f872 	bl	8002094 <myprintf>
         while(1);
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <main+0x88>
     }


     hdr = parse_midi_header(&fp, hdr); // grabs header info
 8000fb4:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8000fb8:	f5a3 648f 	sub.w	r4, r3, #1144	@ 0x478
 8000fbc:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8000fc0:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 8000fc4:	f507 7510 	add.w	r5, r7, #576	@ 0x240
 8000fc8:	466e      	mov	r6, sp
 8000fca:	f103 0208 	add.w	r2, r3, #8
 8000fce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fd2:	e886 0003 	stmia.w	r6, {r0, r1}
 8000fd6:	cb0c      	ldmia	r3, {r2, r3}
 8000fd8:	4629      	mov	r1, r5
 8000fda:	4620      	mov	r0, r4
 8000fdc:	f000 fdf4 	bl	8001bc8 <parse_midi_header>

     //BaseType_t xReturned;
     //xReturned = xTaskCreate(parseMidi, "Parse Midi", 2048, fp, Handle)


     play_one_track(&fp, ctrl);
 8000fe0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8000fe4:	f8d7 1474 	ldr.w	r1, [r7, #1140]	@ 0x474
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 fd45 	bl	8001a78 <play_one_track>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  myprintf("end of thing!!!");
 8000fee:	4808      	ldr	r0, [pc, #32]	@ (8001010 <main+0xe8>)
 8000ff0:	f001 f850 	bl	8002094 <myprintf>
	  HAL_Delay(100000);
 8000ff4:	4807      	ldr	r0, [pc, #28]	@ (8001014 <main+0xec>)
 8000ff6:	f001 f90f 	bl	8002218 <HAL_Delay>
	  myprintf("end of thing!!!");
 8000ffa:	bf00      	nop
 8000ffc:	e7f7      	b.n	8000fee <main+0xc6>
 8000ffe:	bf00      	nop
 8001000:	08008ad0 	.word	0x08008ad0
 8001004:	08008ad4 	.word	0x08008ad4
 8001008:	08008aec 	.word	0x08008aec
 800100c:	08008af8 	.word	0x08008af8
 8001010:	08008b0c 	.word	0x08008b0c
 8001014:	000186a0 	.word	0x000186a0

08001018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b094      	sub	sp, #80	@ 0x50
 800101c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	2234      	movs	r2, #52	@ 0x34
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f006 f9ce 	bl	80073c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800102c:	f107 0308 	add.w	r3, r7, #8
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800103c:	2300      	movs	r3, #0
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	4b29      	ldr	r3, [pc, #164]	@ (80010e8 <SystemClock_Config+0xd0>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001044:	4a28      	ldr	r2, [pc, #160]	@ (80010e8 <SystemClock_Config+0xd0>)
 8001046:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800104a:	6413      	str	r3, [r2, #64]	@ 0x40
 800104c:	4b26      	ldr	r3, [pc, #152]	@ (80010e8 <SystemClock_Config+0xd0>)
 800104e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001058:	2300      	movs	r3, #0
 800105a:	603b      	str	r3, [r7, #0]
 800105c:	4b23      	ldr	r3, [pc, #140]	@ (80010ec <SystemClock_Config+0xd4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001064:	4a21      	ldr	r2, [pc, #132]	@ (80010ec <SystemClock_Config+0xd4>)
 8001066:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	4b1f      	ldr	r3, [pc, #124]	@ (80010ec <SystemClock_Config+0xd4>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001074:	603b      	str	r3, [r7, #0]
 8001076:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001078:	2302      	movs	r3, #2
 800107a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800107c:	2301      	movs	r3, #1
 800107e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001080:	2310      	movs	r3, #16
 8001082:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001084:	2302      	movs	r3, #2
 8001086:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001088:	2300      	movs	r3, #0
 800108a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800108c:	2308      	movs	r3, #8
 800108e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001090:	2348      	movs	r3, #72	@ 0x48
 8001092:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001094:	2302      	movs	r3, #2
 8001096:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001098:	2302      	movs	r3, #2
 800109a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800109c:	2302      	movs	r3, #2
 800109e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	4618      	mov	r0, r3
 80010a6:	f001 fe33 	bl	8002d10 <HAL_RCC_OscConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80010b0:	f000 f8b0 	bl	8001214 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b4:	230f      	movs	r3, #15
 80010b6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b8:	2302      	movs	r3, #2
 80010ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80010bc:	2380      	movs	r3, #128	@ 0x80
 80010be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010ca:	f107 0308 	add.w	r3, r7, #8
 80010ce:	2101      	movs	r1, #1
 80010d0:	4618      	mov	r0, r3
 80010d2:	f001 fb59 	bl	8002788 <HAL_RCC_ClockConfig>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80010dc:	f000 f89a 	bl	8001214 <Error_Handler>
  }
}
 80010e0:	bf00      	nop
 80010e2:	3750      	adds	r7, #80	@ 0x50
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40007000 	.word	0x40007000

080010f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010f4:	4b17      	ldr	r3, [pc, #92]	@ (8001154 <MX_SPI1_Init+0x64>)
 80010f6:	4a18      	ldr	r2, [pc, #96]	@ (8001158 <MX_SPI1_Init+0x68>)
 80010f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010fa:	4b16      	ldr	r3, [pc, #88]	@ (8001154 <MX_SPI1_Init+0x64>)
 80010fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001100:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001102:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <MX_SPI1_Init+0x64>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001108:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <MX_SPI1_Init+0x64>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800110e:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <MX_SPI1_Init+0x64>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001114:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <MX_SPI1_Init+0x64>)
 8001116:	2200      	movs	r2, #0
 8001118:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800111a:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <MX_SPI1_Init+0x64>)
 800111c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001120:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001122:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <MX_SPI1_Init+0x64>)
 8001124:	2218      	movs	r2, #24
 8001126:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001128:	4b0a      	ldr	r3, [pc, #40]	@ (8001154 <MX_SPI1_Init+0x64>)
 800112a:	2200      	movs	r2, #0
 800112c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800112e:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <MX_SPI1_Init+0x64>)
 8001130:	2200      	movs	r2, #0
 8001132:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001134:	4b07      	ldr	r3, [pc, #28]	@ (8001154 <MX_SPI1_Init+0x64>)
 8001136:	2200      	movs	r2, #0
 8001138:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <MX_SPI1_Init+0x64>)
 800113c:	220a      	movs	r2, #10
 800113e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001140:	4804      	ldr	r0, [pc, #16]	@ (8001154 <MX_SPI1_Init+0x64>)
 8001142:	f002 f883 	bl	800324c <HAL_SPI_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800114c:	f000 f862 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200000a4 	.word	0x200000a4
 8001158:	40013000 	.word	0x40013000

0800115c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001160:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <MX_USART2_UART_Init+0x4c>)
 8001162:	4a12      	ldr	r2, [pc, #72]	@ (80011ac <MX_USART2_UART_Init+0x50>)
 8001164:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001166:	4b10      	ldr	r3, [pc, #64]	@ (80011a8 <MX_USART2_UART_Init+0x4c>)
 8001168:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800116c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800116e:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <MX_USART2_UART_Init+0x4c>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001174:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <MX_USART2_UART_Init+0x4c>)
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800117a:	4b0b      	ldr	r3, [pc, #44]	@ (80011a8 <MX_USART2_UART_Init+0x4c>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001180:	4b09      	ldr	r3, [pc, #36]	@ (80011a8 <MX_USART2_UART_Init+0x4c>)
 8001182:	220c      	movs	r2, #12
 8001184:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001186:	4b08      	ldr	r3, [pc, #32]	@ (80011a8 <MX_USART2_UART_Init+0x4c>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800118c:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <MX_USART2_UART_Init+0x4c>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001192:	4805      	ldr	r0, [pc, #20]	@ (80011a8 <MX_USART2_UART_Init+0x4c>)
 8001194:	f002 fcac 	bl	8003af0 <HAL_UART_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800119e:	f000 f839 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200000fc 	.word	0x200000fc
 80011ac:	40004400 	.word	0x40004400

080011b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c4:	2300      	movs	r3, #0
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	4b10      	ldr	r3, [pc, #64]	@ (800120c <MX_GPIO_Init+0x5c>)
 80011ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011cc:	4a0f      	ldr	r2, [pc, #60]	@ (800120c <MX_GPIO_Init+0x5c>)
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d4:	4b0d      	ldr	r3, [pc, #52]	@ (800120c <MX_GPIO_Init+0x5c>)
 80011d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	603b      	str	r3, [r7, #0]
 80011de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2110      	movs	r1, #16
 80011e4:	480a      	ldr	r0, [pc, #40]	@ (8001210 <MX_GPIO_Init+0x60>)
 80011e6:	f001 fab5 	bl	8002754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin;
 80011ea:	2310      	movs	r3, #16
 80011ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CS_PIN_GPIO_Port, &GPIO_InitStruct);
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	4619      	mov	r1, r3
 80011fe:	4804      	ldr	r0, [pc, #16]	@ (8001210 <MX_GPIO_Init+0x60>)
 8001200:	f001 f914 	bl	800242c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001204:	bf00      	nop
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40023800 	.word	0x40023800
 8001210:	40020000 	.word	0x40020000

08001214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001218:	b672      	cpsid	i
}
 800121a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <Error_Handler+0x8>

08001220 <midi_event_handler>:
 * @param fp FIL pointer to midi FIL
 * @param delta_time time before next event is read in ticks
 * @param event handle for event type
 * @param ctrl contains system information for controls*/
void midi_event_handler(FIL *fp, uint32_t delta_time, uint8_t event, MIDI_controller *ctrl)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	603b      	str	r3, [r7, #0]
 800122c:	4613      	mov	r3, r2
 800122e:	71fb      	strb	r3, [r7, #7]
    uint8_t midi_type;
    uint8_t channel;
    uint16_t ms;
    struct note note;

    midi_type = 0xF0 & event; // event name
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	f023 030f 	bic.w	r3, r3, #15
 8001236:	77fb      	strb	r3, [r7, #31]
    channel = 0x0F & event;   // where the event gets sent *** for polyphonic music
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	77bb      	strb	r3, [r7, #30]

    // myprintf("Midi Type: 0x%x\n", midi_type);

    switch (midi_type)
 8001240:	7ffb      	ldrb	r3, [r7, #31]
 8001242:	2be0      	cmp	r3, #224	@ 0xe0
 8001244:	f000 80e6 	beq.w	8001414 <midi_event_handler+0x1f4>
 8001248:	2be0      	cmp	r3, #224	@ 0xe0
 800124a:	f300 80e9 	bgt.w	8001420 <midi_event_handler+0x200>
 800124e:	2bd0      	cmp	r3, #208	@ 0xd0
 8001250:	f000 80da 	beq.w	8001408 <midi_event_handler+0x1e8>
 8001254:	2bd0      	cmp	r3, #208	@ 0xd0
 8001256:	f300 80e3 	bgt.w	8001420 <midi_event_handler+0x200>
 800125a:	2bc0      	cmp	r3, #192	@ 0xc0
 800125c:	f000 80ce 	beq.w	80013fc <midi_event_handler+0x1dc>
 8001260:	2bc0      	cmp	r3, #192	@ 0xc0
 8001262:	f300 80dd 	bgt.w	8001420 <midi_event_handler+0x200>
 8001266:	2bb0      	cmp	r3, #176	@ 0xb0
 8001268:	f000 80c2 	beq.w	80013f0 <midi_event_handler+0x1d0>
 800126c:	2bb0      	cmp	r3, #176	@ 0xb0
 800126e:	f300 80d7 	bgt.w	8001420 <midi_event_handler+0x200>
 8001272:	2ba0      	cmp	r3, #160	@ 0xa0
 8001274:	f000 80b3 	beq.w	80013de <midi_event_handler+0x1be>
 8001278:	2ba0      	cmp	r3, #160	@ 0xa0
 800127a:	f300 80d1 	bgt.w	8001420 <midi_event_handler+0x200>
 800127e:	2b80      	cmp	r3, #128	@ 0x80
 8001280:	d002      	beq.n	8001288 <midi_event_handler+0x68>
 8001282:	2b90      	cmp	r3, #144	@ 0x90
 8001284:	d057      	beq.n	8001336 <midi_event_handler+0x116>
 8001286:	e0cb      	b.n	8001420 <midi_event_handler+0x200>
    {
    case 0x80: // Note Off
        myprintf("Note Off @ Channel: 0x%x\n", channel);
 8001288:	7fbb      	ldrb	r3, [r7, #30]
 800128a:	4619      	mov	r1, r3
 800128c:	486e      	ldr	r0, [pc, #440]	@ (8001448 <midi_event_handler+0x228>)
 800128e:	f000 ff01 	bl	8002094 <myprintf>

        f_read(fp, &note.number, 1, NULL);
 8001292:	f107 0110 	add.w	r1, r7, #16
 8001296:	2300      	movs	r3, #0
 8001298:	2201      	movs	r2, #1
 800129a:	68f8      	ldr	r0, [r7, #12]
 800129c:	f005 fbf2 	bl	8006a84 <f_read>
        f_read(fp, &note.velocity, 1, NULL);
 80012a0:	f107 0310 	add.w	r3, r7, #16
 80012a4:	1c59      	adds	r1, r3, #1
 80012a6:	2300      	movs	r3, #0
 80012a8:	2201      	movs	r2, #1
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f005 fbea 	bl	8006a84 <f_read>
        note.frequency = 440 * pow(2.0, (note.number - 69) / 12.0);
 80012b0:	7c3b      	ldrb	r3, [r7, #16]
 80012b2:	3b45      	subs	r3, #69	@ 0x45
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f955 	bl	8000564 <__aeabi_i2d>
 80012ba:	f04f 0200 	mov.w	r2, #0
 80012be:	4b63      	ldr	r3, [pc, #396]	@ (800144c <midi_event_handler+0x22c>)
 80012c0:	f7ff fae4 	bl	800088c <__aeabi_ddiv>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	ec43 2b17 	vmov	d7, r2, r3
 80012cc:	eeb0 1a47 	vmov.f32	s2, s14
 80012d0:	eef0 1a67 	vmov.f32	s3, s15
 80012d4:	ed9f 0b5a 	vldr	d0, [pc, #360]	@ 8001440 <midi_event_handler+0x220>
 80012d8:	f006 fc8c 	bl	8007bf4 <pow>
 80012dc:	ec51 0b10 	vmov	r0, r1, d0
 80012e0:	f04f 0200 	mov.w	r2, #0
 80012e4:	4b5a      	ldr	r3, [pc, #360]	@ (8001450 <midi_event_handler+0x230>)
 80012e6:	f7ff f9a7 	bl	8000638 <__aeabi_dmul>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4610      	mov	r0, r2
 80012f0:	4619      	mov	r1, r3
 80012f2:	f7ff fc51 	bl	8000b98 <__aeabi_d2f>
 80012f6:	4603      	mov	r3, r0
 80012f8:	617b      	str	r3, [r7, #20]

        ms = delta_time_to_ms(delta_time, ctrl);
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	6839      	ldr	r1, [r7, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f000 fe94 	bl	800202e <delta_time_to_ms>
 8001306:	4603      	mov	r3, r0
 8001308:	83bb      	strh	r3, [r7, #28]

        note.length = ms;
 800130a:	8bbb      	ldrh	r3, [r7, #28]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	763b      	strb	r3, [r7, #24]

        // myprintf("note velocity %x\n", note.velocity);
        myprintf("note frequency %f Hz\n", note.frequency);
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff f938 	bl	8000588 <__aeabi_f2d>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	484d      	ldr	r0, [pc, #308]	@ (8001454 <midi_event_handler+0x234>)
 800131e:	f000 feb9 	bl	8002094 <myprintf>
        myprintf("note timing in ms %x\n\n", ms);
 8001322:	8bbb      	ldrh	r3, [r7, #28]
 8001324:	4619      	mov	r1, r3
 8001326:	484c      	ldr	r0, [pc, #304]	@ (8001458 <midi_event_handler+0x238>)
 8001328:	f000 feb4 	bl	8002094 <myprintf>

        HAL_Delay(ms);
 800132c:	8bbb      	ldrh	r3, [r7, #28]
 800132e:	4618      	mov	r0, r3
 8001330:	f000 ff72 	bl	8002218 <HAL_Delay>

        // skip_midi_event(fp, midi_type);
        break;
 8001334:	e07f      	b.n	8001436 <midi_event_handler+0x216>

    case 0x90: // Note On
        myprintf("Note On @ Channel: 0x%x\n", channel);
 8001336:	7fbb      	ldrb	r3, [r7, #30]
 8001338:	4619      	mov	r1, r3
 800133a:	4848      	ldr	r0, [pc, #288]	@ (800145c <midi_event_handler+0x23c>)
 800133c:	f000 feaa 	bl	8002094 <myprintf>

        ms = delta_time_to_ms(delta_time, ctrl);
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	b2db      	uxtb	r3, r3
 8001344:	6839      	ldr	r1, [r7, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f000 fe71 	bl	800202e <delta_time_to_ms>
 800134c:	4603      	mov	r3, r0
 800134e:	83bb      	strh	r3, [r7, #28]

        f_read(fp, &note.number, 1, NULL);
 8001350:	f107 0110 	add.w	r1, r7, #16
 8001354:	2300      	movs	r3, #0
 8001356:	2201      	movs	r2, #1
 8001358:	68f8      	ldr	r0, [r7, #12]
 800135a:	f005 fb93 	bl	8006a84 <f_read>
        f_read(fp, &note.velocity, 1, NULL);
 800135e:	f107 0310 	add.w	r3, r7, #16
 8001362:	1c59      	adds	r1, r3, #1
 8001364:	2300      	movs	r3, #0
 8001366:	2201      	movs	r2, #1
 8001368:	68f8      	ldr	r0, [r7, #12]
 800136a:	f005 fb8b 	bl	8006a84 <f_read>
        note.frequency = 440 * pow(2.0, (note.number - 69) / 12.0);
 800136e:	7c3b      	ldrb	r3, [r7, #16]
 8001370:	3b45      	subs	r3, #69	@ 0x45
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f8f6 	bl	8000564 <__aeabi_i2d>
 8001378:	f04f 0200 	mov.w	r2, #0
 800137c:	4b33      	ldr	r3, [pc, #204]	@ (800144c <midi_event_handler+0x22c>)
 800137e:	f7ff fa85 	bl	800088c <__aeabi_ddiv>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	ec43 2b17 	vmov	d7, r2, r3
 800138a:	eeb0 1a47 	vmov.f32	s2, s14
 800138e:	eef0 1a67 	vmov.f32	s3, s15
 8001392:	ed9f 0b2b 	vldr	d0, [pc, #172]	@ 8001440 <midi_event_handler+0x220>
 8001396:	f006 fc2d 	bl	8007bf4 <pow>
 800139a:	ec51 0b10 	vmov	r0, r1, d0
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001450 <midi_event_handler+0x230>)
 80013a4:	f7ff f948 	bl	8000638 <__aeabi_dmul>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	f7ff fbf2 	bl	8000b98 <__aeabi_d2f>
 80013b4:	4603      	mov	r3, r0
 80013b6:	617b      	str	r3, [r7, #20]

        myprintf("note frequency %f Hz\n", note.frequency);
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f8e4 	bl	8000588 <__aeabi_f2d>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4823      	ldr	r0, [pc, #140]	@ (8001454 <midi_event_handler+0x234>)
 80013c6:	f000 fe65 	bl	8002094 <myprintf>
        myprintf("note timing in ms %x\n\n", ms);
 80013ca:	8bbb      	ldrh	r3, [r7, #28]
 80013cc:	4619      	mov	r1, r3
 80013ce:	4822      	ldr	r0, [pc, #136]	@ (8001458 <midi_event_handler+0x238>)
 80013d0:	f000 fe60 	bl	8002094 <myprintf>

        // delay before event begins = ms
        HAL_Delay(ms);
 80013d4:	8bbb      	ldrh	r3, [r7, #28]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 ff1e 	bl	8002218 <HAL_Delay>

        // play note until note off event

        // skip_midi_event(fp, midi_type);
        break;
 80013dc:	e02b      	b.n	8001436 <midi_event_handler+0x216>

    case 0xA0: // Polyphonic Key Pressure (Aftertouch)
        myprintf("Polyphonic Key Pressure\n");
 80013de:	4820      	ldr	r0, [pc, #128]	@ (8001460 <midi_event_handler+0x240>)
 80013e0:	f000 fe58 	bl	8002094 <myprintf>
        skip_midi_event(fp, midi_type);
 80013e4:	7ffb      	ldrb	r3, [r7, #31]
 80013e6:	4619      	mov	r1, r3
 80013e8:	68f8      	ldr	r0, [r7, #12]
 80013ea:	f000 fa6f 	bl	80018cc <skip_midi_event>
        break;
 80013ee:	e022      	b.n	8001436 <midi_event_handler+0x216>

    case 0xB0: // Control Change
        skip_midi_event(fp, midi_type);
 80013f0:	7ffb      	ldrb	r3, [r7, #31]
 80013f2:	4619      	mov	r1, r3
 80013f4:	68f8      	ldr	r0, [r7, #12]
 80013f6:	f000 fa69 	bl	80018cc <skip_midi_event>
        break;
 80013fa:	e01c      	b.n	8001436 <midi_event_handler+0x216>

    case 0xC0: // Program Change
        // changes instrument type
        skip_midi_event(fp, midi_type);
 80013fc:	7ffb      	ldrb	r3, [r7, #31]
 80013fe:	4619      	mov	r1, r3
 8001400:	68f8      	ldr	r0, [r7, #12]
 8001402:	f000 fa63 	bl	80018cc <skip_midi_event>
        break;
 8001406:	e016      	b.n	8001436 <midi_event_handler+0x216>

    case 0xD0: // Channel Pressure (Aftertouch)
        skip_midi_event(fp, midi_type);
 8001408:	7ffb      	ldrb	r3, [r7, #31]
 800140a:	4619      	mov	r1, r3
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	f000 fa5d 	bl	80018cc <skip_midi_event>
        break;
 8001412:	e010      	b.n	8001436 <midi_event_handler+0x216>

    case 0xE0: // Pitch Bend Change

        skip_midi_event(fp, midi_type);
 8001414:	7ffb      	ldrb	r3, [r7, #31]
 8001416:	4619      	mov	r1, r3
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	f000 fa57 	bl	80018cc <skip_midi_event>
        break;
 800141e:	e00a      	b.n	8001436 <midi_event_handler+0x216>

    default:
        myprintf("Unknown MIDI Type Handler: 0x%x\n", midi_type);
 8001420:	7ffb      	ldrb	r3, [r7, #31]
 8001422:	4619      	mov	r1, r3
 8001424:	480f      	ldr	r0, [pc, #60]	@ (8001464 <midi_event_handler+0x244>)
 8001426:	f000 fe35 	bl	8002094 <myprintf>
        skip_midi_event(fp, midi_type);
 800142a:	7ffb      	ldrb	r3, [r7, #31]
 800142c:	4619      	mov	r1, r3
 800142e:	68f8      	ldr	r0, [r7, #12]
 8001430:	f000 fa4c 	bl	80018cc <skip_midi_event>
        break;
 8001434:	bf00      	nop
    }
}
 8001436:	bf00      	nop
 8001438:	3720      	adds	r7, #32
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	00000000 	.word	0x00000000
 8001444:	40000000 	.word	0x40000000
 8001448:	08008b1c 	.word	0x08008b1c
 800144c:	40280000 	.word	0x40280000
 8001450:	407b8000 	.word	0x407b8000
 8001454:	08008b38 	.word	0x08008b38
 8001458:	08008b50 	.word	0x08008b50
 800145c:	08008b68 	.word	0x08008b68
 8001460:	08008b84 	.word	0x08008b84
 8001464:	08008ba0 	.word	0x08008ba0

08001468 <meta_event_handler>:
 * @param delta_time time before next event is read in ticks
 * @param event handle for event type
 * @param ctrl contains system information for controls
 * @return 0 on success -1 if failure*/
uint8_t meta_event_handler(FIL *fp, uint32_t delta_time, MIDI_controller *ctrl)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08c      	sub	sp, #48	@ 0x30
 800146c:	af02      	add	r7, sp, #8
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
    Delta time
    FF (signifies meta event)
    Event Code (1 byte)
    */

    f_read(fp, &meta_type, 1, NULL);
 8001474:	f107 011b 	add.w	r1, r7, #27
 8001478:	2300      	movs	r3, #0
 800147a:	2201      	movs	r2, #1
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	f005 fb01 	bl	8006a84 <f_read>

    switch (meta_type)
 8001482:	7efb      	ldrb	r3, [r7, #27]
 8001484:	2b59      	cmp	r3, #89	@ 0x59
 8001486:	f300 80bd 	bgt.w	8001604 <meta_event_handler+0x19c>
 800148a:	2b00      	cmp	r3, #0
 800148c:	f2c0 81ca 	blt.w	8001824 <meta_event_handler+0x3bc>
 8001490:	2b59      	cmp	r3, #89	@ 0x59
 8001492:	f200 81c7 	bhi.w	8001824 <meta_event_handler+0x3bc>
 8001496:	a201      	add	r2, pc, #4	@ (adr r2, 800149c <meta_event_handler+0x34>)
 8001498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149c:	0800160d 	.word	0x0800160d
 80014a0:	0800161b 	.word	0x0800161b
 80014a4:	08001629 	.word	0x08001629
 80014a8:	08001637 	.word	0x08001637
 80014ac:	0800169b 	.word	0x0800169b
 80014b0:	080016a9 	.word	0x080016a9
 80014b4:	080016b7 	.word	0x080016b7
 80014b8:	080016c5 	.word	0x080016c5
 80014bc:	08001825 	.word	0x08001825
 80014c0:	08001825 	.word	0x08001825
 80014c4:	08001825 	.word	0x08001825
 80014c8:	08001825 	.word	0x08001825
 80014cc:	08001825 	.word	0x08001825
 80014d0:	08001825 	.word	0x08001825
 80014d4:	08001825 	.word	0x08001825
 80014d8:	08001825 	.word	0x08001825
 80014dc:	08001825 	.word	0x08001825
 80014e0:	08001825 	.word	0x08001825
 80014e4:	08001825 	.word	0x08001825
 80014e8:	08001825 	.word	0x08001825
 80014ec:	08001825 	.word	0x08001825
 80014f0:	08001825 	.word	0x08001825
 80014f4:	08001825 	.word	0x08001825
 80014f8:	08001825 	.word	0x08001825
 80014fc:	08001825 	.word	0x08001825
 8001500:	08001825 	.word	0x08001825
 8001504:	08001825 	.word	0x08001825
 8001508:	08001825 	.word	0x08001825
 800150c:	08001825 	.word	0x08001825
 8001510:	08001825 	.word	0x08001825
 8001514:	08001825 	.word	0x08001825
 8001518:	08001825 	.word	0x08001825
 800151c:	080016d3 	.word	0x080016d3
 8001520:	08001825 	.word	0x08001825
 8001524:	08001825 	.word	0x08001825
 8001528:	08001825 	.word	0x08001825
 800152c:	08001825 	.word	0x08001825
 8001530:	08001825 	.word	0x08001825
 8001534:	08001825 	.word	0x08001825
 8001538:	08001825 	.word	0x08001825
 800153c:	08001825 	.word	0x08001825
 8001540:	08001825 	.word	0x08001825
 8001544:	08001825 	.word	0x08001825
 8001548:	08001825 	.word	0x08001825
 800154c:	08001825 	.word	0x08001825
 8001550:	08001825 	.word	0x08001825
 8001554:	08001825 	.word	0x08001825
 8001558:	080016e1 	.word	0x080016e1
 800155c:	08001825 	.word	0x08001825
 8001560:	08001825 	.word	0x08001825
 8001564:	08001825 	.word	0x08001825
 8001568:	08001825 	.word	0x08001825
 800156c:	08001825 	.word	0x08001825
 8001570:	08001825 	.word	0x08001825
 8001574:	08001825 	.word	0x08001825
 8001578:	08001825 	.word	0x08001825
 800157c:	08001825 	.word	0x08001825
 8001580:	08001825 	.word	0x08001825
 8001584:	08001825 	.word	0x08001825
 8001588:	08001825 	.word	0x08001825
 800158c:	08001825 	.word	0x08001825
 8001590:	08001825 	.word	0x08001825
 8001594:	08001825 	.word	0x08001825
 8001598:	08001825 	.word	0x08001825
 800159c:	08001825 	.word	0x08001825
 80015a0:	08001825 	.word	0x08001825
 80015a4:	08001825 	.word	0x08001825
 80015a8:	08001825 	.word	0x08001825
 80015ac:	08001825 	.word	0x08001825
 80015b0:	08001825 	.word	0x08001825
 80015b4:	08001825 	.word	0x08001825
 80015b8:	08001825 	.word	0x08001825
 80015bc:	08001825 	.word	0x08001825
 80015c0:	08001825 	.word	0x08001825
 80015c4:	08001825 	.word	0x08001825
 80015c8:	08001825 	.word	0x08001825
 80015cc:	08001825 	.word	0x08001825
 80015d0:	08001825 	.word	0x08001825
 80015d4:	08001825 	.word	0x08001825
 80015d8:	08001825 	.word	0x08001825
 80015dc:	08001825 	.word	0x08001825
 80015e0:	080016f7 	.word	0x080016f7
 80015e4:	08001825 	.word	0x08001825
 80015e8:	08001825 	.word	0x08001825
 80015ec:	08001773 	.word	0x08001773
 80015f0:	08001825 	.word	0x08001825
 80015f4:	08001825 	.word	0x08001825
 80015f8:	08001825 	.word	0x08001825
 80015fc:	08001781 	.word	0x08001781
 8001600:	080017dd 	.word	0x080017dd
 8001604:	2b7f      	cmp	r3, #127	@ 0x7f
 8001606:	f000 8109 	beq.w	800181c <meta_event_handler+0x3b4>
 800160a:	e10b      	b.n	8001824 <meta_event_handler+0x3bc>
    {
    case 0x00:
        myprintf("Handle Sequence Number event\n");
 800160c:	488d      	ldr	r0, [pc, #564]	@ (8001844 <meta_event_handler+0x3dc>)
 800160e:	f000 fd41 	bl	8002094 <myprintf>
        skip_meta_event(fp);
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f000 f942 	bl	800189c <skip_meta_event>

        break;
 8001618:	e10e      	b.n	8001838 <meta_event_handler+0x3d0>
    case 0x01:
        myprintf("Handle Text Event\n");
 800161a:	488b      	ldr	r0, [pc, #556]	@ (8001848 <meta_event_handler+0x3e0>)
 800161c:	f000 fd3a 	bl	8002094 <myprintf>
        skip_meta_event(fp);
 8001620:	68f8      	ldr	r0, [r7, #12]
 8001622:	f000 f93b 	bl	800189c <skip_meta_event>
        break;
 8001626:	e107      	b.n	8001838 <meta_event_handler+0x3d0>
    case 0x02:
        myprintf("Handle Copyright Notice\n");
 8001628:	4888      	ldr	r0, [pc, #544]	@ (800184c <meta_event_handler+0x3e4>)
 800162a:	f000 fd33 	bl	8002094 <myprintf>
        skip_meta_event(fp);
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	f000 f934 	bl	800189c <skip_meta_event>
        break;
 8001634:	e100      	b.n	8001838 <meta_event_handler+0x3d0>
    case 0x03:
        myprintf("Track Name\n");
 8001636:	4886      	ldr	r0, [pc, #536]	@ (8001850 <meta_event_handler+0x3e8>)
 8001638:	f000 fd2c 	bl	8002094 <myprintf>
        event_len = decode_vlq(fp);
 800163c:	68f8      	ldr	r0, [r7, #12]
 800163e:	f000 fcd9 	bl	8001ff4 <decode_vlq>
 8001642:	4603      	mov	r3, r0
 8001644:	617b      	str	r3, [r7, #20]
        int i = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	627b      	str	r3, [r7, #36]	@ 0x24

        buf = malloc(sizeof(uint8_t) * event_len);
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	4618      	mov	r0, r3
 800164e:	f005 fdc3 	bl	80071d8 <malloc>
 8001652:	4603      	mov	r3, r0
 8001654:	623b      	str	r3, [r7, #32]
        if (!buf)
 8001656:	6a3b      	ldr	r3, [r7, #32]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d104      	bne.n	8001666 <meta_event_handler+0x1fe>
        {
            myprintf("Malloc Failed in track name\n");
 800165c:	487d      	ldr	r0, [pc, #500]	@ (8001854 <meta_event_handler+0x3ec>)
 800165e:	f000 fd19 	bl	8002094 <myprintf>
            return -1;
 8001662:	23ff      	movs	r3, #255	@ 0xff
 8001664:	e0e9      	b.n	800183a <meta_event_handler+0x3d2>
        }

        f_read(fp, buf, event_len, NULL);
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	2300      	movs	r3, #0
 800166a:	6a39      	ldr	r1, [r7, #32]
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f005 fa09 	bl	8006a84 <f_read>

        // prints track name
        while (i < event_len)
 8001672:	e00a      	b.n	800168a <meta_event_handler+0x222>
        {
            myprintf("%c", buf[i]);
 8001674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001676:	6a3a      	ldr	r2, [r7, #32]
 8001678:	4413      	add	r3, r2
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	4619      	mov	r1, r3
 800167e:	4876      	ldr	r0, [pc, #472]	@ (8001858 <meta_event_handler+0x3f0>)
 8001680:	f000 fd08 	bl	8002094 <myprintf>
            i++;
 8001684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001686:	3301      	adds	r3, #1
 8001688:	627b      	str	r3, [r7, #36]	@ 0x24
        while (i < event_len)
 800168a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	429a      	cmp	r2, r3
 8001690:	d3f0      	bcc.n	8001674 <meta_event_handler+0x20c>
        }

        myprintf("\n\n");
 8001692:	4872      	ldr	r0, [pc, #456]	@ (800185c <meta_event_handler+0x3f4>)
 8001694:	f000 fcfe 	bl	8002094 <myprintf>

        // skip_meta_event(fp);
        break;
 8001698:	e0ce      	b.n	8001838 <meta_event_handler+0x3d0>
    case 0x04:
        myprintf("Handle Instrument Name\n");
 800169a:	4871      	ldr	r0, [pc, #452]	@ (8001860 <meta_event_handler+0x3f8>)
 800169c:	f000 fcfa 	bl	8002094 <myprintf>
        skip_meta_event(fp);
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f000 f8fb 	bl	800189c <skip_meta_event>
        break;
 80016a6:	e0c7      	b.n	8001838 <meta_event_handler+0x3d0>
    case 0x05:
        myprintf("Handle Lyric Text\n");
 80016a8:	486e      	ldr	r0, [pc, #440]	@ (8001864 <meta_event_handler+0x3fc>)
 80016aa:	f000 fcf3 	bl	8002094 <myprintf>
        skip_meta_event(fp);
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	f000 f8f4 	bl	800189c <skip_meta_event>
        break;
 80016b4:	e0c0      	b.n	8001838 <meta_event_handler+0x3d0>
    case 0x06:
        myprintf("Handle Marker Text\n");
 80016b6:	486c      	ldr	r0, [pc, #432]	@ (8001868 <meta_event_handler+0x400>)
 80016b8:	f000 fcec 	bl	8002094 <myprintf>
        skip_meta_event(fp);
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f000 f8ed 	bl	800189c <skip_meta_event>
        break;
 80016c2:	e0b9      	b.n	8001838 <meta_event_handler+0x3d0>
    case 0x07:
        myprintf("Handle Cue Point\n");
 80016c4:	4869      	ldr	r0, [pc, #420]	@ (800186c <meta_event_handler+0x404>)
 80016c6:	f000 fce5 	bl	8002094 <myprintf>
        skip_meta_event(fp);
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	f000 f8e6 	bl	800189c <skip_meta_event>
        break;
 80016d0:	e0b2      	b.n	8001838 <meta_event_handler+0x3d0>
    case 0x20:
        myprintf("Handle MIDI Channel Prefix Assignment\n");
 80016d2:	4867      	ldr	r0, [pc, #412]	@ (8001870 <meta_event_handler+0x408>)
 80016d4:	f000 fcde 	bl	8002094 <myprintf>
        skip_meta_event(fp);
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	f000 f8df 	bl	800189c <skip_meta_event>
        break;
 80016de:	e0ab      	b.n	8001838 <meta_event_handler+0x3d0>
    case 0x2F:
        myprintf("Handle End of Track\n\n\n");
 80016e0:	4864      	ldr	r0, [pc, #400]	@ (8001874 <meta_event_handler+0x40c>)
 80016e2:	f000 fcd7 	bl	8002094 <myprintf>
        f_read(fp, NULL, 1, NULL);; // skips final value
 80016e6:	2300      	movs	r3, #0
 80016e8:	2201      	movs	r2, #1
 80016ea:	2100      	movs	r1, #0
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f005 f9c9 	bl	8006a84 <f_read>

        return 1; // success!!
 80016f2:	2301      	movs	r3, #1
 80016f4:	e0a1      	b.n	800183a <meta_event_handler+0x3d2>
    case 0x51:
        myprintf("Sets Tempo\n");
 80016f6:	4860      	ldr	r0, [pc, #384]	@ (8001878 <meta_event_handler+0x410>)
 80016f8:	f000 fccc 	bl	8002094 <myprintf>

        uint32_t num_micro = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61fb      	str	r3, [r7, #28]

        buf = malloc(sizeof(uint8_t) * 3);
 8001700:	2003      	movs	r0, #3
 8001702:	f005 fd69 	bl	80071d8 <malloc>
 8001706:	4603      	mov	r3, r0
 8001708:	623b      	str	r3, [r7, #32]
        if (!buf)
 800170a:	6a3b      	ldr	r3, [r7, #32]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d104      	bne.n	800171a <meta_event_handler+0x2b2>
        {
            myprintf("Malloc Failed in Time Signiture");
 8001710:	485a      	ldr	r0, [pc, #360]	@ (800187c <meta_event_handler+0x414>)
 8001712:	f000 fcbf 	bl	8002094 <myprintf>
            return -1;
 8001716:	23ff      	movs	r3, #255	@ 0xff
 8001718:	e08f      	b.n	800183a <meta_event_handler+0x3d2>
        }
        f_read(fp, &event_len, 1, NULL);
 800171a:	f107 0114 	add.w	r1, r7, #20
 800171e:	2300      	movs	r3, #0
 8001720:	2201      	movs	r2, #1
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	f005 f9ae 	bl	8006a84 <f_read>
        f_read(fp, buf, 3, NULL);
 8001728:	2300      	movs	r3, #0
 800172a:	2203      	movs	r2, #3
 800172c:	6a39      	ldr	r1, [r7, #32]
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f005 f9a8 	bl	8006a84 <f_read>
        num_micro = (buf[0] << 16) | (buf[1] << 8) | (buf[2]);
 8001734:	6a3b      	ldr	r3, [r7, #32]
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	041a      	lsls	r2, r3, #16
 800173a:	6a3b      	ldr	r3, [r7, #32]
 800173c:	3301      	adds	r3, #1
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	021b      	lsls	r3, r3, #8
 8001742:	4313      	orrs	r3, r2
 8001744:	6a3a      	ldr	r2, [r7, #32]
 8001746:	3202      	adds	r2, #2
 8001748:	7812      	ldrb	r2, [r2, #0]
 800174a:	4313      	orrs	r3, r2
 800174c:	61fb      	str	r3, [r7, #28]
        myprintf("Microseconds per quarter note: %d\n", num_micro);
 800174e:	69f9      	ldr	r1, [r7, #28]
 8001750:	484b      	ldr	r0, [pc, #300]	@ (8001880 <meta_event_handler+0x418>)
 8001752:	f000 fc9f 	bl	8002094 <myprintf>

        ctrl->tempo = 60000000 / num_micro; // tempo in bpm
 8001756:	4a4b      	ldr	r2, [pc, #300]	@ (8001884 <meta_event_handler+0x41c>)
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	fbb2 f3f3 	udiv	r3, r2, r3
 800175e:	b2da      	uxtb	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	719a      	strb	r2, [r3, #6]

        myprintf("tempo in BPM: %d\n", ctrl->tempo);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	799b      	ldrb	r3, [r3, #6]
 8001768:	4619      	mov	r1, r3
 800176a:	4847      	ldr	r0, [pc, #284]	@ (8001888 <meta_event_handler+0x420>)
 800176c:	f000 fc92 	bl	8002094 <myprintf>

        // skip_meta_event(fp);
        break;
 8001770:	e062      	b.n	8001838 <meta_event_handler+0x3d0>
    case 0x54:
        myprintf("Handle SMPTE Offset\n");
 8001772:	4846      	ldr	r0, [pc, #280]	@ (800188c <meta_event_handler+0x424>)
 8001774:	f000 fc8e 	bl	8002094 <myprintf>
        skip_meta_event(fp);
 8001778:	68f8      	ldr	r0, [r7, #12]
 800177a:	f000 f88f 	bl	800189c <skip_meta_event>
        break;
 800177e:	e05b      	b.n	8001838 <meta_event_handler+0x3d0>
    case 0x58: // time signiture

        f_read(fp, &event_len, 1, NULL);; // gets length byte (always 0x04)
 8001780:	f107 0114 	add.w	r1, r7, #20
 8001784:	2300      	movs	r3, #0
 8001786:	2201      	movs	r2, #1
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f005 f97b 	bl	8006a84 <f_read>

        buf = malloc(sizeof(uint8_t) * 4);
 800178e:	2004      	movs	r0, #4
 8001790:	f005 fd22 	bl	80071d8 <malloc>
 8001794:	4603      	mov	r3, r0
 8001796:	623b      	str	r3, [r7, #32]
        if (!buf)
 8001798:	6a3b      	ldr	r3, [r7, #32]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d104      	bne.n	80017a8 <meta_event_handler+0x340>
        {
            myprintf("Malloc Failed in Time Signiture");
 800179e:	4837      	ldr	r0, [pc, #220]	@ (800187c <meta_event_handler+0x414>)
 80017a0:	f000 fc78 	bl	8002094 <myprintf>
            return -1;
 80017a4:	23ff      	movs	r3, #255	@ 0xff
 80017a6:	e048      	b.n	800183a <meta_event_handler+0x3d2>
        denominator
        metrinome clicks
        32nd notes per quarter
        */

        f_read(fp,buf,4,NULL);
 80017a8:	2300      	movs	r3, #0
 80017aa:	2204      	movs	r2, #4
 80017ac:	6a39      	ldr	r1, [r7, #32]
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f005 f968 	bl	8006a84 <f_read>

        myprintf("Time signiture: \n num:%x\n denom:%x\n clocks per beat:%x\n 32nds per quarter:%x\n\n", buf[0], buf[1], buf[2], buf[3]);
 80017b4:	6a3b      	ldr	r3, [r7, #32]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	4619      	mov	r1, r3
 80017ba:	6a3b      	ldr	r3, [r7, #32]
 80017bc:	3301      	adds	r3, #1
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	461a      	mov	r2, r3
 80017c2:	6a3b      	ldr	r3, [r7, #32]
 80017c4:	3302      	adds	r3, #2
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	6a3b      	ldr	r3, [r7, #32]
 80017cc:	3303      	adds	r3, #3
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	4603      	mov	r3, r0
 80017d4:	482e      	ldr	r0, [pc, #184]	@ (8001890 <meta_event_handler+0x428>)
 80017d6:	f000 fc5d 	bl	8002094 <myprintf>

        break;
 80017da:	e02d      	b.n	8001838 <meta_event_handler+0x3d0>
    case 0x59:
        myprintf("Handle Key Signature\n");
 80017dc:	482d      	ldr	r0, [pc, #180]	@ (8001894 <meta_event_handler+0x42c>)
 80017de:	f000 fc59 	bl	8002094 <myprintf>
        uint8_t tone;
        uint8_t key_sig;

        f_lseek(fp, f_tell(fp) + 1); // shifts past length byte 0x02
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	3301      	adds	r3, #1
 80017e8:	4619      	mov	r1, r3
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f005 fa89 	bl	8006d02 <f_lseek>

        f_read(fp, &key_sig, 1, NULL);; // number of sharps or flats
 80017f0:	f107 0112 	add.w	r1, r7, #18
 80017f4:	2300      	movs	r3, #0
 80017f6:	2201      	movs	r2, #1
 80017f8:	68f8      	ldr	r0, [r7, #12]
 80017fa:	f005 f943 	bl	8006a84 <f_read>
        f_read(fp, &tone, 1, NULL);;    // major(1) / minor(0)
 80017fe:	f107 0113 	add.w	r1, r7, #19
 8001802:	2300      	movs	r3, #0
 8001804:	2201      	movs	r2, #1
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	f005 f93c 	bl	8006a84 <f_read>

        find_key(key_sig, tone, ctrl);
 800180c:	7cbb      	ldrb	r3, [r7, #18]
 800180e:	b25b      	sxtb	r3, r3
 8001810:	7cf9      	ldrb	r1, [r7, #19]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	4618      	mov	r0, r3
 8001816:	f000 f8db 	bl	80019d0 <find_key>

        break;
 800181a:	e00d      	b.n	8001838 <meta_event_handler+0x3d0>
        //     return -1;
        // }

        // fread(buf, 1, event_len, fp);

        skip_meta_event(fp);
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f000 f83d 	bl	800189c <skip_meta_event>
        break;
 8001822:	e009      	b.n	8001838 <meta_event_handler+0x3d0>
    default:
        myprintf("Unknown event type: 0x%02X\n", meta_type);
 8001824:	7efb      	ldrb	r3, [r7, #27]
 8001826:	4619      	mov	r1, r3
 8001828:	481b      	ldr	r0, [pc, #108]	@ (8001898 <meta_event_handler+0x430>)
 800182a:	f000 fc33 	bl	8002094 <myprintf>
        skip_meta_event(fp);
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f000 f834 	bl	800189c <skip_meta_event>
        return -1;
 8001834:	23ff      	movs	r3, #255	@ 0xff
 8001836:	e000      	b.n	800183a <meta_event_handler+0x3d2>
    }

    return 0;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3728      	adds	r7, #40	@ 0x28
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	08008bc4 	.word	0x08008bc4
 8001848:	08008be4 	.word	0x08008be4
 800184c:	08008bf8 	.word	0x08008bf8
 8001850:	08008c14 	.word	0x08008c14
 8001854:	08008c20 	.word	0x08008c20
 8001858:	08008c40 	.word	0x08008c40
 800185c:	08008c44 	.word	0x08008c44
 8001860:	08008c48 	.word	0x08008c48
 8001864:	08008c60 	.word	0x08008c60
 8001868:	08008c74 	.word	0x08008c74
 800186c:	08008c88 	.word	0x08008c88
 8001870:	08008c9c 	.word	0x08008c9c
 8001874:	08008cc4 	.word	0x08008cc4
 8001878:	08008cdc 	.word	0x08008cdc
 800187c:	08008ce8 	.word	0x08008ce8
 8001880:	08008d08 	.word	0x08008d08
 8001884:	03938700 	.word	0x03938700
 8001888:	08008d2c 	.word	0x08008d2c
 800188c:	08008d40 	.word	0x08008d40
 8001890:	08008d58 	.word	0x08008d58
 8001894:	08008da8 	.word	0x08008da8
 8001898:	08008dc0 	.word	0x08008dc0

0800189c <skip_meta_event>:
 *  @brief skips meta events
 * @param fp FIL pointe to midi FIL
 * @return 0 on sucess -1 on failure
 * */
uint8_t skip_meta_event(FIL *fp)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]

    uint32_t event_len;
    uint8_t err;

    event_len = decode_vlq(fp);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f000 fba5 	bl	8001ff4 <decode_vlq>
 80018aa:	60f8      	str	r0, [r7, #12]

    err = f_lseek(fp, f_tell(fp) + event_len);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	699a      	ldr	r2, [r3, #24]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	4413      	add	r3, r2
 80018b4:	4619      	mov	r1, r3
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f005 fa23 	bl	8006d02 <f_lseek>
 80018bc:	4603      	mov	r3, r0
 80018be:	72fb      	strb	r3, [r7, #11]
    {
        myprintf("f_lseek in skip event failed");
        return -1;
    }

    return 0;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <skip_midi_event>:
 * @param fp FIL pointe to midi FIL
 * @param type 8-bit handle of midi type
 * @return 0 on sucess -1 on failure
 * */
uint8_t skip_midi_event(FIL *fp, uint8_t type)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	70fb      	strb	r3, [r7, #3]

    switch (type)
 80018d8:	78fb      	ldrb	r3, [r7, #3]
 80018da:	2be0      	cmp	r3, #224	@ 0xe0
 80018dc:	d058      	beq.n	8001990 <skip_midi_event+0xc4>
 80018de:	2be0      	cmp	r3, #224	@ 0xe0
 80018e0:	dc61      	bgt.n	80019a6 <skip_midi_event+0xda>
 80018e2:	2bd0      	cmp	r3, #208	@ 0xd0
 80018e4:	d049      	beq.n	800197a <skip_midi_event+0xae>
 80018e6:	2bd0      	cmp	r3, #208	@ 0xd0
 80018e8:	dc5d      	bgt.n	80019a6 <skip_midi_event+0xda>
 80018ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80018ec:	d03a      	beq.n	8001964 <skip_midi_event+0x98>
 80018ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80018f0:	dc59      	bgt.n	80019a6 <skip_midi_event+0xda>
 80018f2:	2bb0      	cmp	r3, #176	@ 0xb0
 80018f4:	d02b      	beq.n	800194e <skip_midi_event+0x82>
 80018f6:	2bb0      	cmp	r3, #176	@ 0xb0
 80018f8:	dc55      	bgt.n	80019a6 <skip_midi_event+0xda>
 80018fa:	2ba0      	cmp	r3, #160	@ 0xa0
 80018fc:	d01c      	beq.n	8001938 <skip_midi_event+0x6c>
 80018fe:	2ba0      	cmp	r3, #160	@ 0xa0
 8001900:	dc51      	bgt.n	80019a6 <skip_midi_event+0xda>
 8001902:	2b80      	cmp	r3, #128	@ 0x80
 8001904:	d002      	beq.n	800190c <skip_midi_event+0x40>
 8001906:	2b90      	cmp	r3, #144	@ 0x90
 8001908:	d00b      	beq.n	8001922 <skip_midi_event+0x56>
 800190a:	e04c      	b.n	80019a6 <skip_midi_event+0xda>
    {

    case 0x80: // Note Off
        myprintf("Skip Note Off\n");
 800190c:	4829      	ldr	r0, [pc, #164]	@ (80019b4 <skip_midi_event+0xe8>)
 800190e:	f000 fbc1 	bl	8002094 <myprintf>
        f_lseek(fp, f_tell(fp) + 2);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	3302      	adds	r3, #2
 8001918:	4619      	mov	r1, r3
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f005 f9f1 	bl	8006d02 <f_lseek>
        break;
 8001920:	e043      	b.n	80019aa <skip_midi_event+0xde>

    case 0x90: // Note On
        myprintf("Skip Note On\n");
 8001922:	4825      	ldr	r0, [pc, #148]	@ (80019b8 <skip_midi_event+0xec>)
 8001924:	f000 fbb6 	bl	8002094 <myprintf>
        f_lseek(fp, f_tell(fp) + 2);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	3302      	adds	r3, #2
 800192e:	4619      	mov	r1, r3
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f005 f9e6 	bl	8006d02 <f_lseek>
        break;
 8001936:	e038      	b.n	80019aa <skip_midi_event+0xde>

    case 0xA0: // Polyphonic Key Pressure (Aftertouch)
        myprintf("Skip Polyphonic Key Pressure\n");
 8001938:	4820      	ldr	r0, [pc, #128]	@ (80019bc <skip_midi_event+0xf0>)
 800193a:	f000 fbab 	bl	8002094 <myprintf>
        f_lseek(fp, f_tell(fp) + 2);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	3302      	adds	r3, #2
 8001944:	4619      	mov	r1, r3
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f005 f9db 	bl	8006d02 <f_lseek>
        break;
 800194c:	e02d      	b.n	80019aa <skip_midi_event+0xde>

    case 0xB0: // Control Change
        myprintf("Skip Control Change\n");
 800194e:	481c      	ldr	r0, [pc, #112]	@ (80019c0 <skip_midi_event+0xf4>)
 8001950:	f000 fba0 	bl	8002094 <myprintf>
        f_lseek(fp, f_tell(fp) + 2);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	3302      	adds	r3, #2
 800195a:	4619      	mov	r1, r3
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f005 f9d0 	bl	8006d02 <f_lseek>
        break;
 8001962:	e022      	b.n	80019aa <skip_midi_event+0xde>

    case 0xC0: // Program Change // 1 byte
        myprintf("Skip Program Change\n");
 8001964:	4817      	ldr	r0, [pc, #92]	@ (80019c4 <skip_midi_event+0xf8>)
 8001966:	f000 fb95 	bl	8002094 <myprintf>
        f_lseek(fp, f_tell(fp) + 1);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	3301      	adds	r3, #1
 8001970:	4619      	mov	r1, r3
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f005 f9c5 	bl	8006d02 <f_lseek>
        break;
 8001978:	e017      	b.n	80019aa <skip_midi_event+0xde>

    case 0xD0: // Channel Pressure (Aftertouch) // 1 byte
        myprintf("Skip Channel Pressure\n");
 800197a:	4813      	ldr	r0, [pc, #76]	@ (80019c8 <skip_midi_event+0xfc>)
 800197c:	f000 fb8a 	bl	8002094 <myprintf>
        f_lseek(fp, f_tell(fp) + 1);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	3301      	adds	r3, #1
 8001986:	4619      	mov	r1, r3
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f005 f9ba 	bl	8006d02 <f_lseek>
        break;
 800198e:	e00c      	b.n	80019aa <skip_midi_event+0xde>

    case 0xE0: // Pitch Bend Change
        myprintf("Skip Pitch Bend Change\n");
 8001990:	480e      	ldr	r0, [pc, #56]	@ (80019cc <skip_midi_event+0x100>)
 8001992:	f000 fb7f 	bl	8002094 <myprintf>
        f_lseek(fp, f_tell(fp) + 2);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	3302      	adds	r3, #2
 800199c:	4619      	mov	r1, r3
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f005 f9af 	bl	8006d02 <f_lseek>
        break;
 80019a4:	e001      	b.n	80019aa <skip_midi_event+0xde>

    default:
        abort();
 80019a6:	f005 fc10 	bl	80071ca <abort>
        myprintf("Skip Unknown MIDI Type: 0x%x\n", type);
        f_lseek(fp, f_tell(fp) + 2);
        break;
    }

    return 0;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	08008ddc 	.word	0x08008ddc
 80019b8:	08008dec 	.word	0x08008dec
 80019bc:	08008dfc 	.word	0x08008dfc
 80019c0:	08008e1c 	.word	0x08008e1c
 80019c4:	08008e34 	.word	0x08008e34
 80019c8:	08008e4c 	.word	0x08008e4c
 80019cc:	08008e64 	.word	0x08008e64

080019d0 <find_key>:
 * @param tone meow
 * @param controller pointer to control structure
 * @return 0 on sucess -1 on failure
 * */
uint8_t find_key(int8_t key, uint8_t tone, MIDI_controller *controller)
{
 80019d0:	b590      	push	{r4, r7, lr}
 80019d2:	b08b      	sub	sp, #44	@ 0x2c
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	603a      	str	r2, [r7, #0]
 80019da:	71fb      	strb	r3, [r7, #7]
 80019dc:	460b      	mov	r3, r1
 80019de:	71bb      	strb	r3, [r7, #6]

    uint8_t major_keys[15] = {
 80019e0:	4b21      	ldr	r3, [pc, #132]	@ (8001a68 <find_key+0x98>)
 80019e2:	f107 0418 	add.w	r4, r7, #24
 80019e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019e8:	c407      	stmia	r4!, {r0, r1, r2}
 80019ea:	8023      	strh	r3, [r4, #0]
 80019ec:	3402      	adds	r4, #2
 80019ee:	0c1b      	lsrs	r3, r3, #16
 80019f0:	7023      	strb	r3, [r4, #0]
        B_MAJOR,       // 0x0C
        F_SHARP_MAJOR, // 0x0D
        C_SHARP_MAJOR  // 0x0E
    };

    uint8_t minor_keys[15] = {
 80019f2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a6c <find_key+0x9c>)
 80019f4:	f107 0408 	add.w	r4, r7, #8
 80019f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019fa:	c407      	stmia	r4!, {r0, r1, r2}
 80019fc:	8023      	strh	r3, [r4, #0]
 80019fe:	3402      	adds	r4, #2
 8001a00:	0c1b      	lsrs	r3, r3, #16
 8001a02:	7023      	strb	r3, [r4, #0]
        D_SHARP_MINOR, // D♯ Minor: 6 sharps
        A_SHARP_MINOR  // A♯ Minor: 7 sharps
    };

    // minor
    if (tone == 0x00)
 8001a04:	79bb      	ldrb	r3, [r7, #6]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10f      	bne.n	8001a2a <find_key+0x5a>
    {
        controller->key_sig = minor_keys[(sizeof(minor_keys) / 2) + key];
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	3307      	adds	r3, #7
 8001a10:	3328      	adds	r3, #40	@ 0x28
 8001a12:	443b      	add	r3, r7
 8001a14:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	709a      	strb	r2, [r3, #2]
        myprintf("Key Signiture: 0x%x\n", controller->key_sig);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	789b      	ldrb	r3, [r3, #2]
 8001a20:	4619      	mov	r1, r3
 8001a22:	4813      	ldr	r0, [pc, #76]	@ (8001a70 <find_key+0xa0>)
 8001a24:	f000 fb36 	bl	8002094 <myprintf>
 8001a28:	e019      	b.n	8001a5e <find_key+0x8e>
    }
    // major
    else if (tone == 0x01)
 8001a2a:	79bb      	ldrb	r3, [r7, #6]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d10f      	bne.n	8001a50 <find_key+0x80>
    {
        controller->key_sig = major_keys[(sizeof(minor_keys) / 2) + key];
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	3307      	adds	r3, #7
 8001a36:	3328      	adds	r3, #40	@ 0x28
 8001a38:	443b      	add	r3, r7
 8001a3a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	709a      	strb	r2, [r3, #2]
        myprintf("Key Signiture: 0x%x\n", controller->key_sig);
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	789b      	ldrb	r3, [r3, #2]
 8001a46:	4619      	mov	r1, r3
 8001a48:	4809      	ldr	r0, [pc, #36]	@ (8001a70 <find_key+0xa0>)
 8001a4a:	f000 fb23 	bl	8002094 <myprintf>
 8001a4e:	e006      	b.n	8001a5e <find_key+0x8e>
    }

    else
    {
        myprintf("invalid tone: 0x%x\n", tone);
 8001a50:	79bb      	ldrb	r3, [r7, #6]
 8001a52:	4619      	mov	r1, r3
 8001a54:	4807      	ldr	r0, [pc, #28]	@ (8001a74 <find_key+0xa4>)
 8001a56:	f000 fb1d 	bl	8002094 <myprintf>
        return -1;
 8001a5a:	23ff      	movs	r3, #255	@ 0xff
 8001a5c:	e000      	b.n	8001a60 <find_key+0x90>
    }

    return 0;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	372c      	adds	r7, #44	@ 0x2c
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd90      	pop	{r4, r7, pc}
 8001a68:	08008ea8 	.word	0x08008ea8
 8001a6c:	08008eb8 	.word	0x08008eb8
 8001a70:	08008e7c 	.word	0x08008e7c
 8001a74:	08008e94 	.word	0x08008e94

08001a78 <play_one_track>:
 * @param fp FIL pointer to music
 * @param controller pointer to control structure
 * @return returns 0 on sucess other on failure
 * */
uint8_t play_one_track(FIL *fp, MIDI_controller *ctrl)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b088      	sub	sp, #32
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
    uint8_t bytes_read;

    uint8_t event_type;
    uint32_t delta_time;

    buf = (uint8_t *)malloc(sizeof(uint8_t) * 8);
 8001a82:	2008      	movs	r0, #8
 8001a84:	f005 fba8 	bl	80071d8 <malloc>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	61bb      	str	r3, [r7, #24]
    if (!buf)
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d104      	bne.n	8001a9c <play_one_track+0x24>
    {
        myprintf("Buffer in parse_midi is null\n");
 8001a92:	4845      	ldr	r0, [pc, #276]	@ (8001ba8 <play_one_track+0x130>)
 8001a94:	f000 fafe 	bl	8002094 <myprintf>
        return -1;
 8001a98:	23ff      	movs	r3, #255	@ 0xff
 8001a9a:	e081      	b.n	8001ba0 <play_one_track+0x128>
    }

    f_read(fp,buf,8,NULL);
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	2208      	movs	r2, #8
 8001aa0:	69b9      	ldr	r1, [r7, #24]
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f004 ffee 	bl	8006a84 <f_read>

    trk_hdr = (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	061a      	lsls	r2, r3, #24
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	041b      	lsls	r3, r3, #16
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	3302      	adds	r3, #2
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	021b      	lsls	r3, r3, #8
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	3203      	adds	r2, #3
 8001ac6:	7812      	ldrb	r2, [r2, #0]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	617b      	str	r3, [r7, #20]
    if (trk_hdr != 0x4D54726B)
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	4a37      	ldr	r2, [pc, #220]	@ (8001bac <play_one_track+0x134>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d005      	beq.n	8001ae0 <play_one_track+0x68>
    { // verifies the track start is valid
        myprintf("Invalid track header recieved: %x\n", trk_hdr);
 8001ad4:	6979      	ldr	r1, [r7, #20]
 8001ad6:	4836      	ldr	r0, [pc, #216]	@ (8001bb0 <play_one_track+0x138>)
 8001ad8:	f000 fadc 	bl	8002094 <myprintf>
        return -1;
 8001adc:	23ff      	movs	r3, #255	@ 0xff
 8001ade:	e05f      	b.n	8001ba0 <play_one_track+0x128>
    }

    trk_len = (buf[4] << 24) | (buf[5] << 16) | (buf[6] << 8) | buf[7]; //  track length
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	061a      	lsls	r2, r3, #24
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	3305      	adds	r3, #5
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	041b      	lsls	r3, r3, #16
 8001af0:	431a      	orrs	r2, r3
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	3306      	adds	r3, #6
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	021b      	lsls	r3, r3, #8
 8001afa:	4313      	orrs	r3, r2
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	3207      	adds	r2, #7
 8001b00:	7812      	ldrb	r2, [r2, #0]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	613b      	str	r3, [r7, #16]

    free(buf);
 8001b06:	69b8      	ldr	r0, [r7, #24]
 8001b08:	f005 fb6e 	bl	80071e8 <free>

    buf = (uint8_t *)malloc(sizeof(uint8_t) * trk_len);
 8001b0c:	6938      	ldr	r0, [r7, #16]
 8001b0e:	f005 fb63 	bl	80071d8 <malloc>
 8001b12:	4603      	mov	r3, r0
 8001b14:	61bb      	str	r3, [r7, #24]
    if (!buf)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d104      	bne.n	8001b26 <play_one_track+0xae>
    {
        myprintf("Buffer in parse_midi is null");
 8001b1c:	4825      	ldr	r0, [pc, #148]	@ (8001bb4 <play_one_track+0x13c>)
 8001b1e:	f000 fab9 	bl	8002094 <myprintf>
        return -1;
 8001b22:	23ff      	movs	r3, #255	@ 0xff
 8001b24:	e03c      	b.n	8001ba0 <play_one_track+0x128>
    }

    // for debug
    myprintf("Track header: %x\n", trk_hdr);
 8001b26:	6979      	ldr	r1, [r7, #20]
 8001b28:	4823      	ldr	r0, [pc, #140]	@ (8001bb8 <play_one_track+0x140>)
 8001b2a:	f000 fab3 	bl	8002094 <myprintf>
    myprintf("Track length: %x\n", trk_len);
 8001b2e:	6939      	ldr	r1, [r7, #16]
 8001b30:	4822      	ldr	r0, [pc, #136]	@ (8001bbc <play_one_track+0x144>)
 8001b32:	f000 faaf 	bl	8002094 <myprintf>

    do
    {

        delta_time = decode_vlq(fp);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 fa5c 	bl	8001ff4 <decode_vlq>
 8001b3c:	60f8      	str	r0, [r7, #12]

        f_read(fp, &event_type, 1, &bytes_read);
 8001b3e:	f107 030b 	add.w	r3, r7, #11
 8001b42:	f107 010a 	add.w	r1, r7, #10
 8001b46:	2201      	movs	r2, #1
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f004 ff9b 	bl	8006a84 <f_read>

        myprintf("event type %d\n", event_type);
 8001b4e:	7abb      	ldrb	r3, [r7, #10]
 8001b50:	4619      	mov	r1, r3
 8001b52:	481b      	ldr	r0, [pc, #108]	@ (8001bc0 <play_one_track+0x148>)
 8001b54:	f000 fa9e 	bl	8002094 <myprintf>

        if (event_type == 0xFF)
 8001b58:	7abb      	ldrb	r3, [r7, #10]
 8001b5a:	2bff      	cmp	r3, #255	@ 0xff
 8001b5c:	d107      	bne.n	8001b6e <play_one_track+0xf6>
        {
            end = meta_event_handler(fp, delta_time, ctrl);
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	68f9      	ldr	r1, [r7, #12]
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff fc80 	bl	8001468 <meta_event_handler>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	77fb      	strb	r3, [r7, #31]
 8001b6c:	e011      	b.n	8001b92 <play_one_track+0x11a>
        }
        else if ((event_type >= 0xF0) && (event_type != 0xFF))
 8001b6e:	7abb      	ldrb	r3, [r7, #10]
 8001b70:	2bef      	cmp	r3, #239	@ 0xef
 8001b72:	d908      	bls.n	8001b86 <play_one_track+0x10e>
 8001b74:	7abb      	ldrb	r3, [r7, #10]
 8001b76:	2bff      	cmp	r3, #255	@ 0xff
 8001b78:	d005      	beq.n	8001b86 <play_one_track+0x10e>
        {
            myprintf("sysex event called: 0x%x\n", event_type);
 8001b7a:	7abb      	ldrb	r3, [r7, #10]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4811      	ldr	r0, [pc, #68]	@ (8001bc4 <play_one_track+0x14c>)
 8001b80:	f000 fa88 	bl	8002094 <myprintf>
 8001b84:	e005      	b.n	8001b92 <play_one_track+0x11a>
            // skip_meta_event(fp);
            // sysex_event_handler(fp, delta_time);
        }
        else
        {
            midi_event_handler(fp, delta_time, event_type, ctrl);
 8001b86:	7aba      	ldrb	r2, [r7, #10]
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	68f9      	ldr	r1, [r7, #12]
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff fb47 	bl	8001220 <midi_event_handler>
        }

    } while (end != 1);
 8001b92:	7ffb      	ldrb	r3, [r7, #31]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d1ce      	bne.n	8001b36 <play_one_track+0xbe>

    free(buf);
 8001b98:	69b8      	ldr	r0, [r7, #24]
 8001b9a:	f005 fb25 	bl	80071e8 <free>

    return 0;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3720      	adds	r7, #32
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	08008f34 	.word	0x08008f34
 8001bac:	4d54726b 	.word	0x4d54726b
 8001bb0:	08008ee8 	.word	0x08008ee8
 8001bb4:	08008f54 	.word	0x08008f54
 8001bb8:	08008f74 	.word	0x08008f74
 8001bbc:	08008f88 	.word	0x08008f88
 8001bc0:	08008f9c 	.word	0x08008f9c
 8001bc4:	08008fac 	.word	0x08008fac

08001bc8 <parse_midi_header>:
 * @param fp FIL pointer to music
 * @param hdr pointer to header structure
 * @return returns 0 on sucess other on failure
 * */
MIDI_header_chunk parse_midi_header(FIL *fp, MIDI_header_chunk hdr)
{
 8001bc8:	b082      	sub	sp, #8
 8001bca:	b590      	push	{r4, r7, lr}
 8001bcc:	b085      	sub	sp, #20
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	6039      	str	r1, [r7, #0]
 8001bd4:	f107 0120 	add.w	r1, r7, #32
 8001bd8:	e881 000c 	stmia.w	r1, {r2, r3}

    uint8_t *buf;

    buf = (uint8_t *)malloc(14);
 8001bdc:	200e      	movs	r0, #14
 8001bde:	f005 fafb 	bl	80071d8 <malloc>
 8001be2:	4603      	mov	r3, r0
 8001be4:	60fb      	str	r3, [r7, #12]
    if (!buf)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d102      	bne.n	8001bf2 <parse_midi_header+0x2a>
    {
        myprintf("Buffer in parse_midi is null");
 8001bec:	484e      	ldr	r0, [pc, #312]	@ (8001d28 <parse_midi_header+0x160>)
 8001bee:	f000 fa51 	bl	8002094 <myprintf>
    }

    f_read(fp, buf, 14, NULL);
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	220e      	movs	r2, #14
 8001bf6:	68f9      	ldr	r1, [r7, #12]
 8001bf8:	6838      	ldr	r0, [r7, #0]
 8001bfa:	f004 ff43 	bl	8006a84 <f_read>

    // all big endian
    hdr.MThd = (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	061a      	lsls	r2, r3, #24
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	3301      	adds	r3, #1
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	041b      	lsls	r3, r3, #16
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	3302      	adds	r3, #2
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	021b      	lsls	r3, r3, #8
 8001c16:	4313      	orrs	r3, r2
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	3203      	adds	r2, #3
 8001c1c:	7812      	ldrb	r2, [r2, #0]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	623b      	str	r3, [r7, #32]
    if (hdr.MThd != 0x4D546864)
 8001c22:	6a3b      	ldr	r3, [r7, #32]
 8001c24:	4a41      	ldr	r2, [pc, #260]	@ (8001d2c <parse_midi_header+0x164>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d004      	beq.n	8001c34 <parse_midi_header+0x6c>
    {                                                           // string of MThd
        myprintf("Unexpected Header - Recieved: %c\n", hdr.MThd); // return characters for easy read
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4840      	ldr	r0, [pc, #256]	@ (8001d30 <parse_midi_header+0x168>)
 8001c30:	f000 fa30 	bl	8002094 <myprintf>
    }

    hdr.hdr_len = (buf[4] << 24) | (buf[5] << 16) | (buf[6] << 8) | buf[7];
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	3304      	adds	r3, #4
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	061a      	lsls	r2, r3, #24
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	3305      	adds	r3, #5
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	041b      	lsls	r3, r3, #16
 8001c44:	431a      	orrs	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	3306      	adds	r3, #6
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	021b      	lsls	r3, r3, #8
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	3207      	adds	r2, #7
 8001c54:	7812      	ldrb	r2, [r2, #0]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	627b      	str	r3, [r7, #36]	@ 0x24
    if (hdr.hdr_len != 0x0006)
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5c:	2b06      	cmp	r3, #6
 8001c5e:	d004      	beq.n	8001c6a <parse_midi_header+0xa2>
    { // always 6 bytes
        myprintf("Unexpected Header Length - Recieved: %u\n", hdr.hdr_len);
 8001c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c62:	4619      	mov	r1, r3
 8001c64:	4833      	ldr	r0, [pc, #204]	@ (8001d34 <parse_midi_header+0x16c>)
 8001c66:	f000 fa15 	bl	8002094 <myprintf>
    }

    hdr.format = (buf[8] << 8) | buf[9];
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	3308      	adds	r3, #8
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	021b      	lsls	r3, r3, #8
 8001c72:	b21a      	sxth	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	3309      	adds	r3, #9
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	b21b      	sxth	r3, r3
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	b21b      	sxth	r3, r3
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	853b      	strh	r3, [r7, #40]	@ 0x28
    if (hdr.format != 0x00 && hdr.format != 0x01 && hdr.format != 0x02)
 8001c84:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00a      	beq.n	8001ca0 <parse_midi_header+0xd8>
 8001c8a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d007      	beq.n	8001ca0 <parse_midi_header+0xd8>
 8001c90:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d004      	beq.n	8001ca0 <parse_midi_header+0xd8>
    {
        myprintf("Unexpected Header Format - Recieved: %u\n", hdr.format);
 8001c96:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4827      	ldr	r0, [pc, #156]	@ (8001d38 <parse_midi_header+0x170>)
 8001c9c:	f000 f9fa 	bl	8002094 <myprintf>
    }

    hdr.num_tracks = (buf[10] << 8) | buf[11];
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	330a      	adds	r3, #10
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	b21a      	sxth	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	330b      	adds	r3, #11
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	b21b      	sxth	r3, r3
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	b21b      	sxth	r3, r3
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	857b      	strh	r3, [r7, #42]	@ 0x2a
    hdr.division = (buf[12] << 8) | buf[13];
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	330c      	adds	r3, #12
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	021b      	lsls	r3, r3, #8
 8001cc2:	b21a      	sxth	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	330d      	adds	r3, #13
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	b21b      	sxth	r3, r3
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	b21b      	sxth	r3, r3
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    // to check all header info
    myprintf("Header string is: %x\n", hdr.MThd);
 8001cd4:	6a3b      	ldr	r3, [r7, #32]
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4818      	ldr	r0, [pc, #96]	@ (8001d3c <parse_midi_header+0x174>)
 8001cda:	f000 f9db 	bl	8002094 <myprintf>
    myprintf("Length is: %x\n", hdr.hdr_len);
 8001cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4817      	ldr	r0, [pc, #92]	@ (8001d40 <parse_midi_header+0x178>)
 8001ce4:	f000 f9d6 	bl	8002094 <myprintf>
    myprintf("Format is:%x \n", hdr.format);
 8001ce8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001cea:	4619      	mov	r1, r3
 8001cec:	4815      	ldr	r0, [pc, #84]	@ (8001d44 <parse_midi_header+0x17c>)
 8001cee:	f000 f9d1 	bl	8002094 <myprintf>
    myprintf("Number of tracks is: %x\n", hdr.num_tracks);
 8001cf2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4814      	ldr	r0, [pc, #80]	@ (8001d48 <parse_midi_header+0x180>)
 8001cf8:	f000 f9cc 	bl	8002094 <myprintf>
    myprintf("Division is: %x\n", hdr.division);
 8001cfc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4812      	ldr	r0, [pc, #72]	@ (8001d4c <parse_midi_header+0x184>)
 8001d02:	f000 f9c7 	bl	8002094 <myprintf>

    free(buf);
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f005 fa6e 	bl	80071e8 <free>

    return hdr;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	461c      	mov	r4, r3
 8001d10:	f107 0320 	add.w	r3, r7, #32
 8001d14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001d24:	b002      	add	sp, #8
 8001d26:	4770      	bx	lr
 8001d28:	08008f54 	.word	0x08008f54
 8001d2c:	4d546864 	.word	0x4d546864
 8001d30:	08008fc8 	.word	0x08008fc8
 8001d34:	08008fec 	.word	0x08008fec
 8001d38:	08009018 	.word	0x08009018
 8001d3c:	08009044 	.word	0x08009044
 8001d40:	0800905c 	.word	0x0800905c
 8001d44:	0800906c 	.word	0x0800906c
 8001d48:	0800907c 	.word	0x0800907c
 8001d4c:	08009098 	.word	0x08009098

08001d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	4b10      	ldr	r3, [pc, #64]	@ (8001d9c <HAL_MspInit+0x4c>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5e:	4a0f      	ldr	r2, [pc, #60]	@ (8001d9c <HAL_MspInit+0x4c>)
 8001d60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d66:	4b0d      	ldr	r3, [pc, #52]	@ (8001d9c <HAL_MspInit+0x4c>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	603b      	str	r3, [r7, #0]
 8001d76:	4b09      	ldr	r3, [pc, #36]	@ (8001d9c <HAL_MspInit+0x4c>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7a:	4a08      	ldr	r2, [pc, #32]	@ (8001d9c <HAL_MspInit+0x4c>)
 8001d7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d82:	4b06      	ldr	r3, [pc, #24]	@ (8001d9c <HAL_MspInit+0x4c>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d8a:	603b      	str	r3, [r7, #0]
 8001d8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800

08001da0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08a      	sub	sp, #40	@ 0x28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	f107 0314 	add.w	r3, r7, #20
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a19      	ldr	r2, [pc, #100]	@ (8001e24 <HAL_SPI_MspInit+0x84>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d12b      	bne.n	8001e1a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	4b18      	ldr	r3, [pc, #96]	@ (8001e28 <HAL_SPI_MspInit+0x88>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dca:	4a17      	ldr	r2, [pc, #92]	@ (8001e28 <HAL_SPI_MspInit+0x88>)
 8001dcc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001dd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dd2:	4b15      	ldr	r3, [pc, #84]	@ (8001e28 <HAL_SPI_MspInit+0x88>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dda:	613b      	str	r3, [r7, #16]
 8001ddc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	4b11      	ldr	r3, [pc, #68]	@ (8001e28 <HAL_SPI_MspInit+0x88>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de6:	4a10      	ldr	r2, [pc, #64]	@ (8001e28 <HAL_SPI_MspInit+0x88>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dee:	4b0e      	ldr	r3, [pc, #56]	@ (8001e28 <HAL_SPI_MspInit+0x88>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001dfa:	23e0      	movs	r3, #224	@ 0xe0
 8001dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e06:	2303      	movs	r3, #3
 8001e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e0a:	2305      	movs	r3, #5
 8001e0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0e:	f107 0314 	add.w	r3, r7, #20
 8001e12:	4619      	mov	r1, r3
 8001e14:	4805      	ldr	r0, [pc, #20]	@ (8001e2c <HAL_SPI_MspInit+0x8c>)
 8001e16:	f000 fb09 	bl	800242c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001e1a:	bf00      	nop
 8001e1c:	3728      	adds	r7, #40	@ 0x28
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40013000 	.word	0x40013000
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40020000 	.word	0x40020000

08001e30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08a      	sub	sp, #40	@ 0x28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a19      	ldr	r2, [pc, #100]	@ (8001eb4 <HAL_UART_MspInit+0x84>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d12b      	bne.n	8001eaa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	4b18      	ldr	r3, [pc, #96]	@ (8001eb8 <HAL_UART_MspInit+0x88>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5a:	4a17      	ldr	r2, [pc, #92]	@ (8001eb8 <HAL_UART_MspInit+0x88>)
 8001e5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e62:	4b15      	ldr	r3, [pc, #84]	@ (8001eb8 <HAL_UART_MspInit+0x88>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	4b11      	ldr	r3, [pc, #68]	@ (8001eb8 <HAL_UART_MspInit+0x88>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	4a10      	ldr	r2, [pc, #64]	@ (8001eb8 <HAL_UART_MspInit+0x88>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb8 <HAL_UART_MspInit+0x88>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e8a:	230c      	movs	r3, #12
 8001e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e96:	2303      	movs	r3, #3
 8001e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e9a:	2307      	movs	r3, #7
 8001e9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9e:	f107 0314 	add.w	r3, r7, #20
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4805      	ldr	r0, [pc, #20]	@ (8001ebc <HAL_UART_MspInit+0x8c>)
 8001ea6:	f000 fac1 	bl	800242c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001eaa:	bf00      	nop
 8001eac:	3728      	adds	r7, #40	@ 0x28
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40004400 	.word	0x40004400
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40020000 	.word	0x40020000

08001ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ec4:	bf00      	nop
 8001ec6:	e7fd      	b.n	8001ec4 <NMI_Handler+0x4>

08001ec8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ecc:	bf00      	nop
 8001ece:	e7fd      	b.n	8001ecc <HardFault_Handler+0x4>

08001ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ed4:	bf00      	nop
 8001ed6:	e7fd      	b.n	8001ed4 <MemManage_Handler+0x4>

08001ed8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001edc:	bf00      	nop
 8001ede:	e7fd      	b.n	8001edc <BusFault_Handler+0x4>

08001ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ee4:	bf00      	nop
 8001ee6:	e7fd      	b.n	8001ee4 <UsageFault_Handler+0x4>

08001ee8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f16:	f000 f95f 	bl	80021d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0
  return 1;
 8001f22:	2301      	movs	r3, #1
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <_kill>:

int _kill(int pid, int sig)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
 8001f36:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f38:	f005 faa2 	bl	8007480 <__errno>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2216      	movs	r2, #22
 8001f40:	601a      	str	r2, [r3, #0]
  return -1;
 8001f42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <_exit>:

void _exit (int status)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f56:	f04f 31ff 	mov.w	r1, #4294967295
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff ffe7 	bl	8001f2e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f60:	bf00      	nop
 8001f62:	e7fd      	b.n	8001f60 <_exit+0x12>

08001f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f6c:	4a14      	ldr	r2, [pc, #80]	@ (8001fc0 <_sbrk+0x5c>)
 8001f6e:	4b15      	ldr	r3, [pc, #84]	@ (8001fc4 <_sbrk+0x60>)
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f78:	4b13      	ldr	r3, [pc, #76]	@ (8001fc8 <_sbrk+0x64>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d102      	bne.n	8001f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f80:	4b11      	ldr	r3, [pc, #68]	@ (8001fc8 <_sbrk+0x64>)
 8001f82:	4a12      	ldr	r2, [pc, #72]	@ (8001fcc <_sbrk+0x68>)
 8001f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f86:	4b10      	ldr	r3, [pc, #64]	@ (8001fc8 <_sbrk+0x64>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d207      	bcs.n	8001fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f94:	f005 fa74 	bl	8007480 <__errno>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	220c      	movs	r2, #12
 8001f9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa2:	e009      	b.n	8001fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa4:	4b08      	ldr	r3, [pc, #32]	@ (8001fc8 <_sbrk+0x64>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001faa:	4b07      	ldr	r3, [pc, #28]	@ (8001fc8 <_sbrk+0x64>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	4a05      	ldr	r2, [pc, #20]	@ (8001fc8 <_sbrk+0x64>)
 8001fb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20020000 	.word	0x20020000
 8001fc4:	00000400 	.word	0x00000400
 8001fc8:	20000144 	.word	0x20000144
 8001fcc:	200003e0 	.word	0x200003e0

08001fd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fd4:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <SystemInit+0x20>)
 8001fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fda:	4a05      	ldr	r2, [pc, #20]	@ (8001ff0 <SystemInit+0x20>)
 8001fdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fe0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <decode_vlq>:
/**
 *  @brief Processes variable length quantity (VLQ) values from a file pointer 
 * @param fp File pointer to midi file
 * @param vlq_value decoded vlq value*/
uint32_t decode_vlq(FIL *fp)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
     * each byte containing 7 bits of data and an 8th bit(MSB) as a continuation flag. 
     * if the bit is 1 the number continues into the next byte
     * if the bit is 0 the number does not continue
     *  */
    uint8_t byte;
    uint32_t vlq_value = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60fb      	str	r3, [r7, #12]

    do
    {
        f_read(fp, &byte, 1, NULL);
 8002000:	f107 010b 	add.w	r1, r7, #11
 8002004:	2300      	movs	r3, #0
 8002006:	2201      	movs	r2, #1
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f004 fd3b 	bl	8006a84 <f_read>
        vlq_value = (vlq_value << 7) | (byte & 0x7F); // ignores msb for read byte and shifts over 7
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	01da      	lsls	r2, r3, #7
 8002012:	7afb      	ldrb	r3, [r7, #11]
 8002014:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002018:	4313      	orrs	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]
    } while (byte & 0x80);
 800201c:	7afb      	ldrb	r3, [r7, #11]
 800201e:	b25b      	sxtb	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	dbed      	blt.n	8002000 <decode_vlq+0xc>

    return vlq_value;
 8002024:	68fb      	ldr	r3, [r7, #12]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <delta_time_to_ms>:
/**
 *  @brief takes the delta time value for the given event and converts it to ms
 * @param delta_time delta time in ticks of event 
 * @param ctrl pointer to system timing info*/
uint16_t delta_time_to_ms(uint8_t delta_time, MIDI_controller *ctrl)
{
 800202e:	b480      	push	{r7}
 8002030:	b085      	sub	sp, #20
 8002032:	af00      	add	r7, sp, #0
 8002034:	4603      	mov	r3, r0
 8002036:	6039      	str	r1, [r7, #0]
 8002038:	71fb      	strb	r3, [r7, #7]
    float ms = 0;
 800203a:	f04f 0300 	mov.w	r3, #0
 800203e:	60fb      	str	r3, [r7, #12]
    // printf("delta time: %d\n", delta_time);
    // printf("tick per q note: %d\n", ctrl->tick_per_q_note);
    // printf("tempo: %d\n", ctrl->tempo);

    // needs to be a float to do the division or else returns 0
    ms = ((float)delta_time / ctrl->tick_per_q_note) * (60000 / ctrl->tempo);
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	ee07 3a90 	vmov	s15, r3
 8002046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	889b      	ldrh	r3, [r3, #4]
 800204e:	ee07 3a90 	vmov	s15, r3
 8002052:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	799b      	ldrb	r3, [r3, #6]
 800205e:	461a      	mov	r2, r3
 8002060:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8002064:	fb93 f3f2 	sdiv	r3, r3, r2
 8002068:	ee07 3a90 	vmov	s15, r3
 800206c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002074:	edc7 7a03 	vstr	s15, [r7, #12]

    return ms;
 8002078:	edd7 7a03 	vldr	s15, [r7, #12]
 800207c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002080:	ee17 3a90 	vmov	r3, s15
 8002084:	b29b      	uxth	r3, r3
}
 8002086:	4618      	mov	r0, r3
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
	...

08002094 <myprintf>:

void myprintf(const char *fmt, ...) {
 8002094:	b40f      	push	{r0, r1, r2, r3}
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 800209c:	f107 0314 	add.w	r3, r7, #20
 80020a0:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020aa:	480b      	ldr	r0, [pc, #44]	@ (80020d8 <myprintf+0x44>)
 80020ac:	f005 f97e 	bl	80073ac <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80020b0:	4809      	ldr	r0, [pc, #36]	@ (80020d8 <myprintf+0x44>)
 80020b2:	f7fe f8ad 	bl	8000210 <strlen>
 80020b6:	4603      	mov	r3, r0
 80020b8:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	b29a      	uxth	r2, r3
 80020be:	f04f 33ff 	mov.w	r3, #4294967295
 80020c2:	4905      	ldr	r1, [pc, #20]	@ (80020d8 <myprintf+0x44>)
 80020c4:	4805      	ldr	r0, [pc, #20]	@ (80020dc <myprintf+0x48>)
 80020c6:	f001 fd63 	bl	8003b90 <HAL_UART_Transmit>

}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80020d4:	b004      	add	sp, #16
 80020d6:	4770      	bx	lr
 80020d8:	20000148 	.word	0x20000148
 80020dc:	200000fc 	.word	0x200000fc

080020e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002118 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80020e4:	f7ff ff74 	bl	8001fd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020e8:	480c      	ldr	r0, [pc, #48]	@ (800211c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020ea:	490d      	ldr	r1, [pc, #52]	@ (8002120 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002124 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020f0:	e002      	b.n	80020f8 <LoopCopyDataInit>

080020f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020f6:	3304      	adds	r3, #4

080020f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020fc:	d3f9      	bcc.n	80020f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002128 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002100:	4c0a      	ldr	r4, [pc, #40]	@ (800212c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002102:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002104:	e001      	b.n	800210a <LoopFillZerobss>

08002106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002108:	3204      	adds	r2, #4

0800210a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800210a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800210c:	d3fb      	bcc.n	8002106 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800210e:	f005 f9bd 	bl	800748c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002112:	f7fe ff09 	bl	8000f28 <main>
  bx  lr    
 8002116:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002118:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800211c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002120:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002124:	08009200 	.word	0x08009200
  ldr r2, =_sbss
 8002128:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800212c:	200003dc 	.word	0x200003dc

08002130 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002130:	e7fe      	b.n	8002130 <ADC_IRQHandler>
	...

08002134 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002138:	4b0e      	ldr	r3, [pc, #56]	@ (8002174 <HAL_Init+0x40>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a0d      	ldr	r2, [pc, #52]	@ (8002174 <HAL_Init+0x40>)
 800213e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002142:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002144:	4b0b      	ldr	r3, [pc, #44]	@ (8002174 <HAL_Init+0x40>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a0a      	ldr	r2, [pc, #40]	@ (8002174 <HAL_Init+0x40>)
 800214a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800214e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002150:	4b08      	ldr	r3, [pc, #32]	@ (8002174 <HAL_Init+0x40>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a07      	ldr	r2, [pc, #28]	@ (8002174 <HAL_Init+0x40>)
 8002156:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800215a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800215c:	2003      	movs	r0, #3
 800215e:	f000 f931 	bl	80023c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002162:	200f      	movs	r0, #15
 8002164:	f000 f808 	bl	8002178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002168:	f7ff fdf2 	bl	8001d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40023c00 	.word	0x40023c00

08002178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002180:	4b12      	ldr	r3, [pc, #72]	@ (80021cc <HAL_InitTick+0x54>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4b12      	ldr	r3, [pc, #72]	@ (80021d0 <HAL_InitTick+0x58>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	4619      	mov	r1, r3
 800218a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800218e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002192:	fbb2 f3f3 	udiv	r3, r2, r3
 8002196:	4618      	mov	r0, r3
 8002198:	f000 f93b 	bl	8002412 <HAL_SYSTICK_Config>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e00e      	b.n	80021c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b0f      	cmp	r3, #15
 80021aa:	d80a      	bhi.n	80021c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021ac:	2200      	movs	r2, #0
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	f04f 30ff 	mov.w	r0, #4294967295
 80021b4:	f000 f911 	bl	80023da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021b8:	4a06      	ldr	r2, [pc, #24]	@ (80021d4 <HAL_InitTick+0x5c>)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
 80021c0:	e000      	b.n	80021c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20000000 	.word	0x20000000
 80021d0:	20000008 	.word	0x20000008
 80021d4:	20000004 	.word	0x20000004

080021d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021dc:	4b06      	ldr	r3, [pc, #24]	@ (80021f8 <HAL_IncTick+0x20>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	461a      	mov	r2, r3
 80021e2:	4b06      	ldr	r3, [pc, #24]	@ (80021fc <HAL_IncTick+0x24>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4413      	add	r3, r2
 80021e8:	4a04      	ldr	r2, [pc, #16]	@ (80021fc <HAL_IncTick+0x24>)
 80021ea:	6013      	str	r3, [r2, #0]
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	20000008 	.word	0x20000008
 80021fc:	20000248 	.word	0x20000248

08002200 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return uwTick;
 8002204:	4b03      	ldr	r3, [pc, #12]	@ (8002214 <HAL_GetTick+0x14>)
 8002206:	681b      	ldr	r3, [r3, #0]
}
 8002208:	4618      	mov	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20000248 	.word	0x20000248

08002218 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002220:	f7ff ffee 	bl	8002200 <HAL_GetTick>
 8002224:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002230:	d005      	beq.n	800223e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002232:	4b0a      	ldr	r3, [pc, #40]	@ (800225c <HAL_Delay+0x44>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	461a      	mov	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4413      	add	r3, r2
 800223c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800223e:	bf00      	nop
 8002240:	f7ff ffde 	bl	8002200 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	429a      	cmp	r2, r3
 800224e:	d8f7      	bhi.n	8002240 <HAL_Delay+0x28>
  {
  }
}
 8002250:	bf00      	nop
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000008 	.word	0x20000008

08002260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002270:	4b0c      	ldr	r3, [pc, #48]	@ (80022a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800227c:	4013      	ands	r3, r2
 800227e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002288:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800228c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002292:	4a04      	ldr	r2, [pc, #16]	@ (80022a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	60d3      	str	r3, [r2, #12]
}
 8002298:	bf00      	nop
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022ac:	4b04      	ldr	r3, [pc, #16]	@ (80022c0 <__NVIC_GetPriorityGrouping+0x18>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	0a1b      	lsrs	r3, r3, #8
 80022b2:	f003 0307 	and.w	r3, r3, #7
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	6039      	str	r1, [r7, #0]
 80022ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	db0a      	blt.n	80022ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	490c      	ldr	r1, [pc, #48]	@ (8002310 <__NVIC_SetPriority+0x4c>)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	0112      	lsls	r2, r2, #4
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	440b      	add	r3, r1
 80022e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022ec:	e00a      	b.n	8002304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4908      	ldr	r1, [pc, #32]	@ (8002314 <__NVIC_SetPriority+0x50>)
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	3b04      	subs	r3, #4
 80022fc:	0112      	lsls	r2, r2, #4
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	440b      	add	r3, r1
 8002302:	761a      	strb	r2, [r3, #24]
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	e000e100 	.word	0xe000e100
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002318:	b480      	push	{r7}
 800231a:	b089      	sub	sp, #36	@ 0x24
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f1c3 0307 	rsb	r3, r3, #7
 8002332:	2b04      	cmp	r3, #4
 8002334:	bf28      	it	cs
 8002336:	2304      	movcs	r3, #4
 8002338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3304      	adds	r3, #4
 800233e:	2b06      	cmp	r3, #6
 8002340:	d902      	bls.n	8002348 <NVIC_EncodePriority+0x30>
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3b03      	subs	r3, #3
 8002346:	e000      	b.n	800234a <NVIC_EncodePriority+0x32>
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800234c:	f04f 32ff 	mov.w	r2, #4294967295
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43da      	mvns	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	401a      	ands	r2, r3
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002360:	f04f 31ff 	mov.w	r1, #4294967295
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	fa01 f303 	lsl.w	r3, r1, r3
 800236a:	43d9      	mvns	r1, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002370:	4313      	orrs	r3, r2
         );
}
 8002372:	4618      	mov	r0, r3
 8002374:	3724      	adds	r7, #36	@ 0x24
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
	...

08002380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3b01      	subs	r3, #1
 800238c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002390:	d301      	bcc.n	8002396 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002392:	2301      	movs	r3, #1
 8002394:	e00f      	b.n	80023b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002396:	4a0a      	ldr	r2, [pc, #40]	@ (80023c0 <SysTick_Config+0x40>)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3b01      	subs	r3, #1
 800239c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800239e:	210f      	movs	r1, #15
 80023a0:	f04f 30ff 	mov.w	r0, #4294967295
 80023a4:	f7ff ff8e 	bl	80022c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023a8:	4b05      	ldr	r3, [pc, #20]	@ (80023c0 <SysTick_Config+0x40>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ae:	4b04      	ldr	r3, [pc, #16]	@ (80023c0 <SysTick_Config+0x40>)
 80023b0:	2207      	movs	r2, #7
 80023b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	e000e010 	.word	0xe000e010

080023c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff ff47 	bl	8002260 <__NVIC_SetPriorityGrouping>
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023da:	b580      	push	{r7, lr}
 80023dc:	b086      	sub	sp, #24
 80023de:	af00      	add	r7, sp, #0
 80023e0:	4603      	mov	r3, r0
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	607a      	str	r2, [r7, #4]
 80023e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023ec:	f7ff ff5c 	bl	80022a8 <__NVIC_GetPriorityGrouping>
 80023f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	6978      	ldr	r0, [r7, #20]
 80023f8:	f7ff ff8e 	bl	8002318 <NVIC_EncodePriority>
 80023fc:	4602      	mov	r2, r0
 80023fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002402:	4611      	mov	r1, r2
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ff5d 	bl	80022c4 <__NVIC_SetPriority>
}
 800240a:	bf00      	nop
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7ff ffb0 	bl	8002380 <SysTick_Config>
 8002420:	4603      	mov	r3, r0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800242c:	b480      	push	{r7}
 800242e:	b089      	sub	sp, #36	@ 0x24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800243a:	2300      	movs	r3, #0
 800243c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800243e:	2300      	movs	r3, #0
 8002440:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]
 8002446:	e165      	b.n	8002714 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002448:	2201      	movs	r2, #1
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	4013      	ands	r3, r2
 800245a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	429a      	cmp	r2, r3
 8002462:	f040 8154 	bne.w	800270e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	2b01      	cmp	r3, #1
 8002470:	d005      	beq.n	800247e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800247a:	2b02      	cmp	r3, #2
 800247c:	d130      	bne.n	80024e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	2203      	movs	r2, #3
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024b4:	2201      	movs	r2, #1
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	091b      	lsrs	r3, r3, #4
 80024ca:	f003 0201 	and.w	r2, r3, #1
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	2b03      	cmp	r3, #3
 80024ea:	d017      	beq.n	800251c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	2203      	movs	r2, #3
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d123      	bne.n	8002570 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	08da      	lsrs	r2, r3, #3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3208      	adds	r2, #8
 8002530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002534:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	220f      	movs	r2, #15
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	691a      	ldr	r2, [r3, #16]
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	08da      	lsrs	r2, r3, #3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3208      	adds	r2, #8
 800256a:	69b9      	ldr	r1, [r7, #24]
 800256c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	2203      	movs	r2, #3
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 0203 	and.w	r2, r3, #3
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 80ae 	beq.w	800270e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	4b5d      	ldr	r3, [pc, #372]	@ (800272c <HAL_GPIO_Init+0x300>)
 80025b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ba:	4a5c      	ldr	r2, [pc, #368]	@ (800272c <HAL_GPIO_Init+0x300>)
 80025bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80025c2:	4b5a      	ldr	r3, [pc, #360]	@ (800272c <HAL_GPIO_Init+0x300>)
 80025c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ce:	4a58      	ldr	r2, [pc, #352]	@ (8002730 <HAL_GPIO_Init+0x304>)
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	089b      	lsrs	r3, r3, #2
 80025d4:	3302      	adds	r3, #2
 80025d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	220f      	movs	r2, #15
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4013      	ands	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a4f      	ldr	r2, [pc, #316]	@ (8002734 <HAL_GPIO_Init+0x308>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d025      	beq.n	8002646 <HAL_GPIO_Init+0x21a>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a4e      	ldr	r2, [pc, #312]	@ (8002738 <HAL_GPIO_Init+0x30c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d01f      	beq.n	8002642 <HAL_GPIO_Init+0x216>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a4d      	ldr	r2, [pc, #308]	@ (800273c <HAL_GPIO_Init+0x310>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d019      	beq.n	800263e <HAL_GPIO_Init+0x212>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a4c      	ldr	r2, [pc, #304]	@ (8002740 <HAL_GPIO_Init+0x314>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d013      	beq.n	800263a <HAL_GPIO_Init+0x20e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a4b      	ldr	r2, [pc, #300]	@ (8002744 <HAL_GPIO_Init+0x318>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00d      	beq.n	8002636 <HAL_GPIO_Init+0x20a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a4a      	ldr	r2, [pc, #296]	@ (8002748 <HAL_GPIO_Init+0x31c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d007      	beq.n	8002632 <HAL_GPIO_Init+0x206>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a49      	ldr	r2, [pc, #292]	@ (800274c <HAL_GPIO_Init+0x320>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d101      	bne.n	800262e <HAL_GPIO_Init+0x202>
 800262a:	2306      	movs	r3, #6
 800262c:	e00c      	b.n	8002648 <HAL_GPIO_Init+0x21c>
 800262e:	2307      	movs	r3, #7
 8002630:	e00a      	b.n	8002648 <HAL_GPIO_Init+0x21c>
 8002632:	2305      	movs	r3, #5
 8002634:	e008      	b.n	8002648 <HAL_GPIO_Init+0x21c>
 8002636:	2304      	movs	r3, #4
 8002638:	e006      	b.n	8002648 <HAL_GPIO_Init+0x21c>
 800263a:	2303      	movs	r3, #3
 800263c:	e004      	b.n	8002648 <HAL_GPIO_Init+0x21c>
 800263e:	2302      	movs	r3, #2
 8002640:	e002      	b.n	8002648 <HAL_GPIO_Init+0x21c>
 8002642:	2301      	movs	r3, #1
 8002644:	e000      	b.n	8002648 <HAL_GPIO_Init+0x21c>
 8002646:	2300      	movs	r3, #0
 8002648:	69fa      	ldr	r2, [r7, #28]
 800264a:	f002 0203 	and.w	r2, r2, #3
 800264e:	0092      	lsls	r2, r2, #2
 8002650:	4093      	lsls	r3, r2
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002658:	4935      	ldr	r1, [pc, #212]	@ (8002730 <HAL_GPIO_Init+0x304>)
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	089b      	lsrs	r3, r3, #2
 800265e:	3302      	adds	r3, #2
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002666:	4b3a      	ldr	r3, [pc, #232]	@ (8002750 <HAL_GPIO_Init+0x324>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	43db      	mvns	r3, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4013      	ands	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800268a:	4a31      	ldr	r2, [pc, #196]	@ (8002750 <HAL_GPIO_Init+0x324>)
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002690:	4b2f      	ldr	r3, [pc, #188]	@ (8002750 <HAL_GPIO_Init+0x324>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	43db      	mvns	r3, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d003      	beq.n	80026b4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026b4:	4a26      	ldr	r2, [pc, #152]	@ (8002750 <HAL_GPIO_Init+0x324>)
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026ba:	4b25      	ldr	r3, [pc, #148]	@ (8002750 <HAL_GPIO_Init+0x324>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	43db      	mvns	r3, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4013      	ands	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	4313      	orrs	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026de:	4a1c      	ldr	r2, [pc, #112]	@ (8002750 <HAL_GPIO_Init+0x324>)
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002750 <HAL_GPIO_Init+0x324>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4013      	ands	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d003      	beq.n	8002708 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002708:	4a11      	ldr	r2, [pc, #68]	@ (8002750 <HAL_GPIO_Init+0x324>)
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	3301      	adds	r3, #1
 8002712:	61fb      	str	r3, [r7, #28]
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	2b0f      	cmp	r3, #15
 8002718:	f67f ae96 	bls.w	8002448 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800271c:	bf00      	nop
 800271e:	bf00      	nop
 8002720:	3724      	adds	r7, #36	@ 0x24
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40023800 	.word	0x40023800
 8002730:	40013800 	.word	0x40013800
 8002734:	40020000 	.word	0x40020000
 8002738:	40020400 	.word	0x40020400
 800273c:	40020800 	.word	0x40020800
 8002740:	40020c00 	.word	0x40020c00
 8002744:	40021000 	.word	0x40021000
 8002748:	40021400 	.word	0x40021400
 800274c:	40021800 	.word	0x40021800
 8002750:	40013c00 	.word	0x40013c00

08002754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	807b      	strh	r3, [r7, #2]
 8002760:	4613      	mov	r3, r2
 8002762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002764:	787b      	ldrb	r3, [r7, #1]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800276a:	887a      	ldrh	r2, [r7, #2]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002770:	e003      	b.n	800277a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002772:	887b      	ldrh	r3, [r7, #2]
 8002774:	041a      	lsls	r2, r3, #16
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	619a      	str	r2, [r3, #24]
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
	...

08002788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0cc      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800279c:	4b68      	ldr	r3, [pc, #416]	@ (8002940 <HAL_RCC_ClockConfig+0x1b8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 030f 	and.w	r3, r3, #15
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d90c      	bls.n	80027c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027aa:	4b65      	ldr	r3, [pc, #404]	@ (8002940 <HAL_RCC_ClockConfig+0x1b8>)
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b2:	4b63      	ldr	r3, [pc, #396]	@ (8002940 <HAL_RCC_ClockConfig+0x1b8>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0b8      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d020      	beq.n	8002812 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d005      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027dc:	4b59      	ldr	r3, [pc, #356]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	4a58      	ldr	r2, [pc, #352]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80027e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0308 	and.w	r3, r3, #8
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027f4:	4b53      	ldr	r3, [pc, #332]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	4a52      	ldr	r2, [pc, #328]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80027fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80027fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002800:	4b50      	ldr	r3, [pc, #320]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	494d      	ldr	r1, [pc, #308]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	4313      	orrs	r3, r2
 8002810:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d044      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d107      	bne.n	8002836 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002826:	4b47      	ldr	r3, [pc, #284]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d119      	bne.n	8002866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e07f      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b02      	cmp	r3, #2
 800283c:	d003      	beq.n	8002846 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002842:	2b03      	cmp	r3, #3
 8002844:	d107      	bne.n	8002856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002846:	4b3f      	ldr	r3, [pc, #252]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e06f      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002856:	4b3b      	ldr	r3, [pc, #236]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e067      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002866:	4b37      	ldr	r3, [pc, #220]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f023 0203 	bic.w	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	4934      	ldr	r1, [pc, #208]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002874:	4313      	orrs	r3, r2
 8002876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002878:	f7ff fcc2 	bl	8002200 <HAL_GetTick>
 800287c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287e:	e00a      	b.n	8002896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002880:	f7ff fcbe 	bl	8002200 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e04f      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002896:	4b2b      	ldr	r3, [pc, #172]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 020c 	and.w	r2, r3, #12
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d1eb      	bne.n	8002880 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028a8:	4b25      	ldr	r3, [pc, #148]	@ (8002940 <HAL_RCC_ClockConfig+0x1b8>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 030f 	and.w	r3, r3, #15
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d20c      	bcs.n	80028d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b6:	4b22      	ldr	r3, [pc, #136]	@ (8002940 <HAL_RCC_ClockConfig+0x1b8>)
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028be:	4b20      	ldr	r3, [pc, #128]	@ (8002940 <HAL_RCC_ClockConfig+0x1b8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d001      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e032      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d008      	beq.n	80028ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028dc:	4b19      	ldr	r3, [pc, #100]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	4916      	ldr	r1, [pc, #88]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d009      	beq.n	800290e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028fa:	4b12      	ldr	r3, [pc, #72]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	490e      	ldr	r1, [pc, #56]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 800290a:	4313      	orrs	r3, r2
 800290c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800290e:	f000 f855 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 8002912:	4602      	mov	r2, r0
 8002914:	4b0b      	ldr	r3, [pc, #44]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	091b      	lsrs	r3, r3, #4
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	490a      	ldr	r1, [pc, #40]	@ (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 8002920:	5ccb      	ldrb	r3, [r1, r3]
 8002922:	fa22 f303 	lsr.w	r3, r2, r3
 8002926:	4a09      	ldr	r2, [pc, #36]	@ (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800292a:	4b09      	ldr	r3, [pc, #36]	@ (8002950 <HAL_RCC_ClockConfig+0x1c8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff fc22 	bl	8002178 <HAL_InitTick>

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40023c00 	.word	0x40023c00
 8002944:	40023800 	.word	0x40023800
 8002948:	080090f0 	.word	0x080090f0
 800294c:	20000000 	.word	0x20000000
 8002950:	20000004 	.word	0x20000004

08002954 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002958:	4b03      	ldr	r3, [pc, #12]	@ (8002968 <HAL_RCC_GetHCLKFreq+0x14>)
 800295a:	681b      	ldr	r3, [r3, #0]
}
 800295c:	4618      	mov	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	20000000 	.word	0x20000000

0800296c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002970:	f7ff fff0 	bl	8002954 <HAL_RCC_GetHCLKFreq>
 8002974:	4602      	mov	r2, r0
 8002976:	4b05      	ldr	r3, [pc, #20]	@ (800298c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	0a9b      	lsrs	r3, r3, #10
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	4903      	ldr	r1, [pc, #12]	@ (8002990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002982:	5ccb      	ldrb	r3, [r1, r3]
 8002984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002988:	4618      	mov	r0, r3
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40023800 	.word	0x40023800
 8002990:	08009100 	.word	0x08009100

08002994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002998:	f7ff ffdc 	bl	8002954 <HAL_RCC_GetHCLKFreq>
 800299c:	4602      	mov	r2, r0
 800299e:	4b05      	ldr	r3, [pc, #20]	@ (80029b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	0b5b      	lsrs	r3, r3, #13
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	4903      	ldr	r1, [pc, #12]	@ (80029b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029aa:	5ccb      	ldrb	r3, [r1, r3]
 80029ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40023800 	.word	0x40023800
 80029b8:	08009100 	.word	0x08009100

080029bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029c0:	b0a6      	sub	sp, #152	@ 0x98
 80029c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80029dc:	2300      	movs	r3, #0
 80029de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029e2:	4bc8      	ldr	r3, [pc, #800]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0x348>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 030c 	and.w	r3, r3, #12
 80029ea:	2b0c      	cmp	r3, #12
 80029ec:	f200 817e 	bhi.w	8002cec <HAL_RCC_GetSysClockFreq+0x330>
 80029f0:	a201      	add	r2, pc, #4	@ (adr r2, 80029f8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80029f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f6:	bf00      	nop
 80029f8:	08002a2d 	.word	0x08002a2d
 80029fc:	08002ced 	.word	0x08002ced
 8002a00:	08002ced 	.word	0x08002ced
 8002a04:	08002ced 	.word	0x08002ced
 8002a08:	08002a35 	.word	0x08002a35
 8002a0c:	08002ced 	.word	0x08002ced
 8002a10:	08002ced 	.word	0x08002ced
 8002a14:	08002ced 	.word	0x08002ced
 8002a18:	08002a3d 	.word	0x08002a3d
 8002a1c:	08002ced 	.word	0x08002ced
 8002a20:	08002ced 	.word	0x08002ced
 8002a24:	08002ced 	.word	0x08002ced
 8002a28:	08002ba7 	.word	0x08002ba7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a2c:	4bb6      	ldr	r3, [pc, #728]	@ (8002d08 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002a2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002a32:	e15f      	b.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a34:	4bb5      	ldr	r3, [pc, #724]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x350>)
 8002a36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002a3a:	e15b      	b.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a3c:	4bb1      	ldr	r3, [pc, #708]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a48:	4bae      	ldr	r3, [pc, #696]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d031      	beq.n	8002ab8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a54:	4bab      	ldr	r3, [pc, #684]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	099b      	lsrs	r3, r3, #6
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a5e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002a60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a66:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a68:	2300      	movs	r3, #0
 8002a6a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a6c:	4ba7      	ldr	r3, [pc, #668]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x350>)
 8002a6e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002a72:	462a      	mov	r2, r5
 8002a74:	fb03 f202 	mul.w	r2, r3, r2
 8002a78:	2300      	movs	r3, #0
 8002a7a:	4621      	mov	r1, r4
 8002a7c:	fb01 f303 	mul.w	r3, r1, r3
 8002a80:	4413      	add	r3, r2
 8002a82:	4aa2      	ldr	r2, [pc, #648]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x350>)
 8002a84:	4621      	mov	r1, r4
 8002a86:	fba1 1202 	umull	r1, r2, r1, r2
 8002a8a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002a8c:	460a      	mov	r2, r1
 8002a8e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002a90:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002a92:	4413      	add	r3, r2
 8002a94:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002a96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002a9e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002aa0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002aa4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002aa8:	f7fe f8c6 	bl	8000c38 <__aeabi_uldivmod>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002ab6:	e064      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ab8:	4b92      	ldr	r3, [pc, #584]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0x348>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	099b      	lsrs	r3, r3, #6
 8002abe:	2200      	movs	r2, #0
 8002ac0:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ac2:	657a      	str	r2, [r7, #84]	@ 0x54
 8002ac4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002acc:	2300      	movs	r3, #0
 8002ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ad0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002ad4:	4622      	mov	r2, r4
 8002ad6:	462b      	mov	r3, r5
 8002ad8:	f04f 0000 	mov.w	r0, #0
 8002adc:	f04f 0100 	mov.w	r1, #0
 8002ae0:	0159      	lsls	r1, r3, #5
 8002ae2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ae6:	0150      	lsls	r0, r2, #5
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	4621      	mov	r1, r4
 8002aee:	1a51      	subs	r1, r2, r1
 8002af0:	6139      	str	r1, [r7, #16]
 8002af2:	4629      	mov	r1, r5
 8002af4:	eb63 0301 	sbc.w	r3, r3, r1
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	f04f 0200 	mov.w	r2, #0
 8002afe:	f04f 0300 	mov.w	r3, #0
 8002b02:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b06:	4659      	mov	r1, fp
 8002b08:	018b      	lsls	r3, r1, #6
 8002b0a:	4651      	mov	r1, sl
 8002b0c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b10:	4651      	mov	r1, sl
 8002b12:	018a      	lsls	r2, r1, #6
 8002b14:	4651      	mov	r1, sl
 8002b16:	ebb2 0801 	subs.w	r8, r2, r1
 8002b1a:	4659      	mov	r1, fp
 8002b1c:	eb63 0901 	sbc.w	r9, r3, r1
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	f04f 0300 	mov.w	r3, #0
 8002b28:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b2c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b30:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b34:	4690      	mov	r8, r2
 8002b36:	4699      	mov	r9, r3
 8002b38:	4623      	mov	r3, r4
 8002b3a:	eb18 0303 	adds.w	r3, r8, r3
 8002b3e:	60bb      	str	r3, [r7, #8]
 8002b40:	462b      	mov	r3, r5
 8002b42:	eb49 0303 	adc.w	r3, r9, r3
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	f04f 0300 	mov.w	r3, #0
 8002b50:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b54:	4629      	mov	r1, r5
 8002b56:	028b      	lsls	r3, r1, #10
 8002b58:	4621      	mov	r1, r4
 8002b5a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b5e:	4621      	mov	r1, r4
 8002b60:	028a      	lsls	r2, r1, #10
 8002b62:	4610      	mov	r0, r2
 8002b64:	4619      	mov	r1, r3
 8002b66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b6e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002b70:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002b74:	f7fe f860 	bl	8000c38 <__aeabi_uldivmod>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002b82:	4b60      	ldr	r3, [pc, #384]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	0c1b      	lsrs	r3, r3, #16
 8002b88:	f003 0303 	and.w	r3, r3, #3
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8002b94:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002b98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002ba4:	e0a6      	b.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ba6:	4b57      	ldr	r3, [pc, #348]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bb2:	4b54      	ldr	r3, [pc, #336]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0x348>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d02a      	beq.n	8002c14 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bbe:	4b51      	ldr	r3, [pc, #324]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0x348>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	099b      	lsrs	r3, r3, #6
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bc8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bcc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	4b4e      	ldr	r3, [pc, #312]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x350>)
 8002bd4:	fb03 f201 	mul.w	r2, r3, r1
 8002bd8:	2300      	movs	r3, #0
 8002bda:	fb00 f303 	mul.w	r3, r0, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	4a4a      	ldr	r2, [pc, #296]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x350>)
 8002be2:	fba0 1202 	umull	r1, r2, r0, r2
 8002be6:	677a      	str	r2, [r7, #116]	@ 0x74
 8002be8:	460a      	mov	r2, r1
 8002bea:	673a      	str	r2, [r7, #112]	@ 0x70
 8002bec:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002bee:	4413      	add	r3, r2
 8002bf0:	677b      	str	r3, [r7, #116]	@ 0x74
 8002bf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bfa:	637a      	str	r2, [r7, #52]	@ 0x34
 8002bfc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002c00:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002c04:	f7fe f818 	bl	8000c38 <__aeabi_uldivmod>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002c12:	e05b      	b.n	8002ccc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c14:	4b3b      	ldr	r3, [pc, #236]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	099b      	lsrs	r3, r3, #6
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c26:	623b      	str	r3, [r7, #32]
 8002c28:	2300      	movs	r3, #0
 8002c2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c30:	4642      	mov	r2, r8
 8002c32:	464b      	mov	r3, r9
 8002c34:	f04f 0000 	mov.w	r0, #0
 8002c38:	f04f 0100 	mov.w	r1, #0
 8002c3c:	0159      	lsls	r1, r3, #5
 8002c3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c42:	0150      	lsls	r0, r2, #5
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	4641      	mov	r1, r8
 8002c4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c4e:	4649      	mov	r1, r9
 8002c50:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c68:	ebb2 040a 	subs.w	r4, r2, sl
 8002c6c:	eb63 050b 	sbc.w	r5, r3, fp
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	00eb      	lsls	r3, r5, #3
 8002c7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c7e:	00e2      	lsls	r2, r4, #3
 8002c80:	4614      	mov	r4, r2
 8002c82:	461d      	mov	r5, r3
 8002c84:	4643      	mov	r3, r8
 8002c86:	18e3      	adds	r3, r4, r3
 8002c88:	603b      	str	r3, [r7, #0]
 8002c8a:	464b      	mov	r3, r9
 8002c8c:	eb45 0303 	adc.w	r3, r5, r3
 8002c90:	607b      	str	r3, [r7, #4]
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	f04f 0300 	mov.w	r3, #0
 8002c9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c9e:	4629      	mov	r1, r5
 8002ca0:	028b      	lsls	r3, r1, #10
 8002ca2:	4621      	mov	r1, r4
 8002ca4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ca8:	4621      	mov	r1, r4
 8002caa:	028a      	lsls	r2, r1, #10
 8002cac:	4610      	mov	r0, r2
 8002cae:	4619      	mov	r1, r3
 8002cb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	61bb      	str	r3, [r7, #24]
 8002cb8:	61fa      	str	r2, [r7, #28]
 8002cba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cbe:	f7fd ffbb 	bl	8000c38 <__aeabi_uldivmod>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0x348>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	0f1b      	lsrs	r3, r3, #28
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002cda:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002cde:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002cea:	e003      	b.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cec:	4b06      	ldr	r3, [pc, #24]	@ (8002d08 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002cee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002cf2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cf4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3798      	adds	r7, #152	@ 0x98
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d02:	bf00      	nop
 8002d04:	40023800 	.word	0x40023800
 8002d08:	00f42400 	.word	0x00f42400
 8002d0c:	017d7840 	.word	0x017d7840

08002d10 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e28d      	b.n	800323e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 8083 	beq.w	8002e36 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002d30:	4b94      	ldr	r3, [pc, #592]	@ (8002f84 <HAL_RCC_OscConfig+0x274>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 030c 	and.w	r3, r3, #12
 8002d38:	2b04      	cmp	r3, #4
 8002d3a:	d019      	beq.n	8002d70 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002d3c:	4b91      	ldr	r3, [pc, #580]	@ (8002f84 <HAL_RCC_OscConfig+0x274>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 030c 	and.w	r3, r3, #12
        || \
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d106      	bne.n	8002d56 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002d48:	4b8e      	ldr	r3, [pc, #568]	@ (8002f84 <HAL_RCC_OscConfig+0x274>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d54:	d00c      	beq.n	8002d70 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d56:	4b8b      	ldr	r3, [pc, #556]	@ (8002f84 <HAL_RCC_OscConfig+0x274>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002d5e:	2b0c      	cmp	r3, #12
 8002d60:	d112      	bne.n	8002d88 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d62:	4b88      	ldr	r3, [pc, #544]	@ (8002f84 <HAL_RCC_OscConfig+0x274>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d6e:	d10b      	bne.n	8002d88 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d70:	4b84      	ldr	r3, [pc, #528]	@ (8002f84 <HAL_RCC_OscConfig+0x274>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d05b      	beq.n	8002e34 <HAL_RCC_OscConfig+0x124>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d157      	bne.n	8002e34 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e25a      	b.n	800323e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d90:	d106      	bne.n	8002da0 <HAL_RCC_OscConfig+0x90>
 8002d92:	4b7c      	ldr	r3, [pc, #496]	@ (8002f84 <HAL_RCC_OscConfig+0x274>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a7b      	ldr	r2, [pc, #492]	@ (8002f84 <HAL_RCC_OscConfig+0x274>)
 8002d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	e01d      	b.n	8002ddc <HAL_RCC_OscConfig+0xcc>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002da8:	d10c      	bne.n	8002dc4 <HAL_RCC_OscConfig+0xb4>
 8002daa:	4b76      	ldr	r3, [pc, #472]	@ (8002f84 <HAL_RCC_OscConfig+0x274>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a75      	ldr	r2, [pc, #468]	@ (8002f84 <HAL_RCC_OscConfig+0x274>)
 8002db0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	4b73      	ldr	r3, [pc, #460]	@ (8002f84 <HAL_RCC_OscConfig+0x274>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a72      	ldr	r2, [pc, #456]	@ (8002f84 <HAL_RCC_OscConfig+0x274>)
 8002dbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	e00b      	b.n	8002ddc <HAL_RCC_OscConfig+0xcc>
 8002dc4:	4b6f      	ldr	r3, [pc, #444]	@ (8002f84 <HAL_RCC_OscConfig+0x274>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a6e      	ldr	r2, [pc, #440]	@ (8002f84 <HAL_RCC_OscConfig+0x274>)
 8002dca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dce:	6013      	str	r3, [r2, #0]
 8002dd0:	4b6c      	ldr	r3, [pc, #432]	@ (8002f84 <HAL_RCC_OscConfig+0x274>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a6b      	ldr	r2, [pc, #428]	@ (8002f84 <HAL_RCC_OscConfig+0x274>)
 8002dd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d013      	beq.n	8002e0c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de4:	f7ff fa0c 	bl	8002200 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dec:	f7ff fa08 	bl	8002200 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b64      	cmp	r3, #100	@ 0x64
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e21f      	b.n	800323e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dfe:	4b61      	ldr	r3, [pc, #388]	@ (8002f84 <HAL_RCC_OscConfig+0x274>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f0      	beq.n	8002dec <HAL_RCC_OscConfig+0xdc>
 8002e0a:	e014      	b.n	8002e36 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0c:	f7ff f9f8 	bl	8002200 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e14:	f7ff f9f4 	bl	8002200 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b64      	cmp	r3, #100	@ 0x64
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e20b      	b.n	800323e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e26:	4b57      	ldr	r3, [pc, #348]	@ (8002f84 <HAL_RCC_OscConfig+0x274>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f0      	bne.n	8002e14 <HAL_RCC_OscConfig+0x104>
 8002e32:	e000      	b.n	8002e36 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d06f      	beq.n	8002f22 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002e42:	4b50      	ldr	r3, [pc, #320]	@ (8002f84 <HAL_RCC_OscConfig+0x274>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 030c 	and.w	r3, r3, #12
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d017      	beq.n	8002e7e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002e4e:	4b4d      	ldr	r3, [pc, #308]	@ (8002f84 <HAL_RCC_OscConfig+0x274>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 030c 	and.w	r3, r3, #12
        || \
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d105      	bne.n	8002e66 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002e5a:	4b4a      	ldr	r3, [pc, #296]	@ (8002f84 <HAL_RCC_OscConfig+0x274>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00b      	beq.n	8002e7e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e66:	4b47      	ldr	r3, [pc, #284]	@ (8002f84 <HAL_RCC_OscConfig+0x274>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002e6e:	2b0c      	cmp	r3, #12
 8002e70:	d11c      	bne.n	8002eac <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e72:	4b44      	ldr	r3, [pc, #272]	@ (8002f84 <HAL_RCC_OscConfig+0x274>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d116      	bne.n	8002eac <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e7e:	4b41      	ldr	r3, [pc, #260]	@ (8002f84 <HAL_RCC_OscConfig+0x274>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d005      	beq.n	8002e96 <HAL_RCC_OscConfig+0x186>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d001      	beq.n	8002e96 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e1d3      	b.n	800323e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e96:	4b3b      	ldr	r3, [pc, #236]	@ (8002f84 <HAL_RCC_OscConfig+0x274>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	4937      	ldr	r1, [pc, #220]	@ (8002f84 <HAL_RCC_OscConfig+0x274>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eaa:	e03a      	b.n	8002f22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d020      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eb4:	4b34      	ldr	r3, [pc, #208]	@ (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eba:	f7ff f9a1 	bl	8002200 <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ec2:	f7ff f99d 	bl	8002200 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e1b4      	b.n	800323e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed4:	4b2b      	ldr	r3, [pc, #172]	@ (8002f84 <HAL_RCC_OscConfig+0x274>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0f0      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee0:	4b28      	ldr	r3, [pc, #160]	@ (8002f84 <HAL_RCC_OscConfig+0x274>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	4925      	ldr	r1, [pc, #148]	@ (8002f84 <HAL_RCC_OscConfig+0x274>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	600b      	str	r3, [r1, #0]
 8002ef4:	e015      	b.n	8002f22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ef6:	4b24      	ldr	r3, [pc, #144]	@ (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efc:	f7ff f980 	bl	8002200 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f04:	f7ff f97c 	bl	8002200 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e193      	b.n	800323e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f16:	4b1b      	ldr	r3, [pc, #108]	@ (8002f84 <HAL_RCC_OscConfig+0x274>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d036      	beq.n	8002f9c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d016      	beq.n	8002f64 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f36:	4b15      	ldr	r3, [pc, #84]	@ (8002f8c <HAL_RCC_OscConfig+0x27c>)
 8002f38:	2201      	movs	r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3c:	f7ff f960 	bl	8002200 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f44:	f7ff f95c 	bl	8002200 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e173      	b.n	800323e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f56:	4b0b      	ldr	r3, [pc, #44]	@ (8002f84 <HAL_RCC_OscConfig+0x274>)
 8002f58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0f0      	beq.n	8002f44 <HAL_RCC_OscConfig+0x234>
 8002f62:	e01b      	b.n	8002f9c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f64:	4b09      	ldr	r3, [pc, #36]	@ (8002f8c <HAL_RCC_OscConfig+0x27c>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6a:	f7ff f949 	bl	8002200 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f70:	e00e      	b.n	8002f90 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f72:	f7ff f945 	bl	8002200 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d907      	bls.n	8002f90 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e15c      	b.n	800323e <HAL_RCC_OscConfig+0x52e>
 8002f84:	40023800 	.word	0x40023800
 8002f88:	42470000 	.word	0x42470000
 8002f8c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f90:	4b8a      	ldr	r3, [pc, #552]	@ (80031bc <HAL_RCC_OscConfig+0x4ac>)
 8002f92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1ea      	bne.n	8002f72 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 8097 	beq.w	80030d8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002faa:	2300      	movs	r3, #0
 8002fac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fae:	4b83      	ldr	r3, [pc, #524]	@ (80031bc <HAL_RCC_OscConfig+0x4ac>)
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10f      	bne.n	8002fda <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fba:	2300      	movs	r3, #0
 8002fbc:	60bb      	str	r3, [r7, #8]
 8002fbe:	4b7f      	ldr	r3, [pc, #508]	@ (80031bc <HAL_RCC_OscConfig+0x4ac>)
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc2:	4a7e      	ldr	r2, [pc, #504]	@ (80031bc <HAL_RCC_OscConfig+0x4ac>)
 8002fc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fca:	4b7c      	ldr	r3, [pc, #496]	@ (80031bc <HAL_RCC_OscConfig+0x4ac>)
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fd2:	60bb      	str	r3, [r7, #8]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fda:	4b79      	ldr	r3, [pc, #484]	@ (80031c0 <HAL_RCC_OscConfig+0x4b0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d118      	bne.n	8003018 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fe6:	4b76      	ldr	r3, [pc, #472]	@ (80031c0 <HAL_RCC_OscConfig+0x4b0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a75      	ldr	r2, [pc, #468]	@ (80031c0 <HAL_RCC_OscConfig+0x4b0>)
 8002fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ff0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ff2:	f7ff f905 	bl	8002200 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ffa:	f7ff f901 	bl	8002200 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e118      	b.n	800323e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300c:	4b6c      	ldr	r3, [pc, #432]	@ (80031c0 <HAL_RCC_OscConfig+0x4b0>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0f0      	beq.n	8002ffa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d106      	bne.n	800302e <HAL_RCC_OscConfig+0x31e>
 8003020:	4b66      	ldr	r3, [pc, #408]	@ (80031bc <HAL_RCC_OscConfig+0x4ac>)
 8003022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003024:	4a65      	ldr	r2, [pc, #404]	@ (80031bc <HAL_RCC_OscConfig+0x4ac>)
 8003026:	f043 0301 	orr.w	r3, r3, #1
 800302a:	6713      	str	r3, [r2, #112]	@ 0x70
 800302c:	e01c      	b.n	8003068 <HAL_RCC_OscConfig+0x358>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	2b05      	cmp	r3, #5
 8003034:	d10c      	bne.n	8003050 <HAL_RCC_OscConfig+0x340>
 8003036:	4b61      	ldr	r3, [pc, #388]	@ (80031bc <HAL_RCC_OscConfig+0x4ac>)
 8003038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800303a:	4a60      	ldr	r2, [pc, #384]	@ (80031bc <HAL_RCC_OscConfig+0x4ac>)
 800303c:	f043 0304 	orr.w	r3, r3, #4
 8003040:	6713      	str	r3, [r2, #112]	@ 0x70
 8003042:	4b5e      	ldr	r3, [pc, #376]	@ (80031bc <HAL_RCC_OscConfig+0x4ac>)
 8003044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003046:	4a5d      	ldr	r2, [pc, #372]	@ (80031bc <HAL_RCC_OscConfig+0x4ac>)
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	6713      	str	r3, [r2, #112]	@ 0x70
 800304e:	e00b      	b.n	8003068 <HAL_RCC_OscConfig+0x358>
 8003050:	4b5a      	ldr	r3, [pc, #360]	@ (80031bc <HAL_RCC_OscConfig+0x4ac>)
 8003052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003054:	4a59      	ldr	r2, [pc, #356]	@ (80031bc <HAL_RCC_OscConfig+0x4ac>)
 8003056:	f023 0301 	bic.w	r3, r3, #1
 800305a:	6713      	str	r3, [r2, #112]	@ 0x70
 800305c:	4b57      	ldr	r3, [pc, #348]	@ (80031bc <HAL_RCC_OscConfig+0x4ac>)
 800305e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003060:	4a56      	ldr	r2, [pc, #344]	@ (80031bc <HAL_RCC_OscConfig+0x4ac>)
 8003062:	f023 0304 	bic.w	r3, r3, #4
 8003066:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d015      	beq.n	800309c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003070:	f7ff f8c6 	bl	8002200 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003076:	e00a      	b.n	800308e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003078:	f7ff f8c2 	bl	8002200 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003086:	4293      	cmp	r3, r2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e0d7      	b.n	800323e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800308e:	4b4b      	ldr	r3, [pc, #300]	@ (80031bc <HAL_RCC_OscConfig+0x4ac>)
 8003090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0ee      	beq.n	8003078 <HAL_RCC_OscConfig+0x368>
 800309a:	e014      	b.n	80030c6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309c:	f7ff f8b0 	bl	8002200 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a2:	e00a      	b.n	80030ba <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030a4:	f7ff f8ac 	bl	8002200 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e0c1      	b.n	800323e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ba:	4b40      	ldr	r3, [pc, #256]	@ (80031bc <HAL_RCC_OscConfig+0x4ac>)
 80030bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1ee      	bne.n	80030a4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030c6:	7dfb      	ldrb	r3, [r7, #23]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d105      	bne.n	80030d8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030cc:	4b3b      	ldr	r3, [pc, #236]	@ (80031bc <HAL_RCC_OscConfig+0x4ac>)
 80030ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d0:	4a3a      	ldr	r2, [pc, #232]	@ (80031bc <HAL_RCC_OscConfig+0x4ac>)
 80030d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 80ad 	beq.w	800323c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030e2:	4b36      	ldr	r3, [pc, #216]	@ (80031bc <HAL_RCC_OscConfig+0x4ac>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 030c 	and.w	r3, r3, #12
 80030ea:	2b08      	cmp	r3, #8
 80030ec:	d060      	beq.n	80031b0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d145      	bne.n	8003182 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f6:	4b33      	ldr	r3, [pc, #204]	@ (80031c4 <HAL_RCC_OscConfig+0x4b4>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fc:	f7ff f880 	bl	8002200 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003104:	f7ff f87c 	bl	8002200 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e093      	b.n	800323e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003116:	4b29      	ldr	r3, [pc, #164]	@ (80031bc <HAL_RCC_OscConfig+0x4ac>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f0      	bne.n	8003104 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69da      	ldr	r2, [r3, #28]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003130:	019b      	lsls	r3, r3, #6
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003138:	085b      	lsrs	r3, r3, #1
 800313a:	3b01      	subs	r3, #1
 800313c:	041b      	lsls	r3, r3, #16
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003144:	061b      	lsls	r3, r3, #24
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314c:	071b      	lsls	r3, r3, #28
 800314e:	491b      	ldr	r1, [pc, #108]	@ (80031bc <HAL_RCC_OscConfig+0x4ac>)
 8003150:	4313      	orrs	r3, r2
 8003152:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003154:	4b1b      	ldr	r3, [pc, #108]	@ (80031c4 <HAL_RCC_OscConfig+0x4b4>)
 8003156:	2201      	movs	r2, #1
 8003158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315a:	f7ff f851 	bl	8002200 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003162:	f7ff f84d 	bl	8002200 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e064      	b.n	800323e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003174:	4b11      	ldr	r3, [pc, #68]	@ (80031bc <HAL_RCC_OscConfig+0x4ac>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0f0      	beq.n	8003162 <HAL_RCC_OscConfig+0x452>
 8003180:	e05c      	b.n	800323c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003182:	4b10      	ldr	r3, [pc, #64]	@ (80031c4 <HAL_RCC_OscConfig+0x4b4>)
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003188:	f7ff f83a 	bl	8002200 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003190:	f7ff f836 	bl	8002200 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e04d      	b.n	800323e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a2:	4b06      	ldr	r3, [pc, #24]	@ (80031bc <HAL_RCC_OscConfig+0x4ac>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f0      	bne.n	8003190 <HAL_RCC_OscConfig+0x480>
 80031ae:	e045      	b.n	800323c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d107      	bne.n	80031c8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e040      	b.n	800323e <HAL_RCC_OscConfig+0x52e>
 80031bc:	40023800 	.word	0x40023800
 80031c0:	40007000 	.word	0x40007000
 80031c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003248 <HAL_RCC_OscConfig+0x538>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d030      	beq.n	8003238 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d129      	bne.n	8003238 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d122      	bne.n	8003238 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80031f8:	4013      	ands	r3, r2
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003200:	4293      	cmp	r3, r2
 8003202:	d119      	bne.n	8003238 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800320e:	085b      	lsrs	r3, r3, #1
 8003210:	3b01      	subs	r3, #1
 8003212:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003214:	429a      	cmp	r2, r3
 8003216:	d10f      	bne.n	8003238 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003222:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003224:	429a      	cmp	r2, r3
 8003226:	d107      	bne.n	8003238 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003232:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003234:	429a      	cmp	r2, r3
 8003236:	d001      	beq.n	800323c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e000      	b.n	800323e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3718      	adds	r7, #24
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40023800 	.word	0x40023800

0800324c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e07b      	b.n	8003356 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003262:	2b00      	cmp	r3, #0
 8003264:	d108      	bne.n	8003278 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800326e:	d009      	beq.n	8003284 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	61da      	str	r2, [r3, #28]
 8003276:	e005      	b.n	8003284 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d106      	bne.n	80032a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7fe fd7e 	bl	8001da0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2202      	movs	r2, #2
 80032a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80032cc:	431a      	orrs	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032d6:	431a      	orrs	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	431a      	orrs	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032f4:	431a      	orrs	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003308:	ea42 0103 	orr.w	r1, r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003310:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	0c1b      	lsrs	r3, r3, #16
 8003322:	f003 0104 	and.w	r1, r3, #4
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332a:	f003 0210 	and.w	r2, r3, #16
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	69da      	ldr	r2, [r3, #28]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003344:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b088      	sub	sp, #32
 8003362:	af00      	add	r7, sp, #0
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	603b      	str	r3, [r7, #0]
 800336a:	4613      	mov	r3, r2
 800336c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800336e:	f7fe ff47 	bl	8002200 <HAL_GetTick>
 8003372:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003374:	88fb      	ldrh	r3, [r7, #6]
 8003376:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b01      	cmp	r3, #1
 8003382:	d001      	beq.n	8003388 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003384:	2302      	movs	r3, #2
 8003386:	e12a      	b.n	80035de <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <HAL_SPI_Transmit+0x36>
 800338e:	88fb      	ldrh	r3, [r7, #6]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e122      	b.n	80035de <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d101      	bne.n	80033a6 <HAL_SPI_Transmit+0x48>
 80033a2:	2302      	movs	r3, #2
 80033a4:	e11b      	b.n	80035de <HAL_SPI_Transmit+0x280>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2203      	movs	r2, #3
 80033b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	88fa      	ldrh	r2, [r7, #6]
 80033c6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	88fa      	ldrh	r2, [r7, #6]
 80033cc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033f4:	d10f      	bne.n	8003416 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003404:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003414:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003420:	2b40      	cmp	r3, #64	@ 0x40
 8003422:	d007      	beq.n	8003434 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003432:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800343c:	d152      	bne.n	80034e4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <HAL_SPI_Transmit+0xee>
 8003446:	8b7b      	ldrh	r3, [r7, #26]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d145      	bne.n	80034d8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003450:	881a      	ldrh	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345c:	1c9a      	adds	r2, r3, #2
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003466:	b29b      	uxth	r3, r3
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003470:	e032      	b.n	80034d8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b02      	cmp	r3, #2
 800347e:	d112      	bne.n	80034a6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003484:	881a      	ldrh	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003490:	1c9a      	adds	r2, r3, #2
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800349a:	b29b      	uxth	r3, r3
 800349c:	3b01      	subs	r3, #1
 800349e:	b29a      	uxth	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80034a4:	e018      	b.n	80034d8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034a6:	f7fe feab 	bl	8002200 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d803      	bhi.n	80034be <HAL_SPI_Transmit+0x160>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034bc:	d102      	bne.n	80034c4 <HAL_SPI_Transmit+0x166>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d109      	bne.n	80034d8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e082      	b.n	80035de <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034dc:	b29b      	uxth	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1c7      	bne.n	8003472 <HAL_SPI_Transmit+0x114>
 80034e2:	e053      	b.n	800358c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d002      	beq.n	80034f2 <HAL_SPI_Transmit+0x194>
 80034ec:	8b7b      	ldrh	r3, [r7, #26]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d147      	bne.n	8003582 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	330c      	adds	r3, #12
 80034fc:	7812      	ldrb	r2, [r2, #0]
 80034fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800350e:	b29b      	uxth	r3, r3
 8003510:	3b01      	subs	r3, #1
 8003512:	b29a      	uxth	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003518:	e033      	b.n	8003582 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b02      	cmp	r3, #2
 8003526:	d113      	bne.n	8003550 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	330c      	adds	r3, #12
 8003532:	7812      	ldrb	r2, [r2, #0]
 8003534:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353a:	1c5a      	adds	r2, r3, #1
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003544:	b29b      	uxth	r3, r3
 8003546:	3b01      	subs	r3, #1
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800354e:	e018      	b.n	8003582 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003550:	f7fe fe56 	bl	8002200 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	429a      	cmp	r2, r3
 800355e:	d803      	bhi.n	8003568 <HAL_SPI_Transmit+0x20a>
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003566:	d102      	bne.n	800356e <HAL_SPI_Transmit+0x210>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d109      	bne.n	8003582 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e02d      	b.n	80035de <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003586:	b29b      	uxth	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1c6      	bne.n	800351a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800358c:	69fa      	ldr	r2, [r7, #28]
 800358e:	6839      	ldr	r1, [r7, #0]
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 fa59 	bl	8003a48 <SPI_EndRxTxTransaction>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d002      	beq.n	80035a2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2220      	movs	r2, #32
 80035a0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10a      	bne.n	80035c0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035aa:	2300      	movs	r3, #0
 80035ac:	617b      	str	r3, [r7, #20]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	617b      	str	r3, [r7, #20]
 80035be:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e000      	b.n	80035de <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80035dc:	2300      	movs	r3, #0
  }
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3720      	adds	r7, #32
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b08a      	sub	sp, #40	@ 0x28
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	60f8      	str	r0, [r7, #12]
 80035ee:	60b9      	str	r1, [r7, #8]
 80035f0:	607a      	str	r2, [r7, #4]
 80035f2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80035f4:	2301      	movs	r3, #1
 80035f6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035f8:	f7fe fe02 	bl	8002200 <HAL_GetTick>
 80035fc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003604:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800360c:	887b      	ldrh	r3, [r7, #2]
 800360e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003610:	7ffb      	ldrb	r3, [r7, #31]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d00c      	beq.n	8003630 <HAL_SPI_TransmitReceive+0x4a>
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800361c:	d106      	bne.n	800362c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d102      	bne.n	800362c <HAL_SPI_TransmitReceive+0x46>
 8003626:	7ffb      	ldrb	r3, [r7, #31]
 8003628:	2b04      	cmp	r3, #4
 800362a:	d001      	beq.n	8003630 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800362c:	2302      	movs	r3, #2
 800362e:	e17f      	b.n	8003930 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d005      	beq.n	8003642 <HAL_SPI_TransmitReceive+0x5c>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d002      	beq.n	8003642 <HAL_SPI_TransmitReceive+0x5c>
 800363c:	887b      	ldrh	r3, [r7, #2]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e174      	b.n	8003930 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800364c:	2b01      	cmp	r3, #1
 800364e:	d101      	bne.n	8003654 <HAL_SPI_TransmitReceive+0x6e>
 8003650:	2302      	movs	r3, #2
 8003652:	e16d      	b.n	8003930 <HAL_SPI_TransmitReceive+0x34a>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b04      	cmp	r3, #4
 8003666:	d003      	beq.n	8003670 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2205      	movs	r2, #5
 800366c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	887a      	ldrh	r2, [r7, #2]
 8003680:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	887a      	ldrh	r2, [r7, #2]
 8003686:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	887a      	ldrh	r2, [r7, #2]
 8003692:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	887a      	ldrh	r2, [r7, #2]
 8003698:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b0:	2b40      	cmp	r3, #64	@ 0x40
 80036b2:	d007      	beq.n	80036c4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036cc:	d17e      	bne.n	80037cc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d002      	beq.n	80036dc <HAL_SPI_TransmitReceive+0xf6>
 80036d6:	8afb      	ldrh	r3, [r7, #22]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d16c      	bne.n	80037b6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e0:	881a      	ldrh	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ec:	1c9a      	adds	r2, r3, #2
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003700:	e059      	b.n	80037b6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b02      	cmp	r3, #2
 800370e:	d11b      	bne.n	8003748 <HAL_SPI_TransmitReceive+0x162>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003714:	b29b      	uxth	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d016      	beq.n	8003748 <HAL_SPI_TransmitReceive+0x162>
 800371a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371c:	2b01      	cmp	r3, #1
 800371e:	d113      	bne.n	8003748 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003724:	881a      	ldrh	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003730:	1c9a      	adds	r2, r3, #2
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800373a:	b29b      	uxth	r3, r3
 800373c:	3b01      	subs	r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b01      	cmp	r3, #1
 8003754:	d119      	bne.n	800378a <HAL_SPI_TransmitReceive+0x1a4>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800375a:	b29b      	uxth	r3, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	d014      	beq.n	800378a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800376a:	b292      	uxth	r2, r2
 800376c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003772:	1c9a      	adds	r2, r3, #2
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800377c:	b29b      	uxth	r3, r3
 800377e:	3b01      	subs	r3, #1
 8003780:	b29a      	uxth	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003786:	2301      	movs	r3, #1
 8003788:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800378a:	f7fe fd39 	bl	8002200 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003796:	429a      	cmp	r2, r3
 8003798:	d80d      	bhi.n	80037b6 <HAL_SPI_TransmitReceive+0x1d0>
 800379a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800379c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a0:	d009      	beq.n	80037b6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e0bc      	b.n	8003930 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1a0      	bne.n	8003702 <HAL_SPI_TransmitReceive+0x11c>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d19b      	bne.n	8003702 <HAL_SPI_TransmitReceive+0x11c>
 80037ca:	e082      	b.n	80038d2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d002      	beq.n	80037da <HAL_SPI_TransmitReceive+0x1f4>
 80037d4:	8afb      	ldrh	r3, [r7, #22]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d171      	bne.n	80038be <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	330c      	adds	r3, #12
 80037e4:	7812      	ldrb	r2, [r2, #0]
 80037e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ec:	1c5a      	adds	r2, r3, #1
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	3b01      	subs	r3, #1
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003800:	e05d      	b.n	80038be <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b02      	cmp	r3, #2
 800380e:	d11c      	bne.n	800384a <HAL_SPI_TransmitReceive+0x264>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003814:	b29b      	uxth	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d017      	beq.n	800384a <HAL_SPI_TransmitReceive+0x264>
 800381a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381c:	2b01      	cmp	r3, #1
 800381e:	d114      	bne.n	800384a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	330c      	adds	r3, #12
 800382a:	7812      	ldrb	r2, [r2, #0]
 800382c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800383c:	b29b      	uxth	r3, r3
 800383e:	3b01      	subs	r3, #1
 8003840:	b29a      	uxth	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003846:	2300      	movs	r3, #0
 8003848:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b01      	cmp	r3, #1
 8003856:	d119      	bne.n	800388c <HAL_SPI_TransmitReceive+0x2a6>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800385c:	b29b      	uxth	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d014      	beq.n	800388c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800386c:	b2d2      	uxtb	r2, r2
 800386e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003874:	1c5a      	adds	r2, r3, #1
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800387e:	b29b      	uxth	r3, r3
 8003880:	3b01      	subs	r3, #1
 8003882:	b29a      	uxth	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003888:	2301      	movs	r3, #1
 800388a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800388c:	f7fe fcb8 	bl	8002200 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003898:	429a      	cmp	r2, r3
 800389a:	d803      	bhi.n	80038a4 <HAL_SPI_TransmitReceive+0x2be>
 800389c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800389e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a2:	d102      	bne.n	80038aa <HAL_SPI_TransmitReceive+0x2c4>
 80038a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d109      	bne.n	80038be <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e038      	b.n	8003930 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d19c      	bne.n	8003802 <HAL_SPI_TransmitReceive+0x21c>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d197      	bne.n	8003802 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038d2:	6a3a      	ldr	r2, [r7, #32]
 80038d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 f8b6 	bl	8003a48 <SPI_EndRxTxTransaction>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d008      	beq.n	80038f4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2220      	movs	r2, #32
 80038e6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e01d      	b.n	8003930 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10a      	bne.n	8003912 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038fc:	2300      	movs	r3, #0
 80038fe:	613b      	str	r3, [r7, #16]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	613b      	str	r3, [r7, #16]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	613b      	str	r3, [r7, #16]
 8003910:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e000      	b.n	8003930 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800392e:	2300      	movs	r3, #0
  }
}
 8003930:	4618      	mov	r0, r3
 8003932:	3728      	adds	r7, #40	@ 0x28
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b088      	sub	sp, #32
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	603b      	str	r3, [r7, #0]
 8003944:	4613      	mov	r3, r2
 8003946:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003948:	f7fe fc5a 	bl	8002200 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003950:	1a9b      	subs	r3, r3, r2
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	4413      	add	r3, r2
 8003956:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003958:	f7fe fc52 	bl	8002200 <HAL_GetTick>
 800395c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800395e:	4b39      	ldr	r3, [pc, #228]	@ (8003a44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	015b      	lsls	r3, r3, #5
 8003964:	0d1b      	lsrs	r3, r3, #20
 8003966:	69fa      	ldr	r2, [r7, #28]
 8003968:	fb02 f303 	mul.w	r3, r2, r3
 800396c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800396e:	e054      	b.n	8003a1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003976:	d050      	beq.n	8003a1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003978:	f7fe fc42 	bl	8002200 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	69fa      	ldr	r2, [r7, #28]
 8003984:	429a      	cmp	r2, r3
 8003986:	d902      	bls.n	800398e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d13d      	bne.n	8003a0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800399c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039a6:	d111      	bne.n	80039cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039b0:	d004      	beq.n	80039bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039ba:	d107      	bne.n	80039cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039d4:	d10f      	bne.n	80039f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e017      	b.n	8003a3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	4013      	ands	r3, r2
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	bf0c      	ite	eq
 8003a2a:	2301      	moveq	r3, #1
 8003a2c:	2300      	movne	r3, #0
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	461a      	mov	r2, r3
 8003a32:	79fb      	ldrb	r3, [r7, #7]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d19b      	bne.n	8003970 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3720      	adds	r7, #32
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	20000000 	.word	0x20000000

08003a48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b088      	sub	sp, #32
 8003a4c:	af02      	add	r7, sp, #8
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	2102      	movs	r1, #2
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f7ff ff6a 	bl	8003938 <SPI_WaitFlagStateUntilTimeout>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d007      	beq.n	8003a7a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a6e:	f043 0220 	orr.w	r2, r3, #32
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e032      	b.n	8003ae0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ae8 <SPI_EndRxTxTransaction+0xa0>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a1b      	ldr	r2, [pc, #108]	@ (8003aec <SPI_EndRxTxTransaction+0xa4>)
 8003a80:	fba2 2303 	umull	r2, r3, r2, r3
 8003a84:	0d5b      	lsrs	r3, r3, #21
 8003a86:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003a8a:	fb02 f303 	mul.w	r3, r2, r3
 8003a8e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a98:	d112      	bne.n	8003ac0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	2180      	movs	r1, #128	@ 0x80
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f7ff ff47 	bl	8003938 <SPI_WaitFlagStateUntilTimeout>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d016      	beq.n	8003ade <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab4:	f043 0220 	orr.w	r2, r3, #32
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e00f      	b.n	8003ae0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00a      	beq.n	8003adc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ad6:	2b80      	cmp	r3, #128	@ 0x80
 8003ad8:	d0f2      	beq.n	8003ac0 <SPI_EndRxTxTransaction+0x78>
 8003ada:	e000      	b.n	8003ade <SPI_EndRxTxTransaction+0x96>
        break;
 8003adc:	bf00      	nop
  }

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	20000000 	.word	0x20000000
 8003aec:	165e9f81 	.word	0x165e9f81

08003af0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e042      	b.n	8003b88 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d106      	bne.n	8003b1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7fe f98a 	bl	8001e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2224      	movs	r2, #36	@ 0x24
 8003b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f973 	bl	8003e20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	691a      	ldr	r2, [r3, #16]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	695a      	ldr	r2, [r3, #20]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2220      	movs	r2, #32
 8003b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b08a      	sub	sp, #40	@ 0x28
 8003b94:	af02      	add	r7, sp, #8
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	603b      	str	r3, [r7, #0]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b20      	cmp	r3, #32
 8003bae:	d175      	bne.n	8003c9c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <HAL_UART_Transmit+0x2c>
 8003bb6:	88fb      	ldrh	r3, [r7, #6]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e06e      	b.n	8003c9e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2221      	movs	r2, #33	@ 0x21
 8003bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bce:	f7fe fb17 	bl	8002200 <HAL_GetTick>
 8003bd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	88fa      	ldrh	r2, [r7, #6]
 8003bd8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	88fa      	ldrh	r2, [r7, #6]
 8003bde:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003be8:	d108      	bne.n	8003bfc <HAL_UART_Transmit+0x6c>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d104      	bne.n	8003bfc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	61bb      	str	r3, [r7, #24]
 8003bfa:	e003      	b.n	8003c04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c00:	2300      	movs	r3, #0
 8003c02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c04:	e02e      	b.n	8003c64 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	2180      	movs	r1, #128	@ 0x80
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 f848 	bl	8003ca6 <UART_WaitOnFlagUntilTimeout>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e03a      	b.n	8003c9e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10b      	bne.n	8003c46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	881b      	ldrh	r3, [r3, #0]
 8003c32:	461a      	mov	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	3302      	adds	r3, #2
 8003c42:	61bb      	str	r3, [r7, #24]
 8003c44:	e007      	b.n	8003c56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	781a      	ldrb	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	3301      	adds	r3, #1
 8003c54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1cb      	bne.n	8003c06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	2200      	movs	r2, #0
 8003c76:	2140      	movs	r1, #64	@ 0x40
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 f814 	bl	8003ca6 <UART_WaitOnFlagUntilTimeout>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d005      	beq.n	8003c90 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e006      	b.n	8003c9e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	e000      	b.n	8003c9e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003c9c:	2302      	movs	r3, #2
  }
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3720      	adds	r7, #32
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b086      	sub	sp, #24
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	60f8      	str	r0, [r7, #12]
 8003cae:	60b9      	str	r1, [r7, #8]
 8003cb0:	603b      	str	r3, [r7, #0]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cb6:	e03b      	b.n	8003d30 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cbe:	d037      	beq.n	8003d30 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc0:	f7fe fa9e 	bl	8002200 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	6a3a      	ldr	r2, [r7, #32]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d302      	bcc.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e03a      	b.n	8003d50 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d023      	beq.n	8003d30 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	2b80      	cmp	r3, #128	@ 0x80
 8003cec:	d020      	beq.n	8003d30 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2b40      	cmp	r3, #64	@ 0x40
 8003cf2:	d01d      	beq.n	8003d30 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b08      	cmp	r3, #8
 8003d00:	d116      	bne.n	8003d30 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003d02:	2300      	movs	r3, #0
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	617b      	str	r3, [r7, #20]
 8003d16:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 f81d 	bl	8003d58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2208      	movs	r2, #8
 8003d22:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e00f      	b.n	8003d50 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	bf0c      	ite	eq
 8003d40:	2301      	moveq	r3, #1
 8003d42:	2300      	movne	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	461a      	mov	r2, r3
 8003d48:	79fb      	ldrb	r3, [r7, #7]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d0b4      	beq.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b095      	sub	sp, #84	@ 0x54
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	330c      	adds	r3, #12
 8003d66:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d6a:	e853 3f00 	ldrex	r3, [r3]
 8003d6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	330c      	adds	r3, #12
 8003d7e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d80:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d84:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d88:	e841 2300 	strex	r3, r2, [r1]
 8003d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1e5      	bne.n	8003d60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3314      	adds	r3, #20
 8003d9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	e853 3f00 	ldrex	r3, [r3]
 8003da2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	f023 0301 	bic.w	r3, r3, #1
 8003daa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	3314      	adds	r3, #20
 8003db2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003db4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003db6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dbc:	e841 2300 	strex	r3, r2, [r1]
 8003dc0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1e5      	bne.n	8003d94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d119      	bne.n	8003e04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	330c      	adds	r3, #12
 8003dd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	e853 3f00 	ldrex	r3, [r3]
 8003dde:	60bb      	str	r3, [r7, #8]
   return(result);
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	f023 0310 	bic.w	r3, r3, #16
 8003de6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	330c      	adds	r3, #12
 8003dee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003df0:	61ba      	str	r2, [r7, #24]
 8003df2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df4:	6979      	ldr	r1, [r7, #20]
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	e841 2300 	strex	r3, r2, [r1]
 8003dfc:	613b      	str	r3, [r7, #16]
   return(result);
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1e5      	bne.n	8003dd0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003e12:	bf00      	nop
 8003e14:	3754      	adds	r7, #84	@ 0x54
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
	...

08003e20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e24:	b0c0      	sub	sp, #256	@ 0x100
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e3c:	68d9      	ldr	r1, [r3, #12]
 8003e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	ea40 0301 	orr.w	r3, r0, r1
 8003e48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	431a      	orrs	r2, r3
 8003e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003e78:	f021 010c 	bic.w	r1, r1, #12
 8003e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e86:	430b      	orrs	r3, r1
 8003e88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e9a:	6999      	ldr	r1, [r3, #24]
 8003e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	ea40 0301 	orr.w	r3, r0, r1
 8003ea6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	4b8f      	ldr	r3, [pc, #572]	@ (80040ec <UART_SetConfig+0x2cc>)
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d005      	beq.n	8003ec0 <UART_SetConfig+0xa0>
 8003eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	4b8d      	ldr	r3, [pc, #564]	@ (80040f0 <UART_SetConfig+0x2d0>)
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d104      	bne.n	8003eca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ec0:	f7fe fd68 	bl	8002994 <HAL_RCC_GetPCLK2Freq>
 8003ec4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003ec8:	e003      	b.n	8003ed2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003eca:	f7fe fd4f 	bl	800296c <HAL_RCC_GetPCLK1Freq>
 8003ece:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003edc:	f040 810c 	bne.w	80040f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ee0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003eea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003eee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003ef2:	4622      	mov	r2, r4
 8003ef4:	462b      	mov	r3, r5
 8003ef6:	1891      	adds	r1, r2, r2
 8003ef8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003efa:	415b      	adcs	r3, r3
 8003efc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003efe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003f02:	4621      	mov	r1, r4
 8003f04:	eb12 0801 	adds.w	r8, r2, r1
 8003f08:	4629      	mov	r1, r5
 8003f0a:	eb43 0901 	adc.w	r9, r3, r1
 8003f0e:	f04f 0200 	mov.w	r2, #0
 8003f12:	f04f 0300 	mov.w	r3, #0
 8003f16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f22:	4690      	mov	r8, r2
 8003f24:	4699      	mov	r9, r3
 8003f26:	4623      	mov	r3, r4
 8003f28:	eb18 0303 	adds.w	r3, r8, r3
 8003f2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f30:	462b      	mov	r3, r5
 8003f32:	eb49 0303 	adc.w	r3, r9, r3
 8003f36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f46:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003f4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f4e:	460b      	mov	r3, r1
 8003f50:	18db      	adds	r3, r3, r3
 8003f52:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f54:	4613      	mov	r3, r2
 8003f56:	eb42 0303 	adc.w	r3, r2, r3
 8003f5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003f60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003f64:	f7fc fe68 	bl	8000c38 <__aeabi_uldivmod>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4b61      	ldr	r3, [pc, #388]	@ (80040f4 <UART_SetConfig+0x2d4>)
 8003f6e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f72:	095b      	lsrs	r3, r3, #5
 8003f74:	011c      	lsls	r4, r3, #4
 8003f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f80:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003f84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003f88:	4642      	mov	r2, r8
 8003f8a:	464b      	mov	r3, r9
 8003f8c:	1891      	adds	r1, r2, r2
 8003f8e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f90:	415b      	adcs	r3, r3
 8003f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f98:	4641      	mov	r1, r8
 8003f9a:	eb12 0a01 	adds.w	sl, r2, r1
 8003f9e:	4649      	mov	r1, r9
 8003fa0:	eb43 0b01 	adc.w	fp, r3, r1
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	f04f 0300 	mov.w	r3, #0
 8003fac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003fb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003fb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fb8:	4692      	mov	sl, r2
 8003fba:	469b      	mov	fp, r3
 8003fbc:	4643      	mov	r3, r8
 8003fbe:	eb1a 0303 	adds.w	r3, sl, r3
 8003fc2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003fc6:	464b      	mov	r3, r9
 8003fc8:	eb4b 0303 	adc.w	r3, fp, r3
 8003fcc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003fdc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003fe0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	18db      	adds	r3, r3, r3
 8003fe8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fea:	4613      	mov	r3, r2
 8003fec:	eb42 0303 	adc.w	r3, r2, r3
 8003ff0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ff2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003ff6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003ffa:	f7fc fe1d 	bl	8000c38 <__aeabi_uldivmod>
 8003ffe:	4602      	mov	r2, r0
 8004000:	460b      	mov	r3, r1
 8004002:	4611      	mov	r1, r2
 8004004:	4b3b      	ldr	r3, [pc, #236]	@ (80040f4 <UART_SetConfig+0x2d4>)
 8004006:	fba3 2301 	umull	r2, r3, r3, r1
 800400a:	095b      	lsrs	r3, r3, #5
 800400c:	2264      	movs	r2, #100	@ 0x64
 800400e:	fb02 f303 	mul.w	r3, r2, r3
 8004012:	1acb      	subs	r3, r1, r3
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800401a:	4b36      	ldr	r3, [pc, #216]	@ (80040f4 <UART_SetConfig+0x2d4>)
 800401c:	fba3 2302 	umull	r2, r3, r3, r2
 8004020:	095b      	lsrs	r3, r3, #5
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004028:	441c      	add	r4, r3
 800402a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800402e:	2200      	movs	r2, #0
 8004030:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004034:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004038:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800403c:	4642      	mov	r2, r8
 800403e:	464b      	mov	r3, r9
 8004040:	1891      	adds	r1, r2, r2
 8004042:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004044:	415b      	adcs	r3, r3
 8004046:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004048:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800404c:	4641      	mov	r1, r8
 800404e:	1851      	adds	r1, r2, r1
 8004050:	6339      	str	r1, [r7, #48]	@ 0x30
 8004052:	4649      	mov	r1, r9
 8004054:	414b      	adcs	r3, r1
 8004056:	637b      	str	r3, [r7, #52]	@ 0x34
 8004058:	f04f 0200 	mov.w	r2, #0
 800405c:	f04f 0300 	mov.w	r3, #0
 8004060:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004064:	4659      	mov	r1, fp
 8004066:	00cb      	lsls	r3, r1, #3
 8004068:	4651      	mov	r1, sl
 800406a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800406e:	4651      	mov	r1, sl
 8004070:	00ca      	lsls	r2, r1, #3
 8004072:	4610      	mov	r0, r2
 8004074:	4619      	mov	r1, r3
 8004076:	4603      	mov	r3, r0
 8004078:	4642      	mov	r2, r8
 800407a:	189b      	adds	r3, r3, r2
 800407c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004080:	464b      	mov	r3, r9
 8004082:	460a      	mov	r2, r1
 8004084:	eb42 0303 	adc.w	r3, r2, r3
 8004088:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800408c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004098:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800409c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80040a0:	460b      	mov	r3, r1
 80040a2:	18db      	adds	r3, r3, r3
 80040a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040a6:	4613      	mov	r3, r2
 80040a8:	eb42 0303 	adc.w	r3, r2, r3
 80040ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80040b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80040b6:	f7fc fdbf 	bl	8000c38 <__aeabi_uldivmod>
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	4b0d      	ldr	r3, [pc, #52]	@ (80040f4 <UART_SetConfig+0x2d4>)
 80040c0:	fba3 1302 	umull	r1, r3, r3, r2
 80040c4:	095b      	lsrs	r3, r3, #5
 80040c6:	2164      	movs	r1, #100	@ 0x64
 80040c8:	fb01 f303 	mul.w	r3, r1, r3
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	3332      	adds	r3, #50	@ 0x32
 80040d2:	4a08      	ldr	r2, [pc, #32]	@ (80040f4 <UART_SetConfig+0x2d4>)
 80040d4:	fba2 2303 	umull	r2, r3, r2, r3
 80040d8:	095b      	lsrs	r3, r3, #5
 80040da:	f003 0207 	and.w	r2, r3, #7
 80040de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4422      	add	r2, r4
 80040e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040e8:	e106      	b.n	80042f8 <UART_SetConfig+0x4d8>
 80040ea:	bf00      	nop
 80040ec:	40011000 	.word	0x40011000
 80040f0:	40011400 	.word	0x40011400
 80040f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040fc:	2200      	movs	r2, #0
 80040fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004102:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004106:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800410a:	4642      	mov	r2, r8
 800410c:	464b      	mov	r3, r9
 800410e:	1891      	adds	r1, r2, r2
 8004110:	6239      	str	r1, [r7, #32]
 8004112:	415b      	adcs	r3, r3
 8004114:	627b      	str	r3, [r7, #36]	@ 0x24
 8004116:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800411a:	4641      	mov	r1, r8
 800411c:	1854      	adds	r4, r2, r1
 800411e:	4649      	mov	r1, r9
 8004120:	eb43 0501 	adc.w	r5, r3, r1
 8004124:	f04f 0200 	mov.w	r2, #0
 8004128:	f04f 0300 	mov.w	r3, #0
 800412c:	00eb      	lsls	r3, r5, #3
 800412e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004132:	00e2      	lsls	r2, r4, #3
 8004134:	4614      	mov	r4, r2
 8004136:	461d      	mov	r5, r3
 8004138:	4643      	mov	r3, r8
 800413a:	18e3      	adds	r3, r4, r3
 800413c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004140:	464b      	mov	r3, r9
 8004142:	eb45 0303 	adc.w	r3, r5, r3
 8004146:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800414a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004156:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004166:	4629      	mov	r1, r5
 8004168:	008b      	lsls	r3, r1, #2
 800416a:	4621      	mov	r1, r4
 800416c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004170:	4621      	mov	r1, r4
 8004172:	008a      	lsls	r2, r1, #2
 8004174:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004178:	f7fc fd5e 	bl	8000c38 <__aeabi_uldivmod>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	4b60      	ldr	r3, [pc, #384]	@ (8004304 <UART_SetConfig+0x4e4>)
 8004182:	fba3 2302 	umull	r2, r3, r3, r2
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	011c      	lsls	r4, r3, #4
 800418a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800418e:	2200      	movs	r2, #0
 8004190:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004194:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004198:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800419c:	4642      	mov	r2, r8
 800419e:	464b      	mov	r3, r9
 80041a0:	1891      	adds	r1, r2, r2
 80041a2:	61b9      	str	r1, [r7, #24]
 80041a4:	415b      	adcs	r3, r3
 80041a6:	61fb      	str	r3, [r7, #28]
 80041a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041ac:	4641      	mov	r1, r8
 80041ae:	1851      	adds	r1, r2, r1
 80041b0:	6139      	str	r1, [r7, #16]
 80041b2:	4649      	mov	r1, r9
 80041b4:	414b      	adcs	r3, r1
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	f04f 0200 	mov.w	r2, #0
 80041bc:	f04f 0300 	mov.w	r3, #0
 80041c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041c4:	4659      	mov	r1, fp
 80041c6:	00cb      	lsls	r3, r1, #3
 80041c8:	4651      	mov	r1, sl
 80041ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041ce:	4651      	mov	r1, sl
 80041d0:	00ca      	lsls	r2, r1, #3
 80041d2:	4610      	mov	r0, r2
 80041d4:	4619      	mov	r1, r3
 80041d6:	4603      	mov	r3, r0
 80041d8:	4642      	mov	r2, r8
 80041da:	189b      	adds	r3, r3, r2
 80041dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80041e0:	464b      	mov	r3, r9
 80041e2:	460a      	mov	r2, r1
 80041e4:	eb42 0303 	adc.w	r3, r2, r3
 80041e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80041ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	f04f 0300 	mov.w	r3, #0
 8004200:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004204:	4649      	mov	r1, r9
 8004206:	008b      	lsls	r3, r1, #2
 8004208:	4641      	mov	r1, r8
 800420a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800420e:	4641      	mov	r1, r8
 8004210:	008a      	lsls	r2, r1, #2
 8004212:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004216:	f7fc fd0f 	bl	8000c38 <__aeabi_uldivmod>
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	4611      	mov	r1, r2
 8004220:	4b38      	ldr	r3, [pc, #224]	@ (8004304 <UART_SetConfig+0x4e4>)
 8004222:	fba3 2301 	umull	r2, r3, r3, r1
 8004226:	095b      	lsrs	r3, r3, #5
 8004228:	2264      	movs	r2, #100	@ 0x64
 800422a:	fb02 f303 	mul.w	r3, r2, r3
 800422e:	1acb      	subs	r3, r1, r3
 8004230:	011b      	lsls	r3, r3, #4
 8004232:	3332      	adds	r3, #50	@ 0x32
 8004234:	4a33      	ldr	r2, [pc, #204]	@ (8004304 <UART_SetConfig+0x4e4>)
 8004236:	fba2 2303 	umull	r2, r3, r2, r3
 800423a:	095b      	lsrs	r3, r3, #5
 800423c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004240:	441c      	add	r4, r3
 8004242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004246:	2200      	movs	r2, #0
 8004248:	673b      	str	r3, [r7, #112]	@ 0x70
 800424a:	677a      	str	r2, [r7, #116]	@ 0x74
 800424c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004250:	4642      	mov	r2, r8
 8004252:	464b      	mov	r3, r9
 8004254:	1891      	adds	r1, r2, r2
 8004256:	60b9      	str	r1, [r7, #8]
 8004258:	415b      	adcs	r3, r3
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004260:	4641      	mov	r1, r8
 8004262:	1851      	adds	r1, r2, r1
 8004264:	6039      	str	r1, [r7, #0]
 8004266:	4649      	mov	r1, r9
 8004268:	414b      	adcs	r3, r1
 800426a:	607b      	str	r3, [r7, #4]
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	f04f 0300 	mov.w	r3, #0
 8004274:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004278:	4659      	mov	r1, fp
 800427a:	00cb      	lsls	r3, r1, #3
 800427c:	4651      	mov	r1, sl
 800427e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004282:	4651      	mov	r1, sl
 8004284:	00ca      	lsls	r2, r1, #3
 8004286:	4610      	mov	r0, r2
 8004288:	4619      	mov	r1, r3
 800428a:	4603      	mov	r3, r0
 800428c:	4642      	mov	r2, r8
 800428e:	189b      	adds	r3, r3, r2
 8004290:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004292:	464b      	mov	r3, r9
 8004294:	460a      	mov	r2, r1
 8004296:	eb42 0303 	adc.w	r3, r2, r3
 800429a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800429c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80042a6:	667a      	str	r2, [r7, #100]	@ 0x64
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80042b4:	4649      	mov	r1, r9
 80042b6:	008b      	lsls	r3, r1, #2
 80042b8:	4641      	mov	r1, r8
 80042ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042be:	4641      	mov	r1, r8
 80042c0:	008a      	lsls	r2, r1, #2
 80042c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80042c6:	f7fc fcb7 	bl	8000c38 <__aeabi_uldivmod>
 80042ca:	4602      	mov	r2, r0
 80042cc:	460b      	mov	r3, r1
 80042ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004304 <UART_SetConfig+0x4e4>)
 80042d0:	fba3 1302 	umull	r1, r3, r3, r2
 80042d4:	095b      	lsrs	r3, r3, #5
 80042d6:	2164      	movs	r1, #100	@ 0x64
 80042d8:	fb01 f303 	mul.w	r3, r1, r3
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	3332      	adds	r3, #50	@ 0x32
 80042e2:	4a08      	ldr	r2, [pc, #32]	@ (8004304 <UART_SetConfig+0x4e4>)
 80042e4:	fba2 2303 	umull	r2, r3, r2, r3
 80042e8:	095b      	lsrs	r3, r3, #5
 80042ea:	f003 020f 	and.w	r2, r3, #15
 80042ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4422      	add	r2, r4
 80042f6:	609a      	str	r2, [r3, #8]
}
 80042f8:	bf00      	nop
 80042fa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80042fe:	46bd      	mov	sp, r7
 8004300:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004304:	51eb851f 	.word	0x51eb851f

08004308 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800430c:	4904      	ldr	r1, [pc, #16]	@ (8004320 <MX_FATFS_Init+0x18>)
 800430e:	4805      	ldr	r0, [pc, #20]	@ (8004324 <MX_FATFS_Init+0x1c>)
 8004310:	f002 ff4c 	bl	80071ac <FATFS_LinkDriver>
 8004314:	4603      	mov	r3, r0
 8004316:	461a      	mov	r2, r3
 8004318:	4b03      	ldr	r3, [pc, #12]	@ (8004328 <MX_FATFS_Init+0x20>)
 800431a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800431c:	bf00      	nop
 800431e:	bd80      	pop	{r7, pc}
 8004320:	20000250 	.word	0x20000250
 8004324:	2000000c 	.word	0x2000000c
 8004328:	2000024c 	.word	0x2000024c

0800432c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004330:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004332:	4618      	mov	r0, r3
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	4603      	mov	r3, r0
 8004344:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINEStat = STA_NOINIT;
 8004346:	79fb      	ldrb	r3, [r7, #7]
 8004348:	4618      	mov	r0, r3
 800434a:	f000 f9d3 	bl	80046f4 <USER_SPI_initialize>
 800434e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004350:	4618      	mov	r0, r3
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	4603      	mov	r3, r0
 8004360:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 8004362:	79fb      	ldrb	r3, [r7, #7]
 8004364:	4618      	mov	r0, r3
 8004366:	f000 fab1 	bl	80048cc <USER_SPI_status>
 800436a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800436c:	4618      	mov	r0, r3
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	60b9      	str	r1, [r7, #8]
 800437c:	607a      	str	r2, [r7, #4]
 800437e:	603b      	str	r3, [r7, #0]
 8004380:	4603      	mov	r3, r0
 8004382:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8004384:	7bf8      	ldrb	r0, [r7, #15]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	68b9      	ldr	r1, [r7, #8]
 800438c:	f000 fab4 	bl	80048f8 <USER_SPI_read>
 8004390:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b084      	sub	sp, #16
 800439e:	af00      	add	r7, sp, #0
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
 80043a4:	603b      	str	r3, [r7, #0]
 80043a6:	4603      	mov	r3, r0
 80043a8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 80043aa:	7bf8      	ldrb	r0, [r7, #15]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	68b9      	ldr	r1, [r7, #8]
 80043b2:	f000 fb07 	bl	80049c4 <USER_SPI_write>
 80043b6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	4603      	mov	r3, r0
 80043c8:	603a      	str	r2, [r7, #0]
 80043ca:	71fb      	strb	r3, [r7, #7]
 80043cc:	460b      	mov	r3, r1
 80043ce:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 80043d0:	79b9      	ldrb	r1, [r7, #6]
 80043d2:	79fb      	ldrb	r3, [r7, #7]
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 fb70 	bl	8004abc <USER_SPI_ioctl>
 80043dc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
	...

080043e8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80043f0:	f7fd ff06 	bl	8002200 <HAL_GetTick>
 80043f4:	4603      	mov	r3, r0
 80043f6:	4a04      	ldr	r2, [pc, #16]	@ (8004408 <SPI_Timer_On+0x20>)
 80043f8:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80043fa:	4a04      	ldr	r2, [pc, #16]	@ (800440c <SPI_Timer_On+0x24>)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6013      	str	r3, [r2, #0]
}
 8004400:	bf00      	nop
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	20000258 	.word	0x20000258
 800440c:	2000025c 	.word	0x2000025c

08004410 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8004414:	f7fd fef4 	bl	8002200 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	4b06      	ldr	r3, [pc, #24]	@ (8004434 <SPI_Timer_Status+0x24>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	1ad2      	subs	r2, r2, r3
 8004420:	4b05      	ldr	r3, [pc, #20]	@ (8004438 <SPI_Timer_Status+0x28>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	429a      	cmp	r2, r3
 8004426:	bf34      	ite	cc
 8004428:	2301      	movcc	r3, #1
 800442a:	2300      	movcs	r3, #0
 800442c:	b2db      	uxtb	r3, r3
}
 800442e:	4618      	mov	r0, r3
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	20000258 	.word	0x20000258
 8004438:	2000025c 	.word	0x2000025c

0800443c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af02      	add	r7, sp, #8
 8004442:	4603      	mov	r3, r0
 8004444:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8004446:	f107 020f 	add.w	r2, r7, #15
 800444a:	1df9      	adds	r1, r7, #7
 800444c:	2332      	movs	r3, #50	@ 0x32
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	2301      	movs	r3, #1
 8004452:	4804      	ldr	r0, [pc, #16]	@ (8004464 <xchg_spi+0x28>)
 8004454:	f7ff f8c7 	bl	80035e6 <HAL_SPI_TransmitReceive>
    return rxDat;
 8004458:	7bfb      	ldrb	r3, [r7, #15]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	200000a4 	.word	0x200000a4

08004468 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8004468:	b590      	push	{r4, r7, lr}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8004472:	2300      	movs	r3, #0
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	e00a      	b.n	800448e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	18d4      	adds	r4, r2, r3
 800447e:	20ff      	movs	r0, #255	@ 0xff
 8004480:	f7ff ffdc 	bl	800443c <xchg_spi>
 8004484:	4603      	mov	r3, r0
 8004486:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	3301      	adds	r3, #1
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	429a      	cmp	r2, r3
 8004494:	d3f0      	bcc.n	8004478 <rcvr_spi_multi+0x10>
	}
}
 8004496:	bf00      	nop
 8004498:	bf00      	nop
 800449a:	3714      	adds	r7, #20
 800449c:	46bd      	mov	sp, r7
 800449e:	bd90      	pop	{r4, r7, pc}

080044a0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	f04f 33ff 	mov.w	r3, #4294967295
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	4803      	ldr	r0, [pc, #12]	@ (80044c4 <xmit_spi_multi+0x24>)
 80044b6:	f7fe ff52 	bl	800335e <HAL_SPI_Transmit>
}
 80044ba:	bf00      	nop
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	200000a4 	.word	0x200000a4

080044c8 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80044d0:	f7fd fe96 	bl	8002200 <HAL_GetTick>
 80044d4:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80044da:	20ff      	movs	r0, #255	@ 0xff
 80044dc:	f7ff ffae 	bl	800443c <xchg_spi>
 80044e0:	4603      	mov	r3, r0
 80044e2:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80044e4:	7bfb      	ldrb	r3, [r7, #15]
 80044e6:	2bff      	cmp	r3, #255	@ 0xff
 80044e8:	d007      	beq.n	80044fa <wait_ready+0x32>
 80044ea:	f7fd fe89 	bl	8002200 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d8ef      	bhi.n	80044da <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80044fa:	7bfb      	ldrb	r3, [r7, #15]
 80044fc:	2bff      	cmp	r3, #255	@ 0xff
 80044fe:	bf0c      	ite	eq
 8004500:	2301      	moveq	r3, #1
 8004502:	2300      	movne	r3, #0
 8004504:	b2db      	uxtb	r3, r3
}
 8004506:	4618      	mov	r0, r3
 8004508:	3718      	adds	r7, #24
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
	...

08004510 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8004514:	2201      	movs	r2, #1
 8004516:	2110      	movs	r1, #16
 8004518:	4803      	ldr	r0, [pc, #12]	@ (8004528 <despiselect+0x18>)
 800451a:	f7fe f91b 	bl	8002754 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800451e:	20ff      	movs	r0, #255	@ 0xff
 8004520:	f7ff ff8c 	bl	800443c <xchg_spi>

}
 8004524:	bf00      	nop
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40020000 	.word	0x40020000

0800452c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8004530:	2200      	movs	r2, #0
 8004532:	2110      	movs	r1, #16
 8004534:	4809      	ldr	r0, [pc, #36]	@ (800455c <spiselect+0x30>)
 8004536:	f7fe f90d 	bl	8002754 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800453a:	20ff      	movs	r0, #255	@ 0xff
 800453c:	f7ff ff7e 	bl	800443c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8004540:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004544:	f7ff ffc0 	bl	80044c8 <wait_ready>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <spiselect+0x26>
 800454e:	2301      	movs	r3, #1
 8004550:	e002      	b.n	8004558 <spiselect+0x2c>

	despiselect();
 8004552:	f7ff ffdd 	bl	8004510 <despiselect>
	return 0;	/* Timeout */
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40020000 	.word	0x40020000

08004560 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800456a:	20c8      	movs	r0, #200	@ 0xc8
 800456c:	f7ff ff3c 	bl	80043e8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8004570:	20ff      	movs	r0, #255	@ 0xff
 8004572:	f7ff ff63 	bl	800443c <xchg_spi>
 8004576:	4603      	mov	r3, r0
 8004578:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800457a:	7bfb      	ldrb	r3, [r7, #15]
 800457c:	2bff      	cmp	r3, #255	@ 0xff
 800457e:	d104      	bne.n	800458a <rcvr_datablock+0x2a>
 8004580:	f7ff ff46 	bl	8004410 <SPI_Timer_Status>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1f2      	bne.n	8004570 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800458a:	7bfb      	ldrb	r3, [r7, #15]
 800458c:	2bfe      	cmp	r3, #254	@ 0xfe
 800458e:	d001      	beq.n	8004594 <rcvr_datablock+0x34>
 8004590:	2300      	movs	r3, #0
 8004592:	e00a      	b.n	80045aa <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8004594:	6839      	ldr	r1, [r7, #0]
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7ff ff66 	bl	8004468 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800459c:	20ff      	movs	r0, #255	@ 0xff
 800459e:	f7ff ff4d 	bl	800443c <xchg_spi>
 80045a2:	20ff      	movs	r0, #255	@ 0xff
 80045a4:	f7ff ff4a 	bl	800443c <xchg_spi>

	return 1;						/* Function succeeded */
 80045a8:	2301      	movs	r3, #1
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b084      	sub	sp, #16
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
 80045ba:	460b      	mov	r3, r1
 80045bc:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80045be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80045c2:	f7ff ff81 	bl	80044c8 <wait_ready>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <xmit_datablock+0x1e>
 80045cc:	2300      	movs	r3, #0
 80045ce:	e01e      	b.n	800460e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80045d0:	78fb      	ldrb	r3, [r7, #3]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7ff ff32 	bl	800443c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80045d8:	78fb      	ldrb	r3, [r7, #3]
 80045da:	2bfd      	cmp	r3, #253	@ 0xfd
 80045dc:	d016      	beq.n	800460c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80045de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7ff ff5c 	bl	80044a0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80045e8:	20ff      	movs	r0, #255	@ 0xff
 80045ea:	f7ff ff27 	bl	800443c <xchg_spi>
 80045ee:	20ff      	movs	r0, #255	@ 0xff
 80045f0:	f7ff ff24 	bl	800443c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80045f4:	20ff      	movs	r0, #255	@ 0xff
 80045f6:	f7ff ff21 	bl	800443c <xchg_spi>
 80045fa:	4603      	mov	r3, r0
 80045fc:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
 8004600:	f003 031f 	and.w	r3, r3, #31
 8004604:	2b05      	cmp	r3, #5
 8004606:	d001      	beq.n	800460c <xmit_datablock+0x5a>
 8004608:	2300      	movs	r3, #0
 800460a:	e000      	b.n	800460e <xmit_datablock+0x5c>
	}
	return 1;
 800460c:	2301      	movs	r3, #1
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b084      	sub	sp, #16
 800461a:	af00      	add	r7, sp, #0
 800461c:	4603      	mov	r3, r0
 800461e:	6039      	str	r1, [r7, #0]
 8004620:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8004622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004626:	2b00      	cmp	r3, #0
 8004628:	da0e      	bge.n	8004648 <send_cmd+0x32>
		cmd &= 0x7F;
 800462a:	79fb      	ldrb	r3, [r7, #7]
 800462c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004630:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8004632:	2100      	movs	r1, #0
 8004634:	2037      	movs	r0, #55	@ 0x37
 8004636:	f7ff ffee 	bl	8004616 <send_cmd>
 800463a:	4603      	mov	r3, r0
 800463c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800463e:	7bbb      	ldrb	r3, [r7, #14]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d901      	bls.n	8004648 <send_cmd+0x32>
 8004644:	7bbb      	ldrb	r3, [r7, #14]
 8004646:	e051      	b.n	80046ec <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8004648:	79fb      	ldrb	r3, [r7, #7]
 800464a:	2b0c      	cmp	r3, #12
 800464c:	d008      	beq.n	8004660 <send_cmd+0x4a>
		despiselect();
 800464e:	f7ff ff5f 	bl	8004510 <despiselect>
		if (!spiselect()) return 0xFF;
 8004652:	f7ff ff6b 	bl	800452c <spiselect>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <send_cmd+0x4a>
 800465c:	23ff      	movs	r3, #255	@ 0xff
 800465e:	e045      	b.n	80046ec <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8004660:	79fb      	ldrb	r3, [r7, #7]
 8004662:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004666:	b2db      	uxtb	r3, r3
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff fee7 	bl	800443c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	0e1b      	lsrs	r3, r3, #24
 8004672:	b2db      	uxtb	r3, r3
 8004674:	4618      	mov	r0, r3
 8004676:	f7ff fee1 	bl	800443c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	0c1b      	lsrs	r3, r3, #16
 800467e:	b2db      	uxtb	r3, r3
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff fedb 	bl	800443c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	0a1b      	lsrs	r3, r3, #8
 800468a:	b2db      	uxtb	r3, r3
 800468c:	4618      	mov	r0, r3
 800468e:	f7ff fed5 	bl	800443c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	b2db      	uxtb	r3, r3
 8004696:	4618      	mov	r0, r3
 8004698:	f7ff fed0 	bl	800443c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800469c:	2301      	movs	r3, #1
 800469e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80046a0:	79fb      	ldrb	r3, [r7, #7]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <send_cmd+0x94>
 80046a6:	2395      	movs	r3, #149	@ 0x95
 80046a8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80046aa:	79fb      	ldrb	r3, [r7, #7]
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	d101      	bne.n	80046b4 <send_cmd+0x9e>
 80046b0:	2387      	movs	r3, #135	@ 0x87
 80046b2:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80046b4:	7bfb      	ldrb	r3, [r7, #15]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff fec0 	bl	800443c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80046bc:	79fb      	ldrb	r3, [r7, #7]
 80046be:	2b0c      	cmp	r3, #12
 80046c0:	d102      	bne.n	80046c8 <send_cmd+0xb2>
 80046c2:	20ff      	movs	r0, #255	@ 0xff
 80046c4:	f7ff feba 	bl	800443c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80046c8:	230a      	movs	r3, #10
 80046ca:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80046cc:	20ff      	movs	r0, #255	@ 0xff
 80046ce:	f7ff feb5 	bl	800443c <xchg_spi>
 80046d2:	4603      	mov	r3, r0
 80046d4:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80046d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	da05      	bge.n	80046ea <send_cmd+0xd4>
 80046de:	7bfb      	ldrb	r3, [r7, #15]
 80046e0:	3b01      	subs	r3, #1
 80046e2:	73fb      	strb	r3, [r7, #15]
 80046e4:	7bfb      	ldrb	r3, [r7, #15]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1f0      	bne.n	80046cc <send_cmd+0xb6>

	return res;							/* Return received response */
 80046ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80046f4:	b590      	push	{r4, r7, lr}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	4603      	mov	r3, r0
 80046fc:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80046fe:	79fb      	ldrb	r3, [r7, #7]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <USER_SPI_initialize+0x14>
 8004704:	2301      	movs	r3, #1
 8004706:	e0d6      	b.n	80048b6 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8004708:	4b6d      	ldr	r3, [pc, #436]	@ (80048c0 <USER_SPI_initialize+0x1cc>)
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	b2db      	uxtb	r3, r3
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <USER_SPI_initialize+0x2a>
 8004716:	4b6a      	ldr	r3, [pc, #424]	@ (80048c0 <USER_SPI_initialize+0x1cc>)
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	b2db      	uxtb	r3, r3
 800471c:	e0cb      	b.n	80048b6 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800471e:	4b69      	ldr	r3, [pc, #420]	@ (80048c4 <USER_SPI_initialize+0x1d0>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8004728:	4b66      	ldr	r3, [pc, #408]	@ (80048c4 <USER_SPI_initialize+0x1d0>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8004730:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8004732:	230a      	movs	r3, #10
 8004734:	73fb      	strb	r3, [r7, #15]
 8004736:	e005      	b.n	8004744 <USER_SPI_initialize+0x50>
 8004738:	20ff      	movs	r0, #255	@ 0xff
 800473a:	f7ff fe7f 	bl	800443c <xchg_spi>
 800473e:	7bfb      	ldrb	r3, [r7, #15]
 8004740:	3b01      	subs	r3, #1
 8004742:	73fb      	strb	r3, [r7, #15]
 8004744:	7bfb      	ldrb	r3, [r7, #15]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1f6      	bne.n	8004738 <USER_SPI_initialize+0x44>

	ty = 0;
 800474a:	2300      	movs	r3, #0
 800474c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800474e:	2100      	movs	r1, #0
 8004750:	2000      	movs	r0, #0
 8004752:	f7ff ff60 	bl	8004616 <send_cmd>
 8004756:	4603      	mov	r3, r0
 8004758:	2b01      	cmp	r3, #1
 800475a:	f040 808b 	bne.w	8004874 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800475e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004762:	f7ff fe41 	bl	80043e8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8004766:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800476a:	2008      	movs	r0, #8
 800476c:	f7ff ff53 	bl	8004616 <send_cmd>
 8004770:	4603      	mov	r3, r0
 8004772:	2b01      	cmp	r3, #1
 8004774:	d151      	bne.n	800481a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8004776:	2300      	movs	r3, #0
 8004778:	73fb      	strb	r3, [r7, #15]
 800477a:	e00d      	b.n	8004798 <USER_SPI_initialize+0xa4>
 800477c:	7bfc      	ldrb	r4, [r7, #15]
 800477e:	20ff      	movs	r0, #255	@ 0xff
 8004780:	f7ff fe5c 	bl	800443c <xchg_spi>
 8004784:	4603      	mov	r3, r0
 8004786:	461a      	mov	r2, r3
 8004788:	f104 0310 	add.w	r3, r4, #16
 800478c:	443b      	add	r3, r7
 800478e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004792:	7bfb      	ldrb	r3, [r7, #15]
 8004794:	3301      	adds	r3, #1
 8004796:	73fb      	strb	r3, [r7, #15]
 8004798:	7bfb      	ldrb	r3, [r7, #15]
 800479a:	2b03      	cmp	r3, #3
 800479c:	d9ee      	bls.n	800477c <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800479e:	7abb      	ldrb	r3, [r7, #10]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d167      	bne.n	8004874 <USER_SPI_initialize+0x180>
 80047a4:	7afb      	ldrb	r3, [r7, #11]
 80047a6:	2baa      	cmp	r3, #170	@ 0xaa
 80047a8:	d164      	bne.n	8004874 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80047aa:	bf00      	nop
 80047ac:	f7ff fe30 	bl	8004410 <SPI_Timer_Status>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d007      	beq.n	80047c6 <USER_SPI_initialize+0xd2>
 80047b6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80047ba:	20a9      	movs	r0, #169	@ 0xa9
 80047bc:	f7ff ff2b 	bl	8004616 <send_cmd>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1f2      	bne.n	80047ac <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80047c6:	f7ff fe23 	bl	8004410 <SPI_Timer_Status>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d051      	beq.n	8004874 <USER_SPI_initialize+0x180>
 80047d0:	2100      	movs	r1, #0
 80047d2:	203a      	movs	r0, #58	@ 0x3a
 80047d4:	f7ff ff1f 	bl	8004616 <send_cmd>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d14a      	bne.n	8004874 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80047de:	2300      	movs	r3, #0
 80047e0:	73fb      	strb	r3, [r7, #15]
 80047e2:	e00d      	b.n	8004800 <USER_SPI_initialize+0x10c>
 80047e4:	7bfc      	ldrb	r4, [r7, #15]
 80047e6:	20ff      	movs	r0, #255	@ 0xff
 80047e8:	f7ff fe28 	bl	800443c <xchg_spi>
 80047ec:	4603      	mov	r3, r0
 80047ee:	461a      	mov	r2, r3
 80047f0:	f104 0310 	add.w	r3, r4, #16
 80047f4:	443b      	add	r3, r7
 80047f6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
 80047fc:	3301      	adds	r3, #1
 80047fe:	73fb      	strb	r3, [r7, #15]
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	2b03      	cmp	r3, #3
 8004804:	d9ee      	bls.n	80047e4 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8004806:	7a3b      	ldrb	r3, [r7, #8]
 8004808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <USER_SPI_initialize+0x120>
 8004810:	230c      	movs	r3, #12
 8004812:	e000      	b.n	8004816 <USER_SPI_initialize+0x122>
 8004814:	2304      	movs	r3, #4
 8004816:	737b      	strb	r3, [r7, #13]
 8004818:	e02c      	b.n	8004874 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800481a:	2100      	movs	r1, #0
 800481c:	20a9      	movs	r0, #169	@ 0xa9
 800481e:	f7ff fefa 	bl	8004616 <send_cmd>
 8004822:	4603      	mov	r3, r0
 8004824:	2b01      	cmp	r3, #1
 8004826:	d804      	bhi.n	8004832 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8004828:	2302      	movs	r3, #2
 800482a:	737b      	strb	r3, [r7, #13]
 800482c:	23a9      	movs	r3, #169	@ 0xa9
 800482e:	73bb      	strb	r3, [r7, #14]
 8004830:	e003      	b.n	800483a <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8004832:	2301      	movs	r3, #1
 8004834:	737b      	strb	r3, [r7, #13]
 8004836:	2301      	movs	r3, #1
 8004838:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800483a:	bf00      	nop
 800483c:	f7ff fde8 	bl	8004410 <SPI_Timer_Status>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d007      	beq.n	8004856 <USER_SPI_initialize+0x162>
 8004846:	7bbb      	ldrb	r3, [r7, #14]
 8004848:	2100      	movs	r1, #0
 800484a:	4618      	mov	r0, r3
 800484c:	f7ff fee3 	bl	8004616 <send_cmd>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1f2      	bne.n	800483c <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8004856:	f7ff fddb 	bl	8004410 <SPI_Timer_Status>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d007      	beq.n	8004870 <USER_SPI_initialize+0x17c>
 8004860:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004864:	2010      	movs	r0, #16
 8004866:	f7ff fed6 	bl	8004616 <send_cmd>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <USER_SPI_initialize+0x180>
				ty = 0;
 8004870:	2300      	movs	r3, #0
 8004872:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8004874:	4a14      	ldr	r2, [pc, #80]	@ (80048c8 <USER_SPI_initialize+0x1d4>)
 8004876:	7b7b      	ldrb	r3, [r7, #13]
 8004878:	7013      	strb	r3, [r2, #0]
	despiselect();
 800487a:	f7ff fe49 	bl	8004510 <despiselect>

	if (ty) {			/* OK */
 800487e:	7b7b      	ldrb	r3, [r7, #13]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d012      	beq.n	80048aa <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8004884:	4b0f      	ldr	r3, [pc, #60]	@ (80048c4 <USER_SPI_initialize+0x1d0>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800488e:	4b0d      	ldr	r3, [pc, #52]	@ (80048c4 <USER_SPI_initialize+0x1d0>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f042 0210 	orr.w	r2, r2, #16
 8004896:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8004898:	4b09      	ldr	r3, [pc, #36]	@ (80048c0 <USER_SPI_initialize+0x1cc>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	b2db      	uxtb	r3, r3
 800489e:	f023 0301 	bic.w	r3, r3, #1
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	4b06      	ldr	r3, [pc, #24]	@ (80048c0 <USER_SPI_initialize+0x1cc>)
 80048a6:	701a      	strb	r2, [r3, #0]
 80048a8:	e002      	b.n	80048b0 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80048aa:	4b05      	ldr	r3, [pc, #20]	@ (80048c0 <USER_SPI_initialize+0x1cc>)
 80048ac:	2201      	movs	r2, #1
 80048ae:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80048b0:	4b03      	ldr	r3, [pc, #12]	@ (80048c0 <USER_SPI_initialize+0x1cc>)
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	b2db      	uxtb	r3, r3
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd90      	pop	{r4, r7, pc}
 80048be:	bf00      	nop
 80048c0:	20000020 	.word	0x20000020
 80048c4:	200000a4 	.word	0x200000a4
 80048c8:	20000254 	.word	0x20000254

080048cc <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	4603      	mov	r3, r0
 80048d4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80048d6:	79fb      	ldrb	r3, [r7, #7]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <USER_SPI_status+0x14>
 80048dc:	2301      	movs	r3, #1
 80048de:	e002      	b.n	80048e6 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80048e0:	4b04      	ldr	r3, [pc, #16]	@ (80048f4 <USER_SPI_status+0x28>)
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	b2db      	uxtb	r3, r3
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	20000020 	.word	0x20000020

080048f8 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60b9      	str	r1, [r7, #8]
 8004900:	607a      	str	r2, [r7, #4]
 8004902:	603b      	str	r3, [r7, #0]
 8004904:	4603      	mov	r3, r0
 8004906:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004908:	7bfb      	ldrb	r3, [r7, #15]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d102      	bne.n	8004914 <USER_SPI_read+0x1c>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d101      	bne.n	8004918 <USER_SPI_read+0x20>
 8004914:	2304      	movs	r3, #4
 8004916:	e04d      	b.n	80049b4 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004918:	4b28      	ldr	r3, [pc, #160]	@ (80049bc <USER_SPI_read+0xc4>)
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	b2db      	uxtb	r3, r3
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <USER_SPI_read+0x32>
 8004926:	2303      	movs	r3, #3
 8004928:	e044      	b.n	80049b4 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800492a:	4b25      	ldr	r3, [pc, #148]	@ (80049c0 <USER_SPI_read+0xc8>)
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	f003 0308 	and.w	r3, r3, #8
 8004932:	2b00      	cmp	r3, #0
 8004934:	d102      	bne.n	800493c <USER_SPI_read+0x44>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	025b      	lsls	r3, r3, #9
 800493a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d111      	bne.n	8004966 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8004942:	6879      	ldr	r1, [r7, #4]
 8004944:	2011      	movs	r0, #17
 8004946:	f7ff fe66 	bl	8004616 <send_cmd>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d129      	bne.n	80049a4 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8004950:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004954:	68b8      	ldr	r0, [r7, #8]
 8004956:	f7ff fe03 	bl	8004560 <rcvr_datablock>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d021      	beq.n	80049a4 <USER_SPI_read+0xac>
			count = 0;
 8004960:	2300      	movs	r3, #0
 8004962:	603b      	str	r3, [r7, #0]
 8004964:	e01e      	b.n	80049a4 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8004966:	6879      	ldr	r1, [r7, #4]
 8004968:	2012      	movs	r0, #18
 800496a:	f7ff fe54 	bl	8004616 <send_cmd>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d117      	bne.n	80049a4 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8004974:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004978:	68b8      	ldr	r0, [r7, #8]
 800497a:	f7ff fdf1 	bl	8004560 <rcvr_datablock>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00a      	beq.n	800499a <USER_SPI_read+0xa2>
				buff += 512;
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800498a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	3b01      	subs	r3, #1
 8004990:	603b      	str	r3, [r7, #0]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1ed      	bne.n	8004974 <USER_SPI_read+0x7c>
 8004998:	e000      	b.n	800499c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800499a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800499c:	2100      	movs	r1, #0
 800499e:	200c      	movs	r0, #12
 80049a0:	f7ff fe39 	bl	8004616 <send_cmd>
		}
	}
	despiselect();
 80049a4:	f7ff fdb4 	bl	8004510 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	bf14      	ite	ne
 80049ae:	2301      	movne	r3, #1
 80049b0:	2300      	moveq	r3, #0
 80049b2:	b2db      	uxtb	r3, r3
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	20000020 	.word	0x20000020
 80049c0:	20000254 	.word	0x20000254

080049c4 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60b9      	str	r1, [r7, #8]
 80049cc:	607a      	str	r2, [r7, #4]
 80049ce:	603b      	str	r3, [r7, #0]
 80049d0:	4603      	mov	r3, r0
 80049d2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d102      	bne.n	80049e0 <USER_SPI_write+0x1c>
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <USER_SPI_write+0x20>
 80049e0:	2304      	movs	r3, #4
 80049e2:	e063      	b.n	8004aac <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80049e4:	4b33      	ldr	r3, [pc, #204]	@ (8004ab4 <USER_SPI_write+0xf0>)
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <USER_SPI_write+0x32>
 80049f2:	2303      	movs	r3, #3
 80049f4:	e05a      	b.n	8004aac <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80049f6:	4b2f      	ldr	r3, [pc, #188]	@ (8004ab4 <USER_SPI_write+0xf0>)
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	f003 0304 	and.w	r3, r3, #4
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <USER_SPI_write+0x44>
 8004a04:	2302      	movs	r3, #2
 8004a06:	e051      	b.n	8004aac <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8004a08:	4b2b      	ldr	r3, [pc, #172]	@ (8004ab8 <USER_SPI_write+0xf4>)
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	f003 0308 	and.w	r3, r3, #8
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d102      	bne.n	8004a1a <USER_SPI_write+0x56>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	025b      	lsls	r3, r3, #9
 8004a18:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d110      	bne.n	8004a42 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	2018      	movs	r0, #24
 8004a24:	f7ff fdf7 	bl	8004616 <send_cmd>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d136      	bne.n	8004a9c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8004a2e:	21fe      	movs	r1, #254	@ 0xfe
 8004a30:	68b8      	ldr	r0, [r7, #8]
 8004a32:	f7ff fdbe 	bl	80045b2 <xmit_datablock>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d02f      	beq.n	8004a9c <USER_SPI_write+0xd8>
			count = 0;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	603b      	str	r3, [r7, #0]
 8004a40:	e02c      	b.n	8004a9c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8004a42:	4b1d      	ldr	r3, [pc, #116]	@ (8004ab8 <USER_SPI_write+0xf4>)
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	f003 0306 	and.w	r3, r3, #6
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <USER_SPI_write+0x92>
 8004a4e:	6839      	ldr	r1, [r7, #0]
 8004a50:	2097      	movs	r0, #151	@ 0x97
 8004a52:	f7ff fde0 	bl	8004616 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	2019      	movs	r0, #25
 8004a5a:	f7ff fddc 	bl	8004616 <send_cmd>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d11b      	bne.n	8004a9c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8004a64:	21fc      	movs	r1, #252	@ 0xfc
 8004a66:	68b8      	ldr	r0, [r7, #8]
 8004a68:	f7ff fda3 	bl	80045b2 <xmit_datablock>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00a      	beq.n	8004a88 <USER_SPI_write+0xc4>
				buff += 512;
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004a78:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	603b      	str	r3, [r7, #0]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1ee      	bne.n	8004a64 <USER_SPI_write+0xa0>
 8004a86:	e000      	b.n	8004a8a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8004a88:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8004a8a:	21fd      	movs	r1, #253	@ 0xfd
 8004a8c:	2000      	movs	r0, #0
 8004a8e:	f7ff fd90 	bl	80045b2 <xmit_datablock>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <USER_SPI_write+0xd8>
 8004a98:	2301      	movs	r3, #1
 8004a9a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8004a9c:	f7ff fd38 	bl	8004510 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	bf14      	ite	ne
 8004aa6:	2301      	movne	r3, #1
 8004aa8:	2300      	moveq	r3, #0
 8004aaa:	b2db      	uxtb	r3, r3
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	20000020 	.word	0x20000020
 8004ab8:	20000254 	.word	0x20000254

08004abc <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b08c      	sub	sp, #48	@ 0x30
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	603a      	str	r2, [r7, #0]
 8004ac6:	71fb      	strb	r3, [r7, #7]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8004acc:	79fb      	ldrb	r3, [r7, #7]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <USER_SPI_ioctl+0x1a>
 8004ad2:	2304      	movs	r3, #4
 8004ad4:	e15a      	b.n	8004d8c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004ad6:	4baf      	ldr	r3, [pc, #700]	@ (8004d94 <USER_SPI_ioctl+0x2d8>)
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <USER_SPI_ioctl+0x2c>
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e151      	b.n	8004d8c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8004aee:	79bb      	ldrb	r3, [r7, #6]
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	f200 8136 	bhi.w	8004d62 <USER_SPI_ioctl+0x2a6>
 8004af6:	a201      	add	r2, pc, #4	@ (adr r2, 8004afc <USER_SPI_ioctl+0x40>)
 8004af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afc:	08004b11 	.word	0x08004b11
 8004b00:	08004b25 	.word	0x08004b25
 8004b04:	08004d63 	.word	0x08004d63
 8004b08:	08004bd1 	.word	0x08004bd1
 8004b0c:	08004cc7 	.word	0x08004cc7
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8004b10:	f7ff fd0c 	bl	800452c <spiselect>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f000 8127 	beq.w	8004d6a <USER_SPI_ioctl+0x2ae>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8004b22:	e122      	b.n	8004d6a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8004b24:	2100      	movs	r1, #0
 8004b26:	2009      	movs	r0, #9
 8004b28:	f7ff fd75 	bl	8004616 <send_cmd>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f040 811d 	bne.w	8004d6e <USER_SPI_ioctl+0x2b2>
 8004b34:	f107 030c 	add.w	r3, r7, #12
 8004b38:	2110      	movs	r1, #16
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7ff fd10 	bl	8004560 <rcvr_datablock>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f000 8113 	beq.w	8004d6e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8004b48:	7b3b      	ldrb	r3, [r7, #12]
 8004b4a:	099b      	lsrs	r3, r3, #6
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d111      	bne.n	8004b76 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8004b52:	7d7b      	ldrb	r3, [r7, #21]
 8004b54:	461a      	mov	r2, r3
 8004b56:	7d3b      	ldrb	r3, [r7, #20]
 8004b58:	021b      	lsls	r3, r3, #8
 8004b5a:	4413      	add	r3, r2
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	7cfb      	ldrb	r3, [r7, #19]
 8004b60:	041b      	lsls	r3, r3, #16
 8004b62:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8004b66:	4413      	add	r3, r2
 8004b68:	3301      	adds	r3, #1
 8004b6a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	029a      	lsls	r2, r3, #10
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	e028      	b.n	8004bc8 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004b76:	7c7b      	ldrb	r3, [r7, #17]
 8004b78:	f003 030f 	and.w	r3, r3, #15
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	7dbb      	ldrb	r3, [r7, #22]
 8004b80:	09db      	lsrs	r3, r3, #7
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	4413      	add	r3, r2
 8004b86:	b2da      	uxtb	r2, r3
 8004b88:	7d7b      	ldrb	r3, [r7, #21]
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	f003 0306 	and.w	r3, r3, #6
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	4413      	add	r3, r2
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	3302      	adds	r3, #2
 8004b9a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8004b9e:	7d3b      	ldrb	r3, [r7, #20]
 8004ba0:	099b      	lsrs	r3, r3, #6
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	7cfb      	ldrb	r3, [r7, #19]
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	441a      	add	r2, r3
 8004bac:	7cbb      	ldrb	r3, [r7, #18]
 8004bae:	029b      	lsls	r3, r3, #10
 8004bb0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004bb4:	4413      	add	r3, r2
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8004bba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004bbe:	3b09      	subs	r3, #9
 8004bc0:	69fa      	ldr	r2, [r7, #28]
 8004bc2:	409a      	lsls	r2, r3
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8004bce:	e0ce      	b.n	8004d6e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8004bd0:	4b71      	ldr	r3, [pc, #452]	@ (8004d98 <USER_SPI_ioctl+0x2dc>)
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d031      	beq.n	8004c40 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8004bdc:	2100      	movs	r1, #0
 8004bde:	208d      	movs	r0, #141	@ 0x8d
 8004be0:	f7ff fd19 	bl	8004616 <send_cmd>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f040 80c3 	bne.w	8004d72 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8004bec:	20ff      	movs	r0, #255	@ 0xff
 8004bee:	f7ff fc25 	bl	800443c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8004bf2:	f107 030c 	add.w	r3, r7, #12
 8004bf6:	2110      	movs	r1, #16
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7ff fcb1 	bl	8004560 <rcvr_datablock>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 80b6 	beq.w	8004d72 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8004c06:	2330      	movs	r3, #48	@ 0x30
 8004c08:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8004c0c:	e007      	b.n	8004c1e <USER_SPI_ioctl+0x162>
 8004c0e:	20ff      	movs	r0, #255	@ 0xff
 8004c10:	f7ff fc14 	bl	800443c <xchg_spi>
 8004c14:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8004c1e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1f3      	bne.n	8004c0e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8004c26:	7dbb      	ldrb	r3, [r7, #22]
 8004c28:	091b      	lsrs	r3, r3, #4
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	2310      	movs	r3, #16
 8004c30:	fa03 f202 	lsl.w	r2, r3, r2
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8004c3e:	e098      	b.n	8004d72 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8004c40:	2100      	movs	r1, #0
 8004c42:	2009      	movs	r0, #9
 8004c44:	f7ff fce7 	bl	8004616 <send_cmd>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f040 8091 	bne.w	8004d72 <USER_SPI_ioctl+0x2b6>
 8004c50:	f107 030c 	add.w	r3, r7, #12
 8004c54:	2110      	movs	r1, #16
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7ff fc82 	bl	8004560 <rcvr_datablock>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 8087 	beq.w	8004d72 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8004c64:	4b4c      	ldr	r3, [pc, #304]	@ (8004d98 <USER_SPI_ioctl+0x2dc>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d012      	beq.n	8004c96 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8004c70:	7dbb      	ldrb	r3, [r7, #22]
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8004c78:	7dfa      	ldrb	r2, [r7, #23]
 8004c7a:	09d2      	lsrs	r2, r2, #7
 8004c7c:	b2d2      	uxtb	r2, r2
 8004c7e:	4413      	add	r3, r2
 8004c80:	1c5a      	adds	r2, r3, #1
 8004c82:	7e7b      	ldrb	r3, [r7, #25]
 8004c84:	099b      	lsrs	r3, r3, #6
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8e:	461a      	mov	r2, r3
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	e013      	b.n	8004cbe <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8004c96:	7dbb      	ldrb	r3, [r7, #22]
 8004c98:	109b      	asrs	r3, r3, #2
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	f003 031f 	and.w	r3, r3, #31
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	7dfa      	ldrb	r2, [r7, #23]
 8004ca4:	00d2      	lsls	r2, r2, #3
 8004ca6:	f002 0218 	and.w	r2, r2, #24
 8004caa:	7df9      	ldrb	r1, [r7, #23]
 8004cac:	0949      	lsrs	r1, r1, #5
 8004cae:	b2c9      	uxtb	r1, r1
 8004cb0:	440a      	add	r2, r1
 8004cb2:	3201      	adds	r2, #1
 8004cb4:	fb02 f303 	mul.w	r3, r2, r3
 8004cb8:	461a      	mov	r2, r3
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8004cc4:	e055      	b.n	8004d72 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004cc6:	4b34      	ldr	r3, [pc, #208]	@ (8004d98 <USER_SPI_ioctl+0x2dc>)
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	f003 0306 	and.w	r3, r3, #6
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d051      	beq.n	8004d76 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004cd2:	f107 020c 	add.w	r2, r7, #12
 8004cd6:	79fb      	ldrb	r3, [r7, #7]
 8004cd8:	210b      	movs	r1, #11
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7ff feee 	bl	8004abc <USER_SPI_ioctl>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d149      	bne.n	8004d7a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004ce6:	7b3b      	ldrb	r3, [r7, #12]
 8004ce8:	099b      	lsrs	r3, r3, #6
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d104      	bne.n	8004cfa <USER_SPI_ioctl+0x23e>
 8004cf0:	7dbb      	ldrb	r3, [r7, #22]
 8004cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d041      	beq.n	8004d7e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	623b      	str	r3, [r7, #32]
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d04:	6a3b      	ldr	r3, [r7, #32]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8004d0a:	4b23      	ldr	r3, [pc, #140]	@ (8004d98 <USER_SPI_ioctl+0x2dc>)
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	f003 0308 	and.w	r3, r3, #8
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d105      	bne.n	8004d22 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8004d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d18:	025b      	lsls	r3, r3, #9
 8004d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1e:	025b      	lsls	r3, r3, #9
 8004d20:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8004d22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d24:	2020      	movs	r0, #32
 8004d26:	f7ff fc76 	bl	8004616 <send_cmd>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d128      	bne.n	8004d82 <USER_SPI_ioctl+0x2c6>
 8004d30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d32:	2021      	movs	r0, #33	@ 0x21
 8004d34:	f7ff fc6f 	bl	8004616 <send_cmd>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d121      	bne.n	8004d82 <USER_SPI_ioctl+0x2c6>
 8004d3e:	2100      	movs	r1, #0
 8004d40:	2026      	movs	r0, #38	@ 0x26
 8004d42:	f7ff fc68 	bl	8004616 <send_cmd>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d11a      	bne.n	8004d82 <USER_SPI_ioctl+0x2c6>
 8004d4c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8004d50:	f7ff fbba 	bl	80044c8 <wait_ready>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d013      	beq.n	8004d82 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8004d60:	e00f      	b.n	8004d82 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8004d62:	2304      	movs	r3, #4
 8004d64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004d68:	e00c      	b.n	8004d84 <USER_SPI_ioctl+0x2c8>
		break;
 8004d6a:	bf00      	nop
 8004d6c:	e00a      	b.n	8004d84 <USER_SPI_ioctl+0x2c8>
		break;
 8004d6e:	bf00      	nop
 8004d70:	e008      	b.n	8004d84 <USER_SPI_ioctl+0x2c8>
		break;
 8004d72:	bf00      	nop
 8004d74:	e006      	b.n	8004d84 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004d76:	bf00      	nop
 8004d78:	e004      	b.n	8004d84 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004d7a:	bf00      	nop
 8004d7c:	e002      	b.n	8004d84 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004d7e:	bf00      	nop
 8004d80:	e000      	b.n	8004d84 <USER_SPI_ioctl+0x2c8>
		break;
 8004d82:	bf00      	nop
	}

	despiselect();
 8004d84:	f7ff fbc4 	bl	8004510 <despiselect>

	return res;
 8004d88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3730      	adds	r7, #48	@ 0x30
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	20000020 	.word	0x20000020
 8004d98:	20000254 	.word	0x20000254

08004d9c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	4603      	mov	r3, r0
 8004da4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004da6:	79fb      	ldrb	r3, [r7, #7]
 8004da8:	4a08      	ldr	r2, [pc, #32]	@ (8004dcc <disk_status+0x30>)
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4413      	add	r3, r2
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	79fa      	ldrb	r2, [r7, #7]
 8004db4:	4905      	ldr	r1, [pc, #20]	@ (8004dcc <disk_status+0x30>)
 8004db6:	440a      	add	r2, r1
 8004db8:	7a12      	ldrb	r2, [r2, #8]
 8004dba:	4610      	mov	r0, r2
 8004dbc:	4798      	blx	r3
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	20000288 	.word	0x20000288

08004dd0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004dde:	79fb      	ldrb	r3, [r7, #7]
 8004de0:	4a0e      	ldr	r2, [pc, #56]	@ (8004e1c <disk_initialize+0x4c>)
 8004de2:	5cd3      	ldrb	r3, [r2, r3]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d114      	bne.n	8004e12 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004de8:	79fb      	ldrb	r3, [r7, #7]
 8004dea:	4a0c      	ldr	r2, [pc, #48]	@ (8004e1c <disk_initialize+0x4c>)
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	79fa      	ldrb	r2, [r7, #7]
 8004df6:	4909      	ldr	r1, [pc, #36]	@ (8004e1c <disk_initialize+0x4c>)
 8004df8:	440a      	add	r2, r1
 8004dfa:	7a12      	ldrb	r2, [r2, #8]
 8004dfc:	4610      	mov	r0, r2
 8004dfe:	4798      	blx	r3
 8004e00:	4603      	mov	r3, r0
 8004e02:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8004e04:	7bfb      	ldrb	r3, [r7, #15]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d103      	bne.n	8004e12 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8004e0a:	79fb      	ldrb	r3, [r7, #7]
 8004e0c:	4a03      	ldr	r2, [pc, #12]	@ (8004e1c <disk_initialize+0x4c>)
 8004e0e:	2101      	movs	r1, #1
 8004e10:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8004e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	20000288 	.word	0x20000288

08004e20 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004e20:	b590      	push	{r4, r7, lr}
 8004e22:	b087      	sub	sp, #28
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60b9      	str	r1, [r7, #8]
 8004e28:	607a      	str	r2, [r7, #4]
 8004e2a:	603b      	str	r3, [r7, #0]
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
 8004e32:	4a0a      	ldr	r2, [pc, #40]	@ (8004e5c <disk_read+0x3c>)
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	689c      	ldr	r4, [r3, #8]
 8004e3c:	7bfb      	ldrb	r3, [r7, #15]
 8004e3e:	4a07      	ldr	r2, [pc, #28]	@ (8004e5c <disk_read+0x3c>)
 8004e40:	4413      	add	r3, r2
 8004e42:	7a18      	ldrb	r0, [r3, #8]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	68b9      	ldr	r1, [r7, #8]
 8004e4a:	47a0      	blx	r4
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	371c      	adds	r7, #28
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd90      	pop	{r4, r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20000288 	.word	0x20000288

08004e60 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004e60:	b590      	push	{r4, r7, lr}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60b9      	str	r1, [r7, #8]
 8004e68:	607a      	str	r2, [r7, #4]
 8004e6a:	603b      	str	r3, [r7, #0]
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004e70:	7bfb      	ldrb	r3, [r7, #15]
 8004e72:	4a0a      	ldr	r2, [pc, #40]	@ (8004e9c <disk_write+0x3c>)
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4413      	add	r3, r2
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	68dc      	ldr	r4, [r3, #12]
 8004e7c:	7bfb      	ldrb	r3, [r7, #15]
 8004e7e:	4a07      	ldr	r2, [pc, #28]	@ (8004e9c <disk_write+0x3c>)
 8004e80:	4413      	add	r3, r2
 8004e82:	7a18      	ldrb	r0, [r3, #8]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	68b9      	ldr	r1, [r7, #8]
 8004e8a:	47a0      	blx	r4
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	371c      	adds	r7, #28
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd90      	pop	{r4, r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	20000288 	.word	0x20000288

08004ea0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004eb0:	89fb      	ldrh	r3, [r7, #14]
 8004eb2:	021b      	lsls	r3, r3, #8
 8004eb4:	b21a      	sxth	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	b21b      	sxth	r3, r3
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	b21b      	sxth	r3, r3
 8004ec0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004ec2:	89fb      	ldrh	r3, [r7, #14]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3714      	adds	r7, #20
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	3303      	adds	r3, #3
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	021b      	lsls	r3, r3, #8
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	3202      	adds	r2, #2
 8004ee8:	7812      	ldrb	r2, [r2, #0]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	021b      	lsls	r3, r3, #8
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	3201      	adds	r2, #1
 8004ef6:	7812      	ldrb	r2, [r2, #0]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	021b      	lsls	r3, r3, #8
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	7812      	ldrb	r2, [r2, #0]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]
	return rv;
 8004f08:	68fb      	ldr	r3, [r7, #12]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr

08004f16 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004f16:	b480      	push	{r7}
 8004f18:	b083      	sub	sp, #12
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
 8004f1e:	460b      	mov	r3, r1
 8004f20:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	607a      	str	r2, [r7, #4]
 8004f28:	887a      	ldrh	r2, [r7, #2]
 8004f2a:	b2d2      	uxtb	r2, r2
 8004f2c:	701a      	strb	r2, [r3, #0]
 8004f2e:	887b      	ldrh	r3, [r7, #2]
 8004f30:	0a1b      	lsrs	r3, r3, #8
 8004f32:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	1c5a      	adds	r2, r3, #1
 8004f38:	607a      	str	r2, [r7, #4]
 8004f3a:	887a      	ldrh	r2, [r7, #2]
 8004f3c:	b2d2      	uxtb	r2, r2
 8004f3e:	701a      	strb	r2, [r3, #0]
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	1c5a      	adds	r2, r3, #1
 8004f5a:	607a      	str	r2, [r7, #4]
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	b2d2      	uxtb	r2, r2
 8004f60:	701a      	strb	r2, [r3, #0]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	0a1b      	lsrs	r3, r3, #8
 8004f66:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	1c5a      	adds	r2, r3, #1
 8004f6c:	607a      	str	r2, [r7, #4]
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	b2d2      	uxtb	r2, r2
 8004f72:	701a      	strb	r2, [r3, #0]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	0a1b      	lsrs	r3, r3, #8
 8004f78:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	1c5a      	adds	r2, r3, #1
 8004f7e:	607a      	str	r2, [r7, #4]
 8004f80:	683a      	ldr	r2, [r7, #0]
 8004f82:	b2d2      	uxtb	r2, r2
 8004f84:	701a      	strb	r2, [r3, #0]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	0a1b      	lsrs	r3, r3, #8
 8004f8a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	1c5a      	adds	r2, r3, #1
 8004f90:	607a      	str	r2, [r7, #4]
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	b2d2      	uxtb	r2, r2
 8004f96:	701a      	strb	r2, [r3, #0]
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00d      	beq.n	8004fda <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	1c53      	adds	r3, r2, #1
 8004fc2:	613b      	str	r3, [r7, #16]
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	1c59      	adds	r1, r3, #1
 8004fc8:	6179      	str	r1, [r7, #20]
 8004fca:	7812      	ldrb	r2, [r2, #0]
 8004fcc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	607b      	str	r3, [r7, #4]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1f1      	bne.n	8004fbe <mem_cpy+0x1a>
	}
}
 8004fda:	bf00      	nop
 8004fdc:	371c      	adds	r7, #28
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004fe6:	b480      	push	{r7}
 8004fe8:	b087      	sub	sp, #28
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	60f8      	str	r0, [r7, #12]
 8004fee:	60b9      	str	r1, [r7, #8]
 8004ff0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	1c5a      	adds	r2, r3, #1
 8004ffa:	617a      	str	r2, [r7, #20]
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	b2d2      	uxtb	r2, r2
 8005000:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	3b01      	subs	r3, #1
 8005006:	607b      	str	r3, [r7, #4]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1f3      	bne.n	8004ff6 <mem_set+0x10>
}
 800500e:	bf00      	nop
 8005010:	bf00      	nop
 8005012:	371c      	adds	r7, #28
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800501c:	b480      	push	{r7}
 800501e:	b089      	sub	sp, #36	@ 0x24
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	61fb      	str	r3, [r7, #28]
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005030:	2300      	movs	r3, #0
 8005032:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	1c5a      	adds	r2, r3, #1
 8005038:	61fa      	str	r2, [r7, #28]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	4619      	mov	r1, r3
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	61ba      	str	r2, [r7, #24]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	1acb      	subs	r3, r1, r3
 8005048:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	3b01      	subs	r3, #1
 800504e:	607b      	str	r3, [r7, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d002      	beq.n	800505c <mem_cmp+0x40>
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d0eb      	beq.n	8005034 <mem_cmp+0x18>

	return r;
 800505c:	697b      	ldr	r3, [r7, #20]
}
 800505e:	4618      	mov	r0, r3
 8005060:	3724      	adds	r7, #36	@ 0x24
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
 8005072:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005074:	e002      	b.n	800507c <chk_chr+0x12>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	3301      	adds	r3, #1
 800507a:	607b      	str	r3, [r7, #4]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d005      	beq.n	8005090 <chk_chr+0x26>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	461a      	mov	r2, r3
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	4293      	cmp	r3, r2
 800508e:	d1f2      	bne.n	8005076 <chk_chr+0xc>
	return *str;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	781b      	ldrb	r3, [r3, #0]
}
 8005094:	4618      	mov	r0, r3
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80050aa:	2300      	movs	r3, #0
 80050ac:	60bb      	str	r3, [r7, #8]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	60fb      	str	r3, [r7, #12]
 80050b2:	e029      	b.n	8005108 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80050b4:	4a27      	ldr	r2, [pc, #156]	@ (8005154 <chk_lock+0xb4>)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	011b      	lsls	r3, r3, #4
 80050ba:	4413      	add	r3, r2
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d01d      	beq.n	80050fe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80050c2:	4a24      	ldr	r2, [pc, #144]	@ (8005154 <chk_lock+0xb4>)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	011b      	lsls	r3, r3, #4
 80050c8:	4413      	add	r3, r2
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d116      	bne.n	8005102 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80050d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005154 <chk_lock+0xb4>)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	011b      	lsls	r3, r3, #4
 80050da:	4413      	add	r3, r2
 80050dc:	3304      	adds	r3, #4
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d10c      	bne.n	8005102 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80050e8:	4a1a      	ldr	r2, [pc, #104]	@ (8005154 <chk_lock+0xb4>)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	011b      	lsls	r3, r3, #4
 80050ee:	4413      	add	r3, r2
 80050f0:	3308      	adds	r3, #8
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d102      	bne.n	8005102 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80050fc:	e007      	b.n	800510e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80050fe:	2301      	movs	r3, #1
 8005100:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	3301      	adds	r3, #1
 8005106:	60fb      	str	r3, [r7, #12]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d9d2      	bls.n	80050b4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2b02      	cmp	r3, #2
 8005112:	d109      	bne.n	8005128 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d102      	bne.n	8005120 <chk_lock+0x80>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b02      	cmp	r3, #2
 800511e:	d101      	bne.n	8005124 <chk_lock+0x84>
 8005120:	2300      	movs	r3, #0
 8005122:	e010      	b.n	8005146 <chk_lock+0xa6>
 8005124:	2312      	movs	r3, #18
 8005126:	e00e      	b.n	8005146 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d108      	bne.n	8005140 <chk_lock+0xa0>
 800512e:	4a09      	ldr	r2, [pc, #36]	@ (8005154 <chk_lock+0xb4>)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	011b      	lsls	r3, r3, #4
 8005134:	4413      	add	r3, r2
 8005136:	330c      	adds	r3, #12
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800513e:	d101      	bne.n	8005144 <chk_lock+0xa4>
 8005140:	2310      	movs	r3, #16
 8005142:	e000      	b.n	8005146 <chk_lock+0xa6>
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	20000268 	.word	0x20000268

08005158 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800515e:	2300      	movs	r3, #0
 8005160:	607b      	str	r3, [r7, #4]
 8005162:	e002      	b.n	800516a <enq_lock+0x12>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	3301      	adds	r3, #1
 8005168:	607b      	str	r3, [r7, #4]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d806      	bhi.n	800517e <enq_lock+0x26>
 8005170:	4a09      	ldr	r2, [pc, #36]	@ (8005198 <enq_lock+0x40>)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	4413      	add	r3, r2
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1f2      	bne.n	8005164 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b02      	cmp	r3, #2
 8005182:	bf14      	ite	ne
 8005184:	2301      	movne	r3, #1
 8005186:	2300      	moveq	r3, #0
 8005188:	b2db      	uxtb	r3, r3
}
 800518a:	4618      	mov	r0, r3
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	20000268 	.word	0x20000268

0800519c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80051a6:	2300      	movs	r3, #0
 80051a8:	60fb      	str	r3, [r7, #12]
 80051aa:	e01f      	b.n	80051ec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80051ac:	4a41      	ldr	r2, [pc, #260]	@ (80052b4 <inc_lock+0x118>)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	4413      	add	r3, r2
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d113      	bne.n	80051e6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80051be:	4a3d      	ldr	r2, [pc, #244]	@ (80052b4 <inc_lock+0x118>)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	011b      	lsls	r3, r3, #4
 80051c4:	4413      	add	r3, r2
 80051c6:	3304      	adds	r3, #4
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d109      	bne.n	80051e6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80051d2:	4a38      	ldr	r2, [pc, #224]	@ (80052b4 <inc_lock+0x118>)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	011b      	lsls	r3, r3, #4
 80051d8:	4413      	add	r3, r2
 80051da:	3308      	adds	r3, #8
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d006      	beq.n	80051f4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	3301      	adds	r3, #1
 80051ea:	60fb      	str	r3, [r7, #12]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d9dc      	bls.n	80051ac <inc_lock+0x10>
 80051f2:	e000      	b.n	80051f6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80051f4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d132      	bne.n	8005262 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80051fc:	2300      	movs	r3, #0
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	e002      	b.n	8005208 <inc_lock+0x6c>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	3301      	adds	r3, #1
 8005206:	60fb      	str	r3, [r7, #12]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d806      	bhi.n	800521c <inc_lock+0x80>
 800520e:	4a29      	ldr	r2, [pc, #164]	@ (80052b4 <inc_lock+0x118>)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	011b      	lsls	r3, r3, #4
 8005214:	4413      	add	r3, r2
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1f2      	bne.n	8005202 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2b02      	cmp	r3, #2
 8005220:	d101      	bne.n	8005226 <inc_lock+0x8a>
 8005222:	2300      	movs	r3, #0
 8005224:	e040      	b.n	80052a8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	4922      	ldr	r1, [pc, #136]	@ (80052b4 <inc_lock+0x118>)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	011b      	lsls	r3, r3, #4
 8005230:	440b      	add	r3, r1
 8005232:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	491e      	ldr	r1, [pc, #120]	@ (80052b4 <inc_lock+0x118>)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	011b      	lsls	r3, r3, #4
 800523e:	440b      	add	r3, r1
 8005240:	3304      	adds	r3, #4
 8005242:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	695a      	ldr	r2, [r3, #20]
 8005248:	491a      	ldr	r1, [pc, #104]	@ (80052b4 <inc_lock+0x118>)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	011b      	lsls	r3, r3, #4
 800524e:	440b      	add	r3, r1
 8005250:	3308      	adds	r3, #8
 8005252:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005254:	4a17      	ldr	r2, [pc, #92]	@ (80052b4 <inc_lock+0x118>)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	011b      	lsls	r3, r3, #4
 800525a:	4413      	add	r3, r2
 800525c:	330c      	adds	r3, #12
 800525e:	2200      	movs	r2, #0
 8005260:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d009      	beq.n	800527c <inc_lock+0xe0>
 8005268:	4a12      	ldr	r2, [pc, #72]	@ (80052b4 <inc_lock+0x118>)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	011b      	lsls	r3, r3, #4
 800526e:	4413      	add	r3, r2
 8005270:	330c      	adds	r3, #12
 8005272:	881b      	ldrh	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d001      	beq.n	800527c <inc_lock+0xe0>
 8005278:	2300      	movs	r3, #0
 800527a:	e015      	b.n	80052a8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d108      	bne.n	8005294 <inc_lock+0xf8>
 8005282:	4a0c      	ldr	r2, [pc, #48]	@ (80052b4 <inc_lock+0x118>)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	011b      	lsls	r3, r3, #4
 8005288:	4413      	add	r3, r2
 800528a:	330c      	adds	r3, #12
 800528c:	881b      	ldrh	r3, [r3, #0]
 800528e:	3301      	adds	r3, #1
 8005290:	b29a      	uxth	r2, r3
 8005292:	e001      	b.n	8005298 <inc_lock+0xfc>
 8005294:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005298:	4906      	ldr	r1, [pc, #24]	@ (80052b4 <inc_lock+0x118>)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	011b      	lsls	r3, r3, #4
 800529e:	440b      	add	r3, r1
 80052a0:	330c      	adds	r3, #12
 80052a2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	3301      	adds	r3, #1
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	20000268 	.word	0x20000268

080052b8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80052c0:	2300      	movs	r3, #0
 80052c2:	60fb      	str	r3, [r7, #12]
 80052c4:	e010      	b.n	80052e8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80052c6:	4a0d      	ldr	r2, [pc, #52]	@ (80052fc <clear_lock+0x44>)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	011b      	lsls	r3, r3, #4
 80052cc:	4413      	add	r3, r2
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d105      	bne.n	80052e2 <clear_lock+0x2a>
 80052d6:	4a09      	ldr	r2, [pc, #36]	@ (80052fc <clear_lock+0x44>)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	4413      	add	r3, r2
 80052de:	2200      	movs	r2, #0
 80052e0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	3301      	adds	r3, #1
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d9eb      	bls.n	80052c6 <clear_lock+0xe>
	}
}
 80052ee:	bf00      	nop
 80052f0:	bf00      	nop
 80052f2:	3714      	adds	r7, #20
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr
 80052fc:	20000268 	.word	0x20000268

08005300 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005308:	2300      	movs	r3, #0
 800530a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	78db      	ldrb	r3, [r3, #3]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d034      	beq.n	800537e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005318:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	7858      	ldrb	r0, [r3, #1]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005324:	2301      	movs	r3, #1
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	f7ff fd9a 	bl	8004e60 <disk_write>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d002      	beq.n	8005338 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005332:	2301      	movs	r3, #1
 8005334:	73fb      	strb	r3, [r7, #15]
 8005336:	e022      	b.n	800537e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	1ad2      	subs	r2, r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	429a      	cmp	r2, r3
 800534c:	d217      	bcs.n	800537e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	789b      	ldrb	r3, [r3, #2]
 8005352:	613b      	str	r3, [r7, #16]
 8005354:	e010      	b.n	8005378 <sync_window+0x78>
					wsect += fs->fsize;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	4413      	add	r3, r2
 800535e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	7858      	ldrb	r0, [r3, #1]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800536a:	2301      	movs	r3, #1
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	f7ff fd77 	bl	8004e60 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	3b01      	subs	r3, #1
 8005376:	613b      	str	r3, [r7, #16]
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d8eb      	bhi.n	8005356 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800537e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005380:	4618      	mov	r0, r3
 8005382:	3718      	adds	r7, #24
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005392:	2300      	movs	r3, #0
 8005394:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	429a      	cmp	r2, r3
 800539e:	d01b      	beq.n	80053d8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f7ff ffad 	bl	8005300 <sync_window>
 80053a6:	4603      	mov	r3, r0
 80053a8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80053aa:	7bfb      	ldrb	r3, [r7, #15]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d113      	bne.n	80053d8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	7858      	ldrb	r0, [r3, #1]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80053ba:	2301      	movs	r3, #1
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	f7ff fd2f 	bl	8004e20 <disk_read>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d004      	beq.n	80053d2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80053c8:	f04f 33ff 	mov.w	r3, #4294967295
 80053cc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80053d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b083      	sub	sp, #12
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
 80053ea:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	3b02      	subs	r3, #2
 80053f0:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	3b02      	subs	r3, #2
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d301      	bcc.n	8005402 <clust2sect+0x20>
 80053fe:	2300      	movs	r3, #0
 8005400:	e008      	b.n	8005414 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	895b      	ldrh	r3, [r3, #10]
 8005406:	461a      	mov	r2, r3
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	fb03 f202 	mul.w	r2, r3, r2
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005412:	4413      	add	r3, r2
}
 8005414:	4618      	mov	r0, r3
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d904      	bls.n	8005440 <get_fat+0x20>
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	429a      	cmp	r2, r3
 800543e:	d302      	bcc.n	8005446 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005440:	2301      	movs	r3, #1
 8005442:	617b      	str	r3, [r7, #20]
 8005444:	e08e      	b.n	8005564 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005446:	f04f 33ff 	mov.w	r3, #4294967295
 800544a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	2b03      	cmp	r3, #3
 8005452:	d061      	beq.n	8005518 <get_fat+0xf8>
 8005454:	2b03      	cmp	r3, #3
 8005456:	dc7b      	bgt.n	8005550 <get_fat+0x130>
 8005458:	2b01      	cmp	r3, #1
 800545a:	d002      	beq.n	8005462 <get_fat+0x42>
 800545c:	2b02      	cmp	r3, #2
 800545e:	d041      	beq.n	80054e4 <get_fat+0xc4>
 8005460:	e076      	b.n	8005550 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	60fb      	str	r3, [r7, #12]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	085b      	lsrs	r3, r3, #1
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	4413      	add	r3, r2
 800546e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	6a1a      	ldr	r2, [r3, #32]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	0a5b      	lsrs	r3, r3, #9
 8005478:	4413      	add	r3, r2
 800547a:	4619      	mov	r1, r3
 800547c:	6938      	ldr	r0, [r7, #16]
 800547e:	f7ff ff83 	bl	8005388 <move_window>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d166      	bne.n	8005556 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	1c5a      	adds	r2, r3, #1
 800548c:	60fa      	str	r2, [r7, #12]
 800548e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	4413      	add	r3, r2
 8005496:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800549a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	6a1a      	ldr	r2, [r3, #32]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	0a5b      	lsrs	r3, r3, #9
 80054a4:	4413      	add	r3, r2
 80054a6:	4619      	mov	r1, r3
 80054a8:	6938      	ldr	r0, [r7, #16]
 80054aa:	f7ff ff6d 	bl	8005388 <move_window>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d152      	bne.n	800555a <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	4413      	add	r3, r2
 80054be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80054c2:	021b      	lsls	r3, r3, #8
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <get_fat+0xba>
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	091b      	lsrs	r3, r3, #4
 80054d8:	e002      	b.n	80054e0 <get_fat+0xc0>
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054e0:	617b      	str	r3, [r7, #20]
			break;
 80054e2:	e03f      	b.n	8005564 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	6a1a      	ldr	r2, [r3, #32]
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	0a1b      	lsrs	r3, r3, #8
 80054ec:	4413      	add	r3, r2
 80054ee:	4619      	mov	r1, r3
 80054f0:	6938      	ldr	r0, [r7, #16]
 80054f2:	f7ff ff49 	bl	8005388 <move_window>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d130      	bne.n	800555e <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800550a:	4413      	add	r3, r2
 800550c:	4618      	mov	r0, r3
 800550e:	f7ff fcc7 	bl	8004ea0 <ld_word>
 8005512:	4603      	mov	r3, r0
 8005514:	617b      	str	r3, [r7, #20]
			break;
 8005516:	e025      	b.n	8005564 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	6a1a      	ldr	r2, [r3, #32]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	09db      	lsrs	r3, r3, #7
 8005520:	4413      	add	r3, r2
 8005522:	4619      	mov	r1, r3
 8005524:	6938      	ldr	r0, [r7, #16]
 8005526:	f7ff ff2f 	bl	8005388 <move_window>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d118      	bne.n	8005562 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800553e:	4413      	add	r3, r2
 8005540:	4618      	mov	r0, r3
 8005542:	f7ff fcc5 	bl	8004ed0 <ld_dword>
 8005546:	4603      	mov	r3, r0
 8005548:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800554c:	617b      	str	r3, [r7, #20]
			break;
 800554e:	e009      	b.n	8005564 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005550:	2301      	movs	r3, #1
 8005552:	617b      	str	r3, [r7, #20]
 8005554:	e006      	b.n	8005564 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005556:	bf00      	nop
 8005558:	e004      	b.n	8005564 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800555a:	bf00      	nop
 800555c:	e002      	b.n	8005564 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800555e:	bf00      	nop
 8005560:	e000      	b.n	8005564 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005562:	bf00      	nop
		}
	}

	return val;
 8005564:	697b      	ldr	r3, [r7, #20]
}
 8005566:	4618      	mov	r0, r3
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800556e:	b590      	push	{r4, r7, lr}
 8005570:	b089      	sub	sp, #36	@ 0x24
 8005572:	af00      	add	r7, sp, #0
 8005574:	60f8      	str	r0, [r7, #12]
 8005576:	60b9      	str	r1, [r7, #8]
 8005578:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800557a:	2302      	movs	r3, #2
 800557c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	2b01      	cmp	r3, #1
 8005582:	f240 80d9 	bls.w	8005738 <put_fat+0x1ca>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	429a      	cmp	r2, r3
 800558e:	f080 80d3 	bcs.w	8005738 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	2b03      	cmp	r3, #3
 8005598:	f000 8096 	beq.w	80056c8 <put_fat+0x15a>
 800559c:	2b03      	cmp	r3, #3
 800559e:	f300 80cb 	bgt.w	8005738 <put_fat+0x1ca>
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d002      	beq.n	80055ac <put_fat+0x3e>
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d06e      	beq.n	8005688 <put_fat+0x11a>
 80055aa:	e0c5      	b.n	8005738 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	61bb      	str	r3, [r7, #24]
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	085b      	lsrs	r3, r3, #1
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	4413      	add	r3, r2
 80055b8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6a1a      	ldr	r2, [r3, #32]
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	0a5b      	lsrs	r3, r3, #9
 80055c2:	4413      	add	r3, r2
 80055c4:	4619      	mov	r1, r3
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f7ff fede 	bl	8005388 <move_window>
 80055cc:	4603      	mov	r3, r0
 80055ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80055d0:	7ffb      	ldrb	r3, [r7, #31]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f040 80a9 	bne.w	800572a <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	1c59      	adds	r1, r3, #1
 80055e2:	61b9      	str	r1, [r7, #24]
 80055e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055e8:	4413      	add	r3, r2
 80055ea:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00d      	beq.n	8005612 <put_fat+0xa4>
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	b25b      	sxtb	r3, r3
 80055fc:	f003 030f 	and.w	r3, r3, #15
 8005600:	b25a      	sxtb	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	b2db      	uxtb	r3, r3
 8005606:	011b      	lsls	r3, r3, #4
 8005608:	b25b      	sxtb	r3, r3
 800560a:	4313      	orrs	r3, r2
 800560c:	b25b      	sxtb	r3, r3
 800560e:	b2db      	uxtb	r3, r3
 8005610:	e001      	b.n	8005616 <put_fat+0xa8>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	b2db      	uxtb	r3, r3
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2201      	movs	r2, #1
 800561e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6a1a      	ldr	r2, [r3, #32]
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	0a5b      	lsrs	r3, r3, #9
 8005628:	4413      	add	r3, r2
 800562a:	4619      	mov	r1, r3
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f7ff feab 	bl	8005388 <move_window>
 8005632:	4603      	mov	r3, r0
 8005634:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005636:	7ffb      	ldrb	r3, [r7, #31]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d178      	bne.n	800572e <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005648:	4413      	add	r3, r2
 800564a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <put_fat+0xf0>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	091b      	lsrs	r3, r3, #4
 800565a:	b2db      	uxtb	r3, r3
 800565c:	e00e      	b.n	800567c <put_fat+0x10e>
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	b25b      	sxtb	r3, r3
 8005664:	f023 030f 	bic.w	r3, r3, #15
 8005668:	b25a      	sxtb	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	0a1b      	lsrs	r3, r3, #8
 800566e:	b25b      	sxtb	r3, r3
 8005670:	f003 030f 	and.w	r3, r3, #15
 8005674:	b25b      	sxtb	r3, r3
 8005676:	4313      	orrs	r3, r2
 8005678:	b25b      	sxtb	r3, r3
 800567a:	b2db      	uxtb	r3, r3
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2201      	movs	r2, #1
 8005684:	70da      	strb	r2, [r3, #3]
			break;
 8005686:	e057      	b.n	8005738 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6a1a      	ldr	r2, [r3, #32]
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	0a1b      	lsrs	r3, r3, #8
 8005690:	4413      	add	r3, r2
 8005692:	4619      	mov	r1, r3
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f7ff fe77 	bl	8005388 <move_window>
 800569a:	4603      	mov	r3, r0
 800569c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800569e:	7ffb      	ldrb	r3, [r7, #31]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d146      	bne.n	8005732 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	005b      	lsls	r3, r3, #1
 80056ae:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80056b2:	4413      	add	r3, r2
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	b292      	uxth	r2, r2
 80056b8:	4611      	mov	r1, r2
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7ff fc2b 	bl	8004f16 <st_word>
			fs->wflag = 1;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2201      	movs	r2, #1
 80056c4:	70da      	strb	r2, [r3, #3]
			break;
 80056c6:	e037      	b.n	8005738 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6a1a      	ldr	r2, [r3, #32]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	09db      	lsrs	r3, r3, #7
 80056d0:	4413      	add	r3, r2
 80056d2:	4619      	mov	r1, r3
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f7ff fe57 	bl	8005388 <move_window>
 80056da:	4603      	mov	r3, r0
 80056dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80056de:	7ffb      	ldrb	r3, [r7, #31]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d128      	bne.n	8005736 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80056f8:	4413      	add	r3, r2
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7ff fbe8 	bl	8004ed0 <ld_dword>
 8005700:	4603      	mov	r3, r0
 8005702:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005706:	4323      	orrs	r3, r4
 8005708:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8005718:	4413      	add	r3, r2
 800571a:	6879      	ldr	r1, [r7, #4]
 800571c:	4618      	mov	r0, r3
 800571e:	f7ff fc15 	bl	8004f4c <st_dword>
			fs->wflag = 1;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2201      	movs	r2, #1
 8005726:	70da      	strb	r2, [r3, #3]
			break;
 8005728:	e006      	b.n	8005738 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800572a:	bf00      	nop
 800572c:	e004      	b.n	8005738 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800572e:	bf00      	nop
 8005730:	e002      	b.n	8005738 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005732:	bf00      	nop
 8005734:	e000      	b.n	8005738 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005736:	bf00      	nop
		}
	}
	return res;
 8005738:	7ffb      	ldrb	r3, [r7, #31]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3724      	adds	r7, #36	@ 0x24
 800573e:	46bd      	mov	sp, r7
 8005740:	bd90      	pop	{r4, r7, pc}

08005742 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b088      	sub	sp, #32
 8005746:	af00      	add	r7, sp, #0
 8005748:	60f8      	str	r0, [r7, #12]
 800574a:	60b9      	str	r1, [r7, #8]
 800574c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800574e:	2300      	movs	r3, #0
 8005750:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d904      	bls.n	8005768 <remove_chain+0x26>
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	429a      	cmp	r2, r3
 8005766:	d301      	bcc.n	800576c <remove_chain+0x2a>
 8005768:	2302      	movs	r3, #2
 800576a:	e04b      	b.n	8005804 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00c      	beq.n	800578c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005772:	f04f 32ff 	mov.w	r2, #4294967295
 8005776:	6879      	ldr	r1, [r7, #4]
 8005778:	69b8      	ldr	r0, [r7, #24]
 800577a:	f7ff fef8 	bl	800556e <put_fat>
 800577e:	4603      	mov	r3, r0
 8005780:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005782:	7ffb      	ldrb	r3, [r7, #31]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <remove_chain+0x4a>
 8005788:	7ffb      	ldrb	r3, [r7, #31]
 800578a:	e03b      	b.n	8005804 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800578c:	68b9      	ldr	r1, [r7, #8]
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f7ff fe46 	bl	8005420 <get_fat>
 8005794:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d031      	beq.n	8005800 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d101      	bne.n	80057a6 <remove_chain+0x64>
 80057a2:	2302      	movs	r3, #2
 80057a4:	e02e      	b.n	8005804 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ac:	d101      	bne.n	80057b2 <remove_chain+0x70>
 80057ae:	2301      	movs	r3, #1
 80057b0:	e028      	b.n	8005804 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80057b2:	2200      	movs	r2, #0
 80057b4:	68b9      	ldr	r1, [r7, #8]
 80057b6:	69b8      	ldr	r0, [r7, #24]
 80057b8:	f7ff fed9 	bl	800556e <put_fat>
 80057bc:	4603      	mov	r3, r0
 80057be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80057c0:	7ffb      	ldrb	r3, [r7, #31]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <remove_chain+0x88>
 80057c6:	7ffb      	ldrb	r3, [r7, #31]
 80057c8:	e01c      	b.n	8005804 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	691a      	ldr	r2, [r3, #16]
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	3b02      	subs	r3, #2
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d20b      	bcs.n	80057f0 <remove_chain+0xae>
			fs->free_clst++;
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	1c5a      	adds	r2, r3, #1
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	791b      	ldrb	r3, [r3, #4]
 80057e6:	f043 0301 	orr.w	r3, r3, #1
 80057ea:	b2da      	uxtb	r2, r3
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d3c6      	bcc.n	800578c <remove_chain+0x4a>
 80057fe:	e000      	b.n	8005802 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005800:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3720      	adds	r7, #32
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b088      	sub	sp, #32
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10d      	bne.n	800583e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d004      	beq.n	8005838 <create_chain+0x2c>
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	69ba      	ldr	r2, [r7, #24]
 8005834:	429a      	cmp	r2, r3
 8005836:	d31b      	bcc.n	8005870 <create_chain+0x64>
 8005838:	2301      	movs	r3, #1
 800583a:	61bb      	str	r3, [r7, #24]
 800583c:	e018      	b.n	8005870 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800583e:	6839      	ldr	r1, [r7, #0]
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f7ff fded 	bl	8005420 <get_fat>
 8005846:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d801      	bhi.n	8005852 <create_chain+0x46>
 800584e:	2301      	movs	r3, #1
 8005850:	e070      	b.n	8005934 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005858:	d101      	bne.n	800585e <create_chain+0x52>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	e06a      	b.n	8005934 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	429a      	cmp	r2, r3
 8005866:	d201      	bcs.n	800586c <create_chain+0x60>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	e063      	b.n	8005934 <create_chain+0x128>
		scl = clst;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	3301      	adds	r3, #1
 8005878:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	69fa      	ldr	r2, [r7, #28]
 8005880:	429a      	cmp	r2, r3
 8005882:	d307      	bcc.n	8005894 <create_chain+0x88>
				ncl = 2;
 8005884:	2302      	movs	r3, #2
 8005886:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005888:	69fa      	ldr	r2, [r7, #28]
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	429a      	cmp	r2, r3
 800588e:	d901      	bls.n	8005894 <create_chain+0x88>
 8005890:	2300      	movs	r3, #0
 8005892:	e04f      	b.n	8005934 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005894:	69f9      	ldr	r1, [r7, #28]
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7ff fdc2 	bl	8005420 <get_fat>
 800589c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00e      	beq.n	80058c2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d003      	beq.n	80058b2 <create_chain+0xa6>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b0:	d101      	bne.n	80058b6 <create_chain+0xaa>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	e03e      	b.n	8005934 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80058b6:	69fa      	ldr	r2, [r7, #28]
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d1da      	bne.n	8005874 <create_chain+0x68>
 80058be:	2300      	movs	r3, #0
 80058c0:	e038      	b.n	8005934 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80058c2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80058c4:	f04f 32ff 	mov.w	r2, #4294967295
 80058c8:	69f9      	ldr	r1, [r7, #28]
 80058ca:	6938      	ldr	r0, [r7, #16]
 80058cc:	f7ff fe4f 	bl	800556e <put_fat>
 80058d0:	4603      	mov	r3, r0
 80058d2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80058d4:	7dfb      	ldrb	r3, [r7, #23]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d109      	bne.n	80058ee <create_chain+0xe2>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d006      	beq.n	80058ee <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80058e0:	69fa      	ldr	r2, [r7, #28]
 80058e2:	6839      	ldr	r1, [r7, #0]
 80058e4:	6938      	ldr	r0, [r7, #16]
 80058e6:	f7ff fe42 	bl	800556e <put_fat>
 80058ea:	4603      	mov	r3, r0
 80058ec:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80058ee:	7dfb      	ldrb	r3, [r7, #23]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d116      	bne.n	8005922 <create_chain+0x116>
		fs->last_clst = ncl;
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	69fa      	ldr	r2, [r7, #28]
 80058f8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	691a      	ldr	r2, [r3, #16]
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	3b02      	subs	r3, #2
 8005904:	429a      	cmp	r2, r3
 8005906:	d804      	bhi.n	8005912 <create_chain+0x106>
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	1e5a      	subs	r2, r3, #1
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	791b      	ldrb	r3, [r3, #4]
 8005916:	f043 0301 	orr.w	r3, r3, #1
 800591a:	b2da      	uxtb	r2, r3
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	711a      	strb	r2, [r3, #4]
 8005920:	e007      	b.n	8005932 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005922:	7dfb      	ldrb	r3, [r7, #23]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d102      	bne.n	800592e <create_chain+0x122>
 8005928:	f04f 33ff 	mov.w	r3, #4294967295
 800592c:	e000      	b.n	8005930 <create_chain+0x124>
 800592e:	2301      	movs	r3, #1
 8005930:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005932:	69fb      	ldr	r3, [r7, #28]
}
 8005934:	4618      	mov	r0, r3
 8005936:	3720      	adds	r7, #32
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800593c:	b480      	push	{r7}
 800593e:	b087      	sub	sp, #28
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005950:	3304      	adds	r3, #4
 8005952:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	0a5b      	lsrs	r3, r3, #9
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	8952      	ldrh	r2, [r2, #10]
 800595c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005960:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	1d1a      	adds	r2, r3, #4
 8005966:	613a      	str	r2, [r7, #16]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <clmt_clust+0x3a>
 8005972:	2300      	movs	r3, #0
 8005974:	e010      	b.n	8005998 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	429a      	cmp	r2, r3
 800597c:	d307      	bcc.n	800598e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	617b      	str	r3, [r7, #20]
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	3304      	adds	r3, #4
 800598a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800598c:	e7e9      	b.n	8005962 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800598e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	4413      	add	r3, r2
}
 8005998:	4618      	mov	r0, r3
 800599a:	371c      	adds	r7, #28
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059ba:	d204      	bcs.n	80059c6 <dir_sdi+0x22>
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	f003 031f 	and.w	r3, r3, #31
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <dir_sdi+0x26>
		return FR_INT_ERR;
 80059c6:	2302      	movs	r3, #2
 80059c8:	e063      	b.n	8005a92 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d106      	bne.n	80059ea <dir_sdi+0x46>
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d902      	bls.n	80059ea <dir_sdi+0x46>
		clst = fs->dirbase;
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10c      	bne.n	8005a0a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	095b      	lsrs	r3, r3, #5
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	8912      	ldrh	r2, [r2, #8]
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d301      	bcc.n	8005a00 <dir_sdi+0x5c>
 80059fc:	2302      	movs	r3, #2
 80059fe:	e048      	b.n	8005a92 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	61da      	str	r2, [r3, #28]
 8005a08:	e029      	b.n	8005a5e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	895b      	ldrh	r3, [r3, #10]
 8005a0e:	025b      	lsls	r3, r3, #9
 8005a10:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005a12:	e019      	b.n	8005a48 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6979      	ldr	r1, [r7, #20]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7ff fd01 	bl	8005420 <get_fat>
 8005a1e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a26:	d101      	bne.n	8005a2c <dir_sdi+0x88>
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e032      	b.n	8005a92 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d904      	bls.n	8005a3c <dir_sdi+0x98>
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d301      	bcc.n	8005a40 <dir_sdi+0x9c>
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	e028      	b.n	8005a92 <dir_sdi+0xee>
			ofs -= csz;
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005a48:	683a      	ldr	r2, [r7, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d2e1      	bcs.n	8005a14 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8005a50:	6979      	ldr	r1, [r7, #20]
 8005a52:	6938      	ldr	r0, [r7, #16]
 8005a54:	f7ff fcc5 	bl	80053e2 <clust2sect>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	69db      	ldr	r3, [r3, #28]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <dir_sdi+0xcc>
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	e010      	b.n	8005a92 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	69da      	ldr	r2, [r3, #28]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	0a5b      	lsrs	r3, r3, #9
 8005a78:	441a      	add	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a8a:	441a      	add	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3718      	adds	r7, #24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b086      	sub	sp, #24
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
 8005aa2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	3320      	adds	r3, #32
 8005ab0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	69db      	ldr	r3, [r3, #28]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d003      	beq.n	8005ac2 <dir_next+0x28>
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ac0:	d301      	bcc.n	8005ac6 <dir_next+0x2c>
 8005ac2:	2304      	movs	r3, #4
 8005ac4:	e0aa      	b.n	8005c1c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f040 8098 	bne.w	8005c02 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	1c5a      	adds	r2, r3, #1
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10b      	bne.n	8005afc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	095b      	lsrs	r3, r3, #5
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	8912      	ldrh	r2, [r2, #8]
 8005aec:	4293      	cmp	r3, r2
 8005aee:	f0c0 8088 	bcc.w	8005c02 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	61da      	str	r2, [r3, #28]
 8005af8:	2304      	movs	r3, #4
 8005afa:	e08f      	b.n	8005c1c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	0a5b      	lsrs	r3, r3, #9
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	8952      	ldrh	r2, [r2, #10]
 8005b04:	3a01      	subs	r2, #1
 8005b06:	4013      	ands	r3, r2
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d17a      	bne.n	8005c02 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	4619      	mov	r1, r3
 8005b14:	4610      	mov	r0, r2
 8005b16:	f7ff fc83 	bl	8005420 <get_fat>
 8005b1a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d801      	bhi.n	8005b26 <dir_next+0x8c>
 8005b22:	2302      	movs	r3, #2
 8005b24:	e07a      	b.n	8005c1c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2c:	d101      	bne.n	8005b32 <dir_next+0x98>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e074      	b.n	8005c1c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d358      	bcc.n	8005bee <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d104      	bne.n	8005b4c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	61da      	str	r2, [r3, #28]
 8005b48:	2304      	movs	r3, #4
 8005b4a:	e067      	b.n	8005c1c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	4619      	mov	r1, r3
 8005b54:	4610      	mov	r0, r2
 8005b56:	f7ff fe59 	bl	800580c <create_chain>
 8005b5a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <dir_next+0xcc>
 8005b62:	2307      	movs	r3, #7
 8005b64:	e05a      	b.n	8005c1c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d101      	bne.n	8005b70 <dir_next+0xd6>
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	e055      	b.n	8005c1c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b76:	d101      	bne.n	8005b7c <dir_next+0xe2>
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e04f      	b.n	8005c1c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f7ff fbbf 	bl	8005300 <sync_window>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d001      	beq.n	8005b8c <dir_next+0xf2>
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e047      	b.n	8005c1c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	3330      	adds	r3, #48	@ 0x30
 8005b90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b94:	2100      	movs	r1, #0
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7ff fa25 	bl	8004fe6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	613b      	str	r3, [r7, #16]
 8005ba0:	6979      	ldr	r1, [r7, #20]
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f7ff fc1d 	bl	80053e2 <clust2sect>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005bae:	e012      	b.n	8005bd6 <dir_next+0x13c>
						fs->wflag = 1;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f7ff fba2 	bl	8005300 <sync_window>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <dir_next+0x12c>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e02a      	b.n	8005c1c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	613b      	str	r3, [r7, #16]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd0:	1c5a      	adds	r2, r3, #1
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	895b      	ldrh	r3, [r3, #10]
 8005bda:	461a      	mov	r2, r3
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d3e6      	bcc.n	8005bb0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	1ad2      	subs	r2, r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005bf4:	6979      	ldr	r1, [r7, #20]
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f7ff fbf3 	bl	80053e2 <clust2sect>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c14:	441a      	add	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3718      	adds	r7, #24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005c34:	2100      	movs	r1, #0
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f7ff feb4 	bl	80059a4 <dir_sdi>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005c40:	7dfb      	ldrb	r3, [r7, #23]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d12b      	bne.n	8005c9e <dir_alloc+0x7a>
		n = 0;
 8005c46:	2300      	movs	r3, #0
 8005c48:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	4619      	mov	r1, r3
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f7ff fb99 	bl	8005388 <move_window>
 8005c56:	4603      	mov	r3, r0
 8005c58:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005c5a:	7dfb      	ldrb	r3, [r7, #23]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d11d      	bne.n	8005c9c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a1b      	ldr	r3, [r3, #32]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	2be5      	cmp	r3, #229	@ 0xe5
 8005c68:	d004      	beq.n	8005c74 <dir_alloc+0x50>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d107      	bne.n	8005c84 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	3301      	adds	r3, #1
 8005c78:	613b      	str	r3, [r7, #16]
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d102      	bne.n	8005c88 <dir_alloc+0x64>
 8005c82:	e00c      	b.n	8005c9e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005c84:	2300      	movs	r3, #0
 8005c86:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005c88:	2101      	movs	r1, #1
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7ff ff05 	bl	8005a9a <dir_next>
 8005c90:	4603      	mov	r3, r0
 8005c92:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005c94:	7dfb      	ldrb	r3, [r7, #23]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d0d7      	beq.n	8005c4a <dir_alloc+0x26>
 8005c9a:	e000      	b.n	8005c9e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005c9c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005c9e:	7dfb      	ldrb	r3, [r7, #23]
 8005ca0:	2b04      	cmp	r3, #4
 8005ca2:	d101      	bne.n	8005ca8 <dir_alloc+0x84>
 8005ca4:	2307      	movs	r3, #7
 8005ca6:	75fb      	strb	r3, [r7, #23]
	return res;
 8005ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3718      	adds	r7, #24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b084      	sub	sp, #16
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	331a      	adds	r3, #26
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7ff f8ed 	bl	8004ea0 <ld_word>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	2b03      	cmp	r3, #3
 8005cd0:	d109      	bne.n	8005ce6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	3314      	adds	r3, #20
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7ff f8e2 	bl	8004ea0 <ld_word>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	041b      	lsls	r3, r3, #16
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	331a      	adds	r3, #26
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	b292      	uxth	r2, r2
 8005d04:	4611      	mov	r1, r2
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7ff f905 	bl	8004f16 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	2b03      	cmp	r3, #3
 8005d12:	d109      	bne.n	8005d28 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	f103 0214 	add.w	r2, r3, #20
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	0c1b      	lsrs	r3, r3, #16
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	4619      	mov	r1, r3
 8005d22:	4610      	mov	r0, r2
 8005d24:	f7ff f8f7 	bl	8004f16 <st_word>
	}
}
 8005d28:	bf00      	nop
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005d3e:	2100      	movs	r1, #0
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f7ff fe2f 	bl	80059a4 <dir_sdi>
 8005d46:	4603      	mov	r3, r0
 8005d48:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005d4a:	7dfb      	ldrb	r3, [r7, #23]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d001      	beq.n	8005d54 <dir_find+0x24>
 8005d50:	7dfb      	ldrb	r3, [r7, #23]
 8005d52:	e03e      	b.n	8005dd2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	69db      	ldr	r3, [r3, #28]
 8005d58:	4619      	mov	r1, r3
 8005d5a:	6938      	ldr	r0, [r7, #16]
 8005d5c:	f7ff fb14 	bl	8005388 <move_window>
 8005d60:	4603      	mov	r3, r0
 8005d62:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005d64:	7dfb      	ldrb	r3, [r7, #23]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d12f      	bne.n	8005dca <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005d72:	7bfb      	ldrb	r3, [r7, #15]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d102      	bne.n	8005d7e <dir_find+0x4e>
 8005d78:	2304      	movs	r3, #4
 8005d7a:	75fb      	strb	r3, [r7, #23]
 8005d7c:	e028      	b.n	8005dd0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	330b      	adds	r3, #11
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d8a:	b2da      	uxtb	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a1b      	ldr	r3, [r3, #32]
 8005d94:	330b      	adds	r3, #11
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	f003 0308 	and.w	r3, r3, #8
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10a      	bne.n	8005db6 <dir_find+0x86>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a18      	ldr	r0, [r3, #32]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	3324      	adds	r3, #36	@ 0x24
 8005da8:	220b      	movs	r2, #11
 8005daa:	4619      	mov	r1, r3
 8005dac:	f7ff f936 	bl	800501c <mem_cmp>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00b      	beq.n	8005dce <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005db6:	2100      	movs	r1, #0
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f7ff fe6e 	bl	8005a9a <dir_next>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005dc2:	7dfb      	ldrb	r3, [r7, #23]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d0c5      	beq.n	8005d54 <dir_find+0x24>
 8005dc8:	e002      	b.n	8005dd0 <dir_find+0xa0>
		if (res != FR_OK) break;
 8005dca:	bf00      	nop
 8005dcc:	e000      	b.n	8005dd0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005dce:	bf00      	nop

	return res;
 8005dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3718      	adds	r7, #24
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b084      	sub	sp, #16
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005de8:	2101      	movs	r1, #1
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7ff ff1a 	bl	8005c24 <dir_alloc>
 8005df0:	4603      	mov	r3, r0
 8005df2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d11c      	bne.n	8005e34 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	4619      	mov	r1, r3
 8005e00:	68b8      	ldr	r0, [r7, #8]
 8005e02:	f7ff fac1 	bl	8005388 <move_window>
 8005e06:	4603      	mov	r3, r0
 8005e08:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005e0a:	7bfb      	ldrb	r3, [r7, #15]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d111      	bne.n	8005e34 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a1b      	ldr	r3, [r3, #32]
 8005e14:	2220      	movs	r2, #32
 8005e16:	2100      	movs	r1, #0
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7ff f8e4 	bl	8004fe6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a18      	ldr	r0, [r3, #32]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	3324      	adds	r3, #36	@ 0x24
 8005e26:	220b      	movs	r2, #11
 8005e28:	4619      	mov	r1, r3
 8005e2a:	f7ff f8bb 	bl	8004fa4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	2201      	movs	r2, #1
 8005e32:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
	...

08005e40 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b088      	sub	sp, #32
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	60fb      	str	r3, [r7, #12]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	3324      	adds	r3, #36	@ 0x24
 8005e54:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005e56:	220b      	movs	r2, #11
 8005e58:	2120      	movs	r1, #32
 8005e5a:	68b8      	ldr	r0, [r7, #8]
 8005e5c:	f7ff f8c3 	bl	8004fe6 <mem_set>
	si = i = 0; ni = 8;
 8005e60:	2300      	movs	r3, #0
 8005e62:	613b      	str	r3, [r7, #16]
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	61fb      	str	r3, [r7, #28]
 8005e68:	2308      	movs	r3, #8
 8005e6a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	1c5a      	adds	r2, r3, #1
 8005e70:	61fa      	str	r2, [r7, #28]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	4413      	add	r3, r2
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005e7a:	7efb      	ldrb	r3, [r7, #27]
 8005e7c:	2b20      	cmp	r3, #32
 8005e7e:	d94e      	bls.n	8005f1e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005e80:	7efb      	ldrb	r3, [r7, #27]
 8005e82:	2b2f      	cmp	r3, #47	@ 0x2f
 8005e84:	d006      	beq.n	8005e94 <create_name+0x54>
 8005e86:	7efb      	ldrb	r3, [r7, #27]
 8005e88:	2b5c      	cmp	r3, #92	@ 0x5c
 8005e8a:	d110      	bne.n	8005eae <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005e8c:	e002      	b.n	8005e94 <create_name+0x54>
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	3301      	adds	r3, #1
 8005e92:	61fb      	str	r3, [r7, #28]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	4413      	add	r3, r2
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	2b2f      	cmp	r3, #47	@ 0x2f
 8005e9e:	d0f6      	beq.n	8005e8e <create_name+0x4e>
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	2b5c      	cmp	r3, #92	@ 0x5c
 8005eaa:	d0f0      	beq.n	8005e8e <create_name+0x4e>
			break;
 8005eac:	e038      	b.n	8005f20 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8005eae:	7efb      	ldrb	r3, [r7, #27]
 8005eb0:	2b2e      	cmp	r3, #46	@ 0x2e
 8005eb2:	d003      	beq.n	8005ebc <create_name+0x7c>
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d30c      	bcc.n	8005ed6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	2b0b      	cmp	r3, #11
 8005ec0:	d002      	beq.n	8005ec8 <create_name+0x88>
 8005ec2:	7efb      	ldrb	r3, [r7, #27]
 8005ec4:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ec6:	d001      	beq.n	8005ecc <create_name+0x8c>
 8005ec8:	2306      	movs	r3, #6
 8005eca:	e044      	b.n	8005f56 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005ecc:	2308      	movs	r3, #8
 8005ece:	613b      	str	r3, [r7, #16]
 8005ed0:	230b      	movs	r3, #11
 8005ed2:	617b      	str	r3, [r7, #20]
			continue;
 8005ed4:	e022      	b.n	8005f1c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005ed6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	da04      	bge.n	8005ee8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005ede:	7efb      	ldrb	r3, [r7, #27]
 8005ee0:	3b80      	subs	r3, #128	@ 0x80
 8005ee2:	4a1f      	ldr	r2, [pc, #124]	@ (8005f60 <create_name+0x120>)
 8005ee4:	5cd3      	ldrb	r3, [r2, r3]
 8005ee6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005ee8:	7efb      	ldrb	r3, [r7, #27]
 8005eea:	4619      	mov	r1, r3
 8005eec:	481d      	ldr	r0, [pc, #116]	@ (8005f64 <create_name+0x124>)
 8005eee:	f7ff f8bc 	bl	800506a <chk_chr>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d001      	beq.n	8005efc <create_name+0xbc>
 8005ef8:	2306      	movs	r3, #6
 8005efa:	e02c      	b.n	8005f56 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005efc:	7efb      	ldrb	r3, [r7, #27]
 8005efe:	2b60      	cmp	r3, #96	@ 0x60
 8005f00:	d905      	bls.n	8005f0e <create_name+0xce>
 8005f02:	7efb      	ldrb	r3, [r7, #27]
 8005f04:	2b7a      	cmp	r3, #122	@ 0x7a
 8005f06:	d802      	bhi.n	8005f0e <create_name+0xce>
 8005f08:	7efb      	ldrb	r3, [r7, #27]
 8005f0a:	3b20      	subs	r3, #32
 8005f0c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	1c5a      	adds	r2, r3, #1
 8005f12:	613a      	str	r2, [r7, #16]
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	4413      	add	r3, r2
 8005f18:	7efa      	ldrb	r2, [r7, #27]
 8005f1a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005f1c:	e7a6      	b.n	8005e6c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005f1e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	441a      	add	r2, r3
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d101      	bne.n	8005f34 <create_name+0xf4>
 8005f30:	2306      	movs	r3, #6
 8005f32:	e010      	b.n	8005f56 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	2be5      	cmp	r3, #229	@ 0xe5
 8005f3a:	d102      	bne.n	8005f42 <create_name+0x102>
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	2205      	movs	r2, #5
 8005f40:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005f42:	7efb      	ldrb	r3, [r7, #27]
 8005f44:	2b20      	cmp	r3, #32
 8005f46:	d801      	bhi.n	8005f4c <create_name+0x10c>
 8005f48:	2204      	movs	r2, #4
 8005f4a:	e000      	b.n	8005f4e <create_name+0x10e>
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	330b      	adds	r3, #11
 8005f52:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005f54:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3720      	adds	r7, #32
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	08009108 	.word	0x08009108
 8005f64:	080090ac 	.word	0x080090ac

08005f68 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005f7c:	e002      	b.n	8005f84 <follow_path+0x1c>
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	3301      	adds	r3, #1
 8005f82:	603b      	str	r3, [r7, #0]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	2b2f      	cmp	r3, #47	@ 0x2f
 8005f8a:	d0f8      	beq.n	8005f7e <follow_path+0x16>
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	2b5c      	cmp	r3, #92	@ 0x5c
 8005f92:	d0f4      	beq.n	8005f7e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	2200      	movs	r2, #0
 8005f98:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	2b1f      	cmp	r3, #31
 8005fa0:	d80a      	bhi.n	8005fb8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2280      	movs	r2, #128	@ 0x80
 8005fa6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8005faa:	2100      	movs	r1, #0
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f7ff fcf9 	bl	80059a4 <dir_sdi>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	75fb      	strb	r3, [r7, #23]
 8005fb6:	e043      	b.n	8006040 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005fb8:	463b      	mov	r3, r7
 8005fba:	4619      	mov	r1, r3
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7ff ff3f 	bl	8005e40 <create_name>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005fc6:	7dfb      	ldrb	r3, [r7, #23]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d134      	bne.n	8006036 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f7ff feaf 	bl	8005d30 <dir_find>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005fdc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005fde:	7dfb      	ldrb	r3, [r7, #23]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00a      	beq.n	8005ffa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005fe4:	7dfb      	ldrb	r3, [r7, #23]
 8005fe6:	2b04      	cmp	r3, #4
 8005fe8:	d127      	bne.n	800603a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005fea:	7afb      	ldrb	r3, [r7, #11]
 8005fec:	f003 0304 	and.w	r3, r3, #4
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d122      	bne.n	800603a <follow_path+0xd2>
 8005ff4:	2305      	movs	r3, #5
 8005ff6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005ff8:	e01f      	b.n	800603a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005ffa:	7afb      	ldrb	r3, [r7, #11]
 8005ffc:	f003 0304 	and.w	r3, r3, #4
 8006000:	2b00      	cmp	r3, #0
 8006002:	d11c      	bne.n	800603e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	799b      	ldrb	r3, [r3, #6]
 8006008:	f003 0310 	and.w	r3, r3, #16
 800600c:	2b00      	cmp	r3, #0
 800600e:	d102      	bne.n	8006016 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006010:	2305      	movs	r3, #5
 8006012:	75fb      	strb	r3, [r7, #23]
 8006014:	e014      	b.n	8006040 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	695b      	ldr	r3, [r3, #20]
 8006020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006024:	4413      	add	r3, r2
 8006026:	4619      	mov	r1, r3
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f7ff fe42 	bl	8005cb2 <ld_clust>
 800602e:	4602      	mov	r2, r0
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006034:	e7c0      	b.n	8005fb8 <follow_path+0x50>
			if (res != FR_OK) break;
 8006036:	bf00      	nop
 8006038:	e002      	b.n	8006040 <follow_path+0xd8>
				break;
 800603a:	bf00      	nop
 800603c:	e000      	b.n	8006040 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800603e:	bf00      	nop
			}
		}
	}

	return res;
 8006040:	7dfb      	ldrb	r3, [r7, #23]
}
 8006042:	4618      	mov	r0, r3
 8006044:	3718      	adds	r7, #24
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800604a:	b480      	push	{r7}
 800604c:	b087      	sub	sp, #28
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006052:	f04f 33ff 	mov.w	r3, #4294967295
 8006056:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d031      	beq.n	80060c4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	617b      	str	r3, [r7, #20]
 8006066:	e002      	b.n	800606e <get_ldnumber+0x24>
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	3301      	adds	r3, #1
 800606c:	617b      	str	r3, [r7, #20]
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	2b20      	cmp	r3, #32
 8006074:	d903      	bls.n	800607e <get_ldnumber+0x34>
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	2b3a      	cmp	r3, #58	@ 0x3a
 800607c:	d1f4      	bne.n	8006068 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	2b3a      	cmp	r3, #58	@ 0x3a
 8006084:	d11c      	bne.n	80060c0 <get_ldnumber+0x76>
			tp = *path;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	1c5a      	adds	r2, r3, #1
 8006090:	60fa      	str	r2, [r7, #12]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	3b30      	subs	r3, #48	@ 0x30
 8006096:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2b09      	cmp	r3, #9
 800609c:	d80e      	bhi.n	80060bc <get_ldnumber+0x72>
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d10a      	bne.n	80060bc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d107      	bne.n	80060bc <get_ldnumber+0x72>
					vol = (int)i;
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	3301      	adds	r3, #1
 80060b4:	617b      	str	r3, [r7, #20]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	e002      	b.n	80060c6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80060c0:	2300      	movs	r3, #0
 80060c2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80060c4:	693b      	ldr	r3, [r7, #16]
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	371c      	adds	r7, #28
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
	...

080060d4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	70da      	strb	r2, [r3, #3]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f04f 32ff 	mov.w	r2, #4294967295
 80060ea:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80060ec:	6839      	ldr	r1, [r7, #0]
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7ff f94a 	bl	8005388 <move_window>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <check_fs+0x2a>
 80060fa:	2304      	movs	r3, #4
 80060fc:	e038      	b.n	8006170 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	3330      	adds	r3, #48	@ 0x30
 8006102:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006106:	4618      	mov	r0, r3
 8006108:	f7fe feca 	bl	8004ea0 <ld_word>
 800610c:	4603      	mov	r3, r0
 800610e:	461a      	mov	r2, r3
 8006110:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006114:	429a      	cmp	r2, r3
 8006116:	d001      	beq.n	800611c <check_fs+0x48>
 8006118:	2303      	movs	r3, #3
 800611a:	e029      	b.n	8006170 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006122:	2be9      	cmp	r3, #233	@ 0xe9
 8006124:	d009      	beq.n	800613a <check_fs+0x66>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800612c:	2beb      	cmp	r3, #235	@ 0xeb
 800612e:	d11e      	bne.n	800616e <check_fs+0x9a>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006136:	2b90      	cmp	r3, #144	@ 0x90
 8006138:	d119      	bne.n	800616e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	3330      	adds	r3, #48	@ 0x30
 800613e:	3336      	adds	r3, #54	@ 0x36
 8006140:	4618      	mov	r0, r3
 8006142:	f7fe fec5 	bl	8004ed0 <ld_dword>
 8006146:	4603      	mov	r3, r0
 8006148:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800614c:	4a0a      	ldr	r2, [pc, #40]	@ (8006178 <check_fs+0xa4>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d101      	bne.n	8006156 <check_fs+0x82>
 8006152:	2300      	movs	r3, #0
 8006154:	e00c      	b.n	8006170 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	3330      	adds	r3, #48	@ 0x30
 800615a:	3352      	adds	r3, #82	@ 0x52
 800615c:	4618      	mov	r0, r3
 800615e:	f7fe feb7 	bl	8004ed0 <ld_dword>
 8006162:	4603      	mov	r3, r0
 8006164:	4a05      	ldr	r2, [pc, #20]	@ (800617c <check_fs+0xa8>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d101      	bne.n	800616e <check_fs+0x9a>
 800616a:	2300      	movs	r3, #0
 800616c:	e000      	b.n	8006170 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800616e:	2302      	movs	r3, #2
}
 8006170:	4618      	mov	r0, r3
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	00544146 	.word	0x00544146
 800617c:	33544146 	.word	0x33544146

08006180 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b096      	sub	sp, #88	@ 0x58
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	4613      	mov	r3, r2
 800618c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	2200      	movs	r2, #0
 8006192:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f7ff ff58 	bl	800604a <get_ldnumber>
 800619a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800619c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800619e:	2b00      	cmp	r3, #0
 80061a0:	da01      	bge.n	80061a6 <find_volume+0x26>
 80061a2:	230b      	movs	r3, #11
 80061a4:	e22d      	b.n	8006602 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80061a6:	4aa1      	ldr	r2, [pc, #644]	@ (800642c <find_volume+0x2ac>)
 80061a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061ae:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80061b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <find_volume+0x3a>
 80061b6:	230c      	movs	r3, #12
 80061b8:	e223      	b.n	8006602 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80061be:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80061c0:	79fb      	ldrb	r3, [r7, #7]
 80061c2:	f023 0301 	bic.w	r3, r3, #1
 80061c6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80061c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d01a      	beq.n	8006206 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80061d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d2:	785b      	ldrb	r3, [r3, #1]
 80061d4:	4618      	mov	r0, r3
 80061d6:	f7fe fde1 	bl	8004d9c <disk_status>
 80061da:	4603      	mov	r3, r0
 80061dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80061e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10c      	bne.n	8006206 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80061ec:	79fb      	ldrb	r3, [r7, #7]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d007      	beq.n	8006202 <find_volume+0x82>
 80061f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80061f6:	f003 0304 	and.w	r3, r3, #4
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80061fe:	230a      	movs	r3, #10
 8006200:	e1ff      	b.n	8006602 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8006202:	2300      	movs	r3, #0
 8006204:	e1fd      	b.n	8006602 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006208:	2200      	movs	r2, #0
 800620a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800620c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800620e:	b2da      	uxtb	r2, r3
 8006210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006212:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006216:	785b      	ldrb	r3, [r3, #1]
 8006218:	4618      	mov	r0, r3
 800621a:	f7fe fdd9 	bl	8004dd0 <disk_initialize>
 800621e:	4603      	mov	r3, r0
 8006220:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006224:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006230:	2303      	movs	r3, #3
 8006232:	e1e6      	b.n	8006602 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006234:	79fb      	ldrb	r3, [r7, #7]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d007      	beq.n	800624a <find_volume+0xca>
 800623a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800623e:	f003 0304 	and.w	r3, r3, #4
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006246:	230a      	movs	r3, #10
 8006248:	e1db      	b.n	8006602 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800624a:	2300      	movs	r3, #0
 800624c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800624e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006250:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006252:	f7ff ff3f 	bl	80060d4 <check_fs>
 8006256:	4603      	mov	r3, r0
 8006258:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800625c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006260:	2b02      	cmp	r3, #2
 8006262:	d149      	bne.n	80062f8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006264:	2300      	movs	r3, #0
 8006266:	643b      	str	r3, [r7, #64]	@ 0x40
 8006268:	e01e      	b.n	80062a8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800626a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800626c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006270:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006272:	011b      	lsls	r3, r3, #4
 8006274:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8006278:	4413      	add	r3, r2
 800627a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800627c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800627e:	3304      	adds	r3, #4
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d006      	beq.n	8006294 <find_volume+0x114>
 8006286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006288:	3308      	adds	r3, #8
 800628a:	4618      	mov	r0, r3
 800628c:	f7fe fe20 	bl	8004ed0 <ld_dword>
 8006290:	4602      	mov	r2, r0
 8006292:	e000      	b.n	8006296 <find_volume+0x116>
 8006294:	2200      	movs	r2, #0
 8006296:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	3358      	adds	r3, #88	@ 0x58
 800629c:	443b      	add	r3, r7
 800629e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80062a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062a4:	3301      	adds	r3, #1
 80062a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80062a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062aa:	2b03      	cmp	r3, #3
 80062ac:	d9dd      	bls.n	800626a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80062ae:	2300      	movs	r3, #0
 80062b0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80062b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <find_volume+0x13e>
 80062b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062ba:	3b01      	subs	r3, #1
 80062bc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80062be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	3358      	adds	r3, #88	@ 0x58
 80062c4:	443b      	add	r3, r7
 80062c6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80062ca:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80062cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d005      	beq.n	80062de <find_volume+0x15e>
 80062d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80062d4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80062d6:	f7ff fefd 	bl	80060d4 <check_fs>
 80062da:	4603      	mov	r3, r0
 80062dc:	e000      	b.n	80062e0 <find_volume+0x160>
 80062de:	2303      	movs	r3, #3
 80062e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80062e4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d905      	bls.n	80062f8 <find_volume+0x178>
 80062ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062ee:	3301      	adds	r3, #1
 80062f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80062f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062f4:	2b03      	cmp	r3, #3
 80062f6:	d9e2      	bls.n	80062be <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80062f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80062fc:	2b04      	cmp	r3, #4
 80062fe:	d101      	bne.n	8006304 <find_volume+0x184>
 8006300:	2301      	movs	r3, #1
 8006302:	e17e      	b.n	8006602 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006304:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006308:	2b01      	cmp	r3, #1
 800630a:	d901      	bls.n	8006310 <find_volume+0x190>
 800630c:	230d      	movs	r3, #13
 800630e:	e178      	b.n	8006602 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006312:	3330      	adds	r3, #48	@ 0x30
 8006314:	330b      	adds	r3, #11
 8006316:	4618      	mov	r0, r3
 8006318:	f7fe fdc2 	bl	8004ea0 <ld_word>
 800631c:	4603      	mov	r3, r0
 800631e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006322:	d001      	beq.n	8006328 <find_volume+0x1a8>
 8006324:	230d      	movs	r3, #13
 8006326:	e16c      	b.n	8006602 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800632a:	3330      	adds	r3, #48	@ 0x30
 800632c:	3316      	adds	r3, #22
 800632e:	4618      	mov	r0, r3
 8006330:	f7fe fdb6 	bl	8004ea0 <ld_word>
 8006334:	4603      	mov	r3, r0
 8006336:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006338:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800633a:	2b00      	cmp	r3, #0
 800633c:	d106      	bne.n	800634c <find_volume+0x1cc>
 800633e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006340:	3330      	adds	r3, #48	@ 0x30
 8006342:	3324      	adds	r3, #36	@ 0x24
 8006344:	4618      	mov	r0, r3
 8006346:	f7fe fdc3 	bl	8004ed0 <ld_dword>
 800634a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800634c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800634e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006350:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006354:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8006358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800635a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800635c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800635e:	789b      	ldrb	r3, [r3, #2]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d005      	beq.n	8006370 <find_volume+0x1f0>
 8006364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006366:	789b      	ldrb	r3, [r3, #2]
 8006368:	2b02      	cmp	r3, #2
 800636a:	d001      	beq.n	8006370 <find_volume+0x1f0>
 800636c:	230d      	movs	r3, #13
 800636e:	e148      	b.n	8006602 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006372:	789b      	ldrb	r3, [r3, #2]
 8006374:	461a      	mov	r2, r3
 8006376:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006378:	fb02 f303 	mul.w	r3, r2, r3
 800637c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800637e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006380:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006384:	461a      	mov	r2, r3
 8006386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006388:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800638a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800638c:	895b      	ldrh	r3, [r3, #10]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d008      	beq.n	80063a4 <find_volume+0x224>
 8006392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006394:	895b      	ldrh	r3, [r3, #10]
 8006396:	461a      	mov	r2, r3
 8006398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800639a:	895b      	ldrh	r3, [r3, #10]
 800639c:	3b01      	subs	r3, #1
 800639e:	4013      	ands	r3, r2
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d001      	beq.n	80063a8 <find_volume+0x228>
 80063a4:	230d      	movs	r3, #13
 80063a6:	e12c      	b.n	8006602 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80063a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063aa:	3330      	adds	r3, #48	@ 0x30
 80063ac:	3311      	adds	r3, #17
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fe fd76 	bl	8004ea0 <ld_word>
 80063b4:	4603      	mov	r3, r0
 80063b6:	461a      	mov	r2, r3
 80063b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80063bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063be:	891b      	ldrh	r3, [r3, #8]
 80063c0:	f003 030f 	and.w	r3, r3, #15
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d001      	beq.n	80063ce <find_volume+0x24e>
 80063ca:	230d      	movs	r3, #13
 80063cc:	e119      	b.n	8006602 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80063ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d0:	3330      	adds	r3, #48	@ 0x30
 80063d2:	3313      	adds	r3, #19
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7fe fd63 	bl	8004ea0 <ld_word>
 80063da:	4603      	mov	r3, r0
 80063dc:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80063de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d106      	bne.n	80063f2 <find_volume+0x272>
 80063e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e6:	3330      	adds	r3, #48	@ 0x30
 80063e8:	3320      	adds	r3, #32
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7fe fd70 	bl	8004ed0 <ld_dword>
 80063f0:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80063f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f4:	3330      	adds	r3, #48	@ 0x30
 80063f6:	330e      	adds	r3, #14
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7fe fd51 	bl	8004ea0 <ld_word>
 80063fe:	4603      	mov	r3, r0
 8006400:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006402:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006404:	2b00      	cmp	r3, #0
 8006406:	d101      	bne.n	800640c <find_volume+0x28c>
 8006408:	230d      	movs	r3, #13
 800640a:	e0fa      	b.n	8006602 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800640c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800640e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006410:	4413      	add	r3, r2
 8006412:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006414:	8912      	ldrh	r2, [r2, #8]
 8006416:	0912      	lsrs	r2, r2, #4
 8006418:	b292      	uxth	r2, r2
 800641a:	4413      	add	r3, r2
 800641c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800641e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006422:	429a      	cmp	r2, r3
 8006424:	d204      	bcs.n	8006430 <find_volume+0x2b0>
 8006426:	230d      	movs	r3, #13
 8006428:	e0eb      	b.n	8006602 <find_volume+0x482>
 800642a:	bf00      	nop
 800642c:	20000260 	.word	0x20000260
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006430:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006438:	8952      	ldrh	r2, [r2, #10]
 800643a:	fbb3 f3f2 	udiv	r3, r3, r2
 800643e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <find_volume+0x2ca>
 8006446:	230d      	movs	r3, #13
 8006448:	e0db      	b.n	8006602 <find_volume+0x482>
		fmt = FS_FAT32;
 800644a:	2303      	movs	r3, #3
 800644c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006452:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006456:	4293      	cmp	r3, r2
 8006458:	d802      	bhi.n	8006460 <find_volume+0x2e0>
 800645a:	2302      	movs	r3, #2
 800645c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006462:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006466:	4293      	cmp	r3, r2
 8006468:	d802      	bhi.n	8006470 <find_volume+0x2f0>
 800646a:	2301      	movs	r3, #1
 800646c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006472:	1c9a      	adds	r2, r3, #2
 8006474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006476:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8006478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800647a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800647c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800647e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006480:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006482:	441a      	add	r2, r3
 8006484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006486:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006488:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800648a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800648c:	441a      	add	r2, r3
 800648e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006490:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8006492:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006496:	2b03      	cmp	r3, #3
 8006498:	d11e      	bne.n	80064d8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800649a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800649c:	3330      	adds	r3, #48	@ 0x30
 800649e:	332a      	adds	r3, #42	@ 0x2a
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7fe fcfd 	bl	8004ea0 <ld_word>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d001      	beq.n	80064b0 <find_volume+0x330>
 80064ac:	230d      	movs	r3, #13
 80064ae:	e0a8      	b.n	8006602 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80064b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064b2:	891b      	ldrh	r3, [r3, #8]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d001      	beq.n	80064bc <find_volume+0x33c>
 80064b8:	230d      	movs	r3, #13
 80064ba:	e0a2      	b.n	8006602 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80064bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064be:	3330      	adds	r3, #48	@ 0x30
 80064c0:	332c      	adds	r3, #44	@ 0x2c
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7fe fd04 	bl	8004ed0 <ld_dword>
 80064c8:	4602      	mov	r2, r0
 80064ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064cc:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80064ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80064d6:	e01f      	b.n	8006518 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80064d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064da:	891b      	ldrh	r3, [r3, #8]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <find_volume+0x364>
 80064e0:	230d      	movs	r3, #13
 80064e2:	e08e      	b.n	8006602 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80064e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e6:	6a1a      	ldr	r2, [r3, #32]
 80064e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064ea:	441a      	add	r2, r3
 80064ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ee:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80064f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d103      	bne.n	8006500 <find_volume+0x380>
 80064f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	e00a      	b.n	8006516 <find_volume+0x396>
 8006500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006502:	695a      	ldr	r2, [r3, #20]
 8006504:	4613      	mov	r3, r2
 8006506:	005b      	lsls	r3, r3, #1
 8006508:	4413      	add	r3, r2
 800650a:	085a      	lsrs	r2, r3, #1
 800650c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	f003 0301 	and.w	r3, r3, #1
 8006514:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006516:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800651a:	699a      	ldr	r2, [r3, #24]
 800651c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800651e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8006522:	0a5b      	lsrs	r3, r3, #9
 8006524:	429a      	cmp	r2, r3
 8006526:	d201      	bcs.n	800652c <find_volume+0x3ac>
 8006528:	230d      	movs	r3, #13
 800652a:	e06a      	b.n	8006602 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800652c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800652e:	f04f 32ff 	mov.w	r2, #4294967295
 8006532:	611a      	str	r2, [r3, #16]
 8006534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006536:	691a      	ldr	r2, [r3, #16]
 8006538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800653a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800653c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800653e:	2280      	movs	r2, #128	@ 0x80
 8006540:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006542:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006546:	2b03      	cmp	r3, #3
 8006548:	d149      	bne.n	80065de <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800654a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800654c:	3330      	adds	r3, #48	@ 0x30
 800654e:	3330      	adds	r3, #48	@ 0x30
 8006550:	4618      	mov	r0, r3
 8006552:	f7fe fca5 	bl	8004ea0 <ld_word>
 8006556:	4603      	mov	r3, r0
 8006558:	2b01      	cmp	r3, #1
 800655a:	d140      	bne.n	80065de <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800655c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800655e:	3301      	adds	r3, #1
 8006560:	4619      	mov	r1, r3
 8006562:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006564:	f7fe ff10 	bl	8005388 <move_window>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d137      	bne.n	80065de <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800656e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006570:	2200      	movs	r2, #0
 8006572:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006576:	3330      	adds	r3, #48	@ 0x30
 8006578:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800657c:	4618      	mov	r0, r3
 800657e:	f7fe fc8f 	bl	8004ea0 <ld_word>
 8006582:	4603      	mov	r3, r0
 8006584:	461a      	mov	r2, r3
 8006586:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800658a:	429a      	cmp	r2, r3
 800658c:	d127      	bne.n	80065de <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800658e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006590:	3330      	adds	r3, #48	@ 0x30
 8006592:	4618      	mov	r0, r3
 8006594:	f7fe fc9c 	bl	8004ed0 <ld_dword>
 8006598:	4603      	mov	r3, r0
 800659a:	4a1c      	ldr	r2, [pc, #112]	@ (800660c <find_volume+0x48c>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d11e      	bne.n	80065de <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80065a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a2:	3330      	adds	r3, #48	@ 0x30
 80065a4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80065a8:	4618      	mov	r0, r3
 80065aa:	f7fe fc91 	bl	8004ed0 <ld_dword>
 80065ae:	4603      	mov	r3, r0
 80065b0:	4a17      	ldr	r2, [pc, #92]	@ (8006610 <find_volume+0x490>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d113      	bne.n	80065de <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80065b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b8:	3330      	adds	r3, #48	@ 0x30
 80065ba:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80065be:	4618      	mov	r0, r3
 80065c0:	f7fe fc86 	bl	8004ed0 <ld_dword>
 80065c4:	4602      	mov	r2, r0
 80065c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80065ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065cc:	3330      	adds	r3, #48	@ 0x30
 80065ce:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fe fc7c 	bl	8004ed0 <ld_dword>
 80065d8:	4602      	mov	r2, r0
 80065da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065dc:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80065de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80065e4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80065e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006614 <find_volume+0x494>)
 80065e8:	881b      	ldrh	r3, [r3, #0]
 80065ea:	3301      	adds	r3, #1
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	4b09      	ldr	r3, [pc, #36]	@ (8006614 <find_volume+0x494>)
 80065f0:	801a      	strh	r2, [r3, #0]
 80065f2:	4b08      	ldr	r3, [pc, #32]	@ (8006614 <find_volume+0x494>)
 80065f4:	881a      	ldrh	r2, [r3, #0]
 80065f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80065fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80065fc:	f7fe fe5c 	bl	80052b8 <clear_lock>
#endif
	return FR_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3758      	adds	r7, #88	@ 0x58
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	41615252 	.word	0x41615252
 8006610:	61417272 	.word	0x61417272
 8006614:	20000264 	.word	0x20000264

08006618 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006622:	2309      	movs	r3, #9
 8006624:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d01c      	beq.n	8006666 <validate+0x4e>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d018      	beq.n	8006666 <validate+0x4e>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d013      	beq.n	8006666 <validate+0x4e>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	889a      	ldrh	r2, [r3, #4]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	88db      	ldrh	r3, [r3, #6]
 8006648:	429a      	cmp	r2, r3
 800664a:	d10c      	bne.n	8006666 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	785b      	ldrb	r3, [r3, #1]
 8006652:	4618      	mov	r0, r3
 8006654:	f7fe fba2 	bl	8004d9c <disk_status>
 8006658:	4603      	mov	r3, r0
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	2b00      	cmp	r3, #0
 8006660:	d101      	bne.n	8006666 <validate+0x4e>
			res = FR_OK;
 8006662:	2300      	movs	r3, #0
 8006664:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006666:	7bfb      	ldrb	r3, [r7, #15]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d102      	bne.n	8006672 <validate+0x5a>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	e000      	b.n	8006674 <validate+0x5c>
 8006672:	2300      	movs	r3, #0
 8006674:	683a      	ldr	r2, [r7, #0]
 8006676:	6013      	str	r3, [r2, #0]
	return res;
 8006678:	7bfb      	ldrb	r3, [r7, #15]
}
 800667a:	4618      	mov	r0, r3
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
	...

08006684 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b088      	sub	sp, #32
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	4613      	mov	r3, r2
 8006690:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006696:	f107 0310 	add.w	r3, r7, #16
 800669a:	4618      	mov	r0, r3
 800669c:	f7ff fcd5 	bl	800604a <get_ldnumber>
 80066a0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	da01      	bge.n	80066ac <f_mount+0x28>
 80066a8:	230b      	movs	r3, #11
 80066aa:	e02b      	b.n	8006704 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80066ac:	4a17      	ldr	r2, [pc, #92]	@ (800670c <f_mount+0x88>)
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066b4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d005      	beq.n	80066c8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80066bc:	69b8      	ldr	r0, [r7, #24]
 80066be:	f7fe fdfb 	bl	80052b8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	2200      	movs	r2, #0
 80066c6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d002      	beq.n	80066d4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	490d      	ldr	r1, [pc, #52]	@ (800670c <f_mount+0x88>)
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d002      	beq.n	80066ea <f_mount+0x66>
 80066e4:	79fb      	ldrb	r3, [r7, #7]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d001      	beq.n	80066ee <f_mount+0x6a>
 80066ea:	2300      	movs	r3, #0
 80066ec:	e00a      	b.n	8006704 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80066ee:	f107 010c 	add.w	r1, r7, #12
 80066f2:	f107 0308 	add.w	r3, r7, #8
 80066f6:	2200      	movs	r2, #0
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7ff fd41 	bl	8006180 <find_volume>
 80066fe:	4603      	mov	r3, r0
 8006700:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006702:	7dfb      	ldrb	r3, [r7, #23]
}
 8006704:	4618      	mov	r0, r3
 8006706:	3720      	adds	r7, #32
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	20000260 	.word	0x20000260

08006710 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b098      	sub	sp, #96	@ 0x60
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	4613      	mov	r3, r2
 800671c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d101      	bne.n	8006728 <f_open+0x18>
 8006724:	2309      	movs	r3, #9
 8006726:	e1a9      	b.n	8006a7c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006728:	79fb      	ldrb	r3, [r7, #7]
 800672a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800672e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006730:	79fa      	ldrb	r2, [r7, #7]
 8006732:	f107 0110 	add.w	r1, r7, #16
 8006736:	f107 0308 	add.w	r3, r7, #8
 800673a:	4618      	mov	r0, r3
 800673c:	f7ff fd20 	bl	8006180 <find_volume>
 8006740:	4603      	mov	r3, r0
 8006742:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8006746:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800674a:	2b00      	cmp	r3, #0
 800674c:	f040 818d 	bne.w	8006a6a <f_open+0x35a>
		dj.obj.fs = fs;
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006754:	68ba      	ldr	r2, [r7, #8]
 8006756:	f107 0314 	add.w	r3, r7, #20
 800675a:	4611      	mov	r1, r2
 800675c:	4618      	mov	r0, r3
 800675e:	f7ff fc03 	bl	8005f68 <follow_path>
 8006762:	4603      	mov	r3, r0
 8006764:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006768:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800676c:	2b00      	cmp	r3, #0
 800676e:	d118      	bne.n	80067a2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006770:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006774:	b25b      	sxtb	r3, r3
 8006776:	2b00      	cmp	r3, #0
 8006778:	da03      	bge.n	8006782 <f_open+0x72>
				res = FR_INVALID_NAME;
 800677a:	2306      	movs	r3, #6
 800677c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006780:	e00f      	b.n	80067a2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006782:	79fb      	ldrb	r3, [r7, #7]
 8006784:	2b01      	cmp	r3, #1
 8006786:	bf8c      	ite	hi
 8006788:	2301      	movhi	r3, #1
 800678a:	2300      	movls	r3, #0
 800678c:	b2db      	uxtb	r3, r3
 800678e:	461a      	mov	r2, r3
 8006790:	f107 0314 	add.w	r3, r7, #20
 8006794:	4611      	mov	r1, r2
 8006796:	4618      	mov	r0, r3
 8006798:	f7fe fc82 	bl	80050a0 <chk_lock>
 800679c:	4603      	mov	r3, r0
 800679e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80067a2:	79fb      	ldrb	r3, [r7, #7]
 80067a4:	f003 031c 	and.w	r3, r3, #28
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d07f      	beq.n	80068ac <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80067ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d017      	beq.n	80067e4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80067b4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80067b8:	2b04      	cmp	r3, #4
 80067ba:	d10e      	bne.n	80067da <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80067bc:	f7fe fccc 	bl	8005158 <enq_lock>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d006      	beq.n	80067d4 <f_open+0xc4>
 80067c6:	f107 0314 	add.w	r3, r7, #20
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7ff fb05 	bl	8005dda <dir_register>
 80067d0:	4603      	mov	r3, r0
 80067d2:	e000      	b.n	80067d6 <f_open+0xc6>
 80067d4:	2312      	movs	r3, #18
 80067d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80067da:	79fb      	ldrb	r3, [r7, #7]
 80067dc:	f043 0308 	orr.w	r3, r3, #8
 80067e0:	71fb      	strb	r3, [r7, #7]
 80067e2:	e010      	b.n	8006806 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80067e4:	7ebb      	ldrb	r3, [r7, #26]
 80067e6:	f003 0311 	and.w	r3, r3, #17
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d003      	beq.n	80067f6 <f_open+0xe6>
					res = FR_DENIED;
 80067ee:	2307      	movs	r3, #7
 80067f0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80067f4:	e007      	b.n	8006806 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80067f6:	79fb      	ldrb	r3, [r7, #7]
 80067f8:	f003 0304 	and.w	r3, r3, #4
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d002      	beq.n	8006806 <f_open+0xf6>
 8006800:	2308      	movs	r3, #8
 8006802:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006806:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800680a:	2b00      	cmp	r3, #0
 800680c:	d168      	bne.n	80068e0 <f_open+0x1d0>
 800680e:	79fb      	ldrb	r3, [r7, #7]
 8006810:	f003 0308 	and.w	r3, r3, #8
 8006814:	2b00      	cmp	r3, #0
 8006816:	d063      	beq.n	80068e0 <f_open+0x1d0>
				dw = GET_FATTIME();
 8006818:	f7fd fd88 	bl	800432c <get_fattime>
 800681c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800681e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006820:	330e      	adds	r3, #14
 8006822:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006824:	4618      	mov	r0, r3
 8006826:	f7fe fb91 	bl	8004f4c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800682a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800682c:	3316      	adds	r3, #22
 800682e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006830:	4618      	mov	r0, r3
 8006832:	f7fe fb8b 	bl	8004f4c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006838:	330b      	adds	r3, #11
 800683a:	2220      	movs	r2, #32
 800683c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006842:	4611      	mov	r1, r2
 8006844:	4618      	mov	r0, r3
 8006846:	f7ff fa34 	bl	8005cb2 <ld_clust>
 800684a:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006850:	2200      	movs	r2, #0
 8006852:	4618      	mov	r0, r3
 8006854:	f7ff fa4c 	bl	8005cf0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800685a:	331c      	adds	r3, #28
 800685c:	2100      	movs	r1, #0
 800685e:	4618      	mov	r0, r3
 8006860:	f7fe fb74 	bl	8004f4c <st_dword>
					fs->wflag = 1;
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	2201      	movs	r2, #1
 8006868:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800686a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800686c:	2b00      	cmp	r3, #0
 800686e:	d037      	beq.n	80068e0 <f_open+0x1d0>
						dw = fs->winsect;
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006874:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006876:	f107 0314 	add.w	r3, r7, #20
 800687a:	2200      	movs	r2, #0
 800687c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800687e:	4618      	mov	r0, r3
 8006880:	f7fe ff5f 	bl	8005742 <remove_chain>
 8006884:	4603      	mov	r3, r0
 8006886:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800688a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800688e:	2b00      	cmp	r3, #0
 8006890:	d126      	bne.n	80068e0 <f_open+0x1d0>
							res = move_window(fs, dw);
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006896:	4618      	mov	r0, r3
 8006898:	f7fe fd76 	bl	8005388 <move_window>
 800689c:	4603      	mov	r3, r0
 800689e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80068a6:	3a01      	subs	r2, #1
 80068a8:	60da      	str	r2, [r3, #12]
 80068aa:	e019      	b.n	80068e0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80068ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d115      	bne.n	80068e0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80068b4:	7ebb      	ldrb	r3, [r7, #26]
 80068b6:	f003 0310 	and.w	r3, r3, #16
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d003      	beq.n	80068c6 <f_open+0x1b6>
					res = FR_NO_FILE;
 80068be:	2304      	movs	r3, #4
 80068c0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80068c4:	e00c      	b.n	80068e0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80068c6:	79fb      	ldrb	r3, [r7, #7]
 80068c8:	f003 0302 	and.w	r3, r3, #2
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d007      	beq.n	80068e0 <f_open+0x1d0>
 80068d0:	7ebb      	ldrb	r3, [r7, #26]
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d002      	beq.n	80068e0 <f_open+0x1d0>
						res = FR_DENIED;
 80068da:	2307      	movs	r3, #7
 80068dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80068e0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d126      	bne.n	8006936 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80068e8:	79fb      	ldrb	r3, [r7, #7]
 80068ea:	f003 0308 	and.w	r3, r3, #8
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d003      	beq.n	80068fa <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80068f2:	79fb      	ldrb	r3, [r7, #7]
 80068f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068f8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8006902:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006908:	79fb      	ldrb	r3, [r7, #7]
 800690a:	2b01      	cmp	r3, #1
 800690c:	bf8c      	ite	hi
 800690e:	2301      	movhi	r3, #1
 8006910:	2300      	movls	r3, #0
 8006912:	b2db      	uxtb	r3, r3
 8006914:	461a      	mov	r2, r3
 8006916:	f107 0314 	add.w	r3, r7, #20
 800691a:	4611      	mov	r1, r2
 800691c:	4618      	mov	r0, r3
 800691e:	f7fe fc3d 	bl	800519c <inc_lock>
 8006922:	4602      	mov	r2, r0
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d102      	bne.n	8006936 <f_open+0x226>
 8006930:	2302      	movs	r3, #2
 8006932:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006936:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800693a:	2b00      	cmp	r3, #0
 800693c:	f040 8095 	bne.w	8006a6a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006944:	4611      	mov	r1, r2
 8006946:	4618      	mov	r0, r3
 8006948:	f7ff f9b3 	bl	8005cb2 <ld_clust>
 800694c:	4602      	mov	r2, r0
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006954:	331c      	adds	r3, #28
 8006956:	4618      	mov	r0, r3
 8006958:	f7fe faba 	bl	8004ed0 <ld_dword>
 800695c:	4602      	mov	r2, r0
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	88da      	ldrh	r2, [r3, #6]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	79fa      	ldrb	r2, [r7, #7]
 800697a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	3330      	adds	r3, #48	@ 0x30
 8006992:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006996:	2100      	movs	r1, #0
 8006998:	4618      	mov	r0, r3
 800699a:	f7fe fb24 	bl	8004fe6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800699e:	79fb      	ldrb	r3, [r7, #7]
 80069a0:	f003 0320 	and.w	r3, r3, #32
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d060      	beq.n	8006a6a <f_open+0x35a>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d05c      	beq.n	8006a6a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	68da      	ldr	r2, [r3, #12]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	895b      	ldrh	r3, [r3, #10]
 80069bc:	025b      	lsls	r3, r3, #9
 80069be:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80069cc:	e016      	b.n	80069fc <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7fe fd24 	bl	8005420 <get_fat>
 80069d8:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80069da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d802      	bhi.n	80069e6 <f_open+0x2d6>
 80069e0:	2302      	movs	r3, #2
 80069e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80069e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80069e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ec:	d102      	bne.n	80069f4 <f_open+0x2e4>
 80069ee:	2301      	movs	r3, #1
 80069f0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80069f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80069f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80069fc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d103      	bne.n	8006a0c <f_open+0x2fc>
 8006a04:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006a06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d8e0      	bhi.n	80069ce <f_open+0x2be>
				}
				fp->clust = clst;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a10:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006a12:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d127      	bne.n	8006a6a <f_open+0x35a>
 8006a1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d022      	beq.n	8006a6a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7fe fcda 	bl	80053e2 <clust2sect>
 8006a2e:	6478      	str	r0, [r7, #68]	@ 0x44
 8006a30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d103      	bne.n	8006a3e <f_open+0x32e>
						res = FR_INT_ERR;
 8006a36:	2302      	movs	r3, #2
 8006a38:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006a3c:	e015      	b.n	8006a6a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006a3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a40:	0a5a      	lsrs	r2, r3, #9
 8006a42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a44:	441a      	add	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	7858      	ldrb	r0, [r3, #1]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6a1a      	ldr	r2, [r3, #32]
 8006a58:	2301      	movs	r3, #1
 8006a5a:	f7fe f9e1 	bl	8004e20 <disk_read>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d002      	beq.n	8006a6a <f_open+0x35a>
 8006a64:	2301      	movs	r3, #1
 8006a66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006a6a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d002      	beq.n	8006a78 <f_open+0x368>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006a78:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3760      	adds	r7, #96	@ 0x60
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b08e      	sub	sp, #56	@ 0x38
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
 8006a90:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f107 0214 	add.w	r2, r7, #20
 8006aa2:	4611      	mov	r1, r2
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7ff fdb7 	bl	8006618 <validate>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006ab0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d107      	bne.n	8006ac8 <f_read+0x44>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	7d5b      	ldrb	r3, [r3, #21]
 8006abc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006ac0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d002      	beq.n	8006ace <f_read+0x4a>
 8006ac8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006acc:	e115      	b.n	8006cfa <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	7d1b      	ldrb	r3, [r3, #20]
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <f_read+0x5a>
 8006ada:	2307      	movs	r3, #7
 8006adc:	e10d      	b.n	8006cfa <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	68da      	ldr	r2, [r3, #12]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	6a3b      	ldr	r3, [r7, #32]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	f240 80fe 	bls.w	8006cf0 <f_read+0x26c>
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006af8:	e0fa      	b.n	8006cf0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f040 80c6 	bne.w	8006c94 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	699b      	ldr	r3, [r3, #24]
 8006b0c:	0a5b      	lsrs	r3, r3, #9
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	8952      	ldrh	r2, [r2, #10]
 8006b12:	3a01      	subs	r2, #1
 8006b14:	4013      	ands	r3, r2
 8006b16:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d12f      	bne.n	8006b7e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d103      	bne.n	8006b2e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b2c:	e013      	b.n	8006b56 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d007      	beq.n	8006b46 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f7fe fefd 	bl	800593c <clmt_clust>
 8006b42:	6338      	str	r0, [r7, #48]	@ 0x30
 8006b44:	e007      	b.n	8006b56 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	69db      	ldr	r3, [r3, #28]
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	4610      	mov	r0, r2
 8006b50:	f7fe fc66 	bl	8005420 <get_fat>
 8006b54:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d804      	bhi.n	8006b66 <f_read+0xe2>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2202      	movs	r2, #2
 8006b60:	755a      	strb	r2, [r3, #21]
 8006b62:	2302      	movs	r3, #2
 8006b64:	e0c9      	b.n	8006cfa <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b6c:	d104      	bne.n	8006b78 <f_read+0xf4>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2201      	movs	r2, #1
 8006b72:	755a      	strb	r2, [r3, #21]
 8006b74:	2301      	movs	r3, #1
 8006b76:	e0c0      	b.n	8006cfa <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b7c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	69db      	ldr	r3, [r3, #28]
 8006b84:	4619      	mov	r1, r3
 8006b86:	4610      	mov	r0, r2
 8006b88:	f7fe fc2b 	bl	80053e2 <clust2sect>
 8006b8c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d104      	bne.n	8006b9e <f_read+0x11a>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2202      	movs	r2, #2
 8006b98:	755a      	strb	r2, [r3, #21]
 8006b9a:	2302      	movs	r3, #2
 8006b9c:	e0ad      	b.n	8006cfa <f_read+0x276>
			sect += csect;
 8006b9e:	69ba      	ldr	r2, [r7, #24]
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	0a5b      	lsrs	r3, r3, #9
 8006baa:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d039      	beq.n	8006c26 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006bb2:	69fa      	ldr	r2, [r7, #28]
 8006bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb6:	4413      	add	r3, r2
 8006bb8:	697a      	ldr	r2, [r7, #20]
 8006bba:	8952      	ldrh	r2, [r2, #10]
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d905      	bls.n	8006bcc <f_read+0x148>
					cc = fs->csize - csect;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	895b      	ldrh	r3, [r3, #10]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	7858      	ldrb	r0, [r3, #1]
 8006bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd2:	69ba      	ldr	r2, [r7, #24]
 8006bd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006bd6:	f7fe f923 	bl	8004e20 <disk_read>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d004      	beq.n	8006bea <f_read+0x166>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2201      	movs	r2, #1
 8006be4:	755a      	strb	r2, [r3, #21]
 8006be6:	2301      	movs	r3, #1
 8006be8:	e087      	b.n	8006cfa <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	7d1b      	ldrb	r3, [r3, #20]
 8006bee:	b25b      	sxtb	r3, r3
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	da14      	bge.n	8006c1e <f_read+0x19a>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6a1a      	ldr	r2, [r3, #32]
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d90d      	bls.n	8006c1e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6a1a      	ldr	r2, [r3, #32]
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	025b      	lsls	r3, r3, #9
 8006c0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c0e:	18d0      	adds	r0, r2, r3
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	3330      	adds	r3, #48	@ 0x30
 8006c14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c18:	4619      	mov	r1, r3
 8006c1a:	f7fe f9c3 	bl	8004fa4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c20:	025b      	lsls	r3, r3, #9
 8006c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8006c24:	e050      	b.n	8006cc8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	69ba      	ldr	r2, [r7, #24]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d02e      	beq.n	8006c8e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	7d1b      	ldrb	r3, [r3, #20]
 8006c34:	b25b      	sxtb	r3, r3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	da18      	bge.n	8006c6c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	7858      	ldrb	r0, [r3, #1]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6a1a      	ldr	r2, [r3, #32]
 8006c48:	2301      	movs	r3, #1
 8006c4a:	f7fe f909 	bl	8004e60 <disk_write>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d004      	beq.n	8006c5e <f_read+0x1da>
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2201      	movs	r2, #1
 8006c58:	755a      	strb	r2, [r3, #21]
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e04d      	b.n	8006cfa <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	7d1b      	ldrb	r3, [r3, #20]
 8006c62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c66:	b2da      	uxtb	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	7858      	ldrb	r0, [r3, #1]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006c76:	2301      	movs	r3, #1
 8006c78:	69ba      	ldr	r2, [r7, #24]
 8006c7a:	f7fe f8d1 	bl	8004e20 <disk_read>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d004      	beq.n	8006c8e <f_read+0x20a>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2201      	movs	r2, #1
 8006c88:	755a      	strb	r2, [r3, #21]
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e035      	b.n	8006cfa <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	69ba      	ldr	r2, [r7, #24]
 8006c92:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c9c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8006ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006ca2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d901      	bls.n	8006cae <f_read+0x22a>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cbc:	4413      	add	r3, r2
 8006cbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006cc4:	f7fe f96e 	bl	8004fa4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006cc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ccc:	4413      	add	r3, r2
 8006cce:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	699a      	ldr	r2, [r3, #24]
 8006cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd6:	441a      	add	r2, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	619a      	str	r2, [r3, #24]
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ce2:	441a      	add	r2, r3
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	601a      	str	r2, [r3, #0]
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f47f af01 	bne.w	8006afa <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3738      	adds	r7, #56	@ 0x38
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b090      	sub	sp, #64	@ 0x40
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
 8006d0a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f107 0208 	add.w	r2, r7, #8
 8006d12:	4611      	mov	r1, r2
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7ff fc7f 	bl	8006618 <validate>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8006d20:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d103      	bne.n	8006d30 <f_lseek+0x2e>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	7d5b      	ldrb	r3, [r3, #21]
 8006d2c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8006d30:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d002      	beq.n	8006d3e <f_lseek+0x3c>
 8006d38:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006d3c:	e1e6      	b.n	800710c <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f000 80d1 	beq.w	8006eea <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4e:	d15a      	bne.n	8006e06 <f_lseek+0x104>
			tbl = fp->cltbl;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d54:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8006d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d58:	1d1a      	adds	r2, r3, #4
 8006d5a:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	617b      	str	r3, [r7, #20]
 8006d60:	2302      	movs	r3, #2
 8006d62:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8006d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d03a      	beq.n	8006de6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8006d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d72:	613b      	str	r3, [r7, #16]
 8006d74:	2300      	movs	r3, #0
 8006d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d7a:	3302      	adds	r3, #2
 8006d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8006d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d80:	60fb      	str	r3, [r7, #12]
 8006d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d84:	3301      	adds	r3, #1
 8006d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7fe fb47 	bl	8005420 <get_fat>
 8006d92:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8006d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d804      	bhi.n	8006da4 <f_lseek+0xa2>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2202      	movs	r2, #2
 8006d9e:	755a      	strb	r2, [r3, #21]
 8006da0:	2302      	movs	r3, #2
 8006da2:	e1b3      	b.n	800710c <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006daa:	d104      	bne.n	8006db6 <f_lseek+0xb4>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	755a      	strb	r2, [r3, #21]
 8006db2:	2301      	movs	r3, #1
 8006db4:	e1aa      	b.n	800710c <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	3301      	adds	r3, #1
 8006dba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d0de      	beq.n	8006d7e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8006dc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d809      	bhi.n	8006ddc <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dca:	1d1a      	adds	r2, r3, #4
 8006dcc:	627a      	str	r2, [r7, #36]	@ 0x24
 8006dce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006dd0:	601a      	str	r2, [r3, #0]
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd4:	1d1a      	adds	r2, r3, #4
 8006dd6:	627a      	str	r2, [r7, #36]	@ 0x24
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	695b      	ldr	r3, [r3, #20]
 8006de0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d3c4      	bcc.n	8006d70 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006dec:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8006dee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d803      	bhi.n	8006dfe <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8006df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df8:	2200      	movs	r2, #0
 8006dfa:	601a      	str	r2, [r3, #0]
 8006dfc:	e184      	b.n	8007108 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8006dfe:	2311      	movs	r3, #17
 8006e00:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8006e04:	e180      	b.n	8007108 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d902      	bls.n	8006e16 <f_lseek+0x114>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	683a      	ldr	r2, [r7, #0]
 8006e1a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f000 8172 	beq.w	8007108 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	3b01      	subs	r3, #1
 8006e28:	4619      	mov	r1, r3
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7fe fd86 	bl	800593c <clmt_clust>
 8006e30:	4602      	mov	r2, r0
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8006e36:	68ba      	ldr	r2, [r7, #8]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	69db      	ldr	r3, [r3, #28]
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	4610      	mov	r0, r2
 8006e40:	f7fe facf 	bl	80053e2 <clust2sect>
 8006e44:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d104      	bne.n	8006e56 <f_lseek+0x154>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2202      	movs	r2, #2
 8006e50:	755a      	strb	r2, [r3, #21]
 8006e52:	2302      	movs	r3, #2
 8006e54:	e15a      	b.n	800710c <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	0a5b      	lsrs	r3, r3, #9
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	8952      	ldrh	r2, [r2, #10]
 8006e60:	3a01      	subs	r2, #1
 8006e62:	4013      	ands	r3, r2
 8006e64:	69ba      	ldr	r2, [r7, #24]
 8006e66:	4413      	add	r3, r2
 8006e68:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	699b      	ldr	r3, [r3, #24]
 8006e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f000 8148 	beq.w	8007108 <f_lseek+0x406>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a1b      	ldr	r3, [r3, #32]
 8006e7c:	69ba      	ldr	r2, [r7, #24]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	f000 8142 	beq.w	8007108 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	7d1b      	ldrb	r3, [r3, #20]
 8006e88:	b25b      	sxtb	r3, r3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	da18      	bge.n	8006ec0 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	7858      	ldrb	r0, [r3, #1]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a1a      	ldr	r2, [r3, #32]
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	f7fd ffdf 	bl	8004e60 <disk_write>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d004      	beq.n	8006eb2 <f_lseek+0x1b0>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	755a      	strb	r2, [r3, #21]
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e12c      	b.n	800710c <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	7d1b      	ldrb	r3, [r3, #20]
 8006eb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006eba:	b2da      	uxtb	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	7858      	ldrb	r0, [r3, #1]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006eca:	2301      	movs	r3, #1
 8006ecc:	69ba      	ldr	r2, [r7, #24]
 8006ece:	f7fd ffa7 	bl	8004e20 <disk_read>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d004      	beq.n	8006ee2 <f_lseek+0x1e0>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	755a      	strb	r2, [r3, #21]
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e114      	b.n	800710c <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	69ba      	ldr	r2, [r7, #24]
 8006ee6:	621a      	str	r2, [r3, #32]
 8006ee8:	e10e      	b.n	8007108 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d908      	bls.n	8006f06 <f_lseek+0x204>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	7d1b      	ldrb	r3, [r3, #20]
 8006ef8:	f003 0302 	and.w	r3, r3, #2
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d102      	bne.n	8006f06 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f14:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 80a7 	beq.w	800706c <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	895b      	ldrh	r3, [r3, #10]
 8006f22:	025b      	lsls	r3, r3, #9
 8006f24:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8006f26:	6a3b      	ldr	r3, [r7, #32]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d01b      	beq.n	8006f64 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	1e5a      	subs	r2, r3, #1
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f36:	6a3b      	ldr	r3, [r7, #32]
 8006f38:	1e59      	subs	r1, r3, #1
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d30f      	bcc.n	8006f64 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	1e5a      	subs	r2, r3, #1
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	425b      	negs	r3, r3
 8006f4c:	401a      	ands	r2, r3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	69db      	ldr	r3, [r3, #28]
 8006f60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f62:	e022      	b.n	8006faa <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8006f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d119      	bne.n	8006fa4 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2100      	movs	r1, #0
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7fe fc49 	bl	800580c <create_chain>
 8006f7a:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d104      	bne.n	8006f8c <f_lseek+0x28a>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2202      	movs	r2, #2
 8006f86:	755a      	strb	r2, [r3, #21]
 8006f88:	2302      	movs	r3, #2
 8006f8a:	e0bf      	b.n	800710c <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f92:	d104      	bne.n	8006f9e <f_lseek+0x29c>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	755a      	strb	r2, [r3, #21]
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e0b6      	b.n	800710c <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006fa2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006fa8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8006faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d05d      	beq.n	800706c <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8006fb0:	e03a      	b.n	8007028 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8006fb2:	683a      	ldr	r2, [r7, #0]
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	1ad3      	subs	r3, r2, r3
 8006fb8:	603b      	str	r3, [r7, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	699a      	ldr	r2, [r3, #24]
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	441a      	add	r2, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	7d1b      	ldrb	r3, [r3, #20]
 8006fca:	f003 0302 	and.w	r3, r3, #2
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00b      	beq.n	8006fea <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7fe fc18 	bl	800580c <create_chain>
 8006fdc:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8006fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d108      	bne.n	8006ff6 <f_lseek+0x2f4>
							ofs = 0; break;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	603b      	str	r3, [r7, #0]
 8006fe8:	e022      	b.n	8007030 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7fe fa16 	bl	8005420 <get_fat>
 8006ff4:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffc:	d104      	bne.n	8007008 <f_lseek+0x306>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	755a      	strb	r2, [r3, #21]
 8007004:	2301      	movs	r3, #1
 8007006:	e081      	b.n	800710c <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8007008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800700a:	2b01      	cmp	r3, #1
 800700c:	d904      	bls.n	8007018 <f_lseek+0x316>
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007014:	429a      	cmp	r2, r3
 8007016:	d304      	bcc.n	8007022 <f_lseek+0x320>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2202      	movs	r2, #2
 800701c:	755a      	strb	r2, [r3, #21]
 800701e:	2302      	movs	r3, #2
 8007020:	e074      	b.n	800710c <f_lseek+0x40a>
					fp->clust = clst;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007026:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8007028:	683a      	ldr	r2, [r7, #0]
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	429a      	cmp	r2, r3
 800702e:	d8c0      	bhi.n	8006fb2 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	699a      	ldr	r2, [r3, #24]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	441a      	add	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007042:	2b00      	cmp	r3, #0
 8007044:	d012      	beq.n	800706c <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800704a:	4618      	mov	r0, r3
 800704c:	f7fe f9c9 	bl	80053e2 <clust2sect>
 8007050:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8007052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007054:	2b00      	cmp	r3, #0
 8007056:	d104      	bne.n	8007062 <f_lseek+0x360>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2202      	movs	r2, #2
 800705c:	755a      	strb	r2, [r3, #21]
 800705e:	2302      	movs	r3, #2
 8007060:	e054      	b.n	800710c <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	0a5b      	lsrs	r3, r3, #9
 8007066:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007068:	4413      	add	r3, r2
 800706a:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	699a      	ldr	r2, [r3, #24]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	429a      	cmp	r2, r3
 8007076:	d90a      	bls.n	800708e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	699a      	ldr	r2, [r3, #24]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	7d1b      	ldrb	r3, [r3, #20]
 8007084:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007088:	b2da      	uxtb	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007096:	2b00      	cmp	r3, #0
 8007098:	d036      	beq.n	8007108 <f_lseek+0x406>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d031      	beq.n	8007108 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	7d1b      	ldrb	r3, [r3, #20]
 80070a8:	b25b      	sxtb	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	da18      	bge.n	80070e0 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	7858      	ldrb	r0, [r3, #1]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a1a      	ldr	r2, [r3, #32]
 80070bc:	2301      	movs	r3, #1
 80070be:	f7fd fecf 	bl	8004e60 <disk_write>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d004      	beq.n	80070d2 <f_lseek+0x3d0>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	755a      	strb	r2, [r3, #21]
 80070ce:	2301      	movs	r3, #1
 80070d0:	e01c      	b.n	800710c <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	7d1b      	ldrb	r3, [r3, #20]
 80070d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070da:	b2da      	uxtb	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	7858      	ldrb	r0, [r3, #1]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80070ea:	2301      	movs	r3, #1
 80070ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80070ee:	f7fd fe97 	bl	8004e20 <disk_read>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d004      	beq.n	8007102 <f_lseek+0x400>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	755a      	strb	r2, [r3, #21]
 80070fe:	2301      	movs	r3, #1
 8007100:	e004      	b.n	800710c <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007106:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8007108:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800710c:	4618      	mov	r0, r3
 800710e:	3740      	adds	r7, #64	@ 0x40
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007114:	b480      	push	{r7}
 8007116:	b087      	sub	sp, #28
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	4613      	mov	r3, r2
 8007120:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007122:	2301      	movs	r3, #1
 8007124:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007126:	2300      	movs	r3, #0
 8007128:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800712a:	4b1f      	ldr	r3, [pc, #124]	@ (80071a8 <FATFS_LinkDriverEx+0x94>)
 800712c:	7a5b      	ldrb	r3, [r3, #9]
 800712e:	b2db      	uxtb	r3, r3
 8007130:	2b00      	cmp	r3, #0
 8007132:	d131      	bne.n	8007198 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007134:	4b1c      	ldr	r3, [pc, #112]	@ (80071a8 <FATFS_LinkDriverEx+0x94>)
 8007136:	7a5b      	ldrb	r3, [r3, #9]
 8007138:	b2db      	uxtb	r3, r3
 800713a:	461a      	mov	r2, r3
 800713c:	4b1a      	ldr	r3, [pc, #104]	@ (80071a8 <FATFS_LinkDriverEx+0x94>)
 800713e:	2100      	movs	r1, #0
 8007140:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007142:	4b19      	ldr	r3, [pc, #100]	@ (80071a8 <FATFS_LinkDriverEx+0x94>)
 8007144:	7a5b      	ldrb	r3, [r3, #9]
 8007146:	b2db      	uxtb	r3, r3
 8007148:	4a17      	ldr	r2, [pc, #92]	@ (80071a8 <FATFS_LinkDriverEx+0x94>)
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	4413      	add	r3, r2
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007152:	4b15      	ldr	r3, [pc, #84]	@ (80071a8 <FATFS_LinkDriverEx+0x94>)
 8007154:	7a5b      	ldrb	r3, [r3, #9]
 8007156:	b2db      	uxtb	r3, r3
 8007158:	461a      	mov	r2, r3
 800715a:	4b13      	ldr	r3, [pc, #76]	@ (80071a8 <FATFS_LinkDriverEx+0x94>)
 800715c:	4413      	add	r3, r2
 800715e:	79fa      	ldrb	r2, [r7, #7]
 8007160:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007162:	4b11      	ldr	r3, [pc, #68]	@ (80071a8 <FATFS_LinkDriverEx+0x94>)
 8007164:	7a5b      	ldrb	r3, [r3, #9]
 8007166:	b2db      	uxtb	r3, r3
 8007168:	1c5a      	adds	r2, r3, #1
 800716a:	b2d1      	uxtb	r1, r2
 800716c:	4a0e      	ldr	r2, [pc, #56]	@ (80071a8 <FATFS_LinkDriverEx+0x94>)
 800716e:	7251      	strb	r1, [r2, #9]
 8007170:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007172:	7dbb      	ldrb	r3, [r7, #22]
 8007174:	3330      	adds	r3, #48	@ 0x30
 8007176:	b2da      	uxtb	r2, r3
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	3301      	adds	r3, #1
 8007180:	223a      	movs	r2, #58	@ 0x3a
 8007182:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	3302      	adds	r3, #2
 8007188:	222f      	movs	r2, #47	@ 0x2f
 800718a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	3303      	adds	r3, #3
 8007190:	2200      	movs	r2, #0
 8007192:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007194:	2300      	movs	r3, #0
 8007196:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007198:	7dfb      	ldrb	r3, [r7, #23]
}
 800719a:	4618      	mov	r0, r3
 800719c:	371c      	adds	r7, #28
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	20000288 	.word	0x20000288

080071ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80071b6:	2200      	movs	r2, #0
 80071b8:	6839      	ldr	r1, [r7, #0]
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f7ff ffaa 	bl	8007114 <FATFS_LinkDriverEx>
 80071c0:	4603      	mov	r3, r0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <abort>:
 80071ca:	b508      	push	{r3, lr}
 80071cc:	2006      	movs	r0, #6
 80071ce:	f000 f92b 	bl	8007428 <raise>
 80071d2:	2001      	movs	r0, #1
 80071d4:	f7fa febb 	bl	8001f4e <_exit>

080071d8 <malloc>:
 80071d8:	4b02      	ldr	r3, [pc, #8]	@ (80071e4 <malloc+0xc>)
 80071da:	4601      	mov	r1, r0
 80071dc:	6818      	ldr	r0, [r3, #0]
 80071de:	f000 b82d 	b.w	800723c <_malloc_r>
 80071e2:	bf00      	nop
 80071e4:	20000024 	.word	0x20000024

080071e8 <free>:
 80071e8:	4b02      	ldr	r3, [pc, #8]	@ (80071f4 <free+0xc>)
 80071ea:	4601      	mov	r1, r0
 80071ec:	6818      	ldr	r0, [r3, #0]
 80071ee:	f000 b973 	b.w	80074d8 <_free_r>
 80071f2:	bf00      	nop
 80071f4:	20000024 	.word	0x20000024

080071f8 <sbrk_aligned>:
 80071f8:	b570      	push	{r4, r5, r6, lr}
 80071fa:	4e0f      	ldr	r6, [pc, #60]	@ (8007238 <sbrk_aligned+0x40>)
 80071fc:	460c      	mov	r4, r1
 80071fe:	6831      	ldr	r1, [r6, #0]
 8007200:	4605      	mov	r5, r0
 8007202:	b911      	cbnz	r1, 800720a <sbrk_aligned+0x12>
 8007204:	f000 f92c 	bl	8007460 <_sbrk_r>
 8007208:	6030      	str	r0, [r6, #0]
 800720a:	4621      	mov	r1, r4
 800720c:	4628      	mov	r0, r5
 800720e:	f000 f927 	bl	8007460 <_sbrk_r>
 8007212:	1c43      	adds	r3, r0, #1
 8007214:	d103      	bne.n	800721e <sbrk_aligned+0x26>
 8007216:	f04f 34ff 	mov.w	r4, #4294967295
 800721a:	4620      	mov	r0, r4
 800721c:	bd70      	pop	{r4, r5, r6, pc}
 800721e:	1cc4      	adds	r4, r0, #3
 8007220:	f024 0403 	bic.w	r4, r4, #3
 8007224:	42a0      	cmp	r0, r4
 8007226:	d0f8      	beq.n	800721a <sbrk_aligned+0x22>
 8007228:	1a21      	subs	r1, r4, r0
 800722a:	4628      	mov	r0, r5
 800722c:	f000 f918 	bl	8007460 <_sbrk_r>
 8007230:	3001      	adds	r0, #1
 8007232:	d1f2      	bne.n	800721a <sbrk_aligned+0x22>
 8007234:	e7ef      	b.n	8007216 <sbrk_aligned+0x1e>
 8007236:	bf00      	nop
 8007238:	20000294 	.word	0x20000294

0800723c <_malloc_r>:
 800723c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007240:	1ccd      	adds	r5, r1, #3
 8007242:	f025 0503 	bic.w	r5, r5, #3
 8007246:	3508      	adds	r5, #8
 8007248:	2d0c      	cmp	r5, #12
 800724a:	bf38      	it	cc
 800724c:	250c      	movcc	r5, #12
 800724e:	2d00      	cmp	r5, #0
 8007250:	4606      	mov	r6, r0
 8007252:	db01      	blt.n	8007258 <_malloc_r+0x1c>
 8007254:	42a9      	cmp	r1, r5
 8007256:	d904      	bls.n	8007262 <_malloc_r+0x26>
 8007258:	230c      	movs	r3, #12
 800725a:	6033      	str	r3, [r6, #0]
 800725c:	2000      	movs	r0, #0
 800725e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007262:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007338 <_malloc_r+0xfc>
 8007266:	f000 f869 	bl	800733c <__malloc_lock>
 800726a:	f8d8 3000 	ldr.w	r3, [r8]
 800726e:	461c      	mov	r4, r3
 8007270:	bb44      	cbnz	r4, 80072c4 <_malloc_r+0x88>
 8007272:	4629      	mov	r1, r5
 8007274:	4630      	mov	r0, r6
 8007276:	f7ff ffbf 	bl	80071f8 <sbrk_aligned>
 800727a:	1c43      	adds	r3, r0, #1
 800727c:	4604      	mov	r4, r0
 800727e:	d158      	bne.n	8007332 <_malloc_r+0xf6>
 8007280:	f8d8 4000 	ldr.w	r4, [r8]
 8007284:	4627      	mov	r7, r4
 8007286:	2f00      	cmp	r7, #0
 8007288:	d143      	bne.n	8007312 <_malloc_r+0xd6>
 800728a:	2c00      	cmp	r4, #0
 800728c:	d04b      	beq.n	8007326 <_malloc_r+0xea>
 800728e:	6823      	ldr	r3, [r4, #0]
 8007290:	4639      	mov	r1, r7
 8007292:	4630      	mov	r0, r6
 8007294:	eb04 0903 	add.w	r9, r4, r3
 8007298:	f000 f8e2 	bl	8007460 <_sbrk_r>
 800729c:	4581      	cmp	r9, r0
 800729e:	d142      	bne.n	8007326 <_malloc_r+0xea>
 80072a0:	6821      	ldr	r1, [r4, #0]
 80072a2:	1a6d      	subs	r5, r5, r1
 80072a4:	4629      	mov	r1, r5
 80072a6:	4630      	mov	r0, r6
 80072a8:	f7ff ffa6 	bl	80071f8 <sbrk_aligned>
 80072ac:	3001      	adds	r0, #1
 80072ae:	d03a      	beq.n	8007326 <_malloc_r+0xea>
 80072b0:	6823      	ldr	r3, [r4, #0]
 80072b2:	442b      	add	r3, r5
 80072b4:	6023      	str	r3, [r4, #0]
 80072b6:	f8d8 3000 	ldr.w	r3, [r8]
 80072ba:	685a      	ldr	r2, [r3, #4]
 80072bc:	bb62      	cbnz	r2, 8007318 <_malloc_r+0xdc>
 80072be:	f8c8 7000 	str.w	r7, [r8]
 80072c2:	e00f      	b.n	80072e4 <_malloc_r+0xa8>
 80072c4:	6822      	ldr	r2, [r4, #0]
 80072c6:	1b52      	subs	r2, r2, r5
 80072c8:	d420      	bmi.n	800730c <_malloc_r+0xd0>
 80072ca:	2a0b      	cmp	r2, #11
 80072cc:	d917      	bls.n	80072fe <_malloc_r+0xc2>
 80072ce:	1961      	adds	r1, r4, r5
 80072d0:	42a3      	cmp	r3, r4
 80072d2:	6025      	str	r5, [r4, #0]
 80072d4:	bf18      	it	ne
 80072d6:	6059      	strne	r1, [r3, #4]
 80072d8:	6863      	ldr	r3, [r4, #4]
 80072da:	bf08      	it	eq
 80072dc:	f8c8 1000 	streq.w	r1, [r8]
 80072e0:	5162      	str	r2, [r4, r5]
 80072e2:	604b      	str	r3, [r1, #4]
 80072e4:	4630      	mov	r0, r6
 80072e6:	f000 f82f 	bl	8007348 <__malloc_unlock>
 80072ea:	f104 000b 	add.w	r0, r4, #11
 80072ee:	1d23      	adds	r3, r4, #4
 80072f0:	f020 0007 	bic.w	r0, r0, #7
 80072f4:	1ac2      	subs	r2, r0, r3
 80072f6:	bf1c      	itt	ne
 80072f8:	1a1b      	subne	r3, r3, r0
 80072fa:	50a3      	strne	r3, [r4, r2]
 80072fc:	e7af      	b.n	800725e <_malloc_r+0x22>
 80072fe:	6862      	ldr	r2, [r4, #4]
 8007300:	42a3      	cmp	r3, r4
 8007302:	bf0c      	ite	eq
 8007304:	f8c8 2000 	streq.w	r2, [r8]
 8007308:	605a      	strne	r2, [r3, #4]
 800730a:	e7eb      	b.n	80072e4 <_malloc_r+0xa8>
 800730c:	4623      	mov	r3, r4
 800730e:	6864      	ldr	r4, [r4, #4]
 8007310:	e7ae      	b.n	8007270 <_malloc_r+0x34>
 8007312:	463c      	mov	r4, r7
 8007314:	687f      	ldr	r7, [r7, #4]
 8007316:	e7b6      	b.n	8007286 <_malloc_r+0x4a>
 8007318:	461a      	mov	r2, r3
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	42a3      	cmp	r3, r4
 800731e:	d1fb      	bne.n	8007318 <_malloc_r+0xdc>
 8007320:	2300      	movs	r3, #0
 8007322:	6053      	str	r3, [r2, #4]
 8007324:	e7de      	b.n	80072e4 <_malloc_r+0xa8>
 8007326:	230c      	movs	r3, #12
 8007328:	6033      	str	r3, [r6, #0]
 800732a:	4630      	mov	r0, r6
 800732c:	f000 f80c 	bl	8007348 <__malloc_unlock>
 8007330:	e794      	b.n	800725c <_malloc_r+0x20>
 8007332:	6005      	str	r5, [r0, #0]
 8007334:	e7d6      	b.n	80072e4 <_malloc_r+0xa8>
 8007336:	bf00      	nop
 8007338:	20000298 	.word	0x20000298

0800733c <__malloc_lock>:
 800733c:	4801      	ldr	r0, [pc, #4]	@ (8007344 <__malloc_lock+0x8>)
 800733e:	f000 b8c9 	b.w	80074d4 <__retarget_lock_acquire_recursive>
 8007342:	bf00      	nop
 8007344:	200003d8 	.word	0x200003d8

08007348 <__malloc_unlock>:
 8007348:	4801      	ldr	r0, [pc, #4]	@ (8007350 <__malloc_unlock+0x8>)
 800734a:	f000 b8c4 	b.w	80074d6 <__retarget_lock_release_recursive>
 800734e:	bf00      	nop
 8007350:	200003d8 	.word	0x200003d8

08007354 <_vsniprintf_r>:
 8007354:	b530      	push	{r4, r5, lr}
 8007356:	4614      	mov	r4, r2
 8007358:	2c00      	cmp	r4, #0
 800735a:	b09b      	sub	sp, #108	@ 0x6c
 800735c:	4605      	mov	r5, r0
 800735e:	461a      	mov	r2, r3
 8007360:	da05      	bge.n	800736e <_vsniprintf_r+0x1a>
 8007362:	238b      	movs	r3, #139	@ 0x8b
 8007364:	6003      	str	r3, [r0, #0]
 8007366:	f04f 30ff 	mov.w	r0, #4294967295
 800736a:	b01b      	add	sp, #108	@ 0x6c
 800736c:	bd30      	pop	{r4, r5, pc}
 800736e:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007372:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007376:	bf14      	ite	ne
 8007378:	f104 33ff 	addne.w	r3, r4, #4294967295
 800737c:	4623      	moveq	r3, r4
 800737e:	9302      	str	r3, [sp, #8]
 8007380:	9305      	str	r3, [sp, #20]
 8007382:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007386:	9100      	str	r1, [sp, #0]
 8007388:	9104      	str	r1, [sp, #16]
 800738a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800738e:	4669      	mov	r1, sp
 8007390:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007392:	f000 f947 	bl	8007624 <_svfiprintf_r>
 8007396:	1c43      	adds	r3, r0, #1
 8007398:	bfbc      	itt	lt
 800739a:	238b      	movlt	r3, #139	@ 0x8b
 800739c:	602b      	strlt	r3, [r5, #0]
 800739e:	2c00      	cmp	r4, #0
 80073a0:	d0e3      	beq.n	800736a <_vsniprintf_r+0x16>
 80073a2:	9b00      	ldr	r3, [sp, #0]
 80073a4:	2200      	movs	r2, #0
 80073a6:	701a      	strb	r2, [r3, #0]
 80073a8:	e7df      	b.n	800736a <_vsniprintf_r+0x16>
	...

080073ac <vsniprintf>:
 80073ac:	b507      	push	{r0, r1, r2, lr}
 80073ae:	9300      	str	r3, [sp, #0]
 80073b0:	4613      	mov	r3, r2
 80073b2:	460a      	mov	r2, r1
 80073b4:	4601      	mov	r1, r0
 80073b6:	4803      	ldr	r0, [pc, #12]	@ (80073c4 <vsniprintf+0x18>)
 80073b8:	6800      	ldr	r0, [r0, #0]
 80073ba:	f7ff ffcb 	bl	8007354 <_vsniprintf_r>
 80073be:	b003      	add	sp, #12
 80073c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80073c4:	20000024 	.word	0x20000024

080073c8 <memset>:
 80073c8:	4402      	add	r2, r0
 80073ca:	4603      	mov	r3, r0
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d100      	bne.n	80073d2 <memset+0xa>
 80073d0:	4770      	bx	lr
 80073d2:	f803 1b01 	strb.w	r1, [r3], #1
 80073d6:	e7f9      	b.n	80073cc <memset+0x4>

080073d8 <_raise_r>:
 80073d8:	291f      	cmp	r1, #31
 80073da:	b538      	push	{r3, r4, r5, lr}
 80073dc:	4605      	mov	r5, r0
 80073de:	460c      	mov	r4, r1
 80073e0:	d904      	bls.n	80073ec <_raise_r+0x14>
 80073e2:	2316      	movs	r3, #22
 80073e4:	6003      	str	r3, [r0, #0]
 80073e6:	f04f 30ff 	mov.w	r0, #4294967295
 80073ea:	bd38      	pop	{r3, r4, r5, pc}
 80073ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80073ee:	b112      	cbz	r2, 80073f6 <_raise_r+0x1e>
 80073f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80073f4:	b94b      	cbnz	r3, 800740a <_raise_r+0x32>
 80073f6:	4628      	mov	r0, r5
 80073f8:	f000 f830 	bl	800745c <_getpid_r>
 80073fc:	4622      	mov	r2, r4
 80073fe:	4601      	mov	r1, r0
 8007400:	4628      	mov	r0, r5
 8007402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007406:	f000 b817 	b.w	8007438 <_kill_r>
 800740a:	2b01      	cmp	r3, #1
 800740c:	d00a      	beq.n	8007424 <_raise_r+0x4c>
 800740e:	1c59      	adds	r1, r3, #1
 8007410:	d103      	bne.n	800741a <_raise_r+0x42>
 8007412:	2316      	movs	r3, #22
 8007414:	6003      	str	r3, [r0, #0]
 8007416:	2001      	movs	r0, #1
 8007418:	e7e7      	b.n	80073ea <_raise_r+0x12>
 800741a:	2100      	movs	r1, #0
 800741c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007420:	4620      	mov	r0, r4
 8007422:	4798      	blx	r3
 8007424:	2000      	movs	r0, #0
 8007426:	e7e0      	b.n	80073ea <_raise_r+0x12>

08007428 <raise>:
 8007428:	4b02      	ldr	r3, [pc, #8]	@ (8007434 <raise+0xc>)
 800742a:	4601      	mov	r1, r0
 800742c:	6818      	ldr	r0, [r3, #0]
 800742e:	f7ff bfd3 	b.w	80073d8 <_raise_r>
 8007432:	bf00      	nop
 8007434:	20000024 	.word	0x20000024

08007438 <_kill_r>:
 8007438:	b538      	push	{r3, r4, r5, lr}
 800743a:	4d07      	ldr	r5, [pc, #28]	@ (8007458 <_kill_r+0x20>)
 800743c:	2300      	movs	r3, #0
 800743e:	4604      	mov	r4, r0
 8007440:	4608      	mov	r0, r1
 8007442:	4611      	mov	r1, r2
 8007444:	602b      	str	r3, [r5, #0]
 8007446:	f7fa fd72 	bl	8001f2e <_kill>
 800744a:	1c43      	adds	r3, r0, #1
 800744c:	d102      	bne.n	8007454 <_kill_r+0x1c>
 800744e:	682b      	ldr	r3, [r5, #0]
 8007450:	b103      	cbz	r3, 8007454 <_kill_r+0x1c>
 8007452:	6023      	str	r3, [r4, #0]
 8007454:	bd38      	pop	{r3, r4, r5, pc}
 8007456:	bf00      	nop
 8007458:	200003d4 	.word	0x200003d4

0800745c <_getpid_r>:
 800745c:	f7fa bd5f 	b.w	8001f1e <_getpid>

08007460 <_sbrk_r>:
 8007460:	b538      	push	{r3, r4, r5, lr}
 8007462:	4d06      	ldr	r5, [pc, #24]	@ (800747c <_sbrk_r+0x1c>)
 8007464:	2300      	movs	r3, #0
 8007466:	4604      	mov	r4, r0
 8007468:	4608      	mov	r0, r1
 800746a:	602b      	str	r3, [r5, #0]
 800746c:	f7fa fd7a 	bl	8001f64 <_sbrk>
 8007470:	1c43      	adds	r3, r0, #1
 8007472:	d102      	bne.n	800747a <_sbrk_r+0x1a>
 8007474:	682b      	ldr	r3, [r5, #0]
 8007476:	b103      	cbz	r3, 800747a <_sbrk_r+0x1a>
 8007478:	6023      	str	r3, [r4, #0]
 800747a:	bd38      	pop	{r3, r4, r5, pc}
 800747c:	200003d4 	.word	0x200003d4

08007480 <__errno>:
 8007480:	4b01      	ldr	r3, [pc, #4]	@ (8007488 <__errno+0x8>)
 8007482:	6818      	ldr	r0, [r3, #0]
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	20000024 	.word	0x20000024

0800748c <__libc_init_array>:
 800748c:	b570      	push	{r4, r5, r6, lr}
 800748e:	4d0d      	ldr	r5, [pc, #52]	@ (80074c4 <__libc_init_array+0x38>)
 8007490:	4c0d      	ldr	r4, [pc, #52]	@ (80074c8 <__libc_init_array+0x3c>)
 8007492:	1b64      	subs	r4, r4, r5
 8007494:	10a4      	asrs	r4, r4, #2
 8007496:	2600      	movs	r6, #0
 8007498:	42a6      	cmp	r6, r4
 800749a:	d109      	bne.n	80074b0 <__libc_init_array+0x24>
 800749c:	4d0b      	ldr	r5, [pc, #44]	@ (80074cc <__libc_init_array+0x40>)
 800749e:	4c0c      	ldr	r4, [pc, #48]	@ (80074d0 <__libc_init_array+0x44>)
 80074a0:	f001 fb08 	bl	8008ab4 <_init>
 80074a4:	1b64      	subs	r4, r4, r5
 80074a6:	10a4      	asrs	r4, r4, #2
 80074a8:	2600      	movs	r6, #0
 80074aa:	42a6      	cmp	r6, r4
 80074ac:	d105      	bne.n	80074ba <__libc_init_array+0x2e>
 80074ae:	bd70      	pop	{r4, r5, r6, pc}
 80074b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80074b4:	4798      	blx	r3
 80074b6:	3601      	adds	r6, #1
 80074b8:	e7ee      	b.n	8007498 <__libc_init_array+0xc>
 80074ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80074be:	4798      	blx	r3
 80074c0:	3601      	adds	r6, #1
 80074c2:	e7f2      	b.n	80074aa <__libc_init_array+0x1e>
 80074c4:	080091f8 	.word	0x080091f8
 80074c8:	080091f8 	.word	0x080091f8
 80074cc:	080091f8 	.word	0x080091f8
 80074d0:	080091fc 	.word	0x080091fc

080074d4 <__retarget_lock_acquire_recursive>:
 80074d4:	4770      	bx	lr

080074d6 <__retarget_lock_release_recursive>:
 80074d6:	4770      	bx	lr

080074d8 <_free_r>:
 80074d8:	b538      	push	{r3, r4, r5, lr}
 80074da:	4605      	mov	r5, r0
 80074dc:	2900      	cmp	r1, #0
 80074de:	d041      	beq.n	8007564 <_free_r+0x8c>
 80074e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074e4:	1f0c      	subs	r4, r1, #4
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	bfb8      	it	lt
 80074ea:	18e4      	addlt	r4, r4, r3
 80074ec:	f7ff ff26 	bl	800733c <__malloc_lock>
 80074f0:	4a1d      	ldr	r2, [pc, #116]	@ (8007568 <_free_r+0x90>)
 80074f2:	6813      	ldr	r3, [r2, #0]
 80074f4:	b933      	cbnz	r3, 8007504 <_free_r+0x2c>
 80074f6:	6063      	str	r3, [r4, #4]
 80074f8:	6014      	str	r4, [r2, #0]
 80074fa:	4628      	mov	r0, r5
 80074fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007500:	f7ff bf22 	b.w	8007348 <__malloc_unlock>
 8007504:	42a3      	cmp	r3, r4
 8007506:	d908      	bls.n	800751a <_free_r+0x42>
 8007508:	6820      	ldr	r0, [r4, #0]
 800750a:	1821      	adds	r1, r4, r0
 800750c:	428b      	cmp	r3, r1
 800750e:	bf01      	itttt	eq
 8007510:	6819      	ldreq	r1, [r3, #0]
 8007512:	685b      	ldreq	r3, [r3, #4]
 8007514:	1809      	addeq	r1, r1, r0
 8007516:	6021      	streq	r1, [r4, #0]
 8007518:	e7ed      	b.n	80074f6 <_free_r+0x1e>
 800751a:	461a      	mov	r2, r3
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	b10b      	cbz	r3, 8007524 <_free_r+0x4c>
 8007520:	42a3      	cmp	r3, r4
 8007522:	d9fa      	bls.n	800751a <_free_r+0x42>
 8007524:	6811      	ldr	r1, [r2, #0]
 8007526:	1850      	adds	r0, r2, r1
 8007528:	42a0      	cmp	r0, r4
 800752a:	d10b      	bne.n	8007544 <_free_r+0x6c>
 800752c:	6820      	ldr	r0, [r4, #0]
 800752e:	4401      	add	r1, r0
 8007530:	1850      	adds	r0, r2, r1
 8007532:	4283      	cmp	r3, r0
 8007534:	6011      	str	r1, [r2, #0]
 8007536:	d1e0      	bne.n	80074fa <_free_r+0x22>
 8007538:	6818      	ldr	r0, [r3, #0]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	6053      	str	r3, [r2, #4]
 800753e:	4408      	add	r0, r1
 8007540:	6010      	str	r0, [r2, #0]
 8007542:	e7da      	b.n	80074fa <_free_r+0x22>
 8007544:	d902      	bls.n	800754c <_free_r+0x74>
 8007546:	230c      	movs	r3, #12
 8007548:	602b      	str	r3, [r5, #0]
 800754a:	e7d6      	b.n	80074fa <_free_r+0x22>
 800754c:	6820      	ldr	r0, [r4, #0]
 800754e:	1821      	adds	r1, r4, r0
 8007550:	428b      	cmp	r3, r1
 8007552:	bf04      	itt	eq
 8007554:	6819      	ldreq	r1, [r3, #0]
 8007556:	685b      	ldreq	r3, [r3, #4]
 8007558:	6063      	str	r3, [r4, #4]
 800755a:	bf04      	itt	eq
 800755c:	1809      	addeq	r1, r1, r0
 800755e:	6021      	streq	r1, [r4, #0]
 8007560:	6054      	str	r4, [r2, #4]
 8007562:	e7ca      	b.n	80074fa <_free_r+0x22>
 8007564:	bd38      	pop	{r3, r4, r5, pc}
 8007566:	bf00      	nop
 8007568:	20000298 	.word	0x20000298

0800756c <__ssputs_r>:
 800756c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007570:	688e      	ldr	r6, [r1, #8]
 8007572:	461f      	mov	r7, r3
 8007574:	42be      	cmp	r6, r7
 8007576:	680b      	ldr	r3, [r1, #0]
 8007578:	4682      	mov	sl, r0
 800757a:	460c      	mov	r4, r1
 800757c:	4690      	mov	r8, r2
 800757e:	d82d      	bhi.n	80075dc <__ssputs_r+0x70>
 8007580:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007584:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007588:	d026      	beq.n	80075d8 <__ssputs_r+0x6c>
 800758a:	6965      	ldr	r5, [r4, #20]
 800758c:	6909      	ldr	r1, [r1, #16]
 800758e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007592:	eba3 0901 	sub.w	r9, r3, r1
 8007596:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800759a:	1c7b      	adds	r3, r7, #1
 800759c:	444b      	add	r3, r9
 800759e:	106d      	asrs	r5, r5, #1
 80075a0:	429d      	cmp	r5, r3
 80075a2:	bf38      	it	cc
 80075a4:	461d      	movcc	r5, r3
 80075a6:	0553      	lsls	r3, r2, #21
 80075a8:	d527      	bpl.n	80075fa <__ssputs_r+0x8e>
 80075aa:	4629      	mov	r1, r5
 80075ac:	f7ff fe46 	bl	800723c <_malloc_r>
 80075b0:	4606      	mov	r6, r0
 80075b2:	b360      	cbz	r0, 800760e <__ssputs_r+0xa2>
 80075b4:	6921      	ldr	r1, [r4, #16]
 80075b6:	464a      	mov	r2, r9
 80075b8:	f000 fad8 	bl	8007b6c <memcpy>
 80075bc:	89a3      	ldrh	r3, [r4, #12]
 80075be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80075c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075c6:	81a3      	strh	r3, [r4, #12]
 80075c8:	6126      	str	r6, [r4, #16]
 80075ca:	6165      	str	r5, [r4, #20]
 80075cc:	444e      	add	r6, r9
 80075ce:	eba5 0509 	sub.w	r5, r5, r9
 80075d2:	6026      	str	r6, [r4, #0]
 80075d4:	60a5      	str	r5, [r4, #8]
 80075d6:	463e      	mov	r6, r7
 80075d8:	42be      	cmp	r6, r7
 80075da:	d900      	bls.n	80075de <__ssputs_r+0x72>
 80075dc:	463e      	mov	r6, r7
 80075de:	6820      	ldr	r0, [r4, #0]
 80075e0:	4632      	mov	r2, r6
 80075e2:	4641      	mov	r1, r8
 80075e4:	f000 faa8 	bl	8007b38 <memmove>
 80075e8:	68a3      	ldr	r3, [r4, #8]
 80075ea:	1b9b      	subs	r3, r3, r6
 80075ec:	60a3      	str	r3, [r4, #8]
 80075ee:	6823      	ldr	r3, [r4, #0]
 80075f0:	4433      	add	r3, r6
 80075f2:	6023      	str	r3, [r4, #0]
 80075f4:	2000      	movs	r0, #0
 80075f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075fa:	462a      	mov	r2, r5
 80075fc:	f000 fac4 	bl	8007b88 <_realloc_r>
 8007600:	4606      	mov	r6, r0
 8007602:	2800      	cmp	r0, #0
 8007604:	d1e0      	bne.n	80075c8 <__ssputs_r+0x5c>
 8007606:	6921      	ldr	r1, [r4, #16]
 8007608:	4650      	mov	r0, sl
 800760a:	f7ff ff65 	bl	80074d8 <_free_r>
 800760e:	230c      	movs	r3, #12
 8007610:	f8ca 3000 	str.w	r3, [sl]
 8007614:	89a3      	ldrh	r3, [r4, #12]
 8007616:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800761a:	81a3      	strh	r3, [r4, #12]
 800761c:	f04f 30ff 	mov.w	r0, #4294967295
 8007620:	e7e9      	b.n	80075f6 <__ssputs_r+0x8a>
	...

08007624 <_svfiprintf_r>:
 8007624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007628:	4698      	mov	r8, r3
 800762a:	898b      	ldrh	r3, [r1, #12]
 800762c:	061b      	lsls	r3, r3, #24
 800762e:	b09d      	sub	sp, #116	@ 0x74
 8007630:	4607      	mov	r7, r0
 8007632:	460d      	mov	r5, r1
 8007634:	4614      	mov	r4, r2
 8007636:	d510      	bpl.n	800765a <_svfiprintf_r+0x36>
 8007638:	690b      	ldr	r3, [r1, #16]
 800763a:	b973      	cbnz	r3, 800765a <_svfiprintf_r+0x36>
 800763c:	2140      	movs	r1, #64	@ 0x40
 800763e:	f7ff fdfd 	bl	800723c <_malloc_r>
 8007642:	6028      	str	r0, [r5, #0]
 8007644:	6128      	str	r0, [r5, #16]
 8007646:	b930      	cbnz	r0, 8007656 <_svfiprintf_r+0x32>
 8007648:	230c      	movs	r3, #12
 800764a:	603b      	str	r3, [r7, #0]
 800764c:	f04f 30ff 	mov.w	r0, #4294967295
 8007650:	b01d      	add	sp, #116	@ 0x74
 8007652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007656:	2340      	movs	r3, #64	@ 0x40
 8007658:	616b      	str	r3, [r5, #20]
 800765a:	2300      	movs	r3, #0
 800765c:	9309      	str	r3, [sp, #36]	@ 0x24
 800765e:	2320      	movs	r3, #32
 8007660:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007664:	f8cd 800c 	str.w	r8, [sp, #12]
 8007668:	2330      	movs	r3, #48	@ 0x30
 800766a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007808 <_svfiprintf_r+0x1e4>
 800766e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007672:	f04f 0901 	mov.w	r9, #1
 8007676:	4623      	mov	r3, r4
 8007678:	469a      	mov	sl, r3
 800767a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800767e:	b10a      	cbz	r2, 8007684 <_svfiprintf_r+0x60>
 8007680:	2a25      	cmp	r2, #37	@ 0x25
 8007682:	d1f9      	bne.n	8007678 <_svfiprintf_r+0x54>
 8007684:	ebba 0b04 	subs.w	fp, sl, r4
 8007688:	d00b      	beq.n	80076a2 <_svfiprintf_r+0x7e>
 800768a:	465b      	mov	r3, fp
 800768c:	4622      	mov	r2, r4
 800768e:	4629      	mov	r1, r5
 8007690:	4638      	mov	r0, r7
 8007692:	f7ff ff6b 	bl	800756c <__ssputs_r>
 8007696:	3001      	adds	r0, #1
 8007698:	f000 80a7 	beq.w	80077ea <_svfiprintf_r+0x1c6>
 800769c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800769e:	445a      	add	r2, fp
 80076a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80076a2:	f89a 3000 	ldrb.w	r3, [sl]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f000 809f 	beq.w	80077ea <_svfiprintf_r+0x1c6>
 80076ac:	2300      	movs	r3, #0
 80076ae:	f04f 32ff 	mov.w	r2, #4294967295
 80076b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076b6:	f10a 0a01 	add.w	sl, sl, #1
 80076ba:	9304      	str	r3, [sp, #16]
 80076bc:	9307      	str	r3, [sp, #28]
 80076be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80076c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80076c4:	4654      	mov	r4, sl
 80076c6:	2205      	movs	r2, #5
 80076c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076cc:	484e      	ldr	r0, [pc, #312]	@ (8007808 <_svfiprintf_r+0x1e4>)
 80076ce:	f7f8 fda7 	bl	8000220 <memchr>
 80076d2:	9a04      	ldr	r2, [sp, #16]
 80076d4:	b9d8      	cbnz	r0, 800770e <_svfiprintf_r+0xea>
 80076d6:	06d0      	lsls	r0, r2, #27
 80076d8:	bf44      	itt	mi
 80076da:	2320      	movmi	r3, #32
 80076dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076e0:	0711      	lsls	r1, r2, #28
 80076e2:	bf44      	itt	mi
 80076e4:	232b      	movmi	r3, #43	@ 0x2b
 80076e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076ea:	f89a 3000 	ldrb.w	r3, [sl]
 80076ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80076f0:	d015      	beq.n	800771e <_svfiprintf_r+0xfa>
 80076f2:	9a07      	ldr	r2, [sp, #28]
 80076f4:	4654      	mov	r4, sl
 80076f6:	2000      	movs	r0, #0
 80076f8:	f04f 0c0a 	mov.w	ip, #10
 80076fc:	4621      	mov	r1, r4
 80076fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007702:	3b30      	subs	r3, #48	@ 0x30
 8007704:	2b09      	cmp	r3, #9
 8007706:	d94b      	bls.n	80077a0 <_svfiprintf_r+0x17c>
 8007708:	b1b0      	cbz	r0, 8007738 <_svfiprintf_r+0x114>
 800770a:	9207      	str	r2, [sp, #28]
 800770c:	e014      	b.n	8007738 <_svfiprintf_r+0x114>
 800770e:	eba0 0308 	sub.w	r3, r0, r8
 8007712:	fa09 f303 	lsl.w	r3, r9, r3
 8007716:	4313      	orrs	r3, r2
 8007718:	9304      	str	r3, [sp, #16]
 800771a:	46a2      	mov	sl, r4
 800771c:	e7d2      	b.n	80076c4 <_svfiprintf_r+0xa0>
 800771e:	9b03      	ldr	r3, [sp, #12]
 8007720:	1d19      	adds	r1, r3, #4
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	9103      	str	r1, [sp, #12]
 8007726:	2b00      	cmp	r3, #0
 8007728:	bfbb      	ittet	lt
 800772a:	425b      	neglt	r3, r3
 800772c:	f042 0202 	orrlt.w	r2, r2, #2
 8007730:	9307      	strge	r3, [sp, #28]
 8007732:	9307      	strlt	r3, [sp, #28]
 8007734:	bfb8      	it	lt
 8007736:	9204      	strlt	r2, [sp, #16]
 8007738:	7823      	ldrb	r3, [r4, #0]
 800773a:	2b2e      	cmp	r3, #46	@ 0x2e
 800773c:	d10a      	bne.n	8007754 <_svfiprintf_r+0x130>
 800773e:	7863      	ldrb	r3, [r4, #1]
 8007740:	2b2a      	cmp	r3, #42	@ 0x2a
 8007742:	d132      	bne.n	80077aa <_svfiprintf_r+0x186>
 8007744:	9b03      	ldr	r3, [sp, #12]
 8007746:	1d1a      	adds	r2, r3, #4
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	9203      	str	r2, [sp, #12]
 800774c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007750:	3402      	adds	r4, #2
 8007752:	9305      	str	r3, [sp, #20]
 8007754:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007818 <_svfiprintf_r+0x1f4>
 8007758:	7821      	ldrb	r1, [r4, #0]
 800775a:	2203      	movs	r2, #3
 800775c:	4650      	mov	r0, sl
 800775e:	f7f8 fd5f 	bl	8000220 <memchr>
 8007762:	b138      	cbz	r0, 8007774 <_svfiprintf_r+0x150>
 8007764:	9b04      	ldr	r3, [sp, #16]
 8007766:	eba0 000a 	sub.w	r0, r0, sl
 800776a:	2240      	movs	r2, #64	@ 0x40
 800776c:	4082      	lsls	r2, r0
 800776e:	4313      	orrs	r3, r2
 8007770:	3401      	adds	r4, #1
 8007772:	9304      	str	r3, [sp, #16]
 8007774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007778:	4824      	ldr	r0, [pc, #144]	@ (800780c <_svfiprintf_r+0x1e8>)
 800777a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800777e:	2206      	movs	r2, #6
 8007780:	f7f8 fd4e 	bl	8000220 <memchr>
 8007784:	2800      	cmp	r0, #0
 8007786:	d036      	beq.n	80077f6 <_svfiprintf_r+0x1d2>
 8007788:	4b21      	ldr	r3, [pc, #132]	@ (8007810 <_svfiprintf_r+0x1ec>)
 800778a:	bb1b      	cbnz	r3, 80077d4 <_svfiprintf_r+0x1b0>
 800778c:	9b03      	ldr	r3, [sp, #12]
 800778e:	3307      	adds	r3, #7
 8007790:	f023 0307 	bic.w	r3, r3, #7
 8007794:	3308      	adds	r3, #8
 8007796:	9303      	str	r3, [sp, #12]
 8007798:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800779a:	4433      	add	r3, r6
 800779c:	9309      	str	r3, [sp, #36]	@ 0x24
 800779e:	e76a      	b.n	8007676 <_svfiprintf_r+0x52>
 80077a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80077a4:	460c      	mov	r4, r1
 80077a6:	2001      	movs	r0, #1
 80077a8:	e7a8      	b.n	80076fc <_svfiprintf_r+0xd8>
 80077aa:	2300      	movs	r3, #0
 80077ac:	3401      	adds	r4, #1
 80077ae:	9305      	str	r3, [sp, #20]
 80077b0:	4619      	mov	r1, r3
 80077b2:	f04f 0c0a 	mov.w	ip, #10
 80077b6:	4620      	mov	r0, r4
 80077b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077bc:	3a30      	subs	r2, #48	@ 0x30
 80077be:	2a09      	cmp	r2, #9
 80077c0:	d903      	bls.n	80077ca <_svfiprintf_r+0x1a6>
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d0c6      	beq.n	8007754 <_svfiprintf_r+0x130>
 80077c6:	9105      	str	r1, [sp, #20]
 80077c8:	e7c4      	b.n	8007754 <_svfiprintf_r+0x130>
 80077ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80077ce:	4604      	mov	r4, r0
 80077d0:	2301      	movs	r3, #1
 80077d2:	e7f0      	b.n	80077b6 <_svfiprintf_r+0x192>
 80077d4:	ab03      	add	r3, sp, #12
 80077d6:	9300      	str	r3, [sp, #0]
 80077d8:	462a      	mov	r2, r5
 80077da:	4b0e      	ldr	r3, [pc, #56]	@ (8007814 <_svfiprintf_r+0x1f0>)
 80077dc:	a904      	add	r1, sp, #16
 80077de:	4638      	mov	r0, r7
 80077e0:	f3af 8000 	nop.w
 80077e4:	1c42      	adds	r2, r0, #1
 80077e6:	4606      	mov	r6, r0
 80077e8:	d1d6      	bne.n	8007798 <_svfiprintf_r+0x174>
 80077ea:	89ab      	ldrh	r3, [r5, #12]
 80077ec:	065b      	lsls	r3, r3, #25
 80077ee:	f53f af2d 	bmi.w	800764c <_svfiprintf_r+0x28>
 80077f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80077f4:	e72c      	b.n	8007650 <_svfiprintf_r+0x2c>
 80077f6:	ab03      	add	r3, sp, #12
 80077f8:	9300      	str	r3, [sp, #0]
 80077fa:	462a      	mov	r2, r5
 80077fc:	4b05      	ldr	r3, [pc, #20]	@ (8007814 <_svfiprintf_r+0x1f0>)
 80077fe:	a904      	add	r1, sp, #16
 8007800:	4638      	mov	r0, r7
 8007802:	f000 f879 	bl	80078f8 <_printf_i>
 8007806:	e7ed      	b.n	80077e4 <_svfiprintf_r+0x1c0>
 8007808:	08009188 	.word	0x08009188
 800780c:	08009192 	.word	0x08009192
 8007810:	00000000 	.word	0x00000000
 8007814:	0800756d 	.word	0x0800756d
 8007818:	0800918e 	.word	0x0800918e

0800781c <_printf_common>:
 800781c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007820:	4616      	mov	r6, r2
 8007822:	4698      	mov	r8, r3
 8007824:	688a      	ldr	r2, [r1, #8]
 8007826:	690b      	ldr	r3, [r1, #16]
 8007828:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800782c:	4293      	cmp	r3, r2
 800782e:	bfb8      	it	lt
 8007830:	4613      	movlt	r3, r2
 8007832:	6033      	str	r3, [r6, #0]
 8007834:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007838:	4607      	mov	r7, r0
 800783a:	460c      	mov	r4, r1
 800783c:	b10a      	cbz	r2, 8007842 <_printf_common+0x26>
 800783e:	3301      	adds	r3, #1
 8007840:	6033      	str	r3, [r6, #0]
 8007842:	6823      	ldr	r3, [r4, #0]
 8007844:	0699      	lsls	r1, r3, #26
 8007846:	bf42      	ittt	mi
 8007848:	6833      	ldrmi	r3, [r6, #0]
 800784a:	3302      	addmi	r3, #2
 800784c:	6033      	strmi	r3, [r6, #0]
 800784e:	6825      	ldr	r5, [r4, #0]
 8007850:	f015 0506 	ands.w	r5, r5, #6
 8007854:	d106      	bne.n	8007864 <_printf_common+0x48>
 8007856:	f104 0a19 	add.w	sl, r4, #25
 800785a:	68e3      	ldr	r3, [r4, #12]
 800785c:	6832      	ldr	r2, [r6, #0]
 800785e:	1a9b      	subs	r3, r3, r2
 8007860:	42ab      	cmp	r3, r5
 8007862:	dc26      	bgt.n	80078b2 <_printf_common+0x96>
 8007864:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007868:	6822      	ldr	r2, [r4, #0]
 800786a:	3b00      	subs	r3, #0
 800786c:	bf18      	it	ne
 800786e:	2301      	movne	r3, #1
 8007870:	0692      	lsls	r2, r2, #26
 8007872:	d42b      	bmi.n	80078cc <_printf_common+0xb0>
 8007874:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007878:	4641      	mov	r1, r8
 800787a:	4638      	mov	r0, r7
 800787c:	47c8      	blx	r9
 800787e:	3001      	adds	r0, #1
 8007880:	d01e      	beq.n	80078c0 <_printf_common+0xa4>
 8007882:	6823      	ldr	r3, [r4, #0]
 8007884:	6922      	ldr	r2, [r4, #16]
 8007886:	f003 0306 	and.w	r3, r3, #6
 800788a:	2b04      	cmp	r3, #4
 800788c:	bf02      	ittt	eq
 800788e:	68e5      	ldreq	r5, [r4, #12]
 8007890:	6833      	ldreq	r3, [r6, #0]
 8007892:	1aed      	subeq	r5, r5, r3
 8007894:	68a3      	ldr	r3, [r4, #8]
 8007896:	bf0c      	ite	eq
 8007898:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800789c:	2500      	movne	r5, #0
 800789e:	4293      	cmp	r3, r2
 80078a0:	bfc4      	itt	gt
 80078a2:	1a9b      	subgt	r3, r3, r2
 80078a4:	18ed      	addgt	r5, r5, r3
 80078a6:	2600      	movs	r6, #0
 80078a8:	341a      	adds	r4, #26
 80078aa:	42b5      	cmp	r5, r6
 80078ac:	d11a      	bne.n	80078e4 <_printf_common+0xc8>
 80078ae:	2000      	movs	r0, #0
 80078b0:	e008      	b.n	80078c4 <_printf_common+0xa8>
 80078b2:	2301      	movs	r3, #1
 80078b4:	4652      	mov	r2, sl
 80078b6:	4641      	mov	r1, r8
 80078b8:	4638      	mov	r0, r7
 80078ba:	47c8      	blx	r9
 80078bc:	3001      	adds	r0, #1
 80078be:	d103      	bne.n	80078c8 <_printf_common+0xac>
 80078c0:	f04f 30ff 	mov.w	r0, #4294967295
 80078c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078c8:	3501      	adds	r5, #1
 80078ca:	e7c6      	b.n	800785a <_printf_common+0x3e>
 80078cc:	18e1      	adds	r1, r4, r3
 80078ce:	1c5a      	adds	r2, r3, #1
 80078d0:	2030      	movs	r0, #48	@ 0x30
 80078d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80078d6:	4422      	add	r2, r4
 80078d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80078dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80078e0:	3302      	adds	r3, #2
 80078e2:	e7c7      	b.n	8007874 <_printf_common+0x58>
 80078e4:	2301      	movs	r3, #1
 80078e6:	4622      	mov	r2, r4
 80078e8:	4641      	mov	r1, r8
 80078ea:	4638      	mov	r0, r7
 80078ec:	47c8      	blx	r9
 80078ee:	3001      	adds	r0, #1
 80078f0:	d0e6      	beq.n	80078c0 <_printf_common+0xa4>
 80078f2:	3601      	adds	r6, #1
 80078f4:	e7d9      	b.n	80078aa <_printf_common+0x8e>
	...

080078f8 <_printf_i>:
 80078f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078fc:	7e0f      	ldrb	r7, [r1, #24]
 80078fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007900:	2f78      	cmp	r7, #120	@ 0x78
 8007902:	4691      	mov	r9, r2
 8007904:	4680      	mov	r8, r0
 8007906:	460c      	mov	r4, r1
 8007908:	469a      	mov	sl, r3
 800790a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800790e:	d807      	bhi.n	8007920 <_printf_i+0x28>
 8007910:	2f62      	cmp	r7, #98	@ 0x62
 8007912:	d80a      	bhi.n	800792a <_printf_i+0x32>
 8007914:	2f00      	cmp	r7, #0
 8007916:	f000 80d2 	beq.w	8007abe <_printf_i+0x1c6>
 800791a:	2f58      	cmp	r7, #88	@ 0x58
 800791c:	f000 80b9 	beq.w	8007a92 <_printf_i+0x19a>
 8007920:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007924:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007928:	e03a      	b.n	80079a0 <_printf_i+0xa8>
 800792a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800792e:	2b15      	cmp	r3, #21
 8007930:	d8f6      	bhi.n	8007920 <_printf_i+0x28>
 8007932:	a101      	add	r1, pc, #4	@ (adr r1, 8007938 <_printf_i+0x40>)
 8007934:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007938:	08007991 	.word	0x08007991
 800793c:	080079a5 	.word	0x080079a5
 8007940:	08007921 	.word	0x08007921
 8007944:	08007921 	.word	0x08007921
 8007948:	08007921 	.word	0x08007921
 800794c:	08007921 	.word	0x08007921
 8007950:	080079a5 	.word	0x080079a5
 8007954:	08007921 	.word	0x08007921
 8007958:	08007921 	.word	0x08007921
 800795c:	08007921 	.word	0x08007921
 8007960:	08007921 	.word	0x08007921
 8007964:	08007aa5 	.word	0x08007aa5
 8007968:	080079cf 	.word	0x080079cf
 800796c:	08007a5f 	.word	0x08007a5f
 8007970:	08007921 	.word	0x08007921
 8007974:	08007921 	.word	0x08007921
 8007978:	08007ac7 	.word	0x08007ac7
 800797c:	08007921 	.word	0x08007921
 8007980:	080079cf 	.word	0x080079cf
 8007984:	08007921 	.word	0x08007921
 8007988:	08007921 	.word	0x08007921
 800798c:	08007a67 	.word	0x08007a67
 8007990:	6833      	ldr	r3, [r6, #0]
 8007992:	1d1a      	adds	r2, r3, #4
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	6032      	str	r2, [r6, #0]
 8007998:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800799c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80079a0:	2301      	movs	r3, #1
 80079a2:	e09d      	b.n	8007ae0 <_printf_i+0x1e8>
 80079a4:	6833      	ldr	r3, [r6, #0]
 80079a6:	6820      	ldr	r0, [r4, #0]
 80079a8:	1d19      	adds	r1, r3, #4
 80079aa:	6031      	str	r1, [r6, #0]
 80079ac:	0606      	lsls	r6, r0, #24
 80079ae:	d501      	bpl.n	80079b4 <_printf_i+0xbc>
 80079b0:	681d      	ldr	r5, [r3, #0]
 80079b2:	e003      	b.n	80079bc <_printf_i+0xc4>
 80079b4:	0645      	lsls	r5, r0, #25
 80079b6:	d5fb      	bpl.n	80079b0 <_printf_i+0xb8>
 80079b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80079bc:	2d00      	cmp	r5, #0
 80079be:	da03      	bge.n	80079c8 <_printf_i+0xd0>
 80079c0:	232d      	movs	r3, #45	@ 0x2d
 80079c2:	426d      	negs	r5, r5
 80079c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079c8:	4859      	ldr	r0, [pc, #356]	@ (8007b30 <_printf_i+0x238>)
 80079ca:	230a      	movs	r3, #10
 80079cc:	e011      	b.n	80079f2 <_printf_i+0xfa>
 80079ce:	6821      	ldr	r1, [r4, #0]
 80079d0:	6833      	ldr	r3, [r6, #0]
 80079d2:	0608      	lsls	r0, r1, #24
 80079d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80079d8:	d402      	bmi.n	80079e0 <_printf_i+0xe8>
 80079da:	0649      	lsls	r1, r1, #25
 80079dc:	bf48      	it	mi
 80079de:	b2ad      	uxthmi	r5, r5
 80079e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80079e2:	4853      	ldr	r0, [pc, #332]	@ (8007b30 <_printf_i+0x238>)
 80079e4:	6033      	str	r3, [r6, #0]
 80079e6:	bf14      	ite	ne
 80079e8:	230a      	movne	r3, #10
 80079ea:	2308      	moveq	r3, #8
 80079ec:	2100      	movs	r1, #0
 80079ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80079f2:	6866      	ldr	r6, [r4, #4]
 80079f4:	60a6      	str	r6, [r4, #8]
 80079f6:	2e00      	cmp	r6, #0
 80079f8:	bfa2      	ittt	ge
 80079fa:	6821      	ldrge	r1, [r4, #0]
 80079fc:	f021 0104 	bicge.w	r1, r1, #4
 8007a00:	6021      	strge	r1, [r4, #0]
 8007a02:	b90d      	cbnz	r5, 8007a08 <_printf_i+0x110>
 8007a04:	2e00      	cmp	r6, #0
 8007a06:	d04b      	beq.n	8007aa0 <_printf_i+0x1a8>
 8007a08:	4616      	mov	r6, r2
 8007a0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a0e:	fb03 5711 	mls	r7, r3, r1, r5
 8007a12:	5dc7      	ldrb	r7, [r0, r7]
 8007a14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a18:	462f      	mov	r7, r5
 8007a1a:	42bb      	cmp	r3, r7
 8007a1c:	460d      	mov	r5, r1
 8007a1e:	d9f4      	bls.n	8007a0a <_printf_i+0x112>
 8007a20:	2b08      	cmp	r3, #8
 8007a22:	d10b      	bne.n	8007a3c <_printf_i+0x144>
 8007a24:	6823      	ldr	r3, [r4, #0]
 8007a26:	07df      	lsls	r7, r3, #31
 8007a28:	d508      	bpl.n	8007a3c <_printf_i+0x144>
 8007a2a:	6923      	ldr	r3, [r4, #16]
 8007a2c:	6861      	ldr	r1, [r4, #4]
 8007a2e:	4299      	cmp	r1, r3
 8007a30:	bfde      	ittt	le
 8007a32:	2330      	movle	r3, #48	@ 0x30
 8007a34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a38:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a3c:	1b92      	subs	r2, r2, r6
 8007a3e:	6122      	str	r2, [r4, #16]
 8007a40:	f8cd a000 	str.w	sl, [sp]
 8007a44:	464b      	mov	r3, r9
 8007a46:	aa03      	add	r2, sp, #12
 8007a48:	4621      	mov	r1, r4
 8007a4a:	4640      	mov	r0, r8
 8007a4c:	f7ff fee6 	bl	800781c <_printf_common>
 8007a50:	3001      	adds	r0, #1
 8007a52:	d14a      	bne.n	8007aea <_printf_i+0x1f2>
 8007a54:	f04f 30ff 	mov.w	r0, #4294967295
 8007a58:	b004      	add	sp, #16
 8007a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a5e:	6823      	ldr	r3, [r4, #0]
 8007a60:	f043 0320 	orr.w	r3, r3, #32
 8007a64:	6023      	str	r3, [r4, #0]
 8007a66:	4833      	ldr	r0, [pc, #204]	@ (8007b34 <_printf_i+0x23c>)
 8007a68:	2778      	movs	r7, #120	@ 0x78
 8007a6a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007a6e:	6823      	ldr	r3, [r4, #0]
 8007a70:	6831      	ldr	r1, [r6, #0]
 8007a72:	061f      	lsls	r7, r3, #24
 8007a74:	f851 5b04 	ldr.w	r5, [r1], #4
 8007a78:	d402      	bmi.n	8007a80 <_printf_i+0x188>
 8007a7a:	065f      	lsls	r7, r3, #25
 8007a7c:	bf48      	it	mi
 8007a7e:	b2ad      	uxthmi	r5, r5
 8007a80:	6031      	str	r1, [r6, #0]
 8007a82:	07d9      	lsls	r1, r3, #31
 8007a84:	bf44      	itt	mi
 8007a86:	f043 0320 	orrmi.w	r3, r3, #32
 8007a8a:	6023      	strmi	r3, [r4, #0]
 8007a8c:	b11d      	cbz	r5, 8007a96 <_printf_i+0x19e>
 8007a8e:	2310      	movs	r3, #16
 8007a90:	e7ac      	b.n	80079ec <_printf_i+0xf4>
 8007a92:	4827      	ldr	r0, [pc, #156]	@ (8007b30 <_printf_i+0x238>)
 8007a94:	e7e9      	b.n	8007a6a <_printf_i+0x172>
 8007a96:	6823      	ldr	r3, [r4, #0]
 8007a98:	f023 0320 	bic.w	r3, r3, #32
 8007a9c:	6023      	str	r3, [r4, #0]
 8007a9e:	e7f6      	b.n	8007a8e <_printf_i+0x196>
 8007aa0:	4616      	mov	r6, r2
 8007aa2:	e7bd      	b.n	8007a20 <_printf_i+0x128>
 8007aa4:	6833      	ldr	r3, [r6, #0]
 8007aa6:	6825      	ldr	r5, [r4, #0]
 8007aa8:	6961      	ldr	r1, [r4, #20]
 8007aaa:	1d18      	adds	r0, r3, #4
 8007aac:	6030      	str	r0, [r6, #0]
 8007aae:	062e      	lsls	r6, r5, #24
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	d501      	bpl.n	8007ab8 <_printf_i+0x1c0>
 8007ab4:	6019      	str	r1, [r3, #0]
 8007ab6:	e002      	b.n	8007abe <_printf_i+0x1c6>
 8007ab8:	0668      	lsls	r0, r5, #25
 8007aba:	d5fb      	bpl.n	8007ab4 <_printf_i+0x1bc>
 8007abc:	8019      	strh	r1, [r3, #0]
 8007abe:	2300      	movs	r3, #0
 8007ac0:	6123      	str	r3, [r4, #16]
 8007ac2:	4616      	mov	r6, r2
 8007ac4:	e7bc      	b.n	8007a40 <_printf_i+0x148>
 8007ac6:	6833      	ldr	r3, [r6, #0]
 8007ac8:	1d1a      	adds	r2, r3, #4
 8007aca:	6032      	str	r2, [r6, #0]
 8007acc:	681e      	ldr	r6, [r3, #0]
 8007ace:	6862      	ldr	r2, [r4, #4]
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	4630      	mov	r0, r6
 8007ad4:	f7f8 fba4 	bl	8000220 <memchr>
 8007ad8:	b108      	cbz	r0, 8007ade <_printf_i+0x1e6>
 8007ada:	1b80      	subs	r0, r0, r6
 8007adc:	6060      	str	r0, [r4, #4]
 8007ade:	6863      	ldr	r3, [r4, #4]
 8007ae0:	6123      	str	r3, [r4, #16]
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ae8:	e7aa      	b.n	8007a40 <_printf_i+0x148>
 8007aea:	6923      	ldr	r3, [r4, #16]
 8007aec:	4632      	mov	r2, r6
 8007aee:	4649      	mov	r1, r9
 8007af0:	4640      	mov	r0, r8
 8007af2:	47d0      	blx	sl
 8007af4:	3001      	adds	r0, #1
 8007af6:	d0ad      	beq.n	8007a54 <_printf_i+0x15c>
 8007af8:	6823      	ldr	r3, [r4, #0]
 8007afa:	079b      	lsls	r3, r3, #30
 8007afc:	d413      	bmi.n	8007b26 <_printf_i+0x22e>
 8007afe:	68e0      	ldr	r0, [r4, #12]
 8007b00:	9b03      	ldr	r3, [sp, #12]
 8007b02:	4298      	cmp	r0, r3
 8007b04:	bfb8      	it	lt
 8007b06:	4618      	movlt	r0, r3
 8007b08:	e7a6      	b.n	8007a58 <_printf_i+0x160>
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	4632      	mov	r2, r6
 8007b0e:	4649      	mov	r1, r9
 8007b10:	4640      	mov	r0, r8
 8007b12:	47d0      	blx	sl
 8007b14:	3001      	adds	r0, #1
 8007b16:	d09d      	beq.n	8007a54 <_printf_i+0x15c>
 8007b18:	3501      	adds	r5, #1
 8007b1a:	68e3      	ldr	r3, [r4, #12]
 8007b1c:	9903      	ldr	r1, [sp, #12]
 8007b1e:	1a5b      	subs	r3, r3, r1
 8007b20:	42ab      	cmp	r3, r5
 8007b22:	dcf2      	bgt.n	8007b0a <_printf_i+0x212>
 8007b24:	e7eb      	b.n	8007afe <_printf_i+0x206>
 8007b26:	2500      	movs	r5, #0
 8007b28:	f104 0619 	add.w	r6, r4, #25
 8007b2c:	e7f5      	b.n	8007b1a <_printf_i+0x222>
 8007b2e:	bf00      	nop
 8007b30:	08009199 	.word	0x08009199
 8007b34:	080091aa 	.word	0x080091aa

08007b38 <memmove>:
 8007b38:	4288      	cmp	r0, r1
 8007b3a:	b510      	push	{r4, lr}
 8007b3c:	eb01 0402 	add.w	r4, r1, r2
 8007b40:	d902      	bls.n	8007b48 <memmove+0x10>
 8007b42:	4284      	cmp	r4, r0
 8007b44:	4623      	mov	r3, r4
 8007b46:	d807      	bhi.n	8007b58 <memmove+0x20>
 8007b48:	1e43      	subs	r3, r0, #1
 8007b4a:	42a1      	cmp	r1, r4
 8007b4c:	d008      	beq.n	8007b60 <memmove+0x28>
 8007b4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b56:	e7f8      	b.n	8007b4a <memmove+0x12>
 8007b58:	4402      	add	r2, r0
 8007b5a:	4601      	mov	r1, r0
 8007b5c:	428a      	cmp	r2, r1
 8007b5e:	d100      	bne.n	8007b62 <memmove+0x2a>
 8007b60:	bd10      	pop	{r4, pc}
 8007b62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b6a:	e7f7      	b.n	8007b5c <memmove+0x24>

08007b6c <memcpy>:
 8007b6c:	440a      	add	r2, r1
 8007b6e:	4291      	cmp	r1, r2
 8007b70:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b74:	d100      	bne.n	8007b78 <memcpy+0xc>
 8007b76:	4770      	bx	lr
 8007b78:	b510      	push	{r4, lr}
 8007b7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b82:	4291      	cmp	r1, r2
 8007b84:	d1f9      	bne.n	8007b7a <memcpy+0xe>
 8007b86:	bd10      	pop	{r4, pc}

08007b88 <_realloc_r>:
 8007b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b8c:	4680      	mov	r8, r0
 8007b8e:	4615      	mov	r5, r2
 8007b90:	460c      	mov	r4, r1
 8007b92:	b921      	cbnz	r1, 8007b9e <_realloc_r+0x16>
 8007b94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b98:	4611      	mov	r1, r2
 8007b9a:	f7ff bb4f 	b.w	800723c <_malloc_r>
 8007b9e:	b92a      	cbnz	r2, 8007bac <_realloc_r+0x24>
 8007ba0:	f7ff fc9a 	bl	80074d8 <_free_r>
 8007ba4:	2400      	movs	r4, #0
 8007ba6:	4620      	mov	r0, r4
 8007ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bac:	f000 f81a 	bl	8007be4 <_malloc_usable_size_r>
 8007bb0:	4285      	cmp	r5, r0
 8007bb2:	4606      	mov	r6, r0
 8007bb4:	d802      	bhi.n	8007bbc <_realloc_r+0x34>
 8007bb6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007bba:	d8f4      	bhi.n	8007ba6 <_realloc_r+0x1e>
 8007bbc:	4629      	mov	r1, r5
 8007bbe:	4640      	mov	r0, r8
 8007bc0:	f7ff fb3c 	bl	800723c <_malloc_r>
 8007bc4:	4607      	mov	r7, r0
 8007bc6:	2800      	cmp	r0, #0
 8007bc8:	d0ec      	beq.n	8007ba4 <_realloc_r+0x1c>
 8007bca:	42b5      	cmp	r5, r6
 8007bcc:	462a      	mov	r2, r5
 8007bce:	4621      	mov	r1, r4
 8007bd0:	bf28      	it	cs
 8007bd2:	4632      	movcs	r2, r6
 8007bd4:	f7ff ffca 	bl	8007b6c <memcpy>
 8007bd8:	4621      	mov	r1, r4
 8007bda:	4640      	mov	r0, r8
 8007bdc:	f7ff fc7c 	bl	80074d8 <_free_r>
 8007be0:	463c      	mov	r4, r7
 8007be2:	e7e0      	b.n	8007ba6 <_realloc_r+0x1e>

08007be4 <_malloc_usable_size_r>:
 8007be4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007be8:	1f18      	subs	r0, r3, #4
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	bfbc      	itt	lt
 8007bee:	580b      	ldrlt	r3, [r1, r0]
 8007bf0:	18c0      	addlt	r0, r0, r3
 8007bf2:	4770      	bx	lr

08007bf4 <pow>:
 8007bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bf6:	ed2d 8b02 	vpush	{d8}
 8007bfa:	eeb0 8a40 	vmov.f32	s16, s0
 8007bfe:	eef0 8a60 	vmov.f32	s17, s1
 8007c02:	ec55 4b11 	vmov	r4, r5, d1
 8007c06:	f000 f873 	bl	8007cf0 <__ieee754_pow>
 8007c0a:	4622      	mov	r2, r4
 8007c0c:	462b      	mov	r3, r5
 8007c0e:	4620      	mov	r0, r4
 8007c10:	4629      	mov	r1, r5
 8007c12:	ec57 6b10 	vmov	r6, r7, d0
 8007c16:	f7f8 ffa9 	bl	8000b6c <__aeabi_dcmpun>
 8007c1a:	2800      	cmp	r0, #0
 8007c1c:	d13b      	bne.n	8007c96 <pow+0xa2>
 8007c1e:	ec51 0b18 	vmov	r0, r1, d8
 8007c22:	2200      	movs	r2, #0
 8007c24:	2300      	movs	r3, #0
 8007c26:	f7f8 ff6f 	bl	8000b08 <__aeabi_dcmpeq>
 8007c2a:	b1b8      	cbz	r0, 8007c5c <pow+0x68>
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	2300      	movs	r3, #0
 8007c30:	4620      	mov	r0, r4
 8007c32:	4629      	mov	r1, r5
 8007c34:	f7f8 ff68 	bl	8000b08 <__aeabi_dcmpeq>
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	d146      	bne.n	8007cca <pow+0xd6>
 8007c3c:	ec45 4b10 	vmov	d0, r4, r5
 8007c40:	f000 f848 	bl	8007cd4 <finite>
 8007c44:	b338      	cbz	r0, 8007c96 <pow+0xa2>
 8007c46:	2200      	movs	r2, #0
 8007c48:	2300      	movs	r3, #0
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	4629      	mov	r1, r5
 8007c4e:	f7f8 ff65 	bl	8000b1c <__aeabi_dcmplt>
 8007c52:	b300      	cbz	r0, 8007c96 <pow+0xa2>
 8007c54:	f7ff fc14 	bl	8007480 <__errno>
 8007c58:	2322      	movs	r3, #34	@ 0x22
 8007c5a:	e01b      	b.n	8007c94 <pow+0xa0>
 8007c5c:	ec47 6b10 	vmov	d0, r6, r7
 8007c60:	f000 f838 	bl	8007cd4 <finite>
 8007c64:	b9e0      	cbnz	r0, 8007ca0 <pow+0xac>
 8007c66:	eeb0 0a48 	vmov.f32	s0, s16
 8007c6a:	eef0 0a68 	vmov.f32	s1, s17
 8007c6e:	f000 f831 	bl	8007cd4 <finite>
 8007c72:	b1a8      	cbz	r0, 8007ca0 <pow+0xac>
 8007c74:	ec45 4b10 	vmov	d0, r4, r5
 8007c78:	f000 f82c 	bl	8007cd4 <finite>
 8007c7c:	b180      	cbz	r0, 8007ca0 <pow+0xac>
 8007c7e:	4632      	mov	r2, r6
 8007c80:	463b      	mov	r3, r7
 8007c82:	4630      	mov	r0, r6
 8007c84:	4639      	mov	r1, r7
 8007c86:	f7f8 ff71 	bl	8000b6c <__aeabi_dcmpun>
 8007c8a:	2800      	cmp	r0, #0
 8007c8c:	d0e2      	beq.n	8007c54 <pow+0x60>
 8007c8e:	f7ff fbf7 	bl	8007480 <__errno>
 8007c92:	2321      	movs	r3, #33	@ 0x21
 8007c94:	6003      	str	r3, [r0, #0]
 8007c96:	ecbd 8b02 	vpop	{d8}
 8007c9a:	ec47 6b10 	vmov	d0, r6, r7
 8007c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	4630      	mov	r0, r6
 8007ca6:	4639      	mov	r1, r7
 8007ca8:	f7f8 ff2e 	bl	8000b08 <__aeabi_dcmpeq>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	d0f2      	beq.n	8007c96 <pow+0xa2>
 8007cb0:	eeb0 0a48 	vmov.f32	s0, s16
 8007cb4:	eef0 0a68 	vmov.f32	s1, s17
 8007cb8:	f000 f80c 	bl	8007cd4 <finite>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	d0ea      	beq.n	8007c96 <pow+0xa2>
 8007cc0:	ec45 4b10 	vmov	d0, r4, r5
 8007cc4:	f000 f806 	bl	8007cd4 <finite>
 8007cc8:	e7c3      	b.n	8007c52 <pow+0x5e>
 8007cca:	4f01      	ldr	r7, [pc, #4]	@ (8007cd0 <pow+0xdc>)
 8007ccc:	2600      	movs	r6, #0
 8007cce:	e7e2      	b.n	8007c96 <pow+0xa2>
 8007cd0:	3ff00000 	.word	0x3ff00000

08007cd4 <finite>:
 8007cd4:	b082      	sub	sp, #8
 8007cd6:	ed8d 0b00 	vstr	d0, [sp]
 8007cda:	9801      	ldr	r0, [sp, #4]
 8007cdc:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8007ce0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8007ce4:	0fc0      	lsrs	r0, r0, #31
 8007ce6:	b002      	add	sp, #8
 8007ce8:	4770      	bx	lr
 8007cea:	0000      	movs	r0, r0
 8007cec:	0000      	movs	r0, r0
	...

08007cf0 <__ieee754_pow>:
 8007cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf4:	b091      	sub	sp, #68	@ 0x44
 8007cf6:	ed8d 1b00 	vstr	d1, [sp]
 8007cfa:	e9dd 1900 	ldrd	r1, r9, [sp]
 8007cfe:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8007d02:	ea5a 0001 	orrs.w	r0, sl, r1
 8007d06:	ec57 6b10 	vmov	r6, r7, d0
 8007d0a:	d113      	bne.n	8007d34 <__ieee754_pow+0x44>
 8007d0c:	19b3      	adds	r3, r6, r6
 8007d0e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8007d12:	4152      	adcs	r2, r2
 8007d14:	4298      	cmp	r0, r3
 8007d16:	4b98      	ldr	r3, [pc, #608]	@ (8007f78 <__ieee754_pow+0x288>)
 8007d18:	4193      	sbcs	r3, r2
 8007d1a:	f080 84ea 	bcs.w	80086f2 <__ieee754_pow+0xa02>
 8007d1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d22:	4630      	mov	r0, r6
 8007d24:	4639      	mov	r1, r7
 8007d26:	f7f8 fad1 	bl	80002cc <__adddf3>
 8007d2a:	ec41 0b10 	vmov	d0, r0, r1
 8007d2e:	b011      	add	sp, #68	@ 0x44
 8007d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d34:	4a91      	ldr	r2, [pc, #580]	@ (8007f7c <__ieee754_pow+0x28c>)
 8007d36:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007d3a:	4590      	cmp	r8, r2
 8007d3c:	463d      	mov	r5, r7
 8007d3e:	4633      	mov	r3, r6
 8007d40:	d806      	bhi.n	8007d50 <__ieee754_pow+0x60>
 8007d42:	d101      	bne.n	8007d48 <__ieee754_pow+0x58>
 8007d44:	2e00      	cmp	r6, #0
 8007d46:	d1ea      	bne.n	8007d1e <__ieee754_pow+0x2e>
 8007d48:	4592      	cmp	sl, r2
 8007d4a:	d801      	bhi.n	8007d50 <__ieee754_pow+0x60>
 8007d4c:	d10e      	bne.n	8007d6c <__ieee754_pow+0x7c>
 8007d4e:	b169      	cbz	r1, 8007d6c <__ieee754_pow+0x7c>
 8007d50:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8007d54:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8007d58:	431d      	orrs	r5, r3
 8007d5a:	d1e0      	bne.n	8007d1e <__ieee754_pow+0x2e>
 8007d5c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007d60:	18db      	adds	r3, r3, r3
 8007d62:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8007d66:	4152      	adcs	r2, r2
 8007d68:	429d      	cmp	r5, r3
 8007d6a:	e7d4      	b.n	8007d16 <__ieee754_pow+0x26>
 8007d6c:	2d00      	cmp	r5, #0
 8007d6e:	46c3      	mov	fp, r8
 8007d70:	da3a      	bge.n	8007de8 <__ieee754_pow+0xf8>
 8007d72:	4a83      	ldr	r2, [pc, #524]	@ (8007f80 <__ieee754_pow+0x290>)
 8007d74:	4592      	cmp	sl, r2
 8007d76:	d84d      	bhi.n	8007e14 <__ieee754_pow+0x124>
 8007d78:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8007d7c:	4592      	cmp	sl, r2
 8007d7e:	f240 84c7 	bls.w	8008710 <__ieee754_pow+0xa20>
 8007d82:	ea4f 522a 	mov.w	r2, sl, asr #20
 8007d86:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8007d8a:	2a14      	cmp	r2, #20
 8007d8c:	dd0f      	ble.n	8007dae <__ieee754_pow+0xbe>
 8007d8e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8007d92:	fa21 f402 	lsr.w	r4, r1, r2
 8007d96:	fa04 f202 	lsl.w	r2, r4, r2
 8007d9a:	428a      	cmp	r2, r1
 8007d9c:	f040 84b8 	bne.w	8008710 <__ieee754_pow+0xa20>
 8007da0:	f004 0401 	and.w	r4, r4, #1
 8007da4:	f1c4 0402 	rsb	r4, r4, #2
 8007da8:	2900      	cmp	r1, #0
 8007daa:	d158      	bne.n	8007e5e <__ieee754_pow+0x16e>
 8007dac:	e00e      	b.n	8007dcc <__ieee754_pow+0xdc>
 8007dae:	2900      	cmp	r1, #0
 8007db0:	d154      	bne.n	8007e5c <__ieee754_pow+0x16c>
 8007db2:	f1c2 0214 	rsb	r2, r2, #20
 8007db6:	fa4a f402 	asr.w	r4, sl, r2
 8007dba:	fa04 f202 	lsl.w	r2, r4, r2
 8007dbe:	4552      	cmp	r2, sl
 8007dc0:	f040 84a3 	bne.w	800870a <__ieee754_pow+0xa1a>
 8007dc4:	f004 0401 	and.w	r4, r4, #1
 8007dc8:	f1c4 0402 	rsb	r4, r4, #2
 8007dcc:	4a6d      	ldr	r2, [pc, #436]	@ (8007f84 <__ieee754_pow+0x294>)
 8007dce:	4592      	cmp	sl, r2
 8007dd0:	d12e      	bne.n	8007e30 <__ieee754_pow+0x140>
 8007dd2:	f1b9 0f00 	cmp.w	r9, #0
 8007dd6:	f280 8494 	bge.w	8008702 <__ieee754_pow+0xa12>
 8007dda:	496a      	ldr	r1, [pc, #424]	@ (8007f84 <__ieee754_pow+0x294>)
 8007ddc:	4632      	mov	r2, r6
 8007dde:	463b      	mov	r3, r7
 8007de0:	2000      	movs	r0, #0
 8007de2:	f7f8 fd53 	bl	800088c <__aeabi_ddiv>
 8007de6:	e7a0      	b.n	8007d2a <__ieee754_pow+0x3a>
 8007de8:	2400      	movs	r4, #0
 8007dea:	bbc1      	cbnz	r1, 8007e5e <__ieee754_pow+0x16e>
 8007dec:	4a63      	ldr	r2, [pc, #396]	@ (8007f7c <__ieee754_pow+0x28c>)
 8007dee:	4592      	cmp	sl, r2
 8007df0:	d1ec      	bne.n	8007dcc <__ieee754_pow+0xdc>
 8007df2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8007df6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8007dfa:	431a      	orrs	r2, r3
 8007dfc:	f000 8479 	beq.w	80086f2 <__ieee754_pow+0xa02>
 8007e00:	4b61      	ldr	r3, [pc, #388]	@ (8007f88 <__ieee754_pow+0x298>)
 8007e02:	4598      	cmp	r8, r3
 8007e04:	d908      	bls.n	8007e18 <__ieee754_pow+0x128>
 8007e06:	f1b9 0f00 	cmp.w	r9, #0
 8007e0a:	f2c0 8476 	blt.w	80086fa <__ieee754_pow+0xa0a>
 8007e0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e12:	e78a      	b.n	8007d2a <__ieee754_pow+0x3a>
 8007e14:	2402      	movs	r4, #2
 8007e16:	e7e8      	b.n	8007dea <__ieee754_pow+0xfa>
 8007e18:	f1b9 0f00 	cmp.w	r9, #0
 8007e1c:	f04f 0000 	mov.w	r0, #0
 8007e20:	f04f 0100 	mov.w	r1, #0
 8007e24:	da81      	bge.n	8007d2a <__ieee754_pow+0x3a>
 8007e26:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007e2a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007e2e:	e77c      	b.n	8007d2a <__ieee754_pow+0x3a>
 8007e30:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8007e34:	d106      	bne.n	8007e44 <__ieee754_pow+0x154>
 8007e36:	4632      	mov	r2, r6
 8007e38:	463b      	mov	r3, r7
 8007e3a:	4630      	mov	r0, r6
 8007e3c:	4639      	mov	r1, r7
 8007e3e:	f7f8 fbfb 	bl	8000638 <__aeabi_dmul>
 8007e42:	e772      	b.n	8007d2a <__ieee754_pow+0x3a>
 8007e44:	4a51      	ldr	r2, [pc, #324]	@ (8007f8c <__ieee754_pow+0x29c>)
 8007e46:	4591      	cmp	r9, r2
 8007e48:	d109      	bne.n	8007e5e <__ieee754_pow+0x16e>
 8007e4a:	2d00      	cmp	r5, #0
 8007e4c:	db07      	blt.n	8007e5e <__ieee754_pow+0x16e>
 8007e4e:	ec47 6b10 	vmov	d0, r6, r7
 8007e52:	b011      	add	sp, #68	@ 0x44
 8007e54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e58:	f000 bd52 	b.w	8008900 <__ieee754_sqrt>
 8007e5c:	2400      	movs	r4, #0
 8007e5e:	ec47 6b10 	vmov	d0, r6, r7
 8007e62:	9302      	str	r3, [sp, #8]
 8007e64:	f000 fc88 	bl	8008778 <fabs>
 8007e68:	9b02      	ldr	r3, [sp, #8]
 8007e6a:	ec51 0b10 	vmov	r0, r1, d0
 8007e6e:	bb53      	cbnz	r3, 8007ec6 <__ieee754_pow+0x1d6>
 8007e70:	4b44      	ldr	r3, [pc, #272]	@ (8007f84 <__ieee754_pow+0x294>)
 8007e72:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d002      	beq.n	8007e80 <__ieee754_pow+0x190>
 8007e7a:	f1b8 0f00 	cmp.w	r8, #0
 8007e7e:	d122      	bne.n	8007ec6 <__ieee754_pow+0x1d6>
 8007e80:	f1b9 0f00 	cmp.w	r9, #0
 8007e84:	da05      	bge.n	8007e92 <__ieee754_pow+0x1a2>
 8007e86:	4602      	mov	r2, r0
 8007e88:	460b      	mov	r3, r1
 8007e8a:	2000      	movs	r0, #0
 8007e8c:	493d      	ldr	r1, [pc, #244]	@ (8007f84 <__ieee754_pow+0x294>)
 8007e8e:	f7f8 fcfd 	bl	800088c <__aeabi_ddiv>
 8007e92:	2d00      	cmp	r5, #0
 8007e94:	f6bf af49 	bge.w	8007d2a <__ieee754_pow+0x3a>
 8007e98:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8007e9c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8007ea0:	ea58 0804 	orrs.w	r8, r8, r4
 8007ea4:	d108      	bne.n	8007eb8 <__ieee754_pow+0x1c8>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	4610      	mov	r0, r2
 8007eac:	4619      	mov	r1, r3
 8007eae:	f7f8 fa0b 	bl	80002c8 <__aeabi_dsub>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	e794      	b.n	8007de2 <__ieee754_pow+0xf2>
 8007eb8:	2c01      	cmp	r4, #1
 8007eba:	f47f af36 	bne.w	8007d2a <__ieee754_pow+0x3a>
 8007ebe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	e731      	b.n	8007d2a <__ieee754_pow+0x3a>
 8007ec6:	0feb      	lsrs	r3, r5, #31
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	ea53 0204 	orrs.w	r2, r3, r4
 8007ece:	d102      	bne.n	8007ed6 <__ieee754_pow+0x1e6>
 8007ed0:	4632      	mov	r2, r6
 8007ed2:	463b      	mov	r3, r7
 8007ed4:	e7e9      	b.n	8007eaa <__ieee754_pow+0x1ba>
 8007ed6:	3c01      	subs	r4, #1
 8007ed8:	431c      	orrs	r4, r3
 8007eda:	d016      	beq.n	8007f0a <__ieee754_pow+0x21a>
 8007edc:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8007f68 <__ieee754_pow+0x278>
 8007ee0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8007ee4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007ee8:	f240 8112 	bls.w	8008110 <__ieee754_pow+0x420>
 8007eec:	4b28      	ldr	r3, [pc, #160]	@ (8007f90 <__ieee754_pow+0x2a0>)
 8007eee:	459a      	cmp	sl, r3
 8007ef0:	4b25      	ldr	r3, [pc, #148]	@ (8007f88 <__ieee754_pow+0x298>)
 8007ef2:	d916      	bls.n	8007f22 <__ieee754_pow+0x232>
 8007ef4:	4598      	cmp	r8, r3
 8007ef6:	d80b      	bhi.n	8007f10 <__ieee754_pow+0x220>
 8007ef8:	f1b9 0f00 	cmp.w	r9, #0
 8007efc:	da0b      	bge.n	8007f16 <__ieee754_pow+0x226>
 8007efe:	2000      	movs	r0, #0
 8007f00:	b011      	add	sp, #68	@ 0x44
 8007f02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f06:	f000 bcf3 	b.w	80088f0 <__math_oflow>
 8007f0a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8007f70 <__ieee754_pow+0x280>
 8007f0e:	e7e7      	b.n	8007ee0 <__ieee754_pow+0x1f0>
 8007f10:	f1b9 0f00 	cmp.w	r9, #0
 8007f14:	dcf3      	bgt.n	8007efe <__ieee754_pow+0x20e>
 8007f16:	2000      	movs	r0, #0
 8007f18:	b011      	add	sp, #68	@ 0x44
 8007f1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f1e:	f000 bcdf 	b.w	80088e0 <__math_uflow>
 8007f22:	4598      	cmp	r8, r3
 8007f24:	d20c      	bcs.n	8007f40 <__ieee754_pow+0x250>
 8007f26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	f7f8 fdf5 	bl	8000b1c <__aeabi_dcmplt>
 8007f32:	3800      	subs	r0, #0
 8007f34:	bf18      	it	ne
 8007f36:	2001      	movne	r0, #1
 8007f38:	f1b9 0f00 	cmp.w	r9, #0
 8007f3c:	daec      	bge.n	8007f18 <__ieee754_pow+0x228>
 8007f3e:	e7df      	b.n	8007f00 <__ieee754_pow+0x210>
 8007f40:	4b10      	ldr	r3, [pc, #64]	@ (8007f84 <__ieee754_pow+0x294>)
 8007f42:	4598      	cmp	r8, r3
 8007f44:	f04f 0200 	mov.w	r2, #0
 8007f48:	d924      	bls.n	8007f94 <__ieee754_pow+0x2a4>
 8007f4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f4e:	2300      	movs	r3, #0
 8007f50:	f7f8 fde4 	bl	8000b1c <__aeabi_dcmplt>
 8007f54:	3800      	subs	r0, #0
 8007f56:	bf18      	it	ne
 8007f58:	2001      	movne	r0, #1
 8007f5a:	f1b9 0f00 	cmp.w	r9, #0
 8007f5e:	dccf      	bgt.n	8007f00 <__ieee754_pow+0x210>
 8007f60:	e7da      	b.n	8007f18 <__ieee754_pow+0x228>
 8007f62:	bf00      	nop
 8007f64:	f3af 8000 	nop.w
 8007f68:	00000000 	.word	0x00000000
 8007f6c:	3ff00000 	.word	0x3ff00000
 8007f70:	00000000 	.word	0x00000000
 8007f74:	bff00000 	.word	0xbff00000
 8007f78:	fff00000 	.word	0xfff00000
 8007f7c:	7ff00000 	.word	0x7ff00000
 8007f80:	433fffff 	.word	0x433fffff
 8007f84:	3ff00000 	.word	0x3ff00000
 8007f88:	3fefffff 	.word	0x3fefffff
 8007f8c:	3fe00000 	.word	0x3fe00000
 8007f90:	43f00000 	.word	0x43f00000
 8007f94:	4b5a      	ldr	r3, [pc, #360]	@ (8008100 <__ieee754_pow+0x410>)
 8007f96:	f7f8 f997 	bl	80002c8 <__aeabi_dsub>
 8007f9a:	a351      	add	r3, pc, #324	@ (adr r3, 80080e0 <__ieee754_pow+0x3f0>)
 8007f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa0:	4604      	mov	r4, r0
 8007fa2:	460d      	mov	r5, r1
 8007fa4:	f7f8 fb48 	bl	8000638 <__aeabi_dmul>
 8007fa8:	a34f      	add	r3, pc, #316	@ (adr r3, 80080e8 <__ieee754_pow+0x3f8>)
 8007faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fae:	4606      	mov	r6, r0
 8007fb0:	460f      	mov	r7, r1
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	4629      	mov	r1, r5
 8007fb6:	f7f8 fb3f 	bl	8000638 <__aeabi_dmul>
 8007fba:	4b52      	ldr	r3, [pc, #328]	@ (8008104 <__ieee754_pow+0x414>)
 8007fbc:	4682      	mov	sl, r0
 8007fbe:	468b      	mov	fp, r1
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	4629      	mov	r1, r5
 8007fc6:	f7f8 fb37 	bl	8000638 <__aeabi_dmul>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	460b      	mov	r3, r1
 8007fce:	a148      	add	r1, pc, #288	@ (adr r1, 80080f0 <__ieee754_pow+0x400>)
 8007fd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fd4:	f7f8 f978 	bl	80002c8 <__aeabi_dsub>
 8007fd8:	4622      	mov	r2, r4
 8007fda:	462b      	mov	r3, r5
 8007fdc:	f7f8 fb2c 	bl	8000638 <__aeabi_dmul>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	2000      	movs	r0, #0
 8007fe6:	4948      	ldr	r1, [pc, #288]	@ (8008108 <__ieee754_pow+0x418>)
 8007fe8:	f7f8 f96e 	bl	80002c8 <__aeabi_dsub>
 8007fec:	4622      	mov	r2, r4
 8007fee:	4680      	mov	r8, r0
 8007ff0:	4689      	mov	r9, r1
 8007ff2:	462b      	mov	r3, r5
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	4629      	mov	r1, r5
 8007ff8:	f7f8 fb1e 	bl	8000638 <__aeabi_dmul>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	460b      	mov	r3, r1
 8008000:	4640      	mov	r0, r8
 8008002:	4649      	mov	r1, r9
 8008004:	f7f8 fb18 	bl	8000638 <__aeabi_dmul>
 8008008:	a33b      	add	r3, pc, #236	@ (adr r3, 80080f8 <__ieee754_pow+0x408>)
 800800a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800e:	f7f8 fb13 	bl	8000638 <__aeabi_dmul>
 8008012:	4602      	mov	r2, r0
 8008014:	460b      	mov	r3, r1
 8008016:	4650      	mov	r0, sl
 8008018:	4659      	mov	r1, fp
 800801a:	f7f8 f955 	bl	80002c8 <__aeabi_dsub>
 800801e:	4602      	mov	r2, r0
 8008020:	460b      	mov	r3, r1
 8008022:	4680      	mov	r8, r0
 8008024:	4689      	mov	r9, r1
 8008026:	4630      	mov	r0, r6
 8008028:	4639      	mov	r1, r7
 800802a:	f7f8 f94f 	bl	80002cc <__adddf3>
 800802e:	2400      	movs	r4, #0
 8008030:	4632      	mov	r2, r6
 8008032:	463b      	mov	r3, r7
 8008034:	4620      	mov	r0, r4
 8008036:	460d      	mov	r5, r1
 8008038:	f7f8 f946 	bl	80002c8 <__aeabi_dsub>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	4640      	mov	r0, r8
 8008042:	4649      	mov	r1, r9
 8008044:	f7f8 f940 	bl	80002c8 <__aeabi_dsub>
 8008048:	e9dd 2300 	ldrd	r2, r3, [sp]
 800804c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008050:	2300      	movs	r3, #0
 8008052:	9304      	str	r3, [sp, #16]
 8008054:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008058:	4606      	mov	r6, r0
 800805a:	460f      	mov	r7, r1
 800805c:	4652      	mov	r2, sl
 800805e:	465b      	mov	r3, fp
 8008060:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008064:	f7f8 f930 	bl	80002c8 <__aeabi_dsub>
 8008068:	4622      	mov	r2, r4
 800806a:	462b      	mov	r3, r5
 800806c:	f7f8 fae4 	bl	8000638 <__aeabi_dmul>
 8008070:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008074:	4680      	mov	r8, r0
 8008076:	4689      	mov	r9, r1
 8008078:	4630      	mov	r0, r6
 800807a:	4639      	mov	r1, r7
 800807c:	f7f8 fadc 	bl	8000638 <__aeabi_dmul>
 8008080:	4602      	mov	r2, r0
 8008082:	460b      	mov	r3, r1
 8008084:	4640      	mov	r0, r8
 8008086:	4649      	mov	r1, r9
 8008088:	f7f8 f920 	bl	80002cc <__adddf3>
 800808c:	4652      	mov	r2, sl
 800808e:	465b      	mov	r3, fp
 8008090:	4606      	mov	r6, r0
 8008092:	460f      	mov	r7, r1
 8008094:	4620      	mov	r0, r4
 8008096:	4629      	mov	r1, r5
 8008098:	f7f8 face 	bl	8000638 <__aeabi_dmul>
 800809c:	460b      	mov	r3, r1
 800809e:	4602      	mov	r2, r0
 80080a0:	4680      	mov	r8, r0
 80080a2:	4689      	mov	r9, r1
 80080a4:	4630      	mov	r0, r6
 80080a6:	4639      	mov	r1, r7
 80080a8:	f7f8 f910 	bl	80002cc <__adddf3>
 80080ac:	4b17      	ldr	r3, [pc, #92]	@ (800810c <__ieee754_pow+0x41c>)
 80080ae:	4299      	cmp	r1, r3
 80080b0:	4604      	mov	r4, r0
 80080b2:	460d      	mov	r5, r1
 80080b4:	468a      	mov	sl, r1
 80080b6:	468b      	mov	fp, r1
 80080b8:	f340 82ef 	ble.w	800869a <__ieee754_pow+0x9aa>
 80080bc:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80080c0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80080c4:	4303      	orrs	r3, r0
 80080c6:	f000 81e8 	beq.w	800849a <__ieee754_pow+0x7aa>
 80080ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080ce:	2200      	movs	r2, #0
 80080d0:	2300      	movs	r3, #0
 80080d2:	f7f8 fd23 	bl	8000b1c <__aeabi_dcmplt>
 80080d6:	3800      	subs	r0, #0
 80080d8:	bf18      	it	ne
 80080da:	2001      	movne	r0, #1
 80080dc:	e710      	b.n	8007f00 <__ieee754_pow+0x210>
 80080de:	bf00      	nop
 80080e0:	60000000 	.word	0x60000000
 80080e4:	3ff71547 	.word	0x3ff71547
 80080e8:	f85ddf44 	.word	0xf85ddf44
 80080ec:	3e54ae0b 	.word	0x3e54ae0b
 80080f0:	55555555 	.word	0x55555555
 80080f4:	3fd55555 	.word	0x3fd55555
 80080f8:	652b82fe 	.word	0x652b82fe
 80080fc:	3ff71547 	.word	0x3ff71547
 8008100:	3ff00000 	.word	0x3ff00000
 8008104:	3fd00000 	.word	0x3fd00000
 8008108:	3fe00000 	.word	0x3fe00000
 800810c:	408fffff 	.word	0x408fffff
 8008110:	4bd5      	ldr	r3, [pc, #852]	@ (8008468 <__ieee754_pow+0x778>)
 8008112:	402b      	ands	r3, r5
 8008114:	2200      	movs	r2, #0
 8008116:	b92b      	cbnz	r3, 8008124 <__ieee754_pow+0x434>
 8008118:	4bd4      	ldr	r3, [pc, #848]	@ (800846c <__ieee754_pow+0x77c>)
 800811a:	f7f8 fa8d 	bl	8000638 <__aeabi_dmul>
 800811e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8008122:	468b      	mov	fp, r1
 8008124:	ea4f 532b 	mov.w	r3, fp, asr #20
 8008128:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800812c:	4413      	add	r3, r2
 800812e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008130:	4bcf      	ldr	r3, [pc, #828]	@ (8008470 <__ieee754_pow+0x780>)
 8008132:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8008136:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800813a:	459b      	cmp	fp, r3
 800813c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008140:	dd08      	ble.n	8008154 <__ieee754_pow+0x464>
 8008142:	4bcc      	ldr	r3, [pc, #816]	@ (8008474 <__ieee754_pow+0x784>)
 8008144:	459b      	cmp	fp, r3
 8008146:	f340 81a5 	ble.w	8008494 <__ieee754_pow+0x7a4>
 800814a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800814c:	3301      	adds	r3, #1
 800814e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008150:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8008154:	f04f 0a00 	mov.w	sl, #0
 8008158:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800815c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800815e:	4bc6      	ldr	r3, [pc, #792]	@ (8008478 <__ieee754_pow+0x788>)
 8008160:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008164:	ed93 7b00 	vldr	d7, [r3]
 8008168:	4629      	mov	r1, r5
 800816a:	ec53 2b17 	vmov	r2, r3, d7
 800816e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008172:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008176:	f7f8 f8a7 	bl	80002c8 <__aeabi_dsub>
 800817a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800817e:	4606      	mov	r6, r0
 8008180:	460f      	mov	r7, r1
 8008182:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008186:	f7f8 f8a1 	bl	80002cc <__adddf3>
 800818a:	4602      	mov	r2, r0
 800818c:	460b      	mov	r3, r1
 800818e:	2000      	movs	r0, #0
 8008190:	49ba      	ldr	r1, [pc, #744]	@ (800847c <__ieee754_pow+0x78c>)
 8008192:	f7f8 fb7b 	bl	800088c <__aeabi_ddiv>
 8008196:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800819a:	4602      	mov	r2, r0
 800819c:	460b      	mov	r3, r1
 800819e:	4630      	mov	r0, r6
 80081a0:	4639      	mov	r1, r7
 80081a2:	f7f8 fa49 	bl	8000638 <__aeabi_dmul>
 80081a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081aa:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80081ae:	106d      	asrs	r5, r5, #1
 80081b0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80081b4:	f04f 0b00 	mov.w	fp, #0
 80081b8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80081bc:	4661      	mov	r1, ip
 80081be:	2200      	movs	r2, #0
 80081c0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80081c4:	4658      	mov	r0, fp
 80081c6:	46e1      	mov	r9, ip
 80081c8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80081cc:	4614      	mov	r4, r2
 80081ce:	461d      	mov	r5, r3
 80081d0:	f7f8 fa32 	bl	8000638 <__aeabi_dmul>
 80081d4:	4602      	mov	r2, r0
 80081d6:	460b      	mov	r3, r1
 80081d8:	4630      	mov	r0, r6
 80081da:	4639      	mov	r1, r7
 80081dc:	f7f8 f874 	bl	80002c8 <__aeabi_dsub>
 80081e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081e4:	4606      	mov	r6, r0
 80081e6:	460f      	mov	r7, r1
 80081e8:	4620      	mov	r0, r4
 80081ea:	4629      	mov	r1, r5
 80081ec:	f7f8 f86c 	bl	80002c8 <__aeabi_dsub>
 80081f0:	4602      	mov	r2, r0
 80081f2:	460b      	mov	r3, r1
 80081f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80081f8:	f7f8 f866 	bl	80002c8 <__aeabi_dsub>
 80081fc:	465a      	mov	r2, fp
 80081fe:	464b      	mov	r3, r9
 8008200:	f7f8 fa1a 	bl	8000638 <__aeabi_dmul>
 8008204:	4602      	mov	r2, r0
 8008206:	460b      	mov	r3, r1
 8008208:	4630      	mov	r0, r6
 800820a:	4639      	mov	r1, r7
 800820c:	f7f8 f85c 	bl	80002c8 <__aeabi_dsub>
 8008210:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008214:	f7f8 fa10 	bl	8000638 <__aeabi_dmul>
 8008218:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800821c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008220:	4610      	mov	r0, r2
 8008222:	4619      	mov	r1, r3
 8008224:	f7f8 fa08 	bl	8000638 <__aeabi_dmul>
 8008228:	a37d      	add	r3, pc, #500	@ (adr r3, 8008420 <__ieee754_pow+0x730>)
 800822a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822e:	4604      	mov	r4, r0
 8008230:	460d      	mov	r5, r1
 8008232:	f7f8 fa01 	bl	8000638 <__aeabi_dmul>
 8008236:	a37c      	add	r3, pc, #496	@ (adr r3, 8008428 <__ieee754_pow+0x738>)
 8008238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823c:	f7f8 f846 	bl	80002cc <__adddf3>
 8008240:	4622      	mov	r2, r4
 8008242:	462b      	mov	r3, r5
 8008244:	f7f8 f9f8 	bl	8000638 <__aeabi_dmul>
 8008248:	a379      	add	r3, pc, #484	@ (adr r3, 8008430 <__ieee754_pow+0x740>)
 800824a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824e:	f7f8 f83d 	bl	80002cc <__adddf3>
 8008252:	4622      	mov	r2, r4
 8008254:	462b      	mov	r3, r5
 8008256:	f7f8 f9ef 	bl	8000638 <__aeabi_dmul>
 800825a:	a377      	add	r3, pc, #476	@ (adr r3, 8008438 <__ieee754_pow+0x748>)
 800825c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008260:	f7f8 f834 	bl	80002cc <__adddf3>
 8008264:	4622      	mov	r2, r4
 8008266:	462b      	mov	r3, r5
 8008268:	f7f8 f9e6 	bl	8000638 <__aeabi_dmul>
 800826c:	a374      	add	r3, pc, #464	@ (adr r3, 8008440 <__ieee754_pow+0x750>)
 800826e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008272:	f7f8 f82b 	bl	80002cc <__adddf3>
 8008276:	4622      	mov	r2, r4
 8008278:	462b      	mov	r3, r5
 800827a:	f7f8 f9dd 	bl	8000638 <__aeabi_dmul>
 800827e:	a372      	add	r3, pc, #456	@ (adr r3, 8008448 <__ieee754_pow+0x758>)
 8008280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008284:	f7f8 f822 	bl	80002cc <__adddf3>
 8008288:	4622      	mov	r2, r4
 800828a:	4606      	mov	r6, r0
 800828c:	460f      	mov	r7, r1
 800828e:	462b      	mov	r3, r5
 8008290:	4620      	mov	r0, r4
 8008292:	4629      	mov	r1, r5
 8008294:	f7f8 f9d0 	bl	8000638 <__aeabi_dmul>
 8008298:	4602      	mov	r2, r0
 800829a:	460b      	mov	r3, r1
 800829c:	4630      	mov	r0, r6
 800829e:	4639      	mov	r1, r7
 80082a0:	f7f8 f9ca 	bl	8000638 <__aeabi_dmul>
 80082a4:	465a      	mov	r2, fp
 80082a6:	4604      	mov	r4, r0
 80082a8:	460d      	mov	r5, r1
 80082aa:	464b      	mov	r3, r9
 80082ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082b0:	f7f8 f80c 	bl	80002cc <__adddf3>
 80082b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082b8:	f7f8 f9be 	bl	8000638 <__aeabi_dmul>
 80082bc:	4622      	mov	r2, r4
 80082be:	462b      	mov	r3, r5
 80082c0:	f7f8 f804 	bl	80002cc <__adddf3>
 80082c4:	465a      	mov	r2, fp
 80082c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80082ca:	464b      	mov	r3, r9
 80082cc:	4658      	mov	r0, fp
 80082ce:	4649      	mov	r1, r9
 80082d0:	f7f8 f9b2 	bl	8000638 <__aeabi_dmul>
 80082d4:	4b6a      	ldr	r3, [pc, #424]	@ (8008480 <__ieee754_pow+0x790>)
 80082d6:	2200      	movs	r2, #0
 80082d8:	4606      	mov	r6, r0
 80082da:	460f      	mov	r7, r1
 80082dc:	f7f7 fff6 	bl	80002cc <__adddf3>
 80082e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80082e4:	f7f7 fff2 	bl	80002cc <__adddf3>
 80082e8:	46d8      	mov	r8, fp
 80082ea:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80082ee:	460d      	mov	r5, r1
 80082f0:	465a      	mov	r2, fp
 80082f2:	460b      	mov	r3, r1
 80082f4:	4640      	mov	r0, r8
 80082f6:	4649      	mov	r1, r9
 80082f8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80082fc:	f7f8 f99c 	bl	8000638 <__aeabi_dmul>
 8008300:	465c      	mov	r4, fp
 8008302:	4680      	mov	r8, r0
 8008304:	4689      	mov	r9, r1
 8008306:	4b5e      	ldr	r3, [pc, #376]	@ (8008480 <__ieee754_pow+0x790>)
 8008308:	2200      	movs	r2, #0
 800830a:	4620      	mov	r0, r4
 800830c:	4629      	mov	r1, r5
 800830e:	f7f7 ffdb 	bl	80002c8 <__aeabi_dsub>
 8008312:	4632      	mov	r2, r6
 8008314:	463b      	mov	r3, r7
 8008316:	f7f7 ffd7 	bl	80002c8 <__aeabi_dsub>
 800831a:	4602      	mov	r2, r0
 800831c:	460b      	mov	r3, r1
 800831e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008322:	f7f7 ffd1 	bl	80002c8 <__aeabi_dsub>
 8008326:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800832a:	f7f8 f985 	bl	8000638 <__aeabi_dmul>
 800832e:	4622      	mov	r2, r4
 8008330:	4606      	mov	r6, r0
 8008332:	460f      	mov	r7, r1
 8008334:	462b      	mov	r3, r5
 8008336:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800833a:	f7f8 f97d 	bl	8000638 <__aeabi_dmul>
 800833e:	4602      	mov	r2, r0
 8008340:	460b      	mov	r3, r1
 8008342:	4630      	mov	r0, r6
 8008344:	4639      	mov	r1, r7
 8008346:	f7f7 ffc1 	bl	80002cc <__adddf3>
 800834a:	4606      	mov	r6, r0
 800834c:	460f      	mov	r7, r1
 800834e:	4602      	mov	r2, r0
 8008350:	460b      	mov	r3, r1
 8008352:	4640      	mov	r0, r8
 8008354:	4649      	mov	r1, r9
 8008356:	f7f7 ffb9 	bl	80002cc <__adddf3>
 800835a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800835e:	a33c      	add	r3, pc, #240	@ (adr r3, 8008450 <__ieee754_pow+0x760>)
 8008360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008364:	4658      	mov	r0, fp
 8008366:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800836a:	460d      	mov	r5, r1
 800836c:	f7f8 f964 	bl	8000638 <__aeabi_dmul>
 8008370:	465c      	mov	r4, fp
 8008372:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008376:	4642      	mov	r2, r8
 8008378:	464b      	mov	r3, r9
 800837a:	4620      	mov	r0, r4
 800837c:	4629      	mov	r1, r5
 800837e:	f7f7 ffa3 	bl	80002c8 <__aeabi_dsub>
 8008382:	4602      	mov	r2, r0
 8008384:	460b      	mov	r3, r1
 8008386:	4630      	mov	r0, r6
 8008388:	4639      	mov	r1, r7
 800838a:	f7f7 ff9d 	bl	80002c8 <__aeabi_dsub>
 800838e:	a332      	add	r3, pc, #200	@ (adr r3, 8008458 <__ieee754_pow+0x768>)
 8008390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008394:	f7f8 f950 	bl	8000638 <__aeabi_dmul>
 8008398:	a331      	add	r3, pc, #196	@ (adr r3, 8008460 <__ieee754_pow+0x770>)
 800839a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839e:	4606      	mov	r6, r0
 80083a0:	460f      	mov	r7, r1
 80083a2:	4620      	mov	r0, r4
 80083a4:	4629      	mov	r1, r5
 80083a6:	f7f8 f947 	bl	8000638 <__aeabi_dmul>
 80083aa:	4602      	mov	r2, r0
 80083ac:	460b      	mov	r3, r1
 80083ae:	4630      	mov	r0, r6
 80083b0:	4639      	mov	r1, r7
 80083b2:	f7f7 ff8b 	bl	80002cc <__adddf3>
 80083b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80083b8:	4b32      	ldr	r3, [pc, #200]	@ (8008484 <__ieee754_pow+0x794>)
 80083ba:	4413      	add	r3, r2
 80083bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c0:	f7f7 ff84 	bl	80002cc <__adddf3>
 80083c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80083c8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80083ca:	f7f8 f8cb 	bl	8000564 <__aeabi_i2d>
 80083ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80083d0:	4b2d      	ldr	r3, [pc, #180]	@ (8008488 <__ieee754_pow+0x798>)
 80083d2:	4413      	add	r3, r2
 80083d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80083d8:	4606      	mov	r6, r0
 80083da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80083de:	460f      	mov	r7, r1
 80083e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083e4:	f7f7 ff72 	bl	80002cc <__adddf3>
 80083e8:	4642      	mov	r2, r8
 80083ea:	464b      	mov	r3, r9
 80083ec:	f7f7 ff6e 	bl	80002cc <__adddf3>
 80083f0:	4632      	mov	r2, r6
 80083f2:	463b      	mov	r3, r7
 80083f4:	f7f7 ff6a 	bl	80002cc <__adddf3>
 80083f8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80083fc:	4632      	mov	r2, r6
 80083fe:	463b      	mov	r3, r7
 8008400:	4658      	mov	r0, fp
 8008402:	460d      	mov	r5, r1
 8008404:	f7f7 ff60 	bl	80002c8 <__aeabi_dsub>
 8008408:	4642      	mov	r2, r8
 800840a:	464b      	mov	r3, r9
 800840c:	f7f7 ff5c 	bl	80002c8 <__aeabi_dsub>
 8008410:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008414:	f7f7 ff58 	bl	80002c8 <__aeabi_dsub>
 8008418:	465c      	mov	r4, fp
 800841a:	4602      	mov	r2, r0
 800841c:	e036      	b.n	800848c <__ieee754_pow+0x79c>
 800841e:	bf00      	nop
 8008420:	4a454eef 	.word	0x4a454eef
 8008424:	3fca7e28 	.word	0x3fca7e28
 8008428:	93c9db65 	.word	0x93c9db65
 800842c:	3fcd864a 	.word	0x3fcd864a
 8008430:	a91d4101 	.word	0xa91d4101
 8008434:	3fd17460 	.word	0x3fd17460
 8008438:	518f264d 	.word	0x518f264d
 800843c:	3fd55555 	.word	0x3fd55555
 8008440:	db6fabff 	.word	0xdb6fabff
 8008444:	3fdb6db6 	.word	0x3fdb6db6
 8008448:	33333303 	.word	0x33333303
 800844c:	3fe33333 	.word	0x3fe33333
 8008450:	e0000000 	.word	0xe0000000
 8008454:	3feec709 	.word	0x3feec709
 8008458:	dc3a03fd 	.word	0xdc3a03fd
 800845c:	3feec709 	.word	0x3feec709
 8008460:	145b01f5 	.word	0x145b01f5
 8008464:	be3e2fe0 	.word	0xbe3e2fe0
 8008468:	7ff00000 	.word	0x7ff00000
 800846c:	43400000 	.word	0x43400000
 8008470:	0003988e 	.word	0x0003988e
 8008474:	000bb679 	.word	0x000bb679
 8008478:	080091e0 	.word	0x080091e0
 800847c:	3ff00000 	.word	0x3ff00000
 8008480:	40080000 	.word	0x40080000
 8008484:	080091c0 	.word	0x080091c0
 8008488:	080091d0 	.word	0x080091d0
 800848c:	460b      	mov	r3, r1
 800848e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008492:	e5d7      	b.n	8008044 <__ieee754_pow+0x354>
 8008494:	f04f 0a01 	mov.w	sl, #1
 8008498:	e65e      	b.n	8008158 <__ieee754_pow+0x468>
 800849a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800876c <__ieee754_pow+0xa7c>)
 800849c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a0:	4630      	mov	r0, r6
 80084a2:	4639      	mov	r1, r7
 80084a4:	f7f7 ff12 	bl	80002cc <__adddf3>
 80084a8:	4642      	mov	r2, r8
 80084aa:	e9cd 0100 	strd	r0, r1, [sp]
 80084ae:	464b      	mov	r3, r9
 80084b0:	4620      	mov	r0, r4
 80084b2:	4629      	mov	r1, r5
 80084b4:	f7f7 ff08 	bl	80002c8 <__aeabi_dsub>
 80084b8:	4602      	mov	r2, r0
 80084ba:	460b      	mov	r3, r1
 80084bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084c0:	f7f8 fb4a 	bl	8000b58 <__aeabi_dcmpgt>
 80084c4:	2800      	cmp	r0, #0
 80084c6:	f47f ae00 	bne.w	80080ca <__ieee754_pow+0x3da>
 80084ca:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80084ce:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80084d2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80084d6:	fa43 fa0a 	asr.w	sl, r3, sl
 80084da:	44da      	add	sl, fp
 80084dc:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80084e0:	489d      	ldr	r0, [pc, #628]	@ (8008758 <__ieee754_pow+0xa68>)
 80084e2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80084e6:	4108      	asrs	r0, r1
 80084e8:	ea00 030a 	and.w	r3, r0, sl
 80084ec:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80084f0:	f1c1 0114 	rsb	r1, r1, #20
 80084f4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80084f8:	fa4a fa01 	asr.w	sl, sl, r1
 80084fc:	f1bb 0f00 	cmp.w	fp, #0
 8008500:	4640      	mov	r0, r8
 8008502:	4649      	mov	r1, r9
 8008504:	f04f 0200 	mov.w	r2, #0
 8008508:	bfb8      	it	lt
 800850a:	f1ca 0a00 	rsblt	sl, sl, #0
 800850e:	f7f7 fedb 	bl	80002c8 <__aeabi_dsub>
 8008512:	4680      	mov	r8, r0
 8008514:	4689      	mov	r9, r1
 8008516:	4632      	mov	r2, r6
 8008518:	463b      	mov	r3, r7
 800851a:	4640      	mov	r0, r8
 800851c:	4649      	mov	r1, r9
 800851e:	f7f7 fed5 	bl	80002cc <__adddf3>
 8008522:	2400      	movs	r4, #0
 8008524:	a37c      	add	r3, pc, #496	@ (adr r3, 8008718 <__ieee754_pow+0xa28>)
 8008526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852a:	4620      	mov	r0, r4
 800852c:	460d      	mov	r5, r1
 800852e:	f7f8 f883 	bl	8000638 <__aeabi_dmul>
 8008532:	4642      	mov	r2, r8
 8008534:	e9cd 0100 	strd	r0, r1, [sp]
 8008538:	464b      	mov	r3, r9
 800853a:	4620      	mov	r0, r4
 800853c:	4629      	mov	r1, r5
 800853e:	f7f7 fec3 	bl	80002c8 <__aeabi_dsub>
 8008542:	4602      	mov	r2, r0
 8008544:	460b      	mov	r3, r1
 8008546:	4630      	mov	r0, r6
 8008548:	4639      	mov	r1, r7
 800854a:	f7f7 febd 	bl	80002c8 <__aeabi_dsub>
 800854e:	a374      	add	r3, pc, #464	@ (adr r3, 8008720 <__ieee754_pow+0xa30>)
 8008550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008554:	f7f8 f870 	bl	8000638 <__aeabi_dmul>
 8008558:	a373      	add	r3, pc, #460	@ (adr r3, 8008728 <__ieee754_pow+0xa38>)
 800855a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855e:	4680      	mov	r8, r0
 8008560:	4689      	mov	r9, r1
 8008562:	4620      	mov	r0, r4
 8008564:	4629      	mov	r1, r5
 8008566:	f7f8 f867 	bl	8000638 <__aeabi_dmul>
 800856a:	4602      	mov	r2, r0
 800856c:	460b      	mov	r3, r1
 800856e:	4640      	mov	r0, r8
 8008570:	4649      	mov	r1, r9
 8008572:	f7f7 feab 	bl	80002cc <__adddf3>
 8008576:	4604      	mov	r4, r0
 8008578:	460d      	mov	r5, r1
 800857a:	4602      	mov	r2, r0
 800857c:	460b      	mov	r3, r1
 800857e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008582:	f7f7 fea3 	bl	80002cc <__adddf3>
 8008586:	e9dd 2300 	ldrd	r2, r3, [sp]
 800858a:	4680      	mov	r8, r0
 800858c:	4689      	mov	r9, r1
 800858e:	f7f7 fe9b 	bl	80002c8 <__aeabi_dsub>
 8008592:	4602      	mov	r2, r0
 8008594:	460b      	mov	r3, r1
 8008596:	4620      	mov	r0, r4
 8008598:	4629      	mov	r1, r5
 800859a:	f7f7 fe95 	bl	80002c8 <__aeabi_dsub>
 800859e:	4642      	mov	r2, r8
 80085a0:	4606      	mov	r6, r0
 80085a2:	460f      	mov	r7, r1
 80085a4:	464b      	mov	r3, r9
 80085a6:	4640      	mov	r0, r8
 80085a8:	4649      	mov	r1, r9
 80085aa:	f7f8 f845 	bl	8000638 <__aeabi_dmul>
 80085ae:	a360      	add	r3, pc, #384	@ (adr r3, 8008730 <__ieee754_pow+0xa40>)
 80085b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b4:	4604      	mov	r4, r0
 80085b6:	460d      	mov	r5, r1
 80085b8:	f7f8 f83e 	bl	8000638 <__aeabi_dmul>
 80085bc:	a35e      	add	r3, pc, #376	@ (adr r3, 8008738 <__ieee754_pow+0xa48>)
 80085be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c2:	f7f7 fe81 	bl	80002c8 <__aeabi_dsub>
 80085c6:	4622      	mov	r2, r4
 80085c8:	462b      	mov	r3, r5
 80085ca:	f7f8 f835 	bl	8000638 <__aeabi_dmul>
 80085ce:	a35c      	add	r3, pc, #368	@ (adr r3, 8008740 <__ieee754_pow+0xa50>)
 80085d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d4:	f7f7 fe7a 	bl	80002cc <__adddf3>
 80085d8:	4622      	mov	r2, r4
 80085da:	462b      	mov	r3, r5
 80085dc:	f7f8 f82c 	bl	8000638 <__aeabi_dmul>
 80085e0:	a359      	add	r3, pc, #356	@ (adr r3, 8008748 <__ieee754_pow+0xa58>)
 80085e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e6:	f7f7 fe6f 	bl	80002c8 <__aeabi_dsub>
 80085ea:	4622      	mov	r2, r4
 80085ec:	462b      	mov	r3, r5
 80085ee:	f7f8 f823 	bl	8000638 <__aeabi_dmul>
 80085f2:	a357      	add	r3, pc, #348	@ (adr r3, 8008750 <__ieee754_pow+0xa60>)
 80085f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f8:	f7f7 fe68 	bl	80002cc <__adddf3>
 80085fc:	4622      	mov	r2, r4
 80085fe:	462b      	mov	r3, r5
 8008600:	f7f8 f81a 	bl	8000638 <__aeabi_dmul>
 8008604:	4602      	mov	r2, r0
 8008606:	460b      	mov	r3, r1
 8008608:	4640      	mov	r0, r8
 800860a:	4649      	mov	r1, r9
 800860c:	f7f7 fe5c 	bl	80002c8 <__aeabi_dsub>
 8008610:	4604      	mov	r4, r0
 8008612:	460d      	mov	r5, r1
 8008614:	4602      	mov	r2, r0
 8008616:	460b      	mov	r3, r1
 8008618:	4640      	mov	r0, r8
 800861a:	4649      	mov	r1, r9
 800861c:	f7f8 f80c 	bl	8000638 <__aeabi_dmul>
 8008620:	2200      	movs	r2, #0
 8008622:	e9cd 0100 	strd	r0, r1, [sp]
 8008626:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800862a:	4620      	mov	r0, r4
 800862c:	4629      	mov	r1, r5
 800862e:	f7f7 fe4b 	bl	80002c8 <__aeabi_dsub>
 8008632:	4602      	mov	r2, r0
 8008634:	460b      	mov	r3, r1
 8008636:	e9dd 0100 	ldrd	r0, r1, [sp]
 800863a:	f7f8 f927 	bl	800088c <__aeabi_ddiv>
 800863e:	4632      	mov	r2, r6
 8008640:	4604      	mov	r4, r0
 8008642:	460d      	mov	r5, r1
 8008644:	463b      	mov	r3, r7
 8008646:	4640      	mov	r0, r8
 8008648:	4649      	mov	r1, r9
 800864a:	f7f7 fff5 	bl	8000638 <__aeabi_dmul>
 800864e:	4632      	mov	r2, r6
 8008650:	463b      	mov	r3, r7
 8008652:	f7f7 fe3b 	bl	80002cc <__adddf3>
 8008656:	4602      	mov	r2, r0
 8008658:	460b      	mov	r3, r1
 800865a:	4620      	mov	r0, r4
 800865c:	4629      	mov	r1, r5
 800865e:	f7f7 fe33 	bl	80002c8 <__aeabi_dsub>
 8008662:	4642      	mov	r2, r8
 8008664:	464b      	mov	r3, r9
 8008666:	f7f7 fe2f 	bl	80002c8 <__aeabi_dsub>
 800866a:	460b      	mov	r3, r1
 800866c:	4602      	mov	r2, r0
 800866e:	493b      	ldr	r1, [pc, #236]	@ (800875c <__ieee754_pow+0xa6c>)
 8008670:	2000      	movs	r0, #0
 8008672:	f7f7 fe29 	bl	80002c8 <__aeabi_dsub>
 8008676:	ec41 0b10 	vmov	d0, r0, r1
 800867a:	ee10 3a90 	vmov	r3, s1
 800867e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008682:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008686:	da30      	bge.n	80086ea <__ieee754_pow+0x9fa>
 8008688:	4650      	mov	r0, sl
 800868a:	f000 f87d 	bl	8008788 <scalbn>
 800868e:	ec51 0b10 	vmov	r0, r1, d0
 8008692:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008696:	f7ff bbd2 	b.w	8007e3e <__ieee754_pow+0x14e>
 800869a:	4c31      	ldr	r4, [pc, #196]	@ (8008760 <__ieee754_pow+0xa70>)
 800869c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80086a0:	42a3      	cmp	r3, r4
 80086a2:	d91a      	bls.n	80086da <__ieee754_pow+0x9ea>
 80086a4:	4b2f      	ldr	r3, [pc, #188]	@ (8008764 <__ieee754_pow+0xa74>)
 80086a6:	440b      	add	r3, r1
 80086a8:	4303      	orrs	r3, r0
 80086aa:	d009      	beq.n	80086c0 <__ieee754_pow+0x9d0>
 80086ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086b0:	2200      	movs	r2, #0
 80086b2:	2300      	movs	r3, #0
 80086b4:	f7f8 fa32 	bl	8000b1c <__aeabi_dcmplt>
 80086b8:	3800      	subs	r0, #0
 80086ba:	bf18      	it	ne
 80086bc:	2001      	movne	r0, #1
 80086be:	e42b      	b.n	8007f18 <__ieee754_pow+0x228>
 80086c0:	4642      	mov	r2, r8
 80086c2:	464b      	mov	r3, r9
 80086c4:	f7f7 fe00 	bl	80002c8 <__aeabi_dsub>
 80086c8:	4632      	mov	r2, r6
 80086ca:	463b      	mov	r3, r7
 80086cc:	f7f8 fa3a 	bl	8000b44 <__aeabi_dcmpge>
 80086d0:	2800      	cmp	r0, #0
 80086d2:	d1eb      	bne.n	80086ac <__ieee754_pow+0x9bc>
 80086d4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8008774 <__ieee754_pow+0xa84>
 80086d8:	e6f7      	b.n	80084ca <__ieee754_pow+0x7da>
 80086da:	469a      	mov	sl, r3
 80086dc:	4b22      	ldr	r3, [pc, #136]	@ (8008768 <__ieee754_pow+0xa78>)
 80086de:	459a      	cmp	sl, r3
 80086e0:	f63f aef3 	bhi.w	80084ca <__ieee754_pow+0x7da>
 80086e4:	f8dd a010 	ldr.w	sl, [sp, #16]
 80086e8:	e715      	b.n	8008516 <__ieee754_pow+0x826>
 80086ea:	ec51 0b10 	vmov	r0, r1, d0
 80086ee:	4619      	mov	r1, r3
 80086f0:	e7cf      	b.n	8008692 <__ieee754_pow+0x9a2>
 80086f2:	491a      	ldr	r1, [pc, #104]	@ (800875c <__ieee754_pow+0xa6c>)
 80086f4:	2000      	movs	r0, #0
 80086f6:	f7ff bb18 	b.w	8007d2a <__ieee754_pow+0x3a>
 80086fa:	2000      	movs	r0, #0
 80086fc:	2100      	movs	r1, #0
 80086fe:	f7ff bb14 	b.w	8007d2a <__ieee754_pow+0x3a>
 8008702:	4630      	mov	r0, r6
 8008704:	4639      	mov	r1, r7
 8008706:	f7ff bb10 	b.w	8007d2a <__ieee754_pow+0x3a>
 800870a:	460c      	mov	r4, r1
 800870c:	f7ff bb5e 	b.w	8007dcc <__ieee754_pow+0xdc>
 8008710:	2400      	movs	r4, #0
 8008712:	f7ff bb49 	b.w	8007da8 <__ieee754_pow+0xb8>
 8008716:	bf00      	nop
 8008718:	00000000 	.word	0x00000000
 800871c:	3fe62e43 	.word	0x3fe62e43
 8008720:	fefa39ef 	.word	0xfefa39ef
 8008724:	3fe62e42 	.word	0x3fe62e42
 8008728:	0ca86c39 	.word	0x0ca86c39
 800872c:	be205c61 	.word	0xbe205c61
 8008730:	72bea4d0 	.word	0x72bea4d0
 8008734:	3e663769 	.word	0x3e663769
 8008738:	c5d26bf1 	.word	0xc5d26bf1
 800873c:	3ebbbd41 	.word	0x3ebbbd41
 8008740:	af25de2c 	.word	0xaf25de2c
 8008744:	3f11566a 	.word	0x3f11566a
 8008748:	16bebd93 	.word	0x16bebd93
 800874c:	3f66c16c 	.word	0x3f66c16c
 8008750:	5555553e 	.word	0x5555553e
 8008754:	3fc55555 	.word	0x3fc55555
 8008758:	fff00000 	.word	0xfff00000
 800875c:	3ff00000 	.word	0x3ff00000
 8008760:	4090cbff 	.word	0x4090cbff
 8008764:	3f6f3400 	.word	0x3f6f3400
 8008768:	3fe00000 	.word	0x3fe00000
 800876c:	652b82fe 	.word	0x652b82fe
 8008770:	3c971547 	.word	0x3c971547
 8008774:	4090cc00 	.word	0x4090cc00

08008778 <fabs>:
 8008778:	ec51 0b10 	vmov	r0, r1, d0
 800877c:	4602      	mov	r2, r0
 800877e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008782:	ec43 2b10 	vmov	d0, r2, r3
 8008786:	4770      	bx	lr

08008788 <scalbn>:
 8008788:	b570      	push	{r4, r5, r6, lr}
 800878a:	ec55 4b10 	vmov	r4, r5, d0
 800878e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008792:	4606      	mov	r6, r0
 8008794:	462b      	mov	r3, r5
 8008796:	b991      	cbnz	r1, 80087be <scalbn+0x36>
 8008798:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800879c:	4323      	orrs	r3, r4
 800879e:	d03d      	beq.n	800881c <scalbn+0x94>
 80087a0:	4b35      	ldr	r3, [pc, #212]	@ (8008878 <scalbn+0xf0>)
 80087a2:	4620      	mov	r0, r4
 80087a4:	4629      	mov	r1, r5
 80087a6:	2200      	movs	r2, #0
 80087a8:	f7f7 ff46 	bl	8000638 <__aeabi_dmul>
 80087ac:	4b33      	ldr	r3, [pc, #204]	@ (800887c <scalbn+0xf4>)
 80087ae:	429e      	cmp	r6, r3
 80087b0:	4604      	mov	r4, r0
 80087b2:	460d      	mov	r5, r1
 80087b4:	da0f      	bge.n	80087d6 <scalbn+0x4e>
 80087b6:	a328      	add	r3, pc, #160	@ (adr r3, 8008858 <scalbn+0xd0>)
 80087b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087bc:	e01e      	b.n	80087fc <scalbn+0x74>
 80087be:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80087c2:	4291      	cmp	r1, r2
 80087c4:	d10b      	bne.n	80087de <scalbn+0x56>
 80087c6:	4622      	mov	r2, r4
 80087c8:	4620      	mov	r0, r4
 80087ca:	4629      	mov	r1, r5
 80087cc:	f7f7 fd7e 	bl	80002cc <__adddf3>
 80087d0:	4604      	mov	r4, r0
 80087d2:	460d      	mov	r5, r1
 80087d4:	e022      	b.n	800881c <scalbn+0x94>
 80087d6:	460b      	mov	r3, r1
 80087d8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80087dc:	3936      	subs	r1, #54	@ 0x36
 80087de:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80087e2:	4296      	cmp	r6, r2
 80087e4:	dd0d      	ble.n	8008802 <scalbn+0x7a>
 80087e6:	2d00      	cmp	r5, #0
 80087e8:	a11d      	add	r1, pc, #116	@ (adr r1, 8008860 <scalbn+0xd8>)
 80087ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087ee:	da02      	bge.n	80087f6 <scalbn+0x6e>
 80087f0:	a11d      	add	r1, pc, #116	@ (adr r1, 8008868 <scalbn+0xe0>)
 80087f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087f6:	a31a      	add	r3, pc, #104	@ (adr r3, 8008860 <scalbn+0xd8>)
 80087f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fc:	f7f7 ff1c 	bl	8000638 <__aeabi_dmul>
 8008800:	e7e6      	b.n	80087d0 <scalbn+0x48>
 8008802:	1872      	adds	r2, r6, r1
 8008804:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008808:	428a      	cmp	r2, r1
 800880a:	dcec      	bgt.n	80087e6 <scalbn+0x5e>
 800880c:	2a00      	cmp	r2, #0
 800880e:	dd08      	ble.n	8008822 <scalbn+0x9a>
 8008810:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008814:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008818:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800881c:	ec45 4b10 	vmov	d0, r4, r5
 8008820:	bd70      	pop	{r4, r5, r6, pc}
 8008822:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008826:	da08      	bge.n	800883a <scalbn+0xb2>
 8008828:	2d00      	cmp	r5, #0
 800882a:	a10b      	add	r1, pc, #44	@ (adr r1, 8008858 <scalbn+0xd0>)
 800882c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008830:	dac1      	bge.n	80087b6 <scalbn+0x2e>
 8008832:	a10f      	add	r1, pc, #60	@ (adr r1, 8008870 <scalbn+0xe8>)
 8008834:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008838:	e7bd      	b.n	80087b6 <scalbn+0x2e>
 800883a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800883e:	3236      	adds	r2, #54	@ 0x36
 8008840:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008844:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008848:	4620      	mov	r0, r4
 800884a:	4b0d      	ldr	r3, [pc, #52]	@ (8008880 <scalbn+0xf8>)
 800884c:	4629      	mov	r1, r5
 800884e:	2200      	movs	r2, #0
 8008850:	e7d4      	b.n	80087fc <scalbn+0x74>
 8008852:	bf00      	nop
 8008854:	f3af 8000 	nop.w
 8008858:	c2f8f359 	.word	0xc2f8f359
 800885c:	01a56e1f 	.word	0x01a56e1f
 8008860:	8800759c 	.word	0x8800759c
 8008864:	7e37e43c 	.word	0x7e37e43c
 8008868:	8800759c 	.word	0x8800759c
 800886c:	fe37e43c 	.word	0xfe37e43c
 8008870:	c2f8f359 	.word	0xc2f8f359
 8008874:	81a56e1f 	.word	0x81a56e1f
 8008878:	43500000 	.word	0x43500000
 800887c:	ffff3cb0 	.word	0xffff3cb0
 8008880:	3c900000 	.word	0x3c900000

08008884 <with_errno>:
 8008884:	b510      	push	{r4, lr}
 8008886:	ed2d 8b02 	vpush	{d8}
 800888a:	eeb0 8a40 	vmov.f32	s16, s0
 800888e:	eef0 8a60 	vmov.f32	s17, s1
 8008892:	4604      	mov	r4, r0
 8008894:	f7fe fdf4 	bl	8007480 <__errno>
 8008898:	eeb0 0a48 	vmov.f32	s0, s16
 800889c:	eef0 0a68 	vmov.f32	s1, s17
 80088a0:	ecbd 8b02 	vpop	{d8}
 80088a4:	6004      	str	r4, [r0, #0]
 80088a6:	bd10      	pop	{r4, pc}

080088a8 <xflow>:
 80088a8:	4603      	mov	r3, r0
 80088aa:	b507      	push	{r0, r1, r2, lr}
 80088ac:	ec51 0b10 	vmov	r0, r1, d0
 80088b0:	b183      	cbz	r3, 80088d4 <xflow+0x2c>
 80088b2:	4602      	mov	r2, r0
 80088b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80088b8:	e9cd 2300 	strd	r2, r3, [sp]
 80088bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088c0:	f7f7 feba 	bl	8000638 <__aeabi_dmul>
 80088c4:	ec41 0b10 	vmov	d0, r0, r1
 80088c8:	2022      	movs	r0, #34	@ 0x22
 80088ca:	b003      	add	sp, #12
 80088cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80088d0:	f7ff bfd8 	b.w	8008884 <with_errno>
 80088d4:	4602      	mov	r2, r0
 80088d6:	460b      	mov	r3, r1
 80088d8:	e7ee      	b.n	80088b8 <xflow+0x10>
 80088da:	0000      	movs	r0, r0
 80088dc:	0000      	movs	r0, r0
	...

080088e0 <__math_uflow>:
 80088e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80088e8 <__math_uflow+0x8>
 80088e4:	f7ff bfe0 	b.w	80088a8 <xflow>
 80088e8:	00000000 	.word	0x00000000
 80088ec:	10000000 	.word	0x10000000

080088f0 <__math_oflow>:
 80088f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80088f8 <__math_oflow+0x8>
 80088f4:	f7ff bfd8 	b.w	80088a8 <xflow>
 80088f8:	00000000 	.word	0x00000000
 80088fc:	70000000 	.word	0x70000000

08008900 <__ieee754_sqrt>:
 8008900:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008904:	4a68      	ldr	r2, [pc, #416]	@ (8008aa8 <__ieee754_sqrt+0x1a8>)
 8008906:	ec55 4b10 	vmov	r4, r5, d0
 800890a:	43aa      	bics	r2, r5
 800890c:	462b      	mov	r3, r5
 800890e:	4621      	mov	r1, r4
 8008910:	d110      	bne.n	8008934 <__ieee754_sqrt+0x34>
 8008912:	4622      	mov	r2, r4
 8008914:	4620      	mov	r0, r4
 8008916:	4629      	mov	r1, r5
 8008918:	f7f7 fe8e 	bl	8000638 <__aeabi_dmul>
 800891c:	4602      	mov	r2, r0
 800891e:	460b      	mov	r3, r1
 8008920:	4620      	mov	r0, r4
 8008922:	4629      	mov	r1, r5
 8008924:	f7f7 fcd2 	bl	80002cc <__adddf3>
 8008928:	4604      	mov	r4, r0
 800892a:	460d      	mov	r5, r1
 800892c:	ec45 4b10 	vmov	d0, r4, r5
 8008930:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008934:	2d00      	cmp	r5, #0
 8008936:	dc0e      	bgt.n	8008956 <__ieee754_sqrt+0x56>
 8008938:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800893c:	4322      	orrs	r2, r4
 800893e:	d0f5      	beq.n	800892c <__ieee754_sqrt+0x2c>
 8008940:	b19d      	cbz	r5, 800896a <__ieee754_sqrt+0x6a>
 8008942:	4622      	mov	r2, r4
 8008944:	4620      	mov	r0, r4
 8008946:	4629      	mov	r1, r5
 8008948:	f7f7 fcbe 	bl	80002c8 <__aeabi_dsub>
 800894c:	4602      	mov	r2, r0
 800894e:	460b      	mov	r3, r1
 8008950:	f7f7 ff9c 	bl	800088c <__aeabi_ddiv>
 8008954:	e7e8      	b.n	8008928 <__ieee754_sqrt+0x28>
 8008956:	152a      	asrs	r2, r5, #20
 8008958:	d115      	bne.n	8008986 <__ieee754_sqrt+0x86>
 800895a:	2000      	movs	r0, #0
 800895c:	e009      	b.n	8008972 <__ieee754_sqrt+0x72>
 800895e:	0acb      	lsrs	r3, r1, #11
 8008960:	3a15      	subs	r2, #21
 8008962:	0549      	lsls	r1, r1, #21
 8008964:	2b00      	cmp	r3, #0
 8008966:	d0fa      	beq.n	800895e <__ieee754_sqrt+0x5e>
 8008968:	e7f7      	b.n	800895a <__ieee754_sqrt+0x5a>
 800896a:	462a      	mov	r2, r5
 800896c:	e7fa      	b.n	8008964 <__ieee754_sqrt+0x64>
 800896e:	005b      	lsls	r3, r3, #1
 8008970:	3001      	adds	r0, #1
 8008972:	02dc      	lsls	r4, r3, #11
 8008974:	d5fb      	bpl.n	800896e <__ieee754_sqrt+0x6e>
 8008976:	1e44      	subs	r4, r0, #1
 8008978:	1b12      	subs	r2, r2, r4
 800897a:	f1c0 0420 	rsb	r4, r0, #32
 800897e:	fa21 f404 	lsr.w	r4, r1, r4
 8008982:	4323      	orrs	r3, r4
 8008984:	4081      	lsls	r1, r0
 8008986:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800898a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800898e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008992:	07d2      	lsls	r2, r2, #31
 8008994:	bf5c      	itt	pl
 8008996:	005b      	lslpl	r3, r3, #1
 8008998:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800899c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80089a0:	bf58      	it	pl
 80089a2:	0049      	lslpl	r1, r1, #1
 80089a4:	2600      	movs	r6, #0
 80089a6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80089aa:	106d      	asrs	r5, r5, #1
 80089ac:	0049      	lsls	r1, r1, #1
 80089ae:	2016      	movs	r0, #22
 80089b0:	4632      	mov	r2, r6
 80089b2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80089b6:	1917      	adds	r7, r2, r4
 80089b8:	429f      	cmp	r7, r3
 80089ba:	bfde      	ittt	le
 80089bc:	193a      	addle	r2, r7, r4
 80089be:	1bdb      	suble	r3, r3, r7
 80089c0:	1936      	addle	r6, r6, r4
 80089c2:	0fcf      	lsrs	r7, r1, #31
 80089c4:	3801      	subs	r0, #1
 80089c6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80089ca:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80089ce:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80089d2:	d1f0      	bne.n	80089b6 <__ieee754_sqrt+0xb6>
 80089d4:	4604      	mov	r4, r0
 80089d6:	2720      	movs	r7, #32
 80089d8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80089dc:	429a      	cmp	r2, r3
 80089de:	eb00 0e0c 	add.w	lr, r0, ip
 80089e2:	db02      	blt.n	80089ea <__ieee754_sqrt+0xea>
 80089e4:	d113      	bne.n	8008a0e <__ieee754_sqrt+0x10e>
 80089e6:	458e      	cmp	lr, r1
 80089e8:	d811      	bhi.n	8008a0e <__ieee754_sqrt+0x10e>
 80089ea:	f1be 0f00 	cmp.w	lr, #0
 80089ee:	eb0e 000c 	add.w	r0, lr, ip
 80089f2:	da42      	bge.n	8008a7a <__ieee754_sqrt+0x17a>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	db40      	blt.n	8008a7a <__ieee754_sqrt+0x17a>
 80089f8:	f102 0801 	add.w	r8, r2, #1
 80089fc:	1a9b      	subs	r3, r3, r2
 80089fe:	458e      	cmp	lr, r1
 8008a00:	bf88      	it	hi
 8008a02:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008a06:	eba1 010e 	sub.w	r1, r1, lr
 8008a0a:	4464      	add	r4, ip
 8008a0c:	4642      	mov	r2, r8
 8008a0e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8008a12:	3f01      	subs	r7, #1
 8008a14:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8008a18:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008a1c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008a20:	d1dc      	bne.n	80089dc <__ieee754_sqrt+0xdc>
 8008a22:	4319      	orrs	r1, r3
 8008a24:	d01b      	beq.n	8008a5e <__ieee754_sqrt+0x15e>
 8008a26:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8008aac <__ieee754_sqrt+0x1ac>
 8008a2a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8008ab0 <__ieee754_sqrt+0x1b0>
 8008a2e:	e9da 0100 	ldrd	r0, r1, [sl]
 8008a32:	e9db 2300 	ldrd	r2, r3, [fp]
 8008a36:	f7f7 fc47 	bl	80002c8 <__aeabi_dsub>
 8008a3a:	e9da 8900 	ldrd	r8, r9, [sl]
 8008a3e:	4602      	mov	r2, r0
 8008a40:	460b      	mov	r3, r1
 8008a42:	4640      	mov	r0, r8
 8008a44:	4649      	mov	r1, r9
 8008a46:	f7f8 f873 	bl	8000b30 <__aeabi_dcmple>
 8008a4a:	b140      	cbz	r0, 8008a5e <__ieee754_sqrt+0x15e>
 8008a4c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008a50:	e9da 0100 	ldrd	r0, r1, [sl]
 8008a54:	e9db 2300 	ldrd	r2, r3, [fp]
 8008a58:	d111      	bne.n	8008a7e <__ieee754_sqrt+0x17e>
 8008a5a:	3601      	adds	r6, #1
 8008a5c:	463c      	mov	r4, r7
 8008a5e:	1072      	asrs	r2, r6, #1
 8008a60:	0863      	lsrs	r3, r4, #1
 8008a62:	07f1      	lsls	r1, r6, #31
 8008a64:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8008a68:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8008a6c:	bf48      	it	mi
 8008a6e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8008a72:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8008a76:	4618      	mov	r0, r3
 8008a78:	e756      	b.n	8008928 <__ieee754_sqrt+0x28>
 8008a7a:	4690      	mov	r8, r2
 8008a7c:	e7be      	b.n	80089fc <__ieee754_sqrt+0xfc>
 8008a7e:	f7f7 fc25 	bl	80002cc <__adddf3>
 8008a82:	e9da 8900 	ldrd	r8, r9, [sl]
 8008a86:	4602      	mov	r2, r0
 8008a88:	460b      	mov	r3, r1
 8008a8a:	4640      	mov	r0, r8
 8008a8c:	4649      	mov	r1, r9
 8008a8e:	f7f8 f845 	bl	8000b1c <__aeabi_dcmplt>
 8008a92:	b120      	cbz	r0, 8008a9e <__ieee754_sqrt+0x19e>
 8008a94:	1ca0      	adds	r0, r4, #2
 8008a96:	bf08      	it	eq
 8008a98:	3601      	addeq	r6, #1
 8008a9a:	3402      	adds	r4, #2
 8008a9c:	e7df      	b.n	8008a5e <__ieee754_sqrt+0x15e>
 8008a9e:	1c63      	adds	r3, r4, #1
 8008aa0:	f023 0401 	bic.w	r4, r3, #1
 8008aa4:	e7db      	b.n	8008a5e <__ieee754_sqrt+0x15e>
 8008aa6:	bf00      	nop
 8008aa8:	7ff00000 	.word	0x7ff00000
 8008aac:	20000080 	.word	0x20000080
 8008ab0:	20000078 	.word	0x20000078

08008ab4 <_init>:
 8008ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ab6:	bf00      	nop
 8008ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aba:	bc08      	pop	{r3}
 8008abc:	469e      	mov	lr, r3
 8008abe:	4770      	bx	lr

08008ac0 <_fini>:
 8008ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ac2:	bf00      	nop
 8008ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ac6:	bc08      	pop	{r3}
 8008ac8:	469e      	mov	lr, r3
 8008aca:	4770      	bx	lr
