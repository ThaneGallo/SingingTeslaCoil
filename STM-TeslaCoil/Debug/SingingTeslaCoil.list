
SingingTeslaCoil.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbec  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000890  0800cdc0  0800cdc0  0000ddc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d650  0800d650  0000f088  2**0
                  CONTENTS
  4 .ARM          00000008  0800d650  0800d650  0000e650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d658  0800d658  0000f088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d658  0800d658  0000e658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d65c  0800d65c  0000e65c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800d660  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043dc  20000088  0800d6e8  0000f088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004464  0800d6e8  0000f464  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c679  00000000  00000000  0000f0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004726  00000000  00000000  0002b731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001930  00000000  00000000  0002fe58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001378  00000000  00000000  00031788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027ae1  00000000  00000000  00032b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002162a  00000000  00000000  0005a5e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0034  00000000  00000000  0007bc0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015bc3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007394  00000000  00000000  0015bc84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00163018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cda4 	.word	0x0800cda4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	0800cda4 	.word	0x0800cda4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b96a 	b.w	8000f24 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	460c      	mov	r4, r1
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d14e      	bne.n	8000d12 <__udivmoddi4+0xaa>
 8000c74:	4694      	mov	ip, r2
 8000c76:	458c      	cmp	ip, r1
 8000c78:	4686      	mov	lr, r0
 8000c7a:	fab2 f282 	clz	r2, r2
 8000c7e:	d962      	bls.n	8000d46 <__udivmoddi4+0xde>
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0320 	rsb	r3, r2, #32
 8000c86:	4091      	lsls	r1, r2
 8000c88:	fa20 f303 	lsr.w	r3, r0, r3
 8000c8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c90:	4319      	orrs	r1, r3
 8000c92:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9a:	fa1f f68c 	uxth.w	r6, ip
 8000c9e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ca2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ca6:	fb07 1114 	mls	r1, r7, r4, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb04 f106 	mul.w	r1, r4, r6
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x64>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cbe:	f080 8112 	bcs.w	8000ee6 <__udivmoddi4+0x27e>
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	f240 810f 	bls.w	8000ee6 <__udivmoddi4+0x27e>
 8000cc8:	3c02      	subs	r4, #2
 8000cca:	4463      	add	r3, ip
 8000ccc:	1a59      	subs	r1, r3, r1
 8000cce:	fa1f f38e 	uxth.w	r3, lr
 8000cd2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cd6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb00 f606 	mul.w	r6, r0, r6
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x94>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cee:	f080 80fc 	bcs.w	8000eea <__udivmoddi4+0x282>
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	f240 80f9 	bls.w	8000eea <__udivmoddi4+0x282>
 8000cf8:	4463      	add	r3, ip
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d02:	2100      	movs	r1, #0
 8000d04:	b11d      	cbz	r5, 8000d0e <__udivmoddi4+0xa6>
 8000d06:	40d3      	lsrs	r3, r2
 8000d08:	2200      	movs	r2, #0
 8000d0a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d905      	bls.n	8000d22 <__udivmoddi4+0xba>
 8000d16:	b10d      	cbz	r5, 8000d1c <__udivmoddi4+0xb4>
 8000d18:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e7f5      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000d22:	fab3 f183 	clz	r1, r3
 8000d26:	2900      	cmp	r1, #0
 8000d28:	d146      	bne.n	8000db8 <__udivmoddi4+0x150>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d302      	bcc.n	8000d34 <__udivmoddi4+0xcc>
 8000d2e:	4290      	cmp	r0, r2
 8000d30:	f0c0 80f0 	bcc.w	8000f14 <__udivmoddi4+0x2ac>
 8000d34:	1a86      	subs	r6, r0, r2
 8000d36:	eb64 0303 	sbc.w	r3, r4, r3
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	2d00      	cmp	r5, #0
 8000d3e:	d0e6      	beq.n	8000d0e <__udivmoddi4+0xa6>
 8000d40:	e9c5 6300 	strd	r6, r3, [r5]
 8000d44:	e7e3      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	f040 8090 	bne.w	8000e6c <__udivmoddi4+0x204>
 8000d4c:	eba1 040c 	sub.w	r4, r1, ip
 8000d50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d54:	fa1f f78c 	uxth.w	r7, ip
 8000d58:	2101      	movs	r1, #1
 8000d5a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb08 4416 	mls	r4, r8, r6, r4
 8000d66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6a:	fb07 f006 	mul.w	r0, r7, r6
 8000d6e:	4298      	cmp	r0, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x11c>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x11a>
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	f200 80cd 	bhi.w	8000f1c <__udivmoddi4+0x2b4>
 8000d82:	4626      	mov	r6, r4
 8000d84:	1a1c      	subs	r4, r3, r0
 8000d86:	fa1f f38e 	uxth.w	r3, lr
 8000d8a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d8e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d96:	fb00 f707 	mul.w	r7, r0, r7
 8000d9a:	429f      	cmp	r7, r3
 8000d9c:	d908      	bls.n	8000db0 <__udivmoddi4+0x148>
 8000d9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000da2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x146>
 8000da8:	429f      	cmp	r7, r3
 8000daa:	f200 80b0 	bhi.w	8000f0e <__udivmoddi4+0x2a6>
 8000dae:	4620      	mov	r0, r4
 8000db0:	1bdb      	subs	r3, r3, r7
 8000db2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db6:	e7a5      	b.n	8000d04 <__udivmoddi4+0x9c>
 8000db8:	f1c1 0620 	rsb	r6, r1, #32
 8000dbc:	408b      	lsls	r3, r1
 8000dbe:	fa22 f706 	lsr.w	r7, r2, r6
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dc8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dcc:	ea43 030c 	orr.w	r3, r3, ip
 8000dd0:	40f4      	lsrs	r4, r6
 8000dd2:	fa00 f801 	lsl.w	r8, r0, r1
 8000dd6:	0c38      	lsrs	r0, r7, #16
 8000dd8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ddc:	fbb4 fef0 	udiv	lr, r4, r0
 8000de0:	fa1f fc87 	uxth.w	ip, r7
 8000de4:	fb00 441e 	mls	r4, r0, lr, r4
 8000de8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dec:	fb0e f90c 	mul.w	r9, lr, ip
 8000df0:	45a1      	cmp	r9, r4
 8000df2:	fa02 f201 	lsl.w	r2, r2, r1
 8000df6:	d90a      	bls.n	8000e0e <__udivmoddi4+0x1a6>
 8000df8:	193c      	adds	r4, r7, r4
 8000dfa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dfe:	f080 8084 	bcs.w	8000f0a <__udivmoddi4+0x2a2>
 8000e02:	45a1      	cmp	r9, r4
 8000e04:	f240 8081 	bls.w	8000f0a <__udivmoddi4+0x2a2>
 8000e08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e0c:	443c      	add	r4, r7
 8000e0e:	eba4 0409 	sub.w	r4, r4, r9
 8000e12:	fa1f f983 	uxth.w	r9, r3
 8000e16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e26:	45a4      	cmp	ip, r4
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x1d2>
 8000e2a:	193c      	adds	r4, r7, r4
 8000e2c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e30:	d267      	bcs.n	8000f02 <__udivmoddi4+0x29a>
 8000e32:	45a4      	cmp	ip, r4
 8000e34:	d965      	bls.n	8000f02 <__udivmoddi4+0x29a>
 8000e36:	3b02      	subs	r3, #2
 8000e38:	443c      	add	r4, r7
 8000e3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e42:	eba4 040c 	sub.w	r4, r4, ip
 8000e46:	429c      	cmp	r4, r3
 8000e48:	46ce      	mov	lr, r9
 8000e4a:	469c      	mov	ip, r3
 8000e4c:	d351      	bcc.n	8000ef2 <__udivmoddi4+0x28a>
 8000e4e:	d04e      	beq.n	8000eee <__udivmoddi4+0x286>
 8000e50:	b155      	cbz	r5, 8000e68 <__udivmoddi4+0x200>
 8000e52:	ebb8 030e 	subs.w	r3, r8, lr
 8000e56:	eb64 040c 	sbc.w	r4, r4, ip
 8000e5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e5e:	40cb      	lsrs	r3, r1
 8000e60:	431e      	orrs	r6, r3
 8000e62:	40cc      	lsrs	r4, r1
 8000e64:	e9c5 6400 	strd	r6, r4, [r5]
 8000e68:	2100      	movs	r1, #0
 8000e6a:	e750      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000e6c:	f1c2 0320 	rsb	r3, r2, #32
 8000e70:	fa20 f103 	lsr.w	r1, r0, r3
 8000e74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e78:	fa24 f303 	lsr.w	r3, r4, r3
 8000e7c:	4094      	lsls	r4, r2
 8000e7e:	430c      	orrs	r4, r1
 8000e80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e88:	fa1f f78c 	uxth.w	r7, ip
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3110 	mls	r1, r8, r0, r3
 8000e94:	0c23      	lsrs	r3, r4, #16
 8000e96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e9a:	fb00 f107 	mul.w	r1, r0, r7
 8000e9e:	4299      	cmp	r1, r3
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x24c>
 8000ea2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eaa:	d22c      	bcs.n	8000f06 <__udivmoddi4+0x29e>
 8000eac:	4299      	cmp	r1, r3
 8000eae:	d92a      	bls.n	8000f06 <__udivmoddi4+0x29e>
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	4463      	add	r3, ip
 8000eb4:	1a5b      	subs	r3, r3, r1
 8000eb6:	b2a4      	uxth	r4, r4
 8000eb8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ebc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ec0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ec4:	fb01 f307 	mul.w	r3, r1, r7
 8000ec8:	42a3      	cmp	r3, r4
 8000eca:	d908      	bls.n	8000ede <__udivmoddi4+0x276>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ed4:	d213      	bcs.n	8000efe <__udivmoddi4+0x296>
 8000ed6:	42a3      	cmp	r3, r4
 8000ed8:	d911      	bls.n	8000efe <__udivmoddi4+0x296>
 8000eda:	3902      	subs	r1, #2
 8000edc:	4464      	add	r4, ip
 8000ede:	1ae4      	subs	r4, r4, r3
 8000ee0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ee4:	e739      	b.n	8000d5a <__udivmoddi4+0xf2>
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	e6f0      	b.n	8000ccc <__udivmoddi4+0x64>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e706      	b.n	8000cfc <__udivmoddi4+0x94>
 8000eee:	45c8      	cmp	r8, r9
 8000ef0:	d2ae      	bcs.n	8000e50 <__udivmoddi4+0x1e8>
 8000ef2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ef6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000efa:	3801      	subs	r0, #1
 8000efc:	e7a8      	b.n	8000e50 <__udivmoddi4+0x1e8>
 8000efe:	4631      	mov	r1, r6
 8000f00:	e7ed      	b.n	8000ede <__udivmoddi4+0x276>
 8000f02:	4603      	mov	r3, r0
 8000f04:	e799      	b.n	8000e3a <__udivmoddi4+0x1d2>
 8000f06:	4630      	mov	r0, r6
 8000f08:	e7d4      	b.n	8000eb4 <__udivmoddi4+0x24c>
 8000f0a:	46d6      	mov	lr, sl
 8000f0c:	e77f      	b.n	8000e0e <__udivmoddi4+0x1a6>
 8000f0e:	4463      	add	r3, ip
 8000f10:	3802      	subs	r0, #2
 8000f12:	e74d      	b.n	8000db0 <__udivmoddi4+0x148>
 8000f14:	4606      	mov	r6, r0
 8000f16:	4623      	mov	r3, r4
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e70f      	b.n	8000d3c <__udivmoddi4+0xd4>
 8000f1c:	3e02      	subs	r6, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	e730      	b.n	8000d84 <__udivmoddi4+0x11c>
 8000f22:	bf00      	nop

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4a07      	ldr	r2, [pc, #28]	@ (8000f54 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	4a06      	ldr	r2, [pc, #24]	@ (8000f58 <vApplicationGetIdleTaskMemory+0x30>)
 8000f3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2280      	movs	r2, #128	@ 0x80
 8000f44:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f46:	bf00      	nop
 8000f48:	3714      	adds	r7, #20
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	200000a4 	.word	0x200000a4
 8000f58:	200000f8 	.word	0x200000f8

08000f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f5e:	f2ad 4ddc 	subw	sp, sp, #1244	@ 0x4dc
 8000f62:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f64:	f001 fbb0 	bl	80026c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f68:	f000 f8d4 	bl	8001114 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f6c:	f000 fa22 	bl	80013b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f70:	f000 f9f6 	bl	8001360 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000f74:	f004 fa9e 	bl	80054b4 <MX_FATFS_Init>
  MX_SPI1_Init();
 8000f78:	f000 f938 	bl	80011ec <MX_SPI1_Init>
  MX_TIM1_Init();
 8000f7c:	f000 f96c 	bl	8001258 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of USART_lock */
  osMutexDef(USART_lock);
 8000f80:	2300      	movs	r3, #0
 8000f82:	f8c7 34c0 	str.w	r3, [r7, #1216]	@ 0x4c0
 8000f86:	2300      	movs	r3, #0
 8000f88:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
  USART_lockHandle = osMutexCreate(osMutex(USART_lock));
 8000f8c:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f007 fbb7 	bl	8008704 <osMutexCreate>
 8000f96:	4603      	mov	r3, r0
 8000f98:	4a53      	ldr	r2, [pc, #332]	@ (80010e8 <main+0x18c>)
 8000f9a:	6013      	str	r3, [r2, #0]

  FIL fp;        // for midi file operation
  FATFS FatFs; 	//Fatfs handle
  MIDI_header_chunk hdr; // to container header info
  FRESULT res;
  MIDI_controller *ctrl = malloc(sizeof(MIDI_controller));
 8000f9c:	2014      	movs	r0, #20
 8000f9e:	f00a fa93 	bl	800b4c8 <malloc>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc


  // uint8_t i = 0;

  osDelay(1000);
 8000fa8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fac:	f007 fb96 	bl	80086dc <osDelay>

  res = f_mount(&FatFs, "/", 1); //1=mount now
 8000fb0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	494d      	ldr	r1, [pc, #308]	@ (80010ec <main+0x190>)
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f006 fc85 	bl	80078c8 <f_mount>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	f887 34cb 	strb.w	r3, [r7, #1227]	@ 0x4cb
       if (res != FR_OK) {
 8000fc4:	f897 34cb 	ldrb.w	r3, [r7, #1227]	@ 0x4cb
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d007      	beq.n	8000fdc <main+0x80>
     	myprintf("f_mount error (%i)\r\n", res);
 8000fcc:	f897 34cb 	ldrb.w	r3, [r7, #1227]	@ 0x4cb
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4847      	ldr	r0, [pc, #284]	@ (80010f0 <main+0x194>)
 8000fd4:	f001 fb16 	bl	8002604 <myprintf>
     	while(1);
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <main+0x7c>
   * twinkle.mid --> no chords && format 0
   * gerudo.mid --> TONS of chords (3 notes) && format 1
   * mario.mid --> unkown midi event 10
   * shoveit.mid --> broken as well
   * */
  res = f_open(&fp, "twinkle.mid", FA_READ | FA_WRITE);
 8000fdc:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	4944      	ldr	r1, [pc, #272]	@ (80010f4 <main+0x198>)
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f006 fcd3 	bl	8007990 <f_open>
 8000fea:	4603      	mov	r3, r0
 8000fec:	f887 34cb 	strb.w	r3, [r7, #1227]	@ 0x4cb

  if (res != FR_OK)
 8000ff0:	f897 34cb 	ldrb.w	r3, [r7, #1227]	@ 0x4cb
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d007      	beq.n	8001008 <main+0xac>
  {
      myprintf("fopen error: %d\n", res);
 8000ff8:	f897 34cb 	ldrb.w	r3, [r7, #1227]	@ 0x4cb
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	483e      	ldr	r0, [pc, #248]	@ (80010f8 <main+0x19c>)
 8001000:	f001 fb00 	bl	8002604 <myprintf>
      while(1);
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <main+0xa8>
  }


  hdr = parse_midi_header(&fp, hdr); // grabs header info
 8001008:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 800100c:	f2a3 4484 	subw	r4, r3, #1156	@ 0x484
 8001010:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001014:	f2a3 4384 	subw	r3, r3, #1156	@ 0x484
 8001018:	f507 7524 	add.w	r5, r7, #656	@ 0x290
 800101c:	466e      	mov	r6, sp
 800101e:	f103 0208 	add.w	r2, r3, #8
 8001022:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001026:	e886 0003 	stmia.w	r6, {r0, r1}
 800102a:	cb0c      	ldmia	r3, {r2, r3}
 800102c:	4629      	mov	r1, r5
 800102e:	4620      	mov	r0, r4
 8001030:	f000 ffa8 	bl	8001f84 <parse_midi_header>

  ctrl->format = hdr.format;
 8001034:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001038:	f2a3 4384 	subw	r3, r3, #1156	@ 0x484
 800103c:	891b      	ldrh	r3, [r3, #8]
 800103e:	b2da      	uxtb	r2, r3
 8001040:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 8001044:	741a      	strb	r2, [r3, #16]
  if(hdr.format == 0){
 8001046:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 800104a:	f2a3 4384 	subw	r3, r3, #1156	@ 0x484
 800104e:	891b      	ldrh	r3, [r3, #8]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d104      	bne.n	800105e <main+0x102>
	  ctrl->trk_buf = &fp;
 8001054:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 8001058:	f507 7224 	add.w	r2, r7, #656	@ 0x290
 800105c:	609a      	str	r2, [r3, #8]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of NoteQueue1 */
  osMessageQDef(NoteQueue1, 64, note);
 800105e:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001062:	f2a3 4394 	subw	r3, r3, #1172	@ 0x494
 8001066:	4a25      	ldr	r2, [pc, #148]	@ (80010fc <main+0x1a0>)
 8001068:	461c      	mov	r4, r3
 800106a:	4613      	mov	r3, r2
 800106c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800106e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  NoteQueue1Handle = osMessageCreate(osMessageQ(NoteQueue1), NULL);
 8001072:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f007 fca8 	bl	80089ce <osMessageCreate>
 800107e:	4603      	mov	r3, r0
 8001080:	4a1f      	ldr	r2, [pc, #124]	@ (8001100 <main+0x1a4>)
 8001082:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ParseMidi */
  osThreadDef(ParseMidi, StartParseMidi, osPriorityNormal, 0, 128);
 8001084:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001088:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 800108c:	4a1d      	ldr	r2, [pc, #116]	@ (8001104 <main+0x1a8>)
 800108e:	461c      	mov	r4, r3
 8001090:	4615      	mov	r5, r2
 8001092:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001094:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001096:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800109a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ParseMidiHandle = osThreadCreate(osThread(ParseMidi), (void*) ctrl);
 800109e:	f107 0320 	add.w	r3, r7, #32
 80010a2:	f8d7 14cc 	ldr.w	r1, [r7, #1228]	@ 0x4cc
 80010a6:	4618      	mov	r0, r3
 80010a8:	f007 facc 	bl	8008644 <osThreadCreate>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4a16      	ldr	r2, [pc, #88]	@ (8001108 <main+0x1ac>)
 80010b0:	6013      	str	r3, [r2, #0]

  /* definition and creation of AudioOutput */
  osThreadDef(AudioOutput, StartAudioOutput, osPriorityNormal, 0, 128);
 80010b2:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 80010b6:	f2a3 43cc 	subw	r3, r3, #1228	@ 0x4cc
 80010ba:	4a14      	ldr	r2, [pc, #80]	@ (800110c <main+0x1b0>)
 80010bc:	461c      	mov	r4, r3
 80010be:	4615      	mov	r5, r2
 80010c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AudioOutputHandle = osThreadCreate(osThread(AudioOutput), (void*) ctrl);
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	f8d7 14cc 	ldr.w	r1, [r7, #1228]	@ 0x4cc
 80010d2:	4618      	mov	r0, r3
 80010d4:	f007 fab6 	bl	8008644 <osThreadCreate>
 80010d8:	4603      	mov	r3, r0
 80010da:	4a0d      	ldr	r2, [pc, #52]	@ (8001110 <main+0x1b4>)
 80010dc:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80010de:	f007 faaa 	bl	8008636 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010e2:	bf00      	nop
 80010e4:	e7fd      	b.n	80010e2 <main+0x186>
 80010e6:	bf00      	nop
 80010e8:	200003ec 	.word	0x200003ec
 80010ec:	0800cdc0 	.word	0x0800cdc0
 80010f0:	0800cdc4 	.word	0x0800cdc4
 80010f4:	0800cddc 	.word	0x0800cddc
 80010f8:	0800cde8 	.word	0x0800cde8
 80010fc:	0800cdfc 	.word	0x0800cdfc
 8001100:	200003e8 	.word	0x200003e8
 8001104:	0800ce18 	.word	0x0800ce18
 8001108:	200003e0 	.word	0x200003e0
 800110c:	0800ce40 	.word	0x0800ce40
 8001110:	200003e4 	.word	0x200003e4

08001114 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b094      	sub	sp, #80	@ 0x50
 8001118:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111a:	f107 031c 	add.w	r3, r7, #28
 800111e:	2234      	movs	r2, #52	@ 0x34
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f00a fac8 	bl	800b6b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001128:	f107 0308 	add.w	r3, r7, #8
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001138:	2300      	movs	r3, #0
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	4b29      	ldr	r3, [pc, #164]	@ (80011e4 <SystemClock_Config+0xd0>)
 800113e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001140:	4a28      	ldr	r2, [pc, #160]	@ (80011e4 <SystemClock_Config+0xd0>)
 8001142:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001146:	6413      	str	r3, [r2, #64]	@ 0x40
 8001148:	4b26      	ldr	r3, [pc, #152]	@ (80011e4 <SystemClock_Config+0xd0>)
 800114a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001154:	2300      	movs	r3, #0
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	4b23      	ldr	r3, [pc, #140]	@ (80011e8 <SystemClock_Config+0xd4>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001160:	4a21      	ldr	r2, [pc, #132]	@ (80011e8 <SystemClock_Config+0xd4>)
 8001162:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	4b1f      	ldr	r3, [pc, #124]	@ (80011e8 <SystemClock_Config+0xd4>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001170:	603b      	str	r3, [r7, #0]
 8001172:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001174:	2302      	movs	r3, #2
 8001176:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001178:	2301      	movs	r3, #1
 800117a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800117c:	2310      	movs	r3, #16
 800117e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001180:	2302      	movs	r3, #2
 8001182:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001184:	2300      	movs	r3, #0
 8001186:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001188:	2308      	movs	r3, #8
 800118a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 800118c:	2348      	movs	r3, #72	@ 0x48
 800118e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001190:	2302      	movs	r3, #2
 8001192:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001194:	2302      	movs	r3, #2
 8001196:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001198:	2302      	movs	r3, #2
 800119a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119c:	f107 031c 	add.w	r3, r7, #28
 80011a0:	4618      	mov	r0, r3
 80011a2:	f002 f859 	bl	8003258 <HAL_RCC_OscConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80011ac:	f000 f9c2 	bl	8001534 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b0:	230f      	movs	r3, #15
 80011b2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b4:	2302      	movs	r3, #2
 80011b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80011b8:	2380      	movs	r3, #128	@ 0x80
 80011ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	2101      	movs	r1, #1
 80011cc:	4618      	mov	r0, r3
 80011ce:	f001 fd4d 	bl	8002c6c <HAL_RCC_ClockConfig>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80011d8:	f000 f9ac 	bl	8001534 <Error_Handler>
  }
}
 80011dc:	bf00      	nop
 80011de:	3750      	adds	r7, #80	@ 0x50
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40007000 	.word	0x40007000

080011ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011f0:	4b17      	ldr	r3, [pc, #92]	@ (8001250 <MX_SPI1_Init+0x64>)
 80011f2:	4a18      	ldr	r2, [pc, #96]	@ (8001254 <MX_SPI1_Init+0x68>)
 80011f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011f6:	4b16      	ldr	r3, [pc, #88]	@ (8001250 <MX_SPI1_Init+0x64>)
 80011f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011fe:	4b14      	ldr	r3, [pc, #80]	@ (8001250 <MX_SPI1_Init+0x64>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001204:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <MX_SPI1_Init+0x64>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800120a:	4b11      	ldr	r3, [pc, #68]	@ (8001250 <MX_SPI1_Init+0x64>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001210:	4b0f      	ldr	r3, [pc, #60]	@ (8001250 <MX_SPI1_Init+0x64>)
 8001212:	2200      	movs	r2, #0
 8001214:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001216:	4b0e      	ldr	r3, [pc, #56]	@ (8001250 <MX_SPI1_Init+0x64>)
 8001218:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800121c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800121e:	4b0c      	ldr	r3, [pc, #48]	@ (8001250 <MX_SPI1_Init+0x64>)
 8001220:	2210      	movs	r2, #16
 8001222:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001224:	4b0a      	ldr	r3, [pc, #40]	@ (8001250 <MX_SPI1_Init+0x64>)
 8001226:	2200      	movs	r2, #0
 8001228:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800122a:	4b09      	ldr	r3, [pc, #36]	@ (8001250 <MX_SPI1_Init+0x64>)
 800122c:	2200      	movs	r2, #0
 800122e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001230:	4b07      	ldr	r3, [pc, #28]	@ (8001250 <MX_SPI1_Init+0x64>)
 8001232:	2200      	movs	r2, #0
 8001234:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001236:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <MX_SPI1_Init+0x64>)
 8001238:	220a      	movs	r2, #10
 800123a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800123c:	4804      	ldr	r0, [pc, #16]	@ (8001250 <MX_SPI1_Init+0x64>)
 800123e:	f002 faa9 	bl	8003794 <HAL_SPI_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001248:	f000 f974 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200002f8 	.word	0x200002f8
 8001254:	40013000 	.word	0x40013000

08001258 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b092      	sub	sp, #72	@ 0x48
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001268:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
 8001278:	615a      	str	r2, [r3, #20]
 800127a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	2220      	movs	r2, #32
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f00a fa18 	bl	800b6b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001288:	4b33      	ldr	r3, [pc, #204]	@ (8001358 <MX_TIM1_Init+0x100>)
 800128a:	4a34      	ldr	r2, [pc, #208]	@ (800135c <MX_TIM1_Init+0x104>)
 800128c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 18000;
 800128e:	4b32      	ldr	r3, [pc, #200]	@ (8001358 <MX_TIM1_Init+0x100>)
 8001290:	f244 6250 	movw	r2, #18000	@ 0x4650
 8001294:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001296:	4b30      	ldr	r3, [pc, #192]	@ (8001358 <MX_TIM1_Init+0x100>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800129c:	4b2e      	ldr	r3, [pc, #184]	@ (8001358 <MX_TIM1_Init+0x100>)
 800129e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001358 <MX_TIM1_Init+0x100>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001358 <MX_TIM1_Init+0x100>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b0:	4b29      	ldr	r3, [pc, #164]	@ (8001358 <MX_TIM1_Init+0x100>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012b6:	4828      	ldr	r0, [pc, #160]	@ (8001358 <MX_TIM1_Init+0x100>)
 80012b8:	f002 ff88 	bl	80041cc <HAL_TIM_PWM_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80012c2:	f000 f937 	bl	8001534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c6:	2300      	movs	r3, #0
 80012c8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012ce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012d2:	4619      	mov	r1, r3
 80012d4:	4820      	ldr	r0, [pc, #128]	@ (8001358 <MX_TIM1_Init+0x100>)
 80012d6:	f003 fbff 	bl	8004ad8 <HAL_TIMEx_MasterConfigSynchronization>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80012e0:	f000 f928 	bl	8001534 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012e4:	2360      	movs	r3, #96	@ 0x60
 80012e6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ec:	2300      	movs	r3, #0
 80012ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012f0:	2300      	movs	r3, #0
 80012f2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012f8:	2300      	movs	r3, #0
 80012fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012fc:	2300      	movs	r3, #0
 80012fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001300:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001304:	2200      	movs	r2, #0
 8001306:	4619      	mov	r1, r3
 8001308:	4813      	ldr	r0, [pc, #76]	@ (8001358 <MX_TIM1_Init+0x100>)
 800130a:	f003 f89f 	bl	800444c <HAL_TIM_PWM_ConfigChannel>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001314:	f000 f90e 	bl	8001534 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800132c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001330:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	4619      	mov	r1, r3
 800133a:	4807      	ldr	r0, [pc, #28]	@ (8001358 <MX_TIM1_Init+0x100>)
 800133c:	f003 fc48 	bl	8004bd0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8001346:	f000 f8f5 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800134a:	4803      	ldr	r0, [pc, #12]	@ (8001358 <MX_TIM1_Init+0x100>)
 800134c:	f000 ff74 	bl	8002238 <HAL_TIM_MspPostInit>

}
 8001350:	bf00      	nop
 8001352:	3748      	adds	r7, #72	@ 0x48
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000350 	.word	0x20000350
 800135c:	40010000 	.word	0x40010000

08001360 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001364:	4b11      	ldr	r3, [pc, #68]	@ (80013ac <MX_USART2_UART_Init+0x4c>)
 8001366:	4a12      	ldr	r2, [pc, #72]	@ (80013b0 <MX_USART2_UART_Init+0x50>)
 8001368:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800136a:	4b10      	ldr	r3, [pc, #64]	@ (80013ac <MX_USART2_UART_Init+0x4c>)
 800136c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001370:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001372:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <MX_USART2_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001378:	4b0c      	ldr	r3, [pc, #48]	@ (80013ac <MX_USART2_UART_Init+0x4c>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800137e:	4b0b      	ldr	r3, [pc, #44]	@ (80013ac <MX_USART2_UART_Init+0x4c>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001384:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <MX_USART2_UART_Init+0x4c>)
 8001386:	220c      	movs	r2, #12
 8001388:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138a:	4b08      	ldr	r3, [pc, #32]	@ (80013ac <MX_USART2_UART_Init+0x4c>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001390:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <MX_USART2_UART_Init+0x4c>)
 8001392:	2200      	movs	r2, #0
 8001394:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001396:	4805      	ldr	r0, [pc, #20]	@ (80013ac <MX_USART2_UART_Init+0x4c>)
 8001398:	f003 fc80 	bl	8004c9c <HAL_UART_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013a2:	f000 f8c7 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000398 	.word	0x20000398
 80013b0:	40004400 	.word	0x40004400

080013b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c8:	2300      	movs	r3, #0
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	4b10      	ldr	r3, [pc, #64]	@ (8001410 <MX_GPIO_Init+0x5c>)
 80013ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d0:	4a0f      	ldr	r2, [pc, #60]	@ (8001410 <MX_GPIO_Init+0x5c>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001410 <MX_GPIO_Init+0x5c>)
 80013da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	603b      	str	r3, [r7, #0]
 80013e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2110      	movs	r1, #16
 80013e8:	480a      	ldr	r0, [pc, #40]	@ (8001414 <MX_GPIO_Init+0x60>)
 80013ea:	f001 fc25 	bl	8002c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin;
 80013ee:	2310      	movs	r3, #16
 80013f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f2:	2301      	movs	r3, #1
 80013f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CS_PIN_GPIO_Port, &GPIO_InitStruct);
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	4619      	mov	r1, r3
 8001402:	4804      	ldr	r0, [pc, #16]	@ (8001414 <MX_GPIO_Init+0x60>)
 8001404:	f001 fa84 	bl	8002910 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001408:	bf00      	nop
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40023800 	.word	0x40023800
 8001414:	40020000 	.word	0x40020000

08001418 <StartParseMidi>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartParseMidi */
void StartParseMidi(void const * argument)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t cnt = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	73fb      	strb	r3, [r7, #15]

	myprintf("start of parse midi");
 8001424:	4815      	ldr	r0, [pc, #84]	@ (800147c <StartParseMidi+0x64>)
 8001426:	f001 f8ed 	bl	8002604 <myprintf>

	  MIDI_controller* ctrl = (MIDI_controller*)argument;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	60bb      	str	r3, [r7, #8]
    switch(ctrl->format){
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	7c1b      	ldrb	r3, [r3, #16]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d011      	beq.n	800145a <StartParseMidi+0x42>
 8001436:	2b02      	cmp	r3, #2
 8001438:	dc13      	bgt.n	8001462 <StartParseMidi+0x4a>
 800143a:	2b00      	cmp	r3, #0
 800143c:	d002      	beq.n	8001444 <StartParseMidi+0x2c>
 800143e:	2b01      	cmp	r3, #1
 8001440:	d007      	beq.n	8001452 <StartParseMidi+0x3a>
 8001442:	e00e      	b.n	8001462 <StartParseMidi+0x4a>
    case 0:
    	play_one_track(ctrl->trk_buf, ctrl);
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	68b9      	ldr	r1, [r7, #8]
 800144a:	4618      	mov	r0, r3
 800144c:	f000 fcee 	bl	8001e2c <play_one_track>
    	break;
 8001450:	e007      	b.n	8001462 <StartParseMidi+0x4a>
    case 1:
    	myprintf("CASE 1 NOT SUPPORTED...yet\n");
 8001452:	480b      	ldr	r0, [pc, #44]	@ (8001480 <StartParseMidi+0x68>)
 8001454:	f001 f8d6 	bl	8002604 <myprintf>
    	break;
 8001458:	e003      	b.n	8001462 <StartParseMidi+0x4a>
    case 2:
    	myprintf("CASE 2 NOT SUPPORTED <3\n");
 800145a:	480a      	ldr	r0, [pc, #40]	@ (8001484 <StartParseMidi+0x6c>)
 800145c:	f001 f8d2 	bl	8002604 <myprintf>
    	break;
 8001460:	bf00      	nop

  /* Infinite loop */
    for(;;)
    {

    	myprintf("in parse %d\n\n", cnt);
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	4619      	mov	r1, r3
 8001466:	4808      	ldr	r0, [pc, #32]	@ (8001488 <StartParseMidi+0x70>)
 8001468:	f001 f8cc 	bl	8002604 <myprintf>
    	osDelay(1);
 800146c:	2001      	movs	r0, #1
 800146e:	f007 f935 	bl	80086dc <osDelay>
    	cnt++;
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	3301      	adds	r3, #1
 8001476:	73fb      	strb	r3, [r7, #15]
    	myprintf("in parse %d\n\n", cnt);
 8001478:	bf00      	nop
 800147a:	e7f2      	b.n	8001462 <StartParseMidi+0x4a>
 800147c:	0800ce5c 	.word	0x0800ce5c
 8001480:	0800ce70 	.word	0x0800ce70
 8001484:	0800ce8c 	.word	0x0800ce8c
 8001488:	0800cea8 	.word	0x0800cea8

0800148c <StartAudioOutput>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAudioOutput */
void StartAudioOutput(void const * argument)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAudioOutput */

	myprintf("start of audio output\n");
 8001494:	4819      	ldr	r0, [pc, #100]	@ (80014fc <StartAudioOutput+0x70>)
 8001496:	f001 f8b5 	bl	8002604 <myprintf>
	MIDI_controller* ctrl = (MIDI_controller*)argument;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	61bb      	str	r3, [r7, #24]

	note* recieved_note = malloc(sizeof(note));
 800149e:	200c      	movs	r0, #12
 80014a0:	f00a f812 	bl	800b4c8 <malloc>
 80014a4:	4603      	mov	r3, r0
 80014a6:	617b      	str	r3, [r7, #20]
	uint8_t cnt = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	77fb      	strb	r3, [r7, #31]

  /* Infinite loop */
  for(;;)
  {
	  osEvent res;
	  res = osMessageGet(NoteQueue1Handle, osWaitForever);
 80014ac:	4b14      	ldr	r3, [pc, #80]	@ (8001500 <StartAudioOutput+0x74>)
 80014ae:	6819      	ldr	r1, [r3, #0]
 80014b0:	f107 0308 	add.w	r3, r7, #8
 80014b4:	f04f 32ff 	mov.w	r2, #4294967295
 80014b8:	4618      	mov	r0, r3
 80014ba:	f007 faf1 	bl	8008aa0 <osMessageGet>

	  recieved_note = (note*)res.value.p;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	617b      	str	r3, [r7, #20]

	  myprintf("note # %d recieved \n", recieved_note->number);
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	4619      	mov	r1, r3
 80014c8:	480e      	ldr	r0, [pc, #56]	@ (8001504 <StartAudioOutput+0x78>)
 80014ca:	f001 f89b 	bl	8002604 <myprintf>


	  if((res.status != osOK) && (res.status != osEventMessage)){
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d007      	beq.n	80014e4 <StartAudioOutput+0x58>
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	2b10      	cmp	r3, #16
 80014d8:	d004      	beq.n	80014e4 <StartAudioOutput+0x58>
		  myprintf("osMessageGet error with code %x\n", res.status);
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	4619      	mov	r1, r3
 80014de:	480a      	ldr	r0, [pc, #40]	@ (8001508 <StartAudioOutput+0x7c>)
 80014e0:	f001 f890 	bl	8002604 <myprintf>
	  }
//
			myprintf("in output %d\n", cnt);
 80014e4:	7ffb      	ldrb	r3, [r7, #31]
 80014e6:	4619      	mov	r1, r3
 80014e8:	4808      	ldr	r0, [pc, #32]	@ (800150c <StartAudioOutput+0x80>)
 80014ea:	f001 f88b 	bl	8002604 <myprintf>
	    	osDelay(1);
 80014ee:	2001      	movs	r0, #1
 80014f0:	f007 f8f4 	bl	80086dc <osDelay>
	    	cnt++;
 80014f4:	7ffb      	ldrb	r3, [r7, #31]
 80014f6:	3301      	adds	r3, #1
 80014f8:	77fb      	strb	r3, [r7, #31]
  {
 80014fa:	e7d7      	b.n	80014ac <StartAudioOutput+0x20>
 80014fc:	0800ceb8 	.word	0x0800ceb8
 8001500:	200003e8 	.word	0x200003e8
 8001504:	0800ced0 	.word	0x0800ced0
 8001508:	0800cee8 	.word	0x0800cee8
 800150c:	0800cf0c 	.word	0x0800cf0c

08001510 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a04      	ldr	r2, [pc, #16]	@ (8001530 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d101      	bne.n	8001526 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001522:	f001 f8f3 	bl	800270c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40002000 	.word	0x40002000

08001534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001538:	b672      	cpsid	i
}
 800153a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800153c:	bf00      	nop
 800153e:	e7fd      	b.n	800153c <Error_Handler+0x8>

08001540 <note_on_event>:
#include <stdlib.h>
#include <math.h>



void note_on_event(struct note* note, FIL* fp, uint32_t delta_time, MIDI_controller *ctrl){
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
 800154c:	603b      	str	r3, [r7, #0]

      uint16_t ms;
      note = malloc(sizeof(note));
 800154e:	2004      	movs	r0, #4
 8001550:	f009 ffba 	bl	800b4c8 <malloc>
 8001554:	4603      	mov	r3, r0
 8001556:	60fb      	str	r3, [r7, #12]
      ms = delta_time_to_ms(delta_time, ctrl);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	6839      	ldr	r1, [r7, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f001 f81d 	bl	800259e <delta_time_to_ms>
 8001564:	4603      	mov	r3, r0
 8001566:	82fb      	strh	r3, [r7, #22]
      osStatus res;

      note->on_off = true;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2201      	movs	r2, #1
 800156c:	721a      	strb	r2, [r3, #8]
      note->ms = ms;
 800156e:	8afb      	ldrh	r3, [r7, #22]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	725a      	strb	r2, [r3, #9]




      f_read(fp, &note->number, 1, NULL);
 8001576:	68f9      	ldr	r1, [r7, #12]
 8001578:	2300      	movs	r3, #0
 800157a:	2201      	movs	r2, #1
 800157c:	68b8      	ldr	r0, [r7, #8]
 800157e:	f006 fbc8 	bl	8007d12 <f_read>
      f_read(fp, &note->velocity, 1, NULL);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	1c59      	adds	r1, r3, #1
 8001586:	2300      	movs	r3, #0
 8001588:	2201      	movs	r2, #1
 800158a:	68b8      	ldr	r0, [r7, #8]
 800158c:	f006 fbc1 	bl	8007d12 <f_read>
      note->frequency = 440 * pow(2.0, (note->number - 69) / 12.0);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	3b45      	subs	r3, #69	@ 0x45
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe ffe4 	bl	8000564 <__aeabi_i2d>
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	4b21      	ldr	r3, [pc, #132]	@ (8001628 <note_on_event+0xe8>)
 80015a2:	f7ff f973 	bl	800088c <__aeabi_ddiv>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	ec43 2b17 	vmov	d7, r2, r3
 80015ae:	eeb0 1a47 	vmov.f32	s2, s14
 80015b2:	eef0 1a67 	vmov.f32	s3, s15
 80015b6:	ed9f 0b1a 	vldr	d0, [pc, #104]	@ 8001620 <note_on_event+0xe0>
 80015ba:	f00a fc93 	bl	800bee4 <pow>
 80015be:	ec51 0b10 	vmov	r0, r1, d0
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	4b19      	ldr	r3, [pc, #100]	@ (800162c <note_on_event+0xec>)
 80015c8:	f7ff f836 	bl	8000638 <__aeabi_dmul>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	4610      	mov	r0, r2
 80015d2:	4619      	mov	r1, r3
 80015d4:	f7ff fae0 	bl	8000b98 <__aeabi_d2f>
 80015d8:	4602      	mov	r2, r0
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	605a      	str	r2, [r3, #4]

//      myprintf("Note On @ Channel: 0x%x\n", channel);
//      myprintf("note frequency %f Hz\n", note->frequency);
//      myprintf("note timing in ms %x\n\n", ms);

      myprintf("before message put in note on\n");
 80015de:	4814      	ldr	r0, [pc, #80]	@ (8001630 <note_on_event+0xf0>)
 80015e0:	f001 f810 	bl	8002604 <myprintf>
      	  res = osMessagePut(NoteQueue1Handle, note, osWaitForever);
 80015e4:	4b13      	ldr	r3, [pc, #76]	@ (8001634 <note_on_event+0xf4>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68f9      	ldr	r1, [r7, #12]
 80015ea:	f04f 32ff 	mov.w	r2, #4294967295
 80015ee:	4618      	mov	r0, r3
 80015f0:	f007 fa16 	bl	8008a20 <osMessagePut>
 80015f4:	6138      	str	r0, [r7, #16]
      	myprintf("before message after put");
 80015f6:	4810      	ldr	r0, [pc, #64]	@ (8001638 <note_on_event+0xf8>)
 80015f8:	f001 f804 	bl	8002604 <myprintf>
          if(res != osOK){
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <note_on_event+0xca>
          	myprintf("error in osMessagePut %d\n", res);
 8001602:	6939      	ldr	r1, [r7, #16]
 8001604:	480d      	ldr	r0, [pc, #52]	@ (800163c <note_on_event+0xfc>)
 8001606:	f000 fffd 	bl	8002604 <myprintf>
          }

          myprintf("note number in PARSE %x\n", note->number);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	4619      	mov	r1, r3
 8001610:	480b      	ldr	r0, [pc, #44]	@ (8001640 <note_on_event+0x100>)
 8001612:	f000 fff7 	bl	8002604 <myprintf>

      //play note
//     free(note);

      // skip_midi_event(fp, midi_type);
}
 8001616:	bf00      	nop
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	00000000 	.word	0x00000000
 8001624:	40000000 	.word	0x40000000
 8001628:	40280000 	.word	0x40280000
 800162c:	407b8000 	.word	0x407b8000
 8001630:	0800cf1c 	.word	0x0800cf1c
 8001634:	200003e8 	.word	0x200003e8
 8001638:	0800cf3c 	.word	0x0800cf3c
 800163c:	0800cf58 	.word	0x0800cf58
 8001640:	0800cf74 	.word	0x0800cf74
 8001644:	00000000 	.word	0x00000000

08001648 <note_off_event>:

void note_off_event(struct note* note, FIL* fp, uint32_t delta_time, MIDI_controller *ctrl){
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
 8001654:	603b      	str	r3, [r7, #0]


    uint16_t ms;
    ms = delta_time_to_ms(delta_time, ctrl);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	6839      	ldr	r1, [r7, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f000 ff9e 	bl	800259e <delta_time_to_ms>
 8001662:	4603      	mov	r3, r0
 8001664:	82fb      	strh	r3, [r7, #22]
    osStatus res;

    note->on_off = false;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2200      	movs	r2, #0
 800166a:	721a      	strb	r2, [r3, #8]
    note->ms = ms;
 800166c:	8afb      	ldrh	r3, [r7, #22]
 800166e:	b2da      	uxtb	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	725a      	strb	r2, [r3, #9]

    f_read(fp, &note->number, 1, NULL);
 8001674:	68f9      	ldr	r1, [r7, #12]
 8001676:	2300      	movs	r3, #0
 8001678:	2201      	movs	r2, #1
 800167a:	68b8      	ldr	r0, [r7, #8]
 800167c:	f006 fb49 	bl	8007d12 <f_read>
    f_read(fp,&note->velocity, 1, NULL);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	1c59      	adds	r1, r3, #1
 8001684:	2300      	movs	r3, #0
 8001686:	2201      	movs	r2, #1
 8001688:	68b8      	ldr	r0, [r7, #8]
 800168a:	f006 fb42 	bl	8007d12 <f_read>
    note->frequency = 440 * pow(2.0, (note->number - 69) / 12.0);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	3b45      	subs	r3, #69	@ 0x45
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe ff65 	bl	8000564 <__aeabi_i2d>
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	4b20      	ldr	r3, [pc, #128]	@ (8001720 <note_off_event+0xd8>)
 80016a0:	f7ff f8f4 	bl	800088c <__aeabi_ddiv>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	ec43 2b17 	vmov	d7, r2, r3
 80016ac:	eeb0 1a47 	vmov.f32	s2, s14
 80016b0:	eef0 1a67 	vmov.f32	s3, s15
 80016b4:	ed9f 0b18 	vldr	d0, [pc, #96]	@ 8001718 <note_off_event+0xd0>
 80016b8:	f00a fc14 	bl	800bee4 <pow>
 80016bc:	ec51 0b10 	vmov	r0, r1, d0
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	4b17      	ldr	r3, [pc, #92]	@ (8001724 <note_off_event+0xdc>)
 80016c6:	f7fe ffb7 	bl	8000638 <__aeabi_dmul>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4610      	mov	r0, r2
 80016d0:	4619      	mov	r1, r3
 80016d2:	f7ff fa61 	bl	8000b98 <__aeabi_d2f>
 80016d6:	4602      	mov	r2, r0
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	605a      	str	r2, [r3, #4]

    //is there space?

    //send note to queue

    myprintf("before message put in note off\n");
 80016dc:	4812      	ldr	r0, [pc, #72]	@ (8001728 <note_off_event+0xe0>)
 80016de:	f000 ff91 	bl	8002604 <myprintf>
    // skip_midi_event(fp, midi_type);
    res = osMessagePut(NoteQueue1Handle, note, osWaitForever);
 80016e2:	4b12      	ldr	r3, [pc, #72]	@ (800172c <note_off_event+0xe4>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68f9      	ldr	r1, [r7, #12]
 80016e8:	f04f 32ff 	mov.w	r2, #4294967295
 80016ec:	4618      	mov	r0, r3
 80016ee:	f007 f997 	bl	8008a20 <osMessagePut>
 80016f2:	6138      	str	r0, [r7, #16]
    if(res != osOK){
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <note_off_event+0xba>
    	myprintf("error in osMessagePut %d\n", res);
 80016fa:	6939      	ldr	r1, [r7, #16]
 80016fc:	480c      	ldr	r0, [pc, #48]	@ (8001730 <note_off_event+0xe8>)
 80016fe:	f000 ff81 	bl	8002604 <myprintf>
    }

    myprintf("note number in PARSE %x\n", note->number);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	4619      	mov	r1, r3
 8001708:	480a      	ldr	r0, [pc, #40]	@ (8001734 <note_off_event+0xec>)
 800170a:	f000 ff7b 	bl	8002604 <myprintf>


}
 800170e:	bf00      	nop
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	00000000 	.word	0x00000000
 800171c:	40000000 	.word	0x40000000
 8001720:	40280000 	.word	0x40280000
 8001724:	407b8000 	.word	0x407b8000
 8001728:	0800cf90 	.word	0x0800cf90
 800172c:	200003e8 	.word	0x200003e8
 8001730:	0800cf58 	.word	0x0800cf58
 8001734:	0800cf74 	.word	0x0800cf74

08001738 <midi_event_handler>:
 * @param fp FIL pointer to midi FIL
 * @param delta_time time before next event is read in ticks
 * @param event handle for event type
 * @param ctrl contains system information for controls*/
void midi_event_handler(FIL *fp, uint32_t delta_time, uint8_t event, MIDI_controller *ctrl)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	4613      	mov	r3, r2
 8001746:	71fb      	strb	r3, [r7, #7]
    uint8_t midi_type;
    uint8_t channel;
    struct note* note = malloc(sizeof(note));
 8001748:	2004      	movs	r0, #4
 800174a:	f009 febd 	bl	800b4c8 <malloc>
 800174e:	4603      	mov	r3, r0
 8001750:	617b      	str	r3, [r7, #20]

    midi_type = 0xF0 & event; // event name
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	f023 030f 	bic.w	r3, r3, #15
 8001758:	74fb      	strb	r3, [r7, #19]
    channel = 0x0F & event;   // where the event gets sent *** for polyphonic music
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	f003 030f 	and.w	r3, r3, #15
 8001760:	74bb      	strb	r3, [r7, #18]

    // myprintf("Midi Type: 0x%x\n", midi_type);

    switch (midi_type)
 8001762:	7cfb      	ldrb	r3, [r7, #19]
 8001764:	2be0      	cmp	r3, #224	@ 0xe0
 8001766:	d03f      	beq.n	80017e8 <midi_event_handler+0xb0>
 8001768:	2be0      	cmp	r3, #224	@ 0xe0
 800176a:	dc43      	bgt.n	80017f4 <midi_event_handler+0xbc>
 800176c:	2bd0      	cmp	r3, #208	@ 0xd0
 800176e:	d035      	beq.n	80017dc <midi_event_handler+0xa4>
 8001770:	2bd0      	cmp	r3, #208	@ 0xd0
 8001772:	dc3f      	bgt.n	80017f4 <midi_event_handler+0xbc>
 8001774:	2bc0      	cmp	r3, #192	@ 0xc0
 8001776:	d02b      	beq.n	80017d0 <midi_event_handler+0x98>
 8001778:	2bc0      	cmp	r3, #192	@ 0xc0
 800177a:	dc3b      	bgt.n	80017f4 <midi_event_handler+0xbc>
 800177c:	2bb0      	cmp	r3, #176	@ 0xb0
 800177e:	d021      	beq.n	80017c4 <midi_event_handler+0x8c>
 8001780:	2bb0      	cmp	r3, #176	@ 0xb0
 8001782:	dc37      	bgt.n	80017f4 <midi_event_handler+0xbc>
 8001784:	2ba0      	cmp	r3, #160	@ 0xa0
 8001786:	d014      	beq.n	80017b2 <midi_event_handler+0x7a>
 8001788:	2ba0      	cmp	r3, #160	@ 0xa0
 800178a:	dc33      	bgt.n	80017f4 <midi_event_handler+0xbc>
 800178c:	2b80      	cmp	r3, #128	@ 0x80
 800178e:	d002      	beq.n	8001796 <midi_event_handler+0x5e>
 8001790:	2b90      	cmp	r3, #144	@ 0x90
 8001792:	d007      	beq.n	80017a4 <midi_event_handler+0x6c>
 8001794:	e02e      	b.n	80017f4 <midi_event_handler+0xbc>
    {
    case 0x80: // Note Off
    	note_off_event(note, fp, delta_time, ctrl);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	68ba      	ldr	r2, [r7, #8]
 800179a:	68f9      	ldr	r1, [r7, #12]
 800179c:	6978      	ldr	r0, [r7, #20]
 800179e:	f7ff ff53 	bl	8001648 <note_off_event>
        break;
 80017a2:	e032      	b.n	800180a <midi_event_handler+0xd2>

    case 0x90: // Note On
    	note_on_event(note, fp, delta_time, ctrl);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	68f9      	ldr	r1, [r7, #12]
 80017aa:	6978      	ldr	r0, [r7, #20]
 80017ac:	f7ff fec8 	bl	8001540 <note_on_event>
        break;
 80017b0:	e02b      	b.n	800180a <midi_event_handler+0xd2>

    case 0xA0: // Polyphonic Key Pressure (Aftertouch)
        myprintf("Polyphonic Key Pressure\n");
 80017b2:	4818      	ldr	r0, [pc, #96]	@ (8001814 <midi_event_handler+0xdc>)
 80017b4:	f000 ff26 	bl	8002604 <myprintf>
        skip_midi_event(fp, midi_type);
 80017b8:	7cfb      	ldrb	r3, [r7, #19]
 80017ba:	4619      	mov	r1, r3
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f000 fa5f 	bl	8001c80 <skip_midi_event>
        break;
 80017c2:	e022      	b.n	800180a <midi_event_handler+0xd2>

    case 0xB0: // Control Change
        skip_midi_event(fp, midi_type);
 80017c4:	7cfb      	ldrb	r3, [r7, #19]
 80017c6:	4619      	mov	r1, r3
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f000 fa59 	bl	8001c80 <skip_midi_event>
        break;
 80017ce:	e01c      	b.n	800180a <midi_event_handler+0xd2>

    case 0xC0: // Program Change
        // changes instrument type
        skip_midi_event(fp, midi_type);
 80017d0:	7cfb      	ldrb	r3, [r7, #19]
 80017d2:	4619      	mov	r1, r3
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	f000 fa53 	bl	8001c80 <skip_midi_event>
        break;
 80017da:	e016      	b.n	800180a <midi_event_handler+0xd2>

    case 0xD0: // Channel Pressure (Aftertouch)
        skip_midi_event(fp, midi_type);
 80017dc:	7cfb      	ldrb	r3, [r7, #19]
 80017de:	4619      	mov	r1, r3
 80017e0:	68f8      	ldr	r0, [r7, #12]
 80017e2:	f000 fa4d 	bl	8001c80 <skip_midi_event>
        break;
 80017e6:	e010      	b.n	800180a <midi_event_handler+0xd2>

    case 0xE0: // Pitch Bend Change

        skip_midi_event(fp, midi_type);
 80017e8:	7cfb      	ldrb	r3, [r7, #19]
 80017ea:	4619      	mov	r1, r3
 80017ec:	68f8      	ldr	r0, [r7, #12]
 80017ee:	f000 fa47 	bl	8001c80 <skip_midi_event>
        break;
 80017f2:	e00a      	b.n	800180a <midi_event_handler+0xd2>

    default:
        myprintf("Unknown MIDI Type Handler: 0x%x\n", midi_type);
 80017f4:	7cfb      	ldrb	r3, [r7, #19]
 80017f6:	4619      	mov	r1, r3
 80017f8:	4807      	ldr	r0, [pc, #28]	@ (8001818 <midi_event_handler+0xe0>)
 80017fa:	f000 ff03 	bl	8002604 <myprintf>
        skip_midi_event(fp, midi_type);
 80017fe:	7cfb      	ldrb	r3, [r7, #19]
 8001800:	4619      	mov	r1, r3
 8001802:	68f8      	ldr	r0, [r7, #12]
 8001804:	f000 fa3c 	bl	8001c80 <skip_midi_event>
        break;
 8001808:	bf00      	nop
    }
}
 800180a:	bf00      	nop
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	0800cfb0 	.word	0x0800cfb0
 8001818:	0800cfcc 	.word	0x0800cfcc

0800181c <meta_event_handler>:
 * @param delta_time time before next event is read in ticks
 * @param event handle for event type
 * @param ctrl contains system information for controls
 * @return 0 on success -1 if failure*/
uint8_t meta_event_handler(FIL *fp, uint32_t delta_time, MIDI_controller *ctrl)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08c      	sub	sp, #48	@ 0x30
 8001820:	af02      	add	r7, sp, #8
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
    Delta time
    FF (signifies meta event)
    Event Code (1 byte)
    */

    f_read(fp, &meta_type, 1, NULL);
 8001828:	f107 011b 	add.w	r1, r7, #27
 800182c:	2300      	movs	r3, #0
 800182e:	2201      	movs	r2, #1
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	f006 fa6e 	bl	8007d12 <f_read>

    switch (meta_type)
 8001836:	7efb      	ldrb	r3, [r7, #27]
 8001838:	2b59      	cmp	r3, #89	@ 0x59
 800183a:	f300 80bd 	bgt.w	80019b8 <meta_event_handler+0x19c>
 800183e:	2b00      	cmp	r3, #0
 8001840:	f2c0 81ca 	blt.w	8001bd8 <meta_event_handler+0x3bc>
 8001844:	2b59      	cmp	r3, #89	@ 0x59
 8001846:	f200 81c7 	bhi.w	8001bd8 <meta_event_handler+0x3bc>
 800184a:	a201      	add	r2, pc, #4	@ (adr r2, 8001850 <meta_event_handler+0x34>)
 800184c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001850:	080019c1 	.word	0x080019c1
 8001854:	080019cf 	.word	0x080019cf
 8001858:	080019dd 	.word	0x080019dd
 800185c:	080019eb 	.word	0x080019eb
 8001860:	08001a4f 	.word	0x08001a4f
 8001864:	08001a5d 	.word	0x08001a5d
 8001868:	08001a6b 	.word	0x08001a6b
 800186c:	08001a79 	.word	0x08001a79
 8001870:	08001bd9 	.word	0x08001bd9
 8001874:	08001bd9 	.word	0x08001bd9
 8001878:	08001bd9 	.word	0x08001bd9
 800187c:	08001bd9 	.word	0x08001bd9
 8001880:	08001bd9 	.word	0x08001bd9
 8001884:	08001bd9 	.word	0x08001bd9
 8001888:	08001bd9 	.word	0x08001bd9
 800188c:	08001bd9 	.word	0x08001bd9
 8001890:	08001bd9 	.word	0x08001bd9
 8001894:	08001bd9 	.word	0x08001bd9
 8001898:	08001bd9 	.word	0x08001bd9
 800189c:	08001bd9 	.word	0x08001bd9
 80018a0:	08001bd9 	.word	0x08001bd9
 80018a4:	08001bd9 	.word	0x08001bd9
 80018a8:	08001bd9 	.word	0x08001bd9
 80018ac:	08001bd9 	.word	0x08001bd9
 80018b0:	08001bd9 	.word	0x08001bd9
 80018b4:	08001bd9 	.word	0x08001bd9
 80018b8:	08001bd9 	.word	0x08001bd9
 80018bc:	08001bd9 	.word	0x08001bd9
 80018c0:	08001bd9 	.word	0x08001bd9
 80018c4:	08001bd9 	.word	0x08001bd9
 80018c8:	08001bd9 	.word	0x08001bd9
 80018cc:	08001bd9 	.word	0x08001bd9
 80018d0:	08001a87 	.word	0x08001a87
 80018d4:	08001bd9 	.word	0x08001bd9
 80018d8:	08001bd9 	.word	0x08001bd9
 80018dc:	08001bd9 	.word	0x08001bd9
 80018e0:	08001bd9 	.word	0x08001bd9
 80018e4:	08001bd9 	.word	0x08001bd9
 80018e8:	08001bd9 	.word	0x08001bd9
 80018ec:	08001bd9 	.word	0x08001bd9
 80018f0:	08001bd9 	.word	0x08001bd9
 80018f4:	08001bd9 	.word	0x08001bd9
 80018f8:	08001bd9 	.word	0x08001bd9
 80018fc:	08001bd9 	.word	0x08001bd9
 8001900:	08001bd9 	.word	0x08001bd9
 8001904:	08001bd9 	.word	0x08001bd9
 8001908:	08001bd9 	.word	0x08001bd9
 800190c:	08001a95 	.word	0x08001a95
 8001910:	08001bd9 	.word	0x08001bd9
 8001914:	08001bd9 	.word	0x08001bd9
 8001918:	08001bd9 	.word	0x08001bd9
 800191c:	08001bd9 	.word	0x08001bd9
 8001920:	08001bd9 	.word	0x08001bd9
 8001924:	08001bd9 	.word	0x08001bd9
 8001928:	08001bd9 	.word	0x08001bd9
 800192c:	08001bd9 	.word	0x08001bd9
 8001930:	08001bd9 	.word	0x08001bd9
 8001934:	08001bd9 	.word	0x08001bd9
 8001938:	08001bd9 	.word	0x08001bd9
 800193c:	08001bd9 	.word	0x08001bd9
 8001940:	08001bd9 	.word	0x08001bd9
 8001944:	08001bd9 	.word	0x08001bd9
 8001948:	08001bd9 	.word	0x08001bd9
 800194c:	08001bd9 	.word	0x08001bd9
 8001950:	08001bd9 	.word	0x08001bd9
 8001954:	08001bd9 	.word	0x08001bd9
 8001958:	08001bd9 	.word	0x08001bd9
 800195c:	08001bd9 	.word	0x08001bd9
 8001960:	08001bd9 	.word	0x08001bd9
 8001964:	08001bd9 	.word	0x08001bd9
 8001968:	08001bd9 	.word	0x08001bd9
 800196c:	08001bd9 	.word	0x08001bd9
 8001970:	08001bd9 	.word	0x08001bd9
 8001974:	08001bd9 	.word	0x08001bd9
 8001978:	08001bd9 	.word	0x08001bd9
 800197c:	08001bd9 	.word	0x08001bd9
 8001980:	08001bd9 	.word	0x08001bd9
 8001984:	08001bd9 	.word	0x08001bd9
 8001988:	08001bd9 	.word	0x08001bd9
 800198c:	08001bd9 	.word	0x08001bd9
 8001990:	08001bd9 	.word	0x08001bd9
 8001994:	08001aab 	.word	0x08001aab
 8001998:	08001bd9 	.word	0x08001bd9
 800199c:	08001bd9 	.word	0x08001bd9
 80019a0:	08001b27 	.word	0x08001b27
 80019a4:	08001bd9 	.word	0x08001bd9
 80019a8:	08001bd9 	.word	0x08001bd9
 80019ac:	08001bd9 	.word	0x08001bd9
 80019b0:	08001b35 	.word	0x08001b35
 80019b4:	08001b91 	.word	0x08001b91
 80019b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80019ba:	f000 8109 	beq.w	8001bd0 <meta_event_handler+0x3b4>
 80019be:	e10b      	b.n	8001bd8 <meta_event_handler+0x3bc>
    {
    case 0x00:
        myprintf("Handle Sequence Number event\n");
 80019c0:	488d      	ldr	r0, [pc, #564]	@ (8001bf8 <meta_event_handler+0x3dc>)
 80019c2:	f000 fe1f 	bl	8002604 <myprintf>
        skip_meta_event(fp);
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f000 f942 	bl	8001c50 <skip_meta_event>

        break;
 80019cc:	e10e      	b.n	8001bec <meta_event_handler+0x3d0>
    case 0x01:
        myprintf("Handle Text Event\n");
 80019ce:	488b      	ldr	r0, [pc, #556]	@ (8001bfc <meta_event_handler+0x3e0>)
 80019d0:	f000 fe18 	bl	8002604 <myprintf>
        skip_meta_event(fp);
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f000 f93b 	bl	8001c50 <skip_meta_event>
        break;
 80019da:	e107      	b.n	8001bec <meta_event_handler+0x3d0>
    case 0x02:
        myprintf("Handle Copyright Notice\n");
 80019dc:	4888      	ldr	r0, [pc, #544]	@ (8001c00 <meta_event_handler+0x3e4>)
 80019de:	f000 fe11 	bl	8002604 <myprintf>
        skip_meta_event(fp);
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f000 f934 	bl	8001c50 <skip_meta_event>
        break;
 80019e8:	e100      	b.n	8001bec <meta_event_handler+0x3d0>
    case 0x03:
        myprintf("Track Name\n");
 80019ea:	4886      	ldr	r0, [pc, #536]	@ (8001c04 <meta_event_handler+0x3e8>)
 80019ec:	f000 fe0a 	bl	8002604 <myprintf>
        event_len = decode_vlq(fp);
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	f000 fdb7 	bl	8002564 <decode_vlq>
 80019f6:	4603      	mov	r3, r0
 80019f8:	617b      	str	r3, [r7, #20]
        int i = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	627b      	str	r3, [r7, #36]	@ 0x24

        buf = malloc(sizeof(uint8_t) * event_len);
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f009 fd61 	bl	800b4c8 <malloc>
 8001a06:	4603      	mov	r3, r0
 8001a08:	623b      	str	r3, [r7, #32]
        if (!buf)
 8001a0a:	6a3b      	ldr	r3, [r7, #32]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d104      	bne.n	8001a1a <meta_event_handler+0x1fe>
        {
            myprintf("Malloc Failed in track name\n");
 8001a10:	487d      	ldr	r0, [pc, #500]	@ (8001c08 <meta_event_handler+0x3ec>)
 8001a12:	f000 fdf7 	bl	8002604 <myprintf>
            return -1;
 8001a16:	23ff      	movs	r3, #255	@ 0xff
 8001a18:	e0e9      	b.n	8001bee <meta_event_handler+0x3d2>
        }

        f_read(fp, buf, event_len, NULL);
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	6a39      	ldr	r1, [r7, #32]
 8001a20:	68f8      	ldr	r0, [r7, #12]
 8001a22:	f006 f976 	bl	8007d12 <f_read>

        // prints track name
        while (i < event_len)
 8001a26:	e00a      	b.n	8001a3e <meta_event_handler+0x222>
        {
            myprintf("%c", buf[i]);
 8001a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2a:	6a3a      	ldr	r2, [r7, #32]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	4619      	mov	r1, r3
 8001a32:	4876      	ldr	r0, [pc, #472]	@ (8001c0c <meta_event_handler+0x3f0>)
 8001a34:	f000 fde6 	bl	8002604 <myprintf>
            i++;
 8001a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (i < event_len)
 8001a3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d3f0      	bcc.n	8001a28 <meta_event_handler+0x20c>
        }

        myprintf("\n\n");
 8001a46:	4872      	ldr	r0, [pc, #456]	@ (8001c10 <meta_event_handler+0x3f4>)
 8001a48:	f000 fddc 	bl	8002604 <myprintf>

        // skip_meta_event(fp);
        break;
 8001a4c:	e0ce      	b.n	8001bec <meta_event_handler+0x3d0>
    case 0x04:
        myprintf("Handle Instrument Name\n");
 8001a4e:	4871      	ldr	r0, [pc, #452]	@ (8001c14 <meta_event_handler+0x3f8>)
 8001a50:	f000 fdd8 	bl	8002604 <myprintf>
        skip_meta_event(fp);
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f000 f8fb 	bl	8001c50 <skip_meta_event>
        break;
 8001a5a:	e0c7      	b.n	8001bec <meta_event_handler+0x3d0>
    case 0x05:
        myprintf("Handle Lyric Text\n");
 8001a5c:	486e      	ldr	r0, [pc, #440]	@ (8001c18 <meta_event_handler+0x3fc>)
 8001a5e:	f000 fdd1 	bl	8002604 <myprintf>
        skip_meta_event(fp);
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f000 f8f4 	bl	8001c50 <skip_meta_event>
        break;
 8001a68:	e0c0      	b.n	8001bec <meta_event_handler+0x3d0>
    case 0x06:
        myprintf("Handle Marker Text\n");
 8001a6a:	486c      	ldr	r0, [pc, #432]	@ (8001c1c <meta_event_handler+0x400>)
 8001a6c:	f000 fdca 	bl	8002604 <myprintf>
        skip_meta_event(fp);
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f000 f8ed 	bl	8001c50 <skip_meta_event>
        break;
 8001a76:	e0b9      	b.n	8001bec <meta_event_handler+0x3d0>
    case 0x07:
        myprintf("Handle Cue Point\n");
 8001a78:	4869      	ldr	r0, [pc, #420]	@ (8001c20 <meta_event_handler+0x404>)
 8001a7a:	f000 fdc3 	bl	8002604 <myprintf>
        skip_meta_event(fp);
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	f000 f8e6 	bl	8001c50 <skip_meta_event>
        break;
 8001a84:	e0b2      	b.n	8001bec <meta_event_handler+0x3d0>
    case 0x20:
        myprintf("Handle MIDI Channel Prefix Assignment\n");
 8001a86:	4867      	ldr	r0, [pc, #412]	@ (8001c24 <meta_event_handler+0x408>)
 8001a88:	f000 fdbc 	bl	8002604 <myprintf>
        skip_meta_event(fp);
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f000 f8df 	bl	8001c50 <skip_meta_event>
        break;
 8001a92:	e0ab      	b.n	8001bec <meta_event_handler+0x3d0>
    case 0x2F:
        myprintf("Handle End of Track\n\n\n");
 8001a94:	4864      	ldr	r0, [pc, #400]	@ (8001c28 <meta_event_handler+0x40c>)
 8001a96:	f000 fdb5 	bl	8002604 <myprintf>
        f_read(fp, NULL, 1, NULL);; // skips final value
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f006 f936 	bl	8007d12 <f_read>

        return 1; // success!!
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e0a1      	b.n	8001bee <meta_event_handler+0x3d2>
    case 0x51:
        myprintf("Sets Tempo\n");
 8001aaa:	4860      	ldr	r0, [pc, #384]	@ (8001c2c <meta_event_handler+0x410>)
 8001aac:	f000 fdaa 	bl	8002604 <myprintf>

        uint32_t num_micro = 0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61fb      	str	r3, [r7, #28]

        buf = malloc(sizeof(uint8_t) * 3);
 8001ab4:	2003      	movs	r0, #3
 8001ab6:	f009 fd07 	bl	800b4c8 <malloc>
 8001aba:	4603      	mov	r3, r0
 8001abc:	623b      	str	r3, [r7, #32]
        if (!buf)
 8001abe:	6a3b      	ldr	r3, [r7, #32]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d104      	bne.n	8001ace <meta_event_handler+0x2b2>
        {
            myprintf("Malloc Failed in Time Signiture");
 8001ac4:	485a      	ldr	r0, [pc, #360]	@ (8001c30 <meta_event_handler+0x414>)
 8001ac6:	f000 fd9d 	bl	8002604 <myprintf>
            return -1;
 8001aca:	23ff      	movs	r3, #255	@ 0xff
 8001acc:	e08f      	b.n	8001bee <meta_event_handler+0x3d2>
        }
        f_read(fp, &event_len, 1, NULL);
 8001ace:	f107 0114 	add.w	r1, r7, #20
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f006 f91b 	bl	8007d12 <f_read>
        f_read(fp, buf, 3, NULL);
 8001adc:	2300      	movs	r3, #0
 8001ade:	2203      	movs	r2, #3
 8001ae0:	6a39      	ldr	r1, [r7, #32]
 8001ae2:	68f8      	ldr	r0, [r7, #12]
 8001ae4:	f006 f915 	bl	8007d12 <f_read>
        num_micro = (buf[0] << 16) | (buf[1] << 8) | (buf[2]);
 8001ae8:	6a3b      	ldr	r3, [r7, #32]
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	041a      	lsls	r2, r3, #16
 8001aee:	6a3b      	ldr	r3, [r7, #32]
 8001af0:	3301      	adds	r3, #1
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	021b      	lsls	r3, r3, #8
 8001af6:	4313      	orrs	r3, r2
 8001af8:	6a3a      	ldr	r2, [r7, #32]
 8001afa:	3202      	adds	r2, #2
 8001afc:	7812      	ldrb	r2, [r2, #0]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61fb      	str	r3, [r7, #28]
        myprintf("Microseconds per quarter note: %d\n", num_micro);
 8001b02:	69f9      	ldr	r1, [r7, #28]
 8001b04:	484b      	ldr	r0, [pc, #300]	@ (8001c34 <meta_event_handler+0x418>)
 8001b06:	f000 fd7d 	bl	8002604 <myprintf>

        ctrl->tempo = 60000000 / num_micro; // tempo in bpm
 8001b0a:	4a4b      	ldr	r2, [pc, #300]	@ (8001c38 <meta_event_handler+0x41c>)
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	719a      	strb	r2, [r3, #6]

        myprintf("tempo in BPM: %d\n", ctrl->tempo);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	799b      	ldrb	r3, [r3, #6]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4847      	ldr	r0, [pc, #284]	@ (8001c3c <meta_event_handler+0x420>)
 8001b20:	f000 fd70 	bl	8002604 <myprintf>

        // skip_meta_event(fp);
        break;
 8001b24:	e062      	b.n	8001bec <meta_event_handler+0x3d0>
    case 0x54:
        myprintf("Handle SMPTE Offset\n");
 8001b26:	4846      	ldr	r0, [pc, #280]	@ (8001c40 <meta_event_handler+0x424>)
 8001b28:	f000 fd6c 	bl	8002604 <myprintf>
        skip_meta_event(fp);
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f000 f88f 	bl	8001c50 <skip_meta_event>
        break;
 8001b32:	e05b      	b.n	8001bec <meta_event_handler+0x3d0>
    case 0x58: // time signiture

        f_read(fp, &event_len, 1, NULL);; // gets length byte (always 0x04)
 8001b34:	f107 0114 	add.w	r1, r7, #20
 8001b38:	2300      	movs	r3, #0
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f006 f8e8 	bl	8007d12 <f_read>

        buf = malloc(sizeof(uint8_t) * 4);
 8001b42:	2004      	movs	r0, #4
 8001b44:	f009 fcc0 	bl	800b4c8 <malloc>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	623b      	str	r3, [r7, #32]
        if (!buf)
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d104      	bne.n	8001b5c <meta_event_handler+0x340>
        {
            myprintf("Malloc Failed in Time Signiture");
 8001b52:	4837      	ldr	r0, [pc, #220]	@ (8001c30 <meta_event_handler+0x414>)
 8001b54:	f000 fd56 	bl	8002604 <myprintf>
            return -1;
 8001b58:	23ff      	movs	r3, #255	@ 0xff
 8001b5a:	e048      	b.n	8001bee <meta_event_handler+0x3d2>
        denominator
        metrinome clicks
        32nd notes per quarter
        */

        f_read(fp,buf,4,NULL);
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	2204      	movs	r2, #4
 8001b60:	6a39      	ldr	r1, [r7, #32]
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f006 f8d5 	bl	8007d12 <f_read>

        myprintf("Time signiture: \n num:%x\n denom:%x\n clocks per beat:%x\n 32nds per quarter:%x\n\n", buf[0], buf[1], buf[2], buf[3]);
 8001b68:	6a3b      	ldr	r3, [r7, #32]
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	3301      	adds	r3, #1
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	461a      	mov	r2, r3
 8001b76:	6a3b      	ldr	r3, [r7, #32]
 8001b78:	3302      	adds	r3, #2
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	3303      	adds	r3, #3
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	4603      	mov	r3, r0
 8001b88:	482e      	ldr	r0, [pc, #184]	@ (8001c44 <meta_event_handler+0x428>)
 8001b8a:	f000 fd3b 	bl	8002604 <myprintf>

        break;
 8001b8e:	e02d      	b.n	8001bec <meta_event_handler+0x3d0>
    case 0x59:
        myprintf("Handle Key Signature\n");
 8001b90:	482d      	ldr	r0, [pc, #180]	@ (8001c48 <meta_event_handler+0x42c>)
 8001b92:	f000 fd37 	bl	8002604 <myprintf>
        uint8_t tone;
        uint8_t key_sig;

        f_lseek(fp, f_tell(fp) + 1); // shifts past length byte 0x02
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f006 fa25 	bl	8007fee <f_lseek>

        f_read(fp, &key_sig, 1, NULL);; // number of sharps or flats
 8001ba4:	f107 0112 	add.w	r1, r7, #18
 8001ba8:	2300      	movs	r3, #0
 8001baa:	2201      	movs	r2, #1
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f006 f8b0 	bl	8007d12 <f_read>
        f_read(fp, &tone, 1, NULL);;    // major(1) / minor(0)
 8001bb2:	f107 0113 	add.w	r1, r7, #19
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	2201      	movs	r2, #1
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f006 f8a9 	bl	8007d12 <f_read>

        find_key(key_sig, tone, ctrl);
 8001bc0:	7cbb      	ldrb	r3, [r7, #18]
 8001bc2:	b25b      	sxtb	r3, r3
 8001bc4:	7cf9      	ldrb	r1, [r7, #19]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f000 f8db 	bl	8001d84 <find_key>

        break;
 8001bce:	e00d      	b.n	8001bec <meta_event_handler+0x3d0>
        //     return -1;
        // }

        // fread(buf, 1, event_len, fp);

        skip_meta_event(fp);
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f000 f83d 	bl	8001c50 <skip_meta_event>
        break;
 8001bd6:	e009      	b.n	8001bec <meta_event_handler+0x3d0>
    default:
        myprintf("Unknown meta event type: 0x%02X\n", meta_type);
 8001bd8:	7efb      	ldrb	r3, [r7, #27]
 8001bda:	4619      	mov	r1, r3
 8001bdc:	481b      	ldr	r0, [pc, #108]	@ (8001c4c <meta_event_handler+0x430>)
 8001bde:	f000 fd11 	bl	8002604 <myprintf>
        skip_meta_event(fp);
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f000 f834 	bl	8001c50 <skip_meta_event>
        return -1;
 8001be8:	23ff      	movs	r3, #255	@ 0xff
 8001bea:	e000      	b.n	8001bee <meta_event_handler+0x3d2>
    }

    return 0;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3728      	adds	r7, #40	@ 0x28
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	0800cff0 	.word	0x0800cff0
 8001bfc:	0800d010 	.word	0x0800d010
 8001c00:	0800d024 	.word	0x0800d024
 8001c04:	0800d040 	.word	0x0800d040
 8001c08:	0800d04c 	.word	0x0800d04c
 8001c0c:	0800d06c 	.word	0x0800d06c
 8001c10:	0800d070 	.word	0x0800d070
 8001c14:	0800d074 	.word	0x0800d074
 8001c18:	0800d08c 	.word	0x0800d08c
 8001c1c:	0800d0a0 	.word	0x0800d0a0
 8001c20:	0800d0b4 	.word	0x0800d0b4
 8001c24:	0800d0c8 	.word	0x0800d0c8
 8001c28:	0800d0f0 	.word	0x0800d0f0
 8001c2c:	0800d108 	.word	0x0800d108
 8001c30:	0800d114 	.word	0x0800d114
 8001c34:	0800d134 	.word	0x0800d134
 8001c38:	03938700 	.word	0x03938700
 8001c3c:	0800d158 	.word	0x0800d158
 8001c40:	0800d16c 	.word	0x0800d16c
 8001c44:	0800d184 	.word	0x0800d184
 8001c48:	0800d1d4 	.word	0x0800d1d4
 8001c4c:	0800d1ec 	.word	0x0800d1ec

08001c50 <skip_meta_event>:
 *  @brief skips meta events
 * @param fp FIL pointe to midi FIL
 * @return 0 on sucess -1 on failure
 * */
uint8_t skip_meta_event(FIL *fp)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]

    uint32_t event_len;
    uint8_t err;

    event_len = decode_vlq(fp);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 fc83 	bl	8002564 <decode_vlq>
 8001c5e:	60f8      	str	r0, [r7, #12]

    err = f_lseek(fp, f_tell(fp) + event_len);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	699a      	ldr	r2, [r3, #24]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4413      	add	r3, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f006 f9bf 	bl	8007fee <f_lseek>
 8001c70:	4603      	mov	r3, r0
 8001c72:	72fb      	strb	r3, [r7, #11]
    {
        myprintf("f_lseek in skip event failed");
        return -1;
    }

    return 0;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <skip_midi_event>:
 * @param fp FIL pointe to midi FIL
 * @param type 8-bit handle of midi type
 * @return 0 on sucess -1 on failure
 * */
uint8_t skip_midi_event(FIL *fp, uint8_t type)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	70fb      	strb	r3, [r7, #3]

    switch (type)
 8001c8c:	78fb      	ldrb	r3, [r7, #3]
 8001c8e:	2be0      	cmp	r3, #224	@ 0xe0
 8001c90:	d058      	beq.n	8001d44 <skip_midi_event+0xc4>
 8001c92:	2be0      	cmp	r3, #224	@ 0xe0
 8001c94:	dc61      	bgt.n	8001d5a <skip_midi_event+0xda>
 8001c96:	2bd0      	cmp	r3, #208	@ 0xd0
 8001c98:	d049      	beq.n	8001d2e <skip_midi_event+0xae>
 8001c9a:	2bd0      	cmp	r3, #208	@ 0xd0
 8001c9c:	dc5d      	bgt.n	8001d5a <skip_midi_event+0xda>
 8001c9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8001ca0:	d03a      	beq.n	8001d18 <skip_midi_event+0x98>
 8001ca2:	2bc0      	cmp	r3, #192	@ 0xc0
 8001ca4:	dc59      	bgt.n	8001d5a <skip_midi_event+0xda>
 8001ca6:	2bb0      	cmp	r3, #176	@ 0xb0
 8001ca8:	d02b      	beq.n	8001d02 <skip_midi_event+0x82>
 8001caa:	2bb0      	cmp	r3, #176	@ 0xb0
 8001cac:	dc55      	bgt.n	8001d5a <skip_midi_event+0xda>
 8001cae:	2ba0      	cmp	r3, #160	@ 0xa0
 8001cb0:	d01c      	beq.n	8001cec <skip_midi_event+0x6c>
 8001cb2:	2ba0      	cmp	r3, #160	@ 0xa0
 8001cb4:	dc51      	bgt.n	8001d5a <skip_midi_event+0xda>
 8001cb6:	2b80      	cmp	r3, #128	@ 0x80
 8001cb8:	d002      	beq.n	8001cc0 <skip_midi_event+0x40>
 8001cba:	2b90      	cmp	r3, #144	@ 0x90
 8001cbc:	d00b      	beq.n	8001cd6 <skip_midi_event+0x56>
 8001cbe:	e04c      	b.n	8001d5a <skip_midi_event+0xda>
    {

    case 0x80: // Note Off
        myprintf("Skip Note Off\n");
 8001cc0:	4829      	ldr	r0, [pc, #164]	@ (8001d68 <skip_midi_event+0xe8>)
 8001cc2:	f000 fc9f 	bl	8002604 <myprintf>
        f_lseek(fp, f_tell(fp) + 2);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	3302      	adds	r3, #2
 8001ccc:	4619      	mov	r1, r3
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f006 f98d 	bl	8007fee <f_lseek>
        break;
 8001cd4:	e043      	b.n	8001d5e <skip_midi_event+0xde>

    case 0x90: // Note On
        myprintf("Skip Note On\n");
 8001cd6:	4825      	ldr	r0, [pc, #148]	@ (8001d6c <skip_midi_event+0xec>)
 8001cd8:	f000 fc94 	bl	8002604 <myprintf>
        f_lseek(fp, f_tell(fp) + 2);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f006 f982 	bl	8007fee <f_lseek>
        break;
 8001cea:	e038      	b.n	8001d5e <skip_midi_event+0xde>

    case 0xA0: // Polyphonic Key Pressure (Aftertouch)
        myprintf("Skip Polyphonic Key Pressure\n");
 8001cec:	4820      	ldr	r0, [pc, #128]	@ (8001d70 <skip_midi_event+0xf0>)
 8001cee:	f000 fc89 	bl	8002604 <myprintf>
        f_lseek(fp, f_tell(fp) + 2);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	3302      	adds	r3, #2
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f006 f977 	bl	8007fee <f_lseek>
        break;
 8001d00:	e02d      	b.n	8001d5e <skip_midi_event+0xde>

    case 0xB0: // Control Change
        myprintf("Skip Control Change\n");
 8001d02:	481c      	ldr	r0, [pc, #112]	@ (8001d74 <skip_midi_event+0xf4>)
 8001d04:	f000 fc7e 	bl	8002604 <myprintf>
        f_lseek(fp, f_tell(fp) + 2);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	3302      	adds	r3, #2
 8001d0e:	4619      	mov	r1, r3
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f006 f96c 	bl	8007fee <f_lseek>
        break;
 8001d16:	e022      	b.n	8001d5e <skip_midi_event+0xde>

    case 0xC0: // Program Change // 1 byte
        myprintf("Skip Program Change\n");
 8001d18:	4817      	ldr	r0, [pc, #92]	@ (8001d78 <skip_midi_event+0xf8>)
 8001d1a:	f000 fc73 	bl	8002604 <myprintf>
        f_lseek(fp, f_tell(fp) + 1);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	3301      	adds	r3, #1
 8001d24:	4619      	mov	r1, r3
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f006 f961 	bl	8007fee <f_lseek>
        break;
 8001d2c:	e017      	b.n	8001d5e <skip_midi_event+0xde>

    case 0xD0: // Channel Pressure (Aftertouch) // 1 byte
        myprintf("Skip Channel Pressure\n");
 8001d2e:	4813      	ldr	r0, [pc, #76]	@ (8001d7c <skip_midi_event+0xfc>)
 8001d30:	f000 fc68 	bl	8002604 <myprintf>
        f_lseek(fp, f_tell(fp) + 1);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f006 f956 	bl	8007fee <f_lseek>
        break;
 8001d42:	e00c      	b.n	8001d5e <skip_midi_event+0xde>

    case 0xE0: // Pitch Bend Change
        myprintf("Skip Pitch Bend Change\n");
 8001d44:	480e      	ldr	r0, [pc, #56]	@ (8001d80 <skip_midi_event+0x100>)
 8001d46:	f000 fc5d 	bl	8002604 <myprintf>
        f_lseek(fp, f_tell(fp) + 2);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	3302      	adds	r3, #2
 8001d50:	4619      	mov	r1, r3
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f006 f94b 	bl	8007fee <f_lseek>
        break;
 8001d58:	e001      	b.n	8001d5e <skip_midi_event+0xde>

    default:
        abort();
 8001d5a:	f009 fbad 	bl	800b4b8 <abort>
        myprintf("Skip Unknown MIDI Type: 0x%x\n", type);
        f_lseek(fp, f_tell(fp) + 2);
        break;
    }

    return 0;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	0800d210 	.word	0x0800d210
 8001d6c:	0800d220 	.word	0x0800d220
 8001d70:	0800d230 	.word	0x0800d230
 8001d74:	0800d250 	.word	0x0800d250
 8001d78:	0800d268 	.word	0x0800d268
 8001d7c:	0800d280 	.word	0x0800d280
 8001d80:	0800d298 	.word	0x0800d298

08001d84 <find_key>:
 * @param tone meow
 * @param controller pointer to control structure
 * @return 0 on sucess -1 on failure
 * */
uint8_t find_key(int8_t key, uint8_t tone, MIDI_controller *controller)
{
 8001d84:	b590      	push	{r4, r7, lr}
 8001d86:	b08b      	sub	sp, #44	@ 0x2c
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	603a      	str	r2, [r7, #0]
 8001d8e:	71fb      	strb	r3, [r7, #7]
 8001d90:	460b      	mov	r3, r1
 8001d92:	71bb      	strb	r3, [r7, #6]

    uint8_t major_keys[15] = {
 8001d94:	4b21      	ldr	r3, [pc, #132]	@ (8001e1c <find_key+0x98>)
 8001d96:	f107 0418 	add.w	r4, r7, #24
 8001d9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d9c:	c407      	stmia	r4!, {r0, r1, r2}
 8001d9e:	8023      	strh	r3, [r4, #0]
 8001da0:	3402      	adds	r4, #2
 8001da2:	0c1b      	lsrs	r3, r3, #16
 8001da4:	7023      	strb	r3, [r4, #0]
        B_MAJOR,       // 0x0C
        F_SHARP_MAJOR, // 0x0D
        C_SHARP_MAJOR  // 0x0E
    };

    uint8_t minor_keys[15] = {
 8001da6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e20 <find_key+0x9c>)
 8001da8:	f107 0408 	add.w	r4, r7, #8
 8001dac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dae:	c407      	stmia	r4!, {r0, r1, r2}
 8001db0:	8023      	strh	r3, [r4, #0]
 8001db2:	3402      	adds	r4, #2
 8001db4:	0c1b      	lsrs	r3, r3, #16
 8001db6:	7023      	strb	r3, [r4, #0]
        D_SHARP_MINOR, // D♯ Minor: 6 sharps
        A_SHARP_MINOR  // A♯ Minor: 7 sharps
    };

    // minor
    if (tone == 0x00)
 8001db8:	79bb      	ldrb	r3, [r7, #6]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10f      	bne.n	8001dde <find_key+0x5a>
    {
        controller->key_sig = minor_keys[(sizeof(minor_keys) / 2) + key];
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	3307      	adds	r3, #7
 8001dc4:	3328      	adds	r3, #40	@ 0x28
 8001dc6:	443b      	add	r3, r7
 8001dc8:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	709a      	strb	r2, [r3, #2]
        myprintf("Key Signiture: 0x%x\n", controller->key_sig);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	789b      	ldrb	r3, [r3, #2]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4813      	ldr	r0, [pc, #76]	@ (8001e24 <find_key+0xa0>)
 8001dd8:	f000 fc14 	bl	8002604 <myprintf>
 8001ddc:	e019      	b.n	8001e12 <find_key+0x8e>
    }
    // major
    else if (tone == 0x01)
 8001dde:	79bb      	ldrb	r3, [r7, #6]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d10f      	bne.n	8001e04 <find_key+0x80>
    {
        controller->key_sig = major_keys[(sizeof(minor_keys) / 2) + key];
 8001de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de8:	3307      	adds	r3, #7
 8001dea:	3328      	adds	r3, #40	@ 0x28
 8001dec:	443b      	add	r3, r7
 8001dee:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	709a      	strb	r2, [r3, #2]
        myprintf("Key Signiture: 0x%x\n", controller->key_sig);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	789b      	ldrb	r3, [r3, #2]
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4809      	ldr	r0, [pc, #36]	@ (8001e24 <find_key+0xa0>)
 8001dfe:	f000 fc01 	bl	8002604 <myprintf>
 8001e02:	e006      	b.n	8001e12 <find_key+0x8e>
    }

    else
    {
        myprintf("invalid tone: 0x%x\n", tone);
 8001e04:	79bb      	ldrb	r3, [r7, #6]
 8001e06:	4619      	mov	r1, r3
 8001e08:	4807      	ldr	r0, [pc, #28]	@ (8001e28 <find_key+0xa4>)
 8001e0a:	f000 fbfb 	bl	8002604 <myprintf>
        return -1;
 8001e0e:	23ff      	movs	r3, #255	@ 0xff
 8001e10:	e000      	b.n	8001e14 <find_key+0x90>
    }

    return 0;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	372c      	adds	r7, #44	@ 0x2c
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd90      	pop	{r4, r7, pc}
 8001e1c:	0800d2dc 	.word	0x0800d2dc
 8001e20:	0800d2ec 	.word	0x0800d2ec
 8001e24:	0800d2b0 	.word	0x0800d2b0
 8001e28:	0800d2c8 	.word	0x0800d2c8

08001e2c <play_one_track>:
 * @param fp FIL pointer to music
 * @param controller pointer to control structure
 * @return returns 0 on sucess other on failure
 * */
uint8_t play_one_track(FIL *fp, MIDI_controller *ctrl)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
    uint8_t end;

    uint8_t event_type;
    uint32_t delta_time;

    buf = (uint8_t *)malloc(sizeof(uint8_t) * 8);
 8001e36:	2008      	movs	r0, #8
 8001e38:	f009 fb46 	bl	800b4c8 <malloc>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	61bb      	str	r3, [r7, #24]
    if (!buf)
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d104      	bne.n	8001e50 <play_one_track+0x24>
    {
        myprintf("Buffer in parse_midi is null\n");
 8001e46:	4846      	ldr	r0, [pc, #280]	@ (8001f60 <play_one_track+0x134>)
 8001e48:	f000 fbdc 	bl	8002604 <myprintf>
        return -1;
 8001e4c:	23ff      	movs	r3, #255	@ 0xff
 8001e4e:	e083      	b.n	8001f58 <play_one_track+0x12c>
    }

    f_read(fp,buf,8,NULL);
 8001e50:	2300      	movs	r3, #0
 8001e52:	2208      	movs	r2, #8
 8001e54:	69b9      	ldr	r1, [r7, #24]
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f005 ff5b 	bl	8007d12 <f_read>

    trk_hdr = (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	061a      	lsls	r2, r3, #24
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	3301      	adds	r3, #1
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	041b      	lsls	r3, r3, #16
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	3302      	adds	r3, #2
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	021b      	lsls	r3, r3, #8
 8001e74:	4313      	orrs	r3, r2
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	3203      	adds	r2, #3
 8001e7a:	7812      	ldrb	r2, [r2, #0]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	617b      	str	r3, [r7, #20]
    if (trk_hdr != 0x4D54726B)
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	4a38      	ldr	r2, [pc, #224]	@ (8001f64 <play_one_track+0x138>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d005      	beq.n	8001e94 <play_one_track+0x68>
    { // verifies the track start is valid
        myprintf("Invalid track header recieved: %x\n", trk_hdr);
 8001e88:	6979      	ldr	r1, [r7, #20]
 8001e8a:	4837      	ldr	r0, [pc, #220]	@ (8001f68 <play_one_track+0x13c>)
 8001e8c:	f000 fbba 	bl	8002604 <myprintf>
        return -1;
 8001e90:	23ff      	movs	r3, #255	@ 0xff
 8001e92:	e061      	b.n	8001f58 <play_one_track+0x12c>
    }

    trk_len = (buf[4] << 24) | (buf[5] << 16) | (buf[6] << 8) | buf[7]; //  track length
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	3304      	adds	r3, #4
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	061a      	lsls	r2, r3, #24
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	3305      	adds	r3, #5
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	041b      	lsls	r3, r3, #16
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	3306      	adds	r3, #6
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	021b      	lsls	r3, r3, #8
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	3207      	adds	r2, #7
 8001eb4:	7812      	ldrb	r2, [r2, #0]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]

    free(buf);
 8001eba:	69b8      	ldr	r0, [r7, #24]
 8001ebc:	f009 fb0c 	bl	800b4d8 <free>

    buf = (uint8_t *)malloc(sizeof(uint8_t) * trk_len);
 8001ec0:	6938      	ldr	r0, [r7, #16]
 8001ec2:	f009 fb01 	bl	800b4c8 <malloc>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	61bb      	str	r3, [r7, #24]
    if (!buf)
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d104      	bne.n	8001eda <play_one_track+0xae>
    {
        myprintf("Buffer in parse_midi is null");
 8001ed0:	4826      	ldr	r0, [pc, #152]	@ (8001f6c <play_one_track+0x140>)
 8001ed2:	f000 fb97 	bl	8002604 <myprintf>
        return -1;
 8001ed6:	23ff      	movs	r3, #255	@ 0xff
 8001ed8:	e03e      	b.n	8001f58 <play_one_track+0x12c>
    }

    myprintf("before track header\n");
 8001eda:	4825      	ldr	r0, [pc, #148]	@ (8001f70 <play_one_track+0x144>)
 8001edc:	f000 fb92 	bl	8002604 <myprintf>

    // for debug
    myprintf("Track header: %x\n", trk_hdr);
 8001ee0:	6979      	ldr	r1, [r7, #20]
 8001ee2:	4824      	ldr	r0, [pc, #144]	@ (8001f74 <play_one_track+0x148>)
 8001ee4:	f000 fb8e 	bl	8002604 <myprintf>
    myprintf("Track length: %x\n", trk_len);
 8001ee8:	6939      	ldr	r1, [r7, #16]
 8001eea:	4823      	ldr	r0, [pc, #140]	@ (8001f78 <play_one_track+0x14c>)
 8001eec:	f000 fb8a 	bl	8002604 <myprintf>

    do
    {

        delta_time = decode_vlq(fp);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 fb37 	bl	8002564 <decode_vlq>
 8001ef6:	60f8      	str	r0, [r7, #12]

        f_read(fp, &event_type, 1, NULL);
 8001ef8:	f107 010b 	add.w	r1, r7, #11
 8001efc:	2300      	movs	r3, #0
 8001efe:	2201      	movs	r2, #1
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f005 ff06 	bl	8007d12 <f_read>

        myprintf("event type %d\n", event_type);
 8001f06:	7afb      	ldrb	r3, [r7, #11]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	481c      	ldr	r0, [pc, #112]	@ (8001f7c <play_one_track+0x150>)
 8001f0c:	f000 fb7a 	bl	8002604 <myprintf>

        if (event_type == 0xFF)
 8001f10:	7afb      	ldrb	r3, [r7, #11]
 8001f12:	2bff      	cmp	r3, #255	@ 0xff
 8001f14:	d107      	bne.n	8001f26 <play_one_track+0xfa>
        {
            end = meta_event_handler(fp, delta_time, ctrl);
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	68f9      	ldr	r1, [r7, #12]
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff fc7e 	bl	800181c <meta_event_handler>
 8001f20:	4603      	mov	r3, r0
 8001f22:	77fb      	strb	r3, [r7, #31]
 8001f24:	e011      	b.n	8001f4a <play_one_track+0x11e>
        }
        else if ((event_type >= 0xF0) && (event_type != 0xFF))
 8001f26:	7afb      	ldrb	r3, [r7, #11]
 8001f28:	2bef      	cmp	r3, #239	@ 0xef
 8001f2a:	d908      	bls.n	8001f3e <play_one_track+0x112>
 8001f2c:	7afb      	ldrb	r3, [r7, #11]
 8001f2e:	2bff      	cmp	r3, #255	@ 0xff
 8001f30:	d005      	beq.n	8001f3e <play_one_track+0x112>
        {
            myprintf("sysex event called: 0x%x\n", event_type);
 8001f32:	7afb      	ldrb	r3, [r7, #11]
 8001f34:	4619      	mov	r1, r3
 8001f36:	4812      	ldr	r0, [pc, #72]	@ (8001f80 <play_one_track+0x154>)
 8001f38:	f000 fb64 	bl	8002604 <myprintf>
 8001f3c:	e005      	b.n	8001f4a <play_one_track+0x11e>
            // skip_meta_event(fp);
            // sysex_event_handler(fp, delta_time);
        }
        else
        {
            midi_event_handler(fp, delta_time, event_type, ctrl);
 8001f3e:	7afa      	ldrb	r2, [r7, #11]
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	68f9      	ldr	r1, [r7, #12]
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff fbf7 	bl	8001738 <midi_event_handler>
        }

    } while (end != 1);
 8001f4a:	7ffb      	ldrb	r3, [r7, #31]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d1cf      	bne.n	8001ef0 <play_one_track+0xc4>

    free(buf);
 8001f50:	69b8      	ldr	r0, [r7, #24]
 8001f52:	f009 fac1 	bl	800b4d8 <free>

    return 0;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3720      	adds	r7, #32
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	0800d368 	.word	0x0800d368
 8001f64:	4d54726b 	.word	0x4d54726b
 8001f68:	0800d31c 	.word	0x0800d31c
 8001f6c:	0800d388 	.word	0x0800d388
 8001f70:	0800d3a8 	.word	0x0800d3a8
 8001f74:	0800d3c0 	.word	0x0800d3c0
 8001f78:	0800d3d4 	.word	0x0800d3d4
 8001f7c:	0800d3e8 	.word	0x0800d3e8
 8001f80:	0800d3f8 	.word	0x0800d3f8

08001f84 <parse_midi_header>:
 * @param fp FIL pointer to music
 * @param hdr pointer to header structure
 * @return returns 0 on sucess other on failure
 * */
MIDI_header_chunk parse_midi_header(FIL *fp, MIDI_header_chunk hdr)
{
 8001f84:	b082      	sub	sp, #8
 8001f86:	b590      	push	{r4, r7, lr}
 8001f88:	b085      	sub	sp, #20
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	6039      	str	r1, [r7, #0]
 8001f90:	f107 0120 	add.w	r1, r7, #32
 8001f94:	e881 000c 	stmia.w	r1, {r2, r3}

    uint8_t *buf;

    buf = (uint8_t *)malloc(14);
 8001f98:	200e      	movs	r0, #14
 8001f9a:	f009 fa95 	bl	800b4c8 <malloc>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	60fb      	str	r3, [r7, #12]
    if (!buf)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d102      	bne.n	8001fae <parse_midi_header+0x2a>
    {
        myprintf("Buffer in parse_midi is null");
 8001fa8:	484e      	ldr	r0, [pc, #312]	@ (80020e4 <parse_midi_header+0x160>)
 8001faa:	f000 fb2b 	bl	8002604 <myprintf>
    }

    f_read(fp, buf, 14, NULL);
 8001fae:	2300      	movs	r3, #0
 8001fb0:	220e      	movs	r2, #14
 8001fb2:	68f9      	ldr	r1, [r7, #12]
 8001fb4:	6838      	ldr	r0, [r7, #0]
 8001fb6:	f005 feac 	bl	8007d12 <f_read>

    // all big endian
    hdr.MThd = (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	061a      	lsls	r2, r3, #24
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	041b      	lsls	r3, r3, #16
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	3302      	adds	r3, #2
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	021b      	lsls	r3, r3, #8
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	3203      	adds	r2, #3
 8001fd8:	7812      	ldrb	r2, [r2, #0]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	623b      	str	r3, [r7, #32]
    if (hdr.MThd != 0x4D546864)
 8001fde:	6a3b      	ldr	r3, [r7, #32]
 8001fe0:	4a41      	ldr	r2, [pc, #260]	@ (80020e8 <parse_midi_header+0x164>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d004      	beq.n	8001ff0 <parse_midi_header+0x6c>
    {                                                           // string of MThd
        myprintf("Unexpected Header - Recieved: %c\n", hdr.MThd); // return characters for easy read
 8001fe6:	6a3b      	ldr	r3, [r7, #32]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4840      	ldr	r0, [pc, #256]	@ (80020ec <parse_midi_header+0x168>)
 8001fec:	f000 fb0a 	bl	8002604 <myprintf>
    }

    hdr.hdr_len = (buf[4] << 24) | (buf[5] << 16) | (buf[6] << 8) | buf[7];
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	3304      	adds	r3, #4
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	061a      	lsls	r2, r3, #24
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	3305      	adds	r3, #5
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	041b      	lsls	r3, r3, #16
 8002000:	431a      	orrs	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	3306      	adds	r3, #6
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	021b      	lsls	r3, r3, #8
 800200a:	4313      	orrs	r3, r2
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	3207      	adds	r2, #7
 8002010:	7812      	ldrb	r2, [r2, #0]
 8002012:	4313      	orrs	r3, r2
 8002014:	627b      	str	r3, [r7, #36]	@ 0x24
    if (hdr.hdr_len != 0x0006)
 8002016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002018:	2b06      	cmp	r3, #6
 800201a:	d004      	beq.n	8002026 <parse_midi_header+0xa2>
    { // always 6 bytes
        myprintf("Unexpected Header Length - Recieved: %u\n", hdr.hdr_len);
 800201c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201e:	4619      	mov	r1, r3
 8002020:	4833      	ldr	r0, [pc, #204]	@ (80020f0 <parse_midi_header+0x16c>)
 8002022:	f000 faef 	bl	8002604 <myprintf>
    }

    hdr.format = (buf[8] << 8) | buf[9];
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	3308      	adds	r3, #8
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	021b      	lsls	r3, r3, #8
 800202e:	b21a      	sxth	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	3309      	adds	r3, #9
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	b21b      	sxth	r3, r3
 8002038:	4313      	orrs	r3, r2
 800203a:	b21b      	sxth	r3, r3
 800203c:	b29b      	uxth	r3, r3
 800203e:	853b      	strh	r3, [r7, #40]	@ 0x28
    if (hdr.format != 0x00 && hdr.format != 0x01 && hdr.format != 0x02)
 8002040:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00a      	beq.n	800205c <parse_midi_header+0xd8>
 8002046:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002048:	2b01      	cmp	r3, #1
 800204a:	d007      	beq.n	800205c <parse_midi_header+0xd8>
 800204c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800204e:	2b02      	cmp	r3, #2
 8002050:	d004      	beq.n	800205c <parse_midi_header+0xd8>
    {
        myprintf("Unexpected Header Format - Recieved: %u\n", hdr.format);
 8002052:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002054:	4619      	mov	r1, r3
 8002056:	4827      	ldr	r0, [pc, #156]	@ (80020f4 <parse_midi_header+0x170>)
 8002058:	f000 fad4 	bl	8002604 <myprintf>
    }

    hdr.num_tracks = (buf[10] << 8) | buf[11];
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	330a      	adds	r3, #10
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	021b      	lsls	r3, r3, #8
 8002064:	b21a      	sxth	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	330b      	adds	r3, #11
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	b21b      	sxth	r3, r3
 800206e:	4313      	orrs	r3, r2
 8002070:	b21b      	sxth	r3, r3
 8002072:	b29b      	uxth	r3, r3
 8002074:	857b      	strh	r3, [r7, #42]	@ 0x2a
    hdr.division = (buf[12] << 8) | buf[13];
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	330c      	adds	r3, #12
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	021b      	lsls	r3, r3, #8
 800207e:	b21a      	sxth	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	330d      	adds	r3, #13
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	b21b      	sxth	r3, r3
 8002088:	4313      	orrs	r3, r2
 800208a:	b21b      	sxth	r3, r3
 800208c:	b29b      	uxth	r3, r3
 800208e:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    // to check all header info
    myprintf("Header string is: %x\n", hdr.MThd);
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	4619      	mov	r1, r3
 8002094:	4818      	ldr	r0, [pc, #96]	@ (80020f8 <parse_midi_header+0x174>)
 8002096:	f000 fab5 	bl	8002604 <myprintf>
    myprintf("Length is: %x\n", hdr.hdr_len);
 800209a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209c:	4619      	mov	r1, r3
 800209e:	4817      	ldr	r0, [pc, #92]	@ (80020fc <parse_midi_header+0x178>)
 80020a0:	f000 fab0 	bl	8002604 <myprintf>
    myprintf("Format is:%x \n", hdr.format);
 80020a4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80020a6:	4619      	mov	r1, r3
 80020a8:	4815      	ldr	r0, [pc, #84]	@ (8002100 <parse_midi_header+0x17c>)
 80020aa:	f000 faab 	bl	8002604 <myprintf>
    myprintf("Number of tracks is: %x\n", hdr.num_tracks);
 80020ae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80020b0:	4619      	mov	r1, r3
 80020b2:	4814      	ldr	r0, [pc, #80]	@ (8002104 <parse_midi_header+0x180>)
 80020b4:	f000 faa6 	bl	8002604 <myprintf>
    myprintf("Division is: %x\n", hdr.division);
 80020b8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80020ba:	4619      	mov	r1, r3
 80020bc:	4812      	ldr	r0, [pc, #72]	@ (8002108 <parse_midi_header+0x184>)
 80020be:	f000 faa1 	bl	8002604 <myprintf>

    free(buf);
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f009 fa08 	bl	800b4d8 <free>

    return hdr;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	461c      	mov	r4, r3
 80020cc:	f107 0320 	add.w	r3, r7, #32
 80020d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80020e0:	b002      	add	sp, #8
 80020e2:	4770      	bx	lr
 80020e4:	0800d388 	.word	0x0800d388
 80020e8:	4d546864 	.word	0x4d546864
 80020ec:	0800d414 	.word	0x0800d414
 80020f0:	0800d438 	.word	0x0800d438
 80020f4:	0800d464 	.word	0x0800d464
 80020f8:	0800d490 	.word	0x0800d490
 80020fc:	0800d4a8 	.word	0x0800d4a8
 8002100:	0800d4b8 	.word	0x0800d4b8
 8002104:	0800d4c8 	.word	0x0800d4c8
 8002108:	0800d4e4 	.word	0x0800d4e4

0800210c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	607b      	str	r3, [r7, #4]
 8002116:	4b12      	ldr	r3, [pc, #72]	@ (8002160 <HAL_MspInit+0x54>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211a:	4a11      	ldr	r2, [pc, #68]	@ (8002160 <HAL_MspInit+0x54>)
 800211c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002120:	6453      	str	r3, [r2, #68]	@ 0x44
 8002122:	4b0f      	ldr	r3, [pc, #60]	@ (8002160 <HAL_MspInit+0x54>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002126:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800212a:	607b      	str	r3, [r7, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	603b      	str	r3, [r7, #0]
 8002132:	4b0b      	ldr	r3, [pc, #44]	@ (8002160 <HAL_MspInit+0x54>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002136:	4a0a      	ldr	r2, [pc, #40]	@ (8002160 <HAL_MspInit+0x54>)
 8002138:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800213c:	6413      	str	r3, [r2, #64]	@ 0x40
 800213e:	4b08      	ldr	r3, [pc, #32]	@ (8002160 <HAL_MspInit+0x54>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002142:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002146:	603b      	str	r3, [r7, #0]
 8002148:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800214a:	2200      	movs	r2, #0
 800214c:	210f      	movs	r1, #15
 800214e:	f06f 0001 	mvn.w	r0, #1
 8002152:	f000 fbb3 	bl	80028bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40023800 	.word	0x40023800

08002164 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08a      	sub	sp, #40	@ 0x28
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a19      	ldr	r2, [pc, #100]	@ (80021e8 <HAL_SPI_MspInit+0x84>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d12b      	bne.n	80021de <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	4b18      	ldr	r3, [pc, #96]	@ (80021ec <HAL_SPI_MspInit+0x88>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800218e:	4a17      	ldr	r2, [pc, #92]	@ (80021ec <HAL_SPI_MspInit+0x88>)
 8002190:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002194:	6453      	str	r3, [r2, #68]	@ 0x44
 8002196:	4b15      	ldr	r3, [pc, #84]	@ (80021ec <HAL_SPI_MspInit+0x88>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	4b11      	ldr	r3, [pc, #68]	@ (80021ec <HAL_SPI_MspInit+0x88>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021aa:	4a10      	ldr	r2, [pc, #64]	@ (80021ec <HAL_SPI_MspInit+0x88>)
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021b2:	4b0e      	ldr	r3, [pc, #56]	@ (80021ec <HAL_SPI_MspInit+0x88>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80021be:	23e0      	movs	r3, #224	@ 0xe0
 80021c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c2:	2302      	movs	r3, #2
 80021c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ca:	2303      	movs	r3, #3
 80021cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021ce:	2305      	movs	r3, #5
 80021d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d2:	f107 0314 	add.w	r3, r7, #20
 80021d6:	4619      	mov	r1, r3
 80021d8:	4805      	ldr	r0, [pc, #20]	@ (80021f0 <HAL_SPI_MspInit+0x8c>)
 80021da:	f000 fb99 	bl	8002910 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80021de:	bf00      	nop
 80021e0:	3728      	adds	r7, #40	@ 0x28
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40013000 	.word	0x40013000
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40020000 	.word	0x40020000

080021f4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a0b      	ldr	r2, [pc, #44]	@ (8002230 <HAL_TIM_PWM_MspInit+0x3c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d10d      	bne.n	8002222 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	4b0a      	ldr	r3, [pc, #40]	@ (8002234 <HAL_TIM_PWM_MspInit+0x40>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220e:	4a09      	ldr	r2, [pc, #36]	@ (8002234 <HAL_TIM_PWM_MspInit+0x40>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	6453      	str	r3, [r2, #68]	@ 0x44
 8002216:	4b07      	ldr	r3, [pc, #28]	@ (8002234 <HAL_TIM_PWM_MspInit+0x40>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002222:	bf00      	nop
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40010000 	.word	0x40010000
 8002234:	40023800 	.word	0x40023800

08002238 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b088      	sub	sp, #32
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	f107 030c 	add.w	r3, r7, #12
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a12      	ldr	r2, [pc, #72]	@ (80022a0 <HAL_TIM_MspPostInit+0x68>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d11e      	bne.n	8002298 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	4b11      	ldr	r3, [pc, #68]	@ (80022a4 <HAL_TIM_MspPostInit+0x6c>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	4a10      	ldr	r2, [pc, #64]	@ (80022a4 <HAL_TIM_MspPostInit+0x6c>)
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	6313      	str	r3, [r2, #48]	@ 0x30
 800226a:	4b0e      	ldr	r3, [pc, #56]	@ (80022a4 <HAL_TIM_MspPostInit+0x6c>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	60bb      	str	r3, [r7, #8]
 8002274:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002276:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800227a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227c:	2302      	movs	r3, #2
 800227e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002284:	2300      	movs	r3, #0
 8002286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002288:	2301      	movs	r3, #1
 800228a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228c:	f107 030c 	add.w	r3, r7, #12
 8002290:	4619      	mov	r1, r3
 8002292:	4805      	ldr	r0, [pc, #20]	@ (80022a8 <HAL_TIM_MspPostInit+0x70>)
 8002294:	f000 fb3c 	bl	8002910 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002298:	bf00      	nop
 800229a:	3720      	adds	r7, #32
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40010000 	.word	0x40010000
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40020000 	.word	0x40020000

080022ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08a      	sub	sp, #40	@ 0x28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 0314 	add.w	r3, r7, #20
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a19      	ldr	r2, [pc, #100]	@ (8002330 <HAL_UART_MspInit+0x84>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d12b      	bne.n	8002326 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	4b18      	ldr	r3, [pc, #96]	@ (8002334 <HAL_UART_MspInit+0x88>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d6:	4a17      	ldr	r2, [pc, #92]	@ (8002334 <HAL_UART_MspInit+0x88>)
 80022d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80022de:	4b15      	ldr	r3, [pc, #84]	@ (8002334 <HAL_UART_MspInit+0x88>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	4b11      	ldr	r3, [pc, #68]	@ (8002334 <HAL_UART_MspInit+0x88>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f2:	4a10      	ldr	r2, [pc, #64]	@ (8002334 <HAL_UART_MspInit+0x88>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002334 <HAL_UART_MspInit+0x88>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002306:	230c      	movs	r3, #12
 8002308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230a:	2302      	movs	r3, #2
 800230c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002312:	2303      	movs	r3, #3
 8002314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002316:	2307      	movs	r3, #7
 8002318:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231a:	f107 0314 	add.w	r3, r7, #20
 800231e:	4619      	mov	r1, r3
 8002320:	4805      	ldr	r0, [pc, #20]	@ (8002338 <HAL_UART_MspInit+0x8c>)
 8002322:	f000 faf5 	bl	8002910 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002326:	bf00      	nop
 8002328:	3728      	adds	r7, #40	@ 0x28
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40004400 	.word	0x40004400
 8002334:	40023800 	.word	0x40023800
 8002338:	40020000 	.word	0x40020000

0800233c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08e      	sub	sp, #56	@ 0x38
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002348:	2300      	movs	r3, #0
 800234a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800234c:	2300      	movs	r3, #0
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	4b33      	ldr	r3, [pc, #204]	@ (8002420 <HAL_InitTick+0xe4>)
 8002352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002354:	4a32      	ldr	r2, [pc, #200]	@ (8002420 <HAL_InitTick+0xe4>)
 8002356:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800235a:	6413      	str	r3, [r2, #64]	@ 0x40
 800235c:	4b30      	ldr	r3, [pc, #192]	@ (8002420 <HAL_InitTick+0xe4>)
 800235e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002368:	f107 0210 	add.w	r2, r7, #16
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	4611      	mov	r1, r2
 8002372:	4618      	mov	r0, r3
 8002374:	f000 fd94 	bl	8002ea0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002378:	6a3b      	ldr	r3, [r7, #32]
 800237a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800237c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800237e:	2b00      	cmp	r3, #0
 8002380:	d103      	bne.n	800238a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002382:	f000 fd65 	bl	8002e50 <HAL_RCC_GetPCLK1Freq>
 8002386:	6378      	str	r0, [r7, #52]	@ 0x34
 8002388:	e004      	b.n	8002394 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800238a:	f000 fd61 	bl	8002e50 <HAL_RCC_GetPCLK1Freq>
 800238e:	4603      	mov	r3, r0
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002396:	4a23      	ldr	r2, [pc, #140]	@ (8002424 <HAL_InitTick+0xe8>)
 8002398:	fba2 2303 	umull	r2, r3, r2, r3
 800239c:	0c9b      	lsrs	r3, r3, #18
 800239e:	3b01      	subs	r3, #1
 80023a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80023a2:	4b21      	ldr	r3, [pc, #132]	@ (8002428 <HAL_InitTick+0xec>)
 80023a4:	4a21      	ldr	r2, [pc, #132]	@ (800242c <HAL_InitTick+0xf0>)
 80023a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80023a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002428 <HAL_InitTick+0xec>)
 80023aa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80023ae:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80023b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002428 <HAL_InitTick+0xec>)
 80023b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b4:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80023b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002428 <HAL_InitTick+0xec>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002428 <HAL_InitTick+0xec>)
 80023be:	2200      	movs	r2, #0
 80023c0:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023c2:	4b19      	ldr	r3, [pc, #100]	@ (8002428 <HAL_InitTick+0xec>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80023c8:	4817      	ldr	r0, [pc, #92]	@ (8002428 <HAL_InitTick+0xec>)
 80023ca:	f001 fe35 	bl	8004038 <HAL_TIM_Base_Init>
 80023ce:	4603      	mov	r3, r0
 80023d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80023d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d11b      	bne.n	8002414 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 80023dc:	4812      	ldr	r0, [pc, #72]	@ (8002428 <HAL_InitTick+0xec>)
 80023de:	f001 fe85 	bl	80040ec <HAL_TIM_Base_Start_IT>
 80023e2:	4603      	mov	r3, r0
 80023e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80023e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d111      	bne.n	8002414 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80023f0:	202d      	movs	r0, #45	@ 0x2d
 80023f2:	f000 fa7f 	bl	80028f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b0f      	cmp	r3, #15
 80023fa:	d808      	bhi.n	800240e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 80023fc:	2200      	movs	r2, #0
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	202d      	movs	r0, #45	@ 0x2d
 8002402:	f000 fa5b 	bl	80028bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002406:	4a0a      	ldr	r2, [pc, #40]	@ (8002430 <HAL_InitTick+0xf4>)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	e002      	b.n	8002414 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002414:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002418:	4618      	mov	r0, r3
 800241a:	3738      	adds	r7, #56	@ 0x38
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40023800 	.word	0x40023800
 8002424:	431bde83 	.word	0x431bde83
 8002428:	200003f0 	.word	0x200003f0
 800242c:	40002000 	.word	0x40002000
 8002430:	20000004 	.word	0x20000004

08002434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002438:	bf00      	nop
 800243a:	e7fd      	b.n	8002438 <NMI_Handler+0x4>

0800243c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	myprintf("Hardfault!!");
 8002440:	4802      	ldr	r0, [pc, #8]	@ (800244c <HardFault_Handler+0x10>)
 8002442:	f000 f8df 	bl	8002604 <myprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002446:	bf00      	nop
 8002448:	e7fd      	b.n	8002446 <HardFault_Handler+0xa>
 800244a:	bf00      	nop
 800244c:	0800d4f8 	.word	0x0800d4f8

08002450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002454:	bf00      	nop
 8002456:	e7fd      	b.n	8002454 <MemManage_Handler+0x4>

08002458 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800245c:	bf00      	nop
 800245e:	e7fd      	b.n	800245c <BusFault_Handler+0x4>

08002460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002464:	bf00      	nop
 8002466:	e7fd      	b.n	8002464 <UsageFault_Handler+0x4>

08002468 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
	...

08002478 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800247c:	4802      	ldr	r0, [pc, #8]	@ (8002488 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800247e:	f001 fef4 	bl	800426a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	200003f0 	.word	0x200003f0

0800248c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  return 1;
 8002490:	2301      	movs	r3, #1
}
 8002492:	4618      	mov	r0, r3
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <_kill>:

int _kill(int pid, int sig)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024a6:	f009 f963 	bl	800b770 <__errno>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2216      	movs	r2, #22
 80024ae:	601a      	str	r2, [r3, #0]
  return -1;
 80024b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <_exit>:

void _exit (int status)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024c4:	f04f 31ff 	mov.w	r1, #4294967295
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7ff ffe7 	bl	800249c <_kill>
  while (1) {}    /* Make sure we hang here */
 80024ce:	bf00      	nop
 80024d0:	e7fd      	b.n	80024ce <_exit+0x12>
	...

080024d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024dc:	4a14      	ldr	r2, [pc, #80]	@ (8002530 <_sbrk+0x5c>)
 80024de:	4b15      	ldr	r3, [pc, #84]	@ (8002534 <_sbrk+0x60>)
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024e8:	4b13      	ldr	r3, [pc, #76]	@ (8002538 <_sbrk+0x64>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d102      	bne.n	80024f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024f0:	4b11      	ldr	r3, [pc, #68]	@ (8002538 <_sbrk+0x64>)
 80024f2:	4a12      	ldr	r2, [pc, #72]	@ (800253c <_sbrk+0x68>)
 80024f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024f6:	4b10      	ldr	r3, [pc, #64]	@ (8002538 <_sbrk+0x64>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4413      	add	r3, r2
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	429a      	cmp	r2, r3
 8002502:	d207      	bcs.n	8002514 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002504:	f009 f934 	bl	800b770 <__errno>
 8002508:	4603      	mov	r3, r0
 800250a:	220c      	movs	r2, #12
 800250c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800250e:	f04f 33ff 	mov.w	r3, #4294967295
 8002512:	e009      	b.n	8002528 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002514:	4b08      	ldr	r3, [pc, #32]	@ (8002538 <_sbrk+0x64>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800251a:	4b07      	ldr	r3, [pc, #28]	@ (8002538 <_sbrk+0x64>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4413      	add	r3, r2
 8002522:	4a05      	ldr	r2, [pc, #20]	@ (8002538 <_sbrk+0x64>)
 8002524:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002526:	68fb      	ldr	r3, [r7, #12]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20020000 	.word	0x20020000
 8002534:	00000400 	.word	0x00000400
 8002538:	20000438 	.word	0x20000438
 800253c:	20004468 	.word	0x20004468

08002540 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002544:	4b06      	ldr	r3, [pc, #24]	@ (8002560 <SystemInit+0x20>)
 8002546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800254a:	4a05      	ldr	r2, [pc, #20]	@ (8002560 <SystemInit+0x20>)
 800254c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002550:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	e000ed00 	.word	0xe000ed00

08002564 <decode_vlq>:
/**
 *  @brief Processes variable length quantity (VLQ) values from a file pointer 
 * @param fp File pointer to midi file
 * @param vlq_value decoded vlq value*/
uint32_t decode_vlq(FIL *fp)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
     * each byte containing 7 bits of data and an 8th bit(MSB) as a continuation flag. 
     * if the bit is 1 the number continues into the next byte
     * if the bit is 0 the number does not continue
     *  */
    uint8_t byte;
    uint32_t vlq_value = 0;
 800256c:	2300      	movs	r3, #0
 800256e:	60fb      	str	r3, [r7, #12]

    do
    {
        f_read(fp, &byte, 1, NULL);
 8002570:	f107 010b 	add.w	r1, r7, #11
 8002574:	2300      	movs	r3, #0
 8002576:	2201      	movs	r2, #1
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f005 fbca 	bl	8007d12 <f_read>
        vlq_value = (vlq_value << 7) | (byte & 0x7F); // ignores msb for read byte and shifts over 7
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	01da      	lsls	r2, r3, #7
 8002582:	7afb      	ldrb	r3, [r7, #11]
 8002584:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002588:	4313      	orrs	r3, r2
 800258a:	60fb      	str	r3, [r7, #12]
    } while (byte & 0x80);
 800258c:	7afb      	ldrb	r3, [r7, #11]
 800258e:	b25b      	sxtb	r3, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	dbed      	blt.n	8002570 <decode_vlq+0xc>

    return vlq_value;
 8002594:	68fb      	ldr	r3, [r7, #12]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <delta_time_to_ms>:
/**
 *  @brief takes the delta time value for the given event and converts it to ms
 * @param delta_time delta time in ticks of event 
 * @param ctrl pointer to system timing info*/
uint16_t delta_time_to_ms(uint8_t delta_time, MIDI_controller *ctrl)
{
 800259e:	b480      	push	{r7}
 80025a0:	b085      	sub	sp, #20
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	4603      	mov	r3, r0
 80025a6:	6039      	str	r1, [r7, #0]
 80025a8:	71fb      	strb	r3, [r7, #7]
    float ms = 0;
 80025aa:	f04f 0300 	mov.w	r3, #0
 80025ae:	60fb      	str	r3, [r7, #12]
    // printf("delta time: %d\n", delta_time);
    // printf("tick per q note: %d\n", ctrl->tick_per_q_note);
    // printf("tempo: %d\n", ctrl->tempo);

    // needs to be a float to do the division or else returns 0
    ms = ((float)delta_time / ctrl->tick_per_q_note) * (60000 / ctrl->tempo);
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	ee07 3a90 	vmov	s15, r3
 80025b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	889b      	ldrh	r3, [r3, #4]
 80025be:	ee07 3a90 	vmov	s15, r3
 80025c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	799b      	ldrb	r3, [r3, #6]
 80025ce:	461a      	mov	r2, r3
 80025d0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80025d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80025d8:	ee07 3a90 	vmov	s15, r3
 80025dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025e4:	edc7 7a03 	vstr	s15, [r7, #12]

    return ms;
 80025e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80025ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025f0:	ee17 3a90 	vmov	r3, s15
 80025f4:	b29b      	uxth	r3, r3
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
	...

08002604 <myprintf>:

void myprintf(const char *fmt, ...) {
 8002604:	b40f      	push	{r0, r1, r2, r3}
 8002606:	b580      	push	{r7, lr}
 8002608:	b084      	sub	sp, #16
 800260a:	af00      	add	r7, sp, #0

	osStatus res = osMutexWait(USART_lockHandle, 1000);
 800260c:	4b16      	ldr	r3, [pc, #88]	@ (8002668 <myprintf+0x64>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002614:	4618      	mov	r0, r3
 8002616:	f006 f88d 	bl	8008734 <osMutexWait>
 800261a:	60f8      	str	r0, [r7, #12]

	if(res == osOK){
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d116      	bne.n	8002650 <myprintf+0x4c>
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8002622:	f107 031c 	add.w	r3, r7, #28
 8002626:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002630:	480e      	ldr	r0, [pc, #56]	@ (800266c <myprintf+0x68>)
 8002632:	f009 f833 	bl	800b69c <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8002636:	480d      	ldr	r0, [pc, #52]	@ (800266c <myprintf+0x68>)
 8002638:	f7fd fdea 	bl	8000210 <strlen>
 800263c:	4603      	mov	r3, r0
 800263e:	60bb      	str	r3, [r7, #8]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	b29a      	uxth	r2, r3
 8002644:	f04f 33ff 	mov.w	r3, #4294967295
 8002648:	4908      	ldr	r1, [pc, #32]	@ (800266c <myprintf+0x68>)
 800264a:	4809      	ldr	r0, [pc, #36]	@ (8002670 <myprintf+0x6c>)
 800264c:	f002 fb76 	bl	8004d3c <HAL_UART_Transmit>
	}

	osMutexRelease(USART_lockHandle);
 8002650:	4b05      	ldr	r3, [pc, #20]	@ (8002668 <myprintf+0x64>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f006 f8bb 	bl	80087d0 <osMutexRelease>

}
 800265a:	bf00      	nop
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002664:	b004      	add	sp, #16
 8002666:	4770      	bx	lr
 8002668:	200003ec 	.word	0x200003ec
 800266c:	2000043c 	.word	0x2000043c
 8002670:	20000398 	.word	0x20000398

08002674 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002674:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026ac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002678:	f7ff ff62 	bl	8002540 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800267c:	480c      	ldr	r0, [pc, #48]	@ (80026b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800267e:	490d      	ldr	r1, [pc, #52]	@ (80026b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002680:	4a0d      	ldr	r2, [pc, #52]	@ (80026b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002684:	e002      	b.n	800268c <LoopCopyDataInit>

08002686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800268a:	3304      	adds	r3, #4

0800268c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800268c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800268e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002690:	d3f9      	bcc.n	8002686 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002692:	4a0a      	ldr	r2, [pc, #40]	@ (80026bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002694:	4c0a      	ldr	r4, [pc, #40]	@ (80026c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002698:	e001      	b.n	800269e <LoopFillZerobss>

0800269a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800269a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800269c:	3204      	adds	r2, #4

0800269e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800269e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026a0:	d3fb      	bcc.n	800269a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80026a2:	f009 f86b 	bl	800b77c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026a6:	f7fe fc59 	bl	8000f5c <main>
  bx  lr    
 80026aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026b4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80026b8:	0800d660 	.word	0x0800d660
  ldr r2, =_sbss
 80026bc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80026c0:	20004464 	.word	0x20004464

080026c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026c4:	e7fe      	b.n	80026c4 <ADC_IRQHandler>
	...

080026c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002708 <HAL_Init+0x40>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002708 <HAL_Init+0x40>)
 80026d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002708 <HAL_Init+0x40>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002708 <HAL_Init+0x40>)
 80026de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026e4:	4b08      	ldr	r3, [pc, #32]	@ (8002708 <HAL_Init+0x40>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a07      	ldr	r2, [pc, #28]	@ (8002708 <HAL_Init+0x40>)
 80026ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026f0:	2003      	movs	r0, #3
 80026f2:	f000 f8d8 	bl	80028a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026f6:	200f      	movs	r0, #15
 80026f8:	f7ff fe20 	bl	800233c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026fc:	f7ff fd06 	bl	800210c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40023c00 	.word	0x40023c00

0800270c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002710:	4b06      	ldr	r3, [pc, #24]	@ (800272c <HAL_IncTick+0x20>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	461a      	mov	r2, r3
 8002716:	4b06      	ldr	r3, [pc, #24]	@ (8002730 <HAL_IncTick+0x24>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4413      	add	r3, r2
 800271c:	4a04      	ldr	r2, [pc, #16]	@ (8002730 <HAL_IncTick+0x24>)
 800271e:	6013      	str	r3, [r2, #0]
}
 8002720:	bf00      	nop
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	20000008 	.word	0x20000008
 8002730:	2000053c 	.word	0x2000053c

08002734 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return uwTick;
 8002738:	4b03      	ldr	r3, [pc, #12]	@ (8002748 <HAL_GetTick+0x14>)
 800273a:	681b      	ldr	r3, [r3, #0]
}
 800273c:	4618      	mov	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	2000053c 	.word	0x2000053c

0800274c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800275c:	4b0c      	ldr	r3, [pc, #48]	@ (8002790 <__NVIC_SetPriorityGrouping+0x44>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002768:	4013      	ands	r3, r2
 800276a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002774:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002778:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800277c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800277e:	4a04      	ldr	r2, [pc, #16]	@ (8002790 <__NVIC_SetPriorityGrouping+0x44>)
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	60d3      	str	r3, [r2, #12]
}
 8002784:	bf00      	nop
 8002786:	3714      	adds	r7, #20
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	e000ed00 	.word	0xe000ed00

08002794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002798:	4b04      	ldr	r3, [pc, #16]	@ (80027ac <__NVIC_GetPriorityGrouping+0x18>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	0a1b      	lsrs	r3, r3, #8
 800279e:	f003 0307 	and.w	r3, r3, #7
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	e000ed00 	.word	0xe000ed00

080027b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	db0b      	blt.n	80027da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	f003 021f 	and.w	r2, r3, #31
 80027c8:	4907      	ldr	r1, [pc, #28]	@ (80027e8 <__NVIC_EnableIRQ+0x38>)
 80027ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ce:	095b      	lsrs	r3, r3, #5
 80027d0:	2001      	movs	r0, #1
 80027d2:	fa00 f202 	lsl.w	r2, r0, r2
 80027d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	e000e100 	.word	0xe000e100

080027ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	6039      	str	r1, [r7, #0]
 80027f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	db0a      	blt.n	8002816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	b2da      	uxtb	r2, r3
 8002804:	490c      	ldr	r1, [pc, #48]	@ (8002838 <__NVIC_SetPriority+0x4c>)
 8002806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280a:	0112      	lsls	r2, r2, #4
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	440b      	add	r3, r1
 8002810:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002814:	e00a      	b.n	800282c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	b2da      	uxtb	r2, r3
 800281a:	4908      	ldr	r1, [pc, #32]	@ (800283c <__NVIC_SetPriority+0x50>)
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	3b04      	subs	r3, #4
 8002824:	0112      	lsls	r2, r2, #4
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	440b      	add	r3, r1
 800282a:	761a      	strb	r2, [r3, #24]
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	e000e100 	.word	0xe000e100
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002840:	b480      	push	{r7}
 8002842:	b089      	sub	sp, #36	@ 0x24
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	f1c3 0307 	rsb	r3, r3, #7
 800285a:	2b04      	cmp	r3, #4
 800285c:	bf28      	it	cs
 800285e:	2304      	movcs	r3, #4
 8002860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	3304      	adds	r3, #4
 8002866:	2b06      	cmp	r3, #6
 8002868:	d902      	bls.n	8002870 <NVIC_EncodePriority+0x30>
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	3b03      	subs	r3, #3
 800286e:	e000      	b.n	8002872 <NVIC_EncodePriority+0x32>
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002874:	f04f 32ff 	mov.w	r2, #4294967295
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43da      	mvns	r2, r3
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	401a      	ands	r2, r3
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002888:	f04f 31ff 	mov.w	r1, #4294967295
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	fa01 f303 	lsl.w	r3, r1, r3
 8002892:	43d9      	mvns	r1, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002898:	4313      	orrs	r3, r2
         );
}
 800289a:	4618      	mov	r0, r3
 800289c:	3724      	adds	r7, #36	@ 0x24
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b082      	sub	sp, #8
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff ff4c 	bl	800274c <__NVIC_SetPriorityGrouping>
}
 80028b4:	bf00      	nop
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
 80028c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028ce:	f7ff ff61 	bl	8002794 <__NVIC_GetPriorityGrouping>
 80028d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	68b9      	ldr	r1, [r7, #8]
 80028d8:	6978      	ldr	r0, [r7, #20]
 80028da:	f7ff ffb1 	bl	8002840 <NVIC_EncodePriority>
 80028de:	4602      	mov	r2, r0
 80028e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028e4:	4611      	mov	r1, r2
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff ff80 	bl	80027ec <__NVIC_SetPriority>
}
 80028ec:	bf00      	nop
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff ff54 	bl	80027b0 <__NVIC_EnableIRQ>
}
 8002908:	bf00      	nop
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002910:	b480      	push	{r7}
 8002912:	b089      	sub	sp, #36	@ 0x24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800291e:	2300      	movs	r3, #0
 8002920:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002922:	2300      	movs	r3, #0
 8002924:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002926:	2300      	movs	r3, #0
 8002928:	61fb      	str	r3, [r7, #28]
 800292a:	e165      	b.n	8002bf8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800292c:	2201      	movs	r2, #1
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	4013      	ands	r3, r2
 800293e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	429a      	cmp	r2, r3
 8002946:	f040 8154 	bne.w	8002bf2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	2b01      	cmp	r3, #1
 8002954:	d005      	beq.n	8002962 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800295e:	2b02      	cmp	r3, #2
 8002960:	d130      	bne.n	80029c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	2203      	movs	r2, #3
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43db      	mvns	r3, r3
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	4013      	ands	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4313      	orrs	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002998:	2201      	movs	r2, #1
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	43db      	mvns	r3, r3
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4013      	ands	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	091b      	lsrs	r3, r3, #4
 80029ae:	f003 0201 	and.w	r2, r3, #1
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 0303 	and.w	r3, r3, #3
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	d017      	beq.n	8002a00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	2203      	movs	r2, #3
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	43db      	mvns	r3, r3
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4013      	ands	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 0303 	and.w	r3, r3, #3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d123      	bne.n	8002a54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	08da      	lsrs	r2, r3, #3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3208      	adds	r2, #8
 8002a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	220f      	movs	r2, #15
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	691a      	ldr	r2, [r3, #16]
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	08da      	lsrs	r2, r3, #3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3208      	adds	r2, #8
 8002a4e:	69b9      	ldr	r1, [r7, #24]
 8002a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	2203      	movs	r2, #3
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 0203 	and.w	r2, r3, #3
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 80ae 	beq.w	8002bf2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	4b5d      	ldr	r3, [pc, #372]	@ (8002c10 <HAL_GPIO_Init+0x300>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9e:	4a5c      	ldr	r2, [pc, #368]	@ (8002c10 <HAL_GPIO_Init+0x300>)
 8002aa0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002aa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002aa6:	4b5a      	ldr	r3, [pc, #360]	@ (8002c10 <HAL_GPIO_Init+0x300>)
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ab2:	4a58      	ldr	r2, [pc, #352]	@ (8002c14 <HAL_GPIO_Init+0x304>)
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	089b      	lsrs	r3, r3, #2
 8002ab8:	3302      	adds	r3, #2
 8002aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	220f      	movs	r2, #15
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a4f      	ldr	r2, [pc, #316]	@ (8002c18 <HAL_GPIO_Init+0x308>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d025      	beq.n	8002b2a <HAL_GPIO_Init+0x21a>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a4e      	ldr	r2, [pc, #312]	@ (8002c1c <HAL_GPIO_Init+0x30c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d01f      	beq.n	8002b26 <HAL_GPIO_Init+0x216>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a4d      	ldr	r2, [pc, #308]	@ (8002c20 <HAL_GPIO_Init+0x310>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d019      	beq.n	8002b22 <HAL_GPIO_Init+0x212>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a4c      	ldr	r2, [pc, #304]	@ (8002c24 <HAL_GPIO_Init+0x314>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d013      	beq.n	8002b1e <HAL_GPIO_Init+0x20e>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a4b      	ldr	r2, [pc, #300]	@ (8002c28 <HAL_GPIO_Init+0x318>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d00d      	beq.n	8002b1a <HAL_GPIO_Init+0x20a>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a4a      	ldr	r2, [pc, #296]	@ (8002c2c <HAL_GPIO_Init+0x31c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d007      	beq.n	8002b16 <HAL_GPIO_Init+0x206>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a49      	ldr	r2, [pc, #292]	@ (8002c30 <HAL_GPIO_Init+0x320>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d101      	bne.n	8002b12 <HAL_GPIO_Init+0x202>
 8002b0e:	2306      	movs	r3, #6
 8002b10:	e00c      	b.n	8002b2c <HAL_GPIO_Init+0x21c>
 8002b12:	2307      	movs	r3, #7
 8002b14:	e00a      	b.n	8002b2c <HAL_GPIO_Init+0x21c>
 8002b16:	2305      	movs	r3, #5
 8002b18:	e008      	b.n	8002b2c <HAL_GPIO_Init+0x21c>
 8002b1a:	2304      	movs	r3, #4
 8002b1c:	e006      	b.n	8002b2c <HAL_GPIO_Init+0x21c>
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e004      	b.n	8002b2c <HAL_GPIO_Init+0x21c>
 8002b22:	2302      	movs	r3, #2
 8002b24:	e002      	b.n	8002b2c <HAL_GPIO_Init+0x21c>
 8002b26:	2301      	movs	r3, #1
 8002b28:	e000      	b.n	8002b2c <HAL_GPIO_Init+0x21c>
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	69fa      	ldr	r2, [r7, #28]
 8002b2e:	f002 0203 	and.w	r2, r2, #3
 8002b32:	0092      	lsls	r2, r2, #2
 8002b34:	4093      	lsls	r3, r2
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b3c:	4935      	ldr	r1, [pc, #212]	@ (8002c14 <HAL_GPIO_Init+0x304>)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	089b      	lsrs	r3, r3, #2
 8002b42:	3302      	adds	r3, #2
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b4a:	4b3a      	ldr	r3, [pc, #232]	@ (8002c34 <HAL_GPIO_Init+0x324>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	43db      	mvns	r3, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4013      	ands	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b6e:	4a31      	ldr	r2, [pc, #196]	@ (8002c34 <HAL_GPIO_Init+0x324>)
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b74:	4b2f      	ldr	r3, [pc, #188]	@ (8002c34 <HAL_GPIO_Init+0x324>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4013      	ands	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b98:	4a26      	ldr	r2, [pc, #152]	@ (8002c34 <HAL_GPIO_Init+0x324>)
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b9e:	4b25      	ldr	r3, [pc, #148]	@ (8002c34 <HAL_GPIO_Init+0x324>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4013      	ands	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bc2:	4a1c      	ldr	r2, [pc, #112]	@ (8002c34 <HAL_GPIO_Init+0x324>)
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8002c34 <HAL_GPIO_Init+0x324>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bec:	4a11      	ldr	r2, [pc, #68]	@ (8002c34 <HAL_GPIO_Init+0x324>)
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	61fb      	str	r3, [r7, #28]
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	2b0f      	cmp	r3, #15
 8002bfc:	f67f ae96 	bls.w	800292c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c00:	bf00      	nop
 8002c02:	bf00      	nop
 8002c04:	3724      	adds	r7, #36	@ 0x24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	40023800 	.word	0x40023800
 8002c14:	40013800 	.word	0x40013800
 8002c18:	40020000 	.word	0x40020000
 8002c1c:	40020400 	.word	0x40020400
 8002c20:	40020800 	.word	0x40020800
 8002c24:	40020c00 	.word	0x40020c00
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	40021400 	.word	0x40021400
 8002c30:	40021800 	.word	0x40021800
 8002c34:	40013c00 	.word	0x40013c00

08002c38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	807b      	strh	r3, [r7, #2]
 8002c44:	4613      	mov	r3, r2
 8002c46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c48:	787b      	ldrb	r3, [r7, #1]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c4e:	887a      	ldrh	r2, [r7, #2]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c54:	e003      	b.n	8002c5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c56:	887b      	ldrh	r3, [r7, #2]
 8002c58:	041a      	lsls	r2, r3, #16
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	619a      	str	r2, [r3, #24]
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0cc      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c80:	4b68      	ldr	r3, [pc, #416]	@ (8002e24 <HAL_RCC_ClockConfig+0x1b8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 030f 	and.w	r3, r3, #15
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d90c      	bls.n	8002ca8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8e:	4b65      	ldr	r3, [pc, #404]	@ (8002e24 <HAL_RCC_ClockConfig+0x1b8>)
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c96:	4b63      	ldr	r3, [pc, #396]	@ (8002e24 <HAL_RCC_ClockConfig+0x1b8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d001      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0b8      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d020      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cc0:	4b59      	ldr	r3, [pc, #356]	@ (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	4a58      	ldr	r2, [pc, #352]	@ (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002cca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0308 	and.w	r3, r3, #8
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cd8:	4b53      	ldr	r3, [pc, #332]	@ (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	4a52      	ldr	r2, [pc, #328]	@ (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ce2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce4:	4b50      	ldr	r3, [pc, #320]	@ (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	494d      	ldr	r1, [pc, #308]	@ (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d044      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d107      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0a:	4b47      	ldr	r3, [pc, #284]	@ (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d119      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e07f      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d003      	beq.n	8002d2a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d26:	2b03      	cmp	r3, #3
 8002d28:	d107      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d2a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d109      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e06f      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3a:	4b3b      	ldr	r3, [pc, #236]	@ (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e067      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d4a:	4b37      	ldr	r3, [pc, #220]	@ (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f023 0203 	bic.w	r2, r3, #3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	4934      	ldr	r1, [pc, #208]	@ (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d5c:	f7ff fcea 	bl	8002734 <HAL_GetTick>
 8002d60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d62:	e00a      	b.n	8002d7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d64:	f7ff fce6 	bl	8002734 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e04f      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7a:	4b2b      	ldr	r3, [pc, #172]	@ (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 020c 	and.w	r2, r3, #12
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d1eb      	bne.n	8002d64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d8c:	4b25      	ldr	r3, [pc, #148]	@ (8002e24 <HAL_RCC_ClockConfig+0x1b8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 030f 	and.w	r3, r3, #15
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d20c      	bcs.n	8002db4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9a:	4b22      	ldr	r3, [pc, #136]	@ (8002e24 <HAL_RCC_ClockConfig+0x1b8>)
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da2:	4b20      	ldr	r3, [pc, #128]	@ (8002e24 <HAL_RCC_ClockConfig+0x1b8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d001      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e032      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d008      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc0:	4b19      	ldr	r3, [pc, #100]	@ (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	4916      	ldr	r1, [pc, #88]	@ (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d009      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dde:	4b12      	ldr	r3, [pc, #72]	@ (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	490e      	ldr	r1, [pc, #56]	@ (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002df2:	f000 f887 	bl	8002f04 <HAL_RCC_GetSysClockFreq>
 8002df6:	4602      	mov	r2, r0
 8002df8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	091b      	lsrs	r3, r3, #4
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	490a      	ldr	r1, [pc, #40]	@ (8002e2c <HAL_RCC_ClockConfig+0x1c0>)
 8002e04:	5ccb      	ldrb	r3, [r1, r3]
 8002e06:	fa22 f303 	lsr.w	r3, r2, r3
 8002e0a:	4a09      	ldr	r2, [pc, #36]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e0e:	4b09      	ldr	r3, [pc, #36]	@ (8002e34 <HAL_RCC_ClockConfig+0x1c8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff fa92 	bl	800233c <HAL_InitTick>

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40023c00 	.word	0x40023c00
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	0800d550 	.word	0x0800d550
 8002e30:	20000000 	.word	0x20000000
 8002e34:	20000004 	.word	0x20000004

08002e38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e3c:	4b03      	ldr	r3, [pc, #12]	@ (8002e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	20000000 	.word	0x20000000

08002e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e54:	f7ff fff0 	bl	8002e38 <HAL_RCC_GetHCLKFreq>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	4b05      	ldr	r3, [pc, #20]	@ (8002e70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	0a9b      	lsrs	r3, r3, #10
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	4903      	ldr	r1, [pc, #12]	@ (8002e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e66:	5ccb      	ldrb	r3, [r1, r3]
 8002e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40023800 	.word	0x40023800
 8002e74:	0800d560 	.word	0x0800d560

08002e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e7c:	f7ff ffdc 	bl	8002e38 <HAL_RCC_GetHCLKFreq>
 8002e80:	4602      	mov	r2, r0
 8002e82:	4b05      	ldr	r3, [pc, #20]	@ (8002e98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	0b5b      	lsrs	r3, r3, #13
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	4903      	ldr	r1, [pc, #12]	@ (8002e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e8e:	5ccb      	ldrb	r3, [r1, r3]
 8002e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	0800d560 	.word	0x0800d560

08002ea0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	220f      	movs	r2, #15
 8002eae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002eb0:	4b12      	ldr	r3, [pc, #72]	@ (8002efc <HAL_RCC_GetClockConfig+0x5c>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 0203 	and.w	r2, r3, #3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8002efc <HAL_RCC_GetClockConfig+0x5c>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8002efc <HAL_RCC_GetClockConfig+0x5c>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ed4:	4b09      	ldr	r3, [pc, #36]	@ (8002efc <HAL_RCC_GetClockConfig+0x5c>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	08db      	lsrs	r3, r3, #3
 8002eda:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ee2:	4b07      	ldr	r3, [pc, #28]	@ (8002f00 <HAL_RCC_GetClockConfig+0x60>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 020f 	and.w	r2, r3, #15
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	601a      	str	r2, [r3, #0]
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	40023800 	.word	0x40023800
 8002f00:	40023c00 	.word	0x40023c00

08002f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f08:	b0a6      	sub	sp, #152	@ 0x98
 8002f0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f2a:	4bc8      	ldr	r3, [pc, #800]	@ (800324c <HAL_RCC_GetSysClockFreq+0x348>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 030c 	and.w	r3, r3, #12
 8002f32:	2b0c      	cmp	r3, #12
 8002f34:	f200 817e 	bhi.w	8003234 <HAL_RCC_GetSysClockFreq+0x330>
 8002f38:	a201      	add	r2, pc, #4	@ (adr r2, 8002f40 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3e:	bf00      	nop
 8002f40:	08002f75 	.word	0x08002f75
 8002f44:	08003235 	.word	0x08003235
 8002f48:	08003235 	.word	0x08003235
 8002f4c:	08003235 	.word	0x08003235
 8002f50:	08002f7d 	.word	0x08002f7d
 8002f54:	08003235 	.word	0x08003235
 8002f58:	08003235 	.word	0x08003235
 8002f5c:	08003235 	.word	0x08003235
 8002f60:	08002f85 	.word	0x08002f85
 8002f64:	08003235 	.word	0x08003235
 8002f68:	08003235 	.word	0x08003235
 8002f6c:	08003235 	.word	0x08003235
 8002f70:	080030ef 	.word	0x080030ef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f74:	4bb6      	ldr	r3, [pc, #728]	@ (8003250 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002f76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002f7a:	e15f      	b.n	800323c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f7c:	4bb5      	ldr	r3, [pc, #724]	@ (8003254 <HAL_RCC_GetSysClockFreq+0x350>)
 8002f7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002f82:	e15b      	b.n	800323c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f84:	4bb1      	ldr	r3, [pc, #708]	@ (800324c <HAL_RCC_GetSysClockFreq+0x348>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f90:	4bae      	ldr	r3, [pc, #696]	@ (800324c <HAL_RCC_GetSysClockFreq+0x348>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d031      	beq.n	8003000 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f9c:	4bab      	ldr	r3, [pc, #684]	@ (800324c <HAL_RCC_GetSysClockFreq+0x348>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	099b      	lsrs	r3, r3, #6
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002fa6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002fa8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fae:	663b      	str	r3, [r7, #96]	@ 0x60
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	667b      	str	r3, [r7, #100]	@ 0x64
 8002fb4:	4ba7      	ldr	r3, [pc, #668]	@ (8003254 <HAL_RCC_GetSysClockFreq+0x350>)
 8002fb6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002fba:	462a      	mov	r2, r5
 8002fbc:	fb03 f202 	mul.w	r2, r3, r2
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	4621      	mov	r1, r4
 8002fc4:	fb01 f303 	mul.w	r3, r1, r3
 8002fc8:	4413      	add	r3, r2
 8002fca:	4aa2      	ldr	r2, [pc, #648]	@ (8003254 <HAL_RCC_GetSysClockFreq+0x350>)
 8002fcc:	4621      	mov	r1, r4
 8002fce:	fba1 1202 	umull	r1, r2, r1, r2
 8002fd2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002fd4:	460a      	mov	r2, r1
 8002fd6:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002fd8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002fda:	4413      	add	r3, r2
 8002fdc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002fde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002fe6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002fe8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002fec:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002ff0:	f7fd fe22 	bl	8000c38 <__aeabi_uldivmod>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002ffe:	e064      	b.n	80030ca <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003000:	4b92      	ldr	r3, [pc, #584]	@ (800324c <HAL_RCC_GetSysClockFreq+0x348>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	099b      	lsrs	r3, r3, #6
 8003006:	2200      	movs	r2, #0
 8003008:	653b      	str	r3, [r7, #80]	@ 0x50
 800300a:	657a      	str	r2, [r7, #84]	@ 0x54
 800300c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800300e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003012:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003014:	2300      	movs	r3, #0
 8003016:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003018:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800301c:	4622      	mov	r2, r4
 800301e:	462b      	mov	r3, r5
 8003020:	f04f 0000 	mov.w	r0, #0
 8003024:	f04f 0100 	mov.w	r1, #0
 8003028:	0159      	lsls	r1, r3, #5
 800302a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800302e:	0150      	lsls	r0, r2, #5
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4621      	mov	r1, r4
 8003036:	1a51      	subs	r1, r2, r1
 8003038:	6139      	str	r1, [r7, #16]
 800303a:	4629      	mov	r1, r5
 800303c:	eb63 0301 	sbc.w	r3, r3, r1
 8003040:	617b      	str	r3, [r7, #20]
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800304e:	4659      	mov	r1, fp
 8003050:	018b      	lsls	r3, r1, #6
 8003052:	4651      	mov	r1, sl
 8003054:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003058:	4651      	mov	r1, sl
 800305a:	018a      	lsls	r2, r1, #6
 800305c:	4651      	mov	r1, sl
 800305e:	ebb2 0801 	subs.w	r8, r2, r1
 8003062:	4659      	mov	r1, fp
 8003064:	eb63 0901 	sbc.w	r9, r3, r1
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003074:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003078:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800307c:	4690      	mov	r8, r2
 800307e:	4699      	mov	r9, r3
 8003080:	4623      	mov	r3, r4
 8003082:	eb18 0303 	adds.w	r3, r8, r3
 8003086:	60bb      	str	r3, [r7, #8]
 8003088:	462b      	mov	r3, r5
 800308a:	eb49 0303 	adc.w	r3, r9, r3
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800309c:	4629      	mov	r1, r5
 800309e:	028b      	lsls	r3, r1, #10
 80030a0:	4621      	mov	r1, r4
 80030a2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030a6:	4621      	mov	r1, r4
 80030a8:	028a      	lsls	r2, r1, #10
 80030aa:	4610      	mov	r0, r2
 80030ac:	4619      	mov	r1, r3
 80030ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030b2:	2200      	movs	r2, #0
 80030b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80030b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80030b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80030bc:	f7fd fdbc 	bl	8000c38 <__aeabi_uldivmod>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4613      	mov	r3, r2
 80030c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80030ca:	4b60      	ldr	r3, [pc, #384]	@ (800324c <HAL_RCC_GetSysClockFreq+0x348>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	0c1b      	lsrs	r3, r3, #16
 80030d0:	f003 0303 	and.w	r3, r3, #3
 80030d4:	3301      	adds	r3, #1
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80030dc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80030e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80030e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80030ec:	e0a6      	b.n	800323c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030ee:	4b57      	ldr	r3, [pc, #348]	@ (800324c <HAL_RCC_GetSysClockFreq+0x348>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030fa:	4b54      	ldr	r3, [pc, #336]	@ (800324c <HAL_RCC_GetSysClockFreq+0x348>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d02a      	beq.n	800315c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003106:	4b51      	ldr	r3, [pc, #324]	@ (800324c <HAL_RCC_GetSysClockFreq+0x348>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	099b      	lsrs	r3, r3, #6
 800310c:	2200      	movs	r2, #0
 800310e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003110:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003114:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003118:	2100      	movs	r1, #0
 800311a:	4b4e      	ldr	r3, [pc, #312]	@ (8003254 <HAL_RCC_GetSysClockFreq+0x350>)
 800311c:	fb03 f201 	mul.w	r2, r3, r1
 8003120:	2300      	movs	r3, #0
 8003122:	fb00 f303 	mul.w	r3, r0, r3
 8003126:	4413      	add	r3, r2
 8003128:	4a4a      	ldr	r2, [pc, #296]	@ (8003254 <HAL_RCC_GetSysClockFreq+0x350>)
 800312a:	fba0 1202 	umull	r1, r2, r0, r2
 800312e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003130:	460a      	mov	r2, r1
 8003132:	673a      	str	r2, [r7, #112]	@ 0x70
 8003134:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003136:	4413      	add	r3, r2
 8003138:	677b      	str	r3, [r7, #116]	@ 0x74
 800313a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800313e:	2200      	movs	r2, #0
 8003140:	633b      	str	r3, [r7, #48]	@ 0x30
 8003142:	637a      	str	r2, [r7, #52]	@ 0x34
 8003144:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003148:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800314c:	f7fd fd74 	bl	8000c38 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4613      	mov	r3, r2
 8003156:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800315a:	e05b      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800315c:	4b3b      	ldr	r3, [pc, #236]	@ (800324c <HAL_RCC_GetSysClockFreq+0x348>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	099b      	lsrs	r3, r3, #6
 8003162:	2200      	movs	r2, #0
 8003164:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003166:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800316a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800316e:	623b      	str	r3, [r7, #32]
 8003170:	2300      	movs	r3, #0
 8003172:	627b      	str	r3, [r7, #36]	@ 0x24
 8003174:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003178:	4642      	mov	r2, r8
 800317a:	464b      	mov	r3, r9
 800317c:	f04f 0000 	mov.w	r0, #0
 8003180:	f04f 0100 	mov.w	r1, #0
 8003184:	0159      	lsls	r1, r3, #5
 8003186:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800318a:	0150      	lsls	r0, r2, #5
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4641      	mov	r1, r8
 8003192:	ebb2 0a01 	subs.w	sl, r2, r1
 8003196:	4649      	mov	r1, r9
 8003198:	eb63 0b01 	sbc.w	fp, r3, r1
 800319c:	f04f 0200 	mov.w	r2, #0
 80031a0:	f04f 0300 	mov.w	r3, #0
 80031a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031b0:	ebb2 040a 	subs.w	r4, r2, sl
 80031b4:	eb63 050b 	sbc.w	r5, r3, fp
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	f04f 0300 	mov.w	r3, #0
 80031c0:	00eb      	lsls	r3, r5, #3
 80031c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031c6:	00e2      	lsls	r2, r4, #3
 80031c8:	4614      	mov	r4, r2
 80031ca:	461d      	mov	r5, r3
 80031cc:	4643      	mov	r3, r8
 80031ce:	18e3      	adds	r3, r4, r3
 80031d0:	603b      	str	r3, [r7, #0]
 80031d2:	464b      	mov	r3, r9
 80031d4:	eb45 0303 	adc.w	r3, r5, r3
 80031d8:	607b      	str	r3, [r7, #4]
 80031da:	f04f 0200 	mov.w	r2, #0
 80031de:	f04f 0300 	mov.w	r3, #0
 80031e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031e6:	4629      	mov	r1, r5
 80031e8:	028b      	lsls	r3, r1, #10
 80031ea:	4621      	mov	r1, r4
 80031ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031f0:	4621      	mov	r1, r4
 80031f2:	028a      	lsls	r2, r1, #10
 80031f4:	4610      	mov	r0, r2
 80031f6:	4619      	mov	r1, r3
 80031f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031fc:	2200      	movs	r2, #0
 80031fe:	61bb      	str	r3, [r7, #24]
 8003200:	61fa      	str	r2, [r7, #28]
 8003202:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003206:	f7fd fd17 	bl	8000c38 <__aeabi_uldivmod>
 800320a:	4602      	mov	r2, r0
 800320c:	460b      	mov	r3, r1
 800320e:	4613      	mov	r3, r2
 8003210:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003214:	4b0d      	ldr	r3, [pc, #52]	@ (800324c <HAL_RCC_GetSysClockFreq+0x348>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	0f1b      	lsrs	r3, r3, #28
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8003222:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003226:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800322a:	fbb2 f3f3 	udiv	r3, r2, r3
 800322e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003232:	e003      	b.n	800323c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003234:	4b06      	ldr	r3, [pc, #24]	@ (8003250 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003236:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800323a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800323c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003240:	4618      	mov	r0, r3
 8003242:	3798      	adds	r7, #152	@ 0x98
 8003244:	46bd      	mov	sp, r7
 8003246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800324a:	bf00      	nop
 800324c:	40023800 	.word	0x40023800
 8003250:	00f42400 	.word	0x00f42400
 8003254:	017d7840 	.word	0x017d7840

08003258 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e28d      	b.n	8003786 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 8083 	beq.w	800337e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003278:	4b94      	ldr	r3, [pc, #592]	@ (80034cc <HAL_RCC_OscConfig+0x274>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 030c 	and.w	r3, r3, #12
 8003280:	2b04      	cmp	r3, #4
 8003282:	d019      	beq.n	80032b8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003284:	4b91      	ldr	r3, [pc, #580]	@ (80034cc <HAL_RCC_OscConfig+0x274>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 030c 	and.w	r3, r3, #12
        || \
 800328c:	2b08      	cmp	r3, #8
 800328e:	d106      	bne.n	800329e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003290:	4b8e      	ldr	r3, [pc, #568]	@ (80034cc <HAL_RCC_OscConfig+0x274>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003298:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800329c:	d00c      	beq.n	80032b8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800329e:	4b8b      	ldr	r3, [pc, #556]	@ (80034cc <HAL_RCC_OscConfig+0x274>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80032a6:	2b0c      	cmp	r3, #12
 80032a8:	d112      	bne.n	80032d0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032aa:	4b88      	ldr	r3, [pc, #544]	@ (80034cc <HAL_RCC_OscConfig+0x274>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032b6:	d10b      	bne.n	80032d0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b8:	4b84      	ldr	r3, [pc, #528]	@ (80034cc <HAL_RCC_OscConfig+0x274>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d05b      	beq.n	800337c <HAL_RCC_OscConfig+0x124>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d157      	bne.n	800337c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e25a      	b.n	8003786 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032d8:	d106      	bne.n	80032e8 <HAL_RCC_OscConfig+0x90>
 80032da:	4b7c      	ldr	r3, [pc, #496]	@ (80034cc <HAL_RCC_OscConfig+0x274>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a7b      	ldr	r2, [pc, #492]	@ (80034cc <HAL_RCC_OscConfig+0x274>)
 80032e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	e01d      	b.n	8003324 <HAL_RCC_OscConfig+0xcc>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032f0:	d10c      	bne.n	800330c <HAL_RCC_OscConfig+0xb4>
 80032f2:	4b76      	ldr	r3, [pc, #472]	@ (80034cc <HAL_RCC_OscConfig+0x274>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a75      	ldr	r2, [pc, #468]	@ (80034cc <HAL_RCC_OscConfig+0x274>)
 80032f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	4b73      	ldr	r3, [pc, #460]	@ (80034cc <HAL_RCC_OscConfig+0x274>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a72      	ldr	r2, [pc, #456]	@ (80034cc <HAL_RCC_OscConfig+0x274>)
 8003304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	e00b      	b.n	8003324 <HAL_RCC_OscConfig+0xcc>
 800330c:	4b6f      	ldr	r3, [pc, #444]	@ (80034cc <HAL_RCC_OscConfig+0x274>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a6e      	ldr	r2, [pc, #440]	@ (80034cc <HAL_RCC_OscConfig+0x274>)
 8003312:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003316:	6013      	str	r3, [r2, #0]
 8003318:	4b6c      	ldr	r3, [pc, #432]	@ (80034cc <HAL_RCC_OscConfig+0x274>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a6b      	ldr	r2, [pc, #428]	@ (80034cc <HAL_RCC_OscConfig+0x274>)
 800331e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003322:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d013      	beq.n	8003354 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332c:	f7ff fa02 	bl	8002734 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003334:	f7ff f9fe 	bl	8002734 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b64      	cmp	r3, #100	@ 0x64
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e21f      	b.n	8003786 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003346:	4b61      	ldr	r3, [pc, #388]	@ (80034cc <HAL_RCC_OscConfig+0x274>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0f0      	beq.n	8003334 <HAL_RCC_OscConfig+0xdc>
 8003352:	e014      	b.n	800337e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003354:	f7ff f9ee 	bl	8002734 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800335c:	f7ff f9ea 	bl	8002734 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b64      	cmp	r3, #100	@ 0x64
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e20b      	b.n	8003786 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800336e:	4b57      	ldr	r3, [pc, #348]	@ (80034cc <HAL_RCC_OscConfig+0x274>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f0      	bne.n	800335c <HAL_RCC_OscConfig+0x104>
 800337a:	e000      	b.n	800337e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800337c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d06f      	beq.n	800346a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800338a:	4b50      	ldr	r3, [pc, #320]	@ (80034cc <HAL_RCC_OscConfig+0x274>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 030c 	and.w	r3, r3, #12
 8003392:	2b00      	cmp	r3, #0
 8003394:	d017      	beq.n	80033c6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003396:	4b4d      	ldr	r3, [pc, #308]	@ (80034cc <HAL_RCC_OscConfig+0x274>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 030c 	and.w	r3, r3, #12
        || \
 800339e:	2b08      	cmp	r3, #8
 80033a0:	d105      	bne.n	80033ae <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80033a2:	4b4a      	ldr	r3, [pc, #296]	@ (80034cc <HAL_RCC_OscConfig+0x274>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00b      	beq.n	80033c6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ae:	4b47      	ldr	r3, [pc, #284]	@ (80034cc <HAL_RCC_OscConfig+0x274>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80033b6:	2b0c      	cmp	r3, #12
 80033b8:	d11c      	bne.n	80033f4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ba:	4b44      	ldr	r3, [pc, #272]	@ (80034cc <HAL_RCC_OscConfig+0x274>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d116      	bne.n	80033f4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033c6:	4b41      	ldr	r3, [pc, #260]	@ (80034cc <HAL_RCC_OscConfig+0x274>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d005      	beq.n	80033de <HAL_RCC_OscConfig+0x186>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d001      	beq.n	80033de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e1d3      	b.n	8003786 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033de:	4b3b      	ldr	r3, [pc, #236]	@ (80034cc <HAL_RCC_OscConfig+0x274>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	4937      	ldr	r1, [pc, #220]	@ (80034cc <HAL_RCC_OscConfig+0x274>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033f2:	e03a      	b.n	800346a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d020      	beq.n	800343e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033fc:	4b34      	ldr	r3, [pc, #208]	@ (80034d0 <HAL_RCC_OscConfig+0x278>)
 80033fe:	2201      	movs	r2, #1
 8003400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003402:	f7ff f997 	bl	8002734 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800340a:	f7ff f993 	bl	8002734 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e1b4      	b.n	8003786 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800341c:	4b2b      	ldr	r3, [pc, #172]	@ (80034cc <HAL_RCC_OscConfig+0x274>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0f0      	beq.n	800340a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003428:	4b28      	ldr	r3, [pc, #160]	@ (80034cc <HAL_RCC_OscConfig+0x274>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	4925      	ldr	r1, [pc, #148]	@ (80034cc <HAL_RCC_OscConfig+0x274>)
 8003438:	4313      	orrs	r3, r2
 800343a:	600b      	str	r3, [r1, #0]
 800343c:	e015      	b.n	800346a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800343e:	4b24      	ldr	r3, [pc, #144]	@ (80034d0 <HAL_RCC_OscConfig+0x278>)
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003444:	f7ff f976 	bl	8002734 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800344c:	f7ff f972 	bl	8002734 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e193      	b.n	8003786 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800345e:	4b1b      	ldr	r3, [pc, #108]	@ (80034cc <HAL_RCC_OscConfig+0x274>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b00      	cmp	r3, #0
 8003474:	d036      	beq.n	80034e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d016      	beq.n	80034ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800347e:	4b15      	ldr	r3, [pc, #84]	@ (80034d4 <HAL_RCC_OscConfig+0x27c>)
 8003480:	2201      	movs	r2, #1
 8003482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003484:	f7ff f956 	bl	8002734 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800348c:	f7ff f952 	bl	8002734 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e173      	b.n	8003786 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349e:	4b0b      	ldr	r3, [pc, #44]	@ (80034cc <HAL_RCC_OscConfig+0x274>)
 80034a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0f0      	beq.n	800348c <HAL_RCC_OscConfig+0x234>
 80034aa:	e01b      	b.n	80034e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ac:	4b09      	ldr	r3, [pc, #36]	@ (80034d4 <HAL_RCC_OscConfig+0x27c>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b2:	f7ff f93f 	bl	8002734 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034b8:	e00e      	b.n	80034d8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034ba:	f7ff f93b 	bl	8002734 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d907      	bls.n	80034d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e15c      	b.n	8003786 <HAL_RCC_OscConfig+0x52e>
 80034cc:	40023800 	.word	0x40023800
 80034d0:	42470000 	.word	0x42470000
 80034d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d8:	4b8a      	ldr	r3, [pc, #552]	@ (8003704 <HAL_RCC_OscConfig+0x4ac>)
 80034da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1ea      	bne.n	80034ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 8097 	beq.w	8003620 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034f2:	2300      	movs	r3, #0
 80034f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034f6:	4b83      	ldr	r3, [pc, #524]	@ (8003704 <HAL_RCC_OscConfig+0x4ac>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10f      	bne.n	8003522 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003502:	2300      	movs	r3, #0
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	4b7f      	ldr	r3, [pc, #508]	@ (8003704 <HAL_RCC_OscConfig+0x4ac>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350a:	4a7e      	ldr	r2, [pc, #504]	@ (8003704 <HAL_RCC_OscConfig+0x4ac>)
 800350c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003510:	6413      	str	r3, [r2, #64]	@ 0x40
 8003512:	4b7c      	ldr	r3, [pc, #496]	@ (8003704 <HAL_RCC_OscConfig+0x4ac>)
 8003514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800351a:	60bb      	str	r3, [r7, #8]
 800351c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800351e:	2301      	movs	r3, #1
 8003520:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003522:	4b79      	ldr	r3, [pc, #484]	@ (8003708 <HAL_RCC_OscConfig+0x4b0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800352a:	2b00      	cmp	r3, #0
 800352c:	d118      	bne.n	8003560 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800352e:	4b76      	ldr	r3, [pc, #472]	@ (8003708 <HAL_RCC_OscConfig+0x4b0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a75      	ldr	r2, [pc, #468]	@ (8003708 <HAL_RCC_OscConfig+0x4b0>)
 8003534:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800353a:	f7ff f8fb 	bl	8002734 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003542:	f7ff f8f7 	bl	8002734 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e118      	b.n	8003786 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003554:	4b6c      	ldr	r3, [pc, #432]	@ (8003708 <HAL_RCC_OscConfig+0x4b0>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d106      	bne.n	8003576 <HAL_RCC_OscConfig+0x31e>
 8003568:	4b66      	ldr	r3, [pc, #408]	@ (8003704 <HAL_RCC_OscConfig+0x4ac>)
 800356a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800356c:	4a65      	ldr	r2, [pc, #404]	@ (8003704 <HAL_RCC_OscConfig+0x4ac>)
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	6713      	str	r3, [r2, #112]	@ 0x70
 8003574:	e01c      	b.n	80035b0 <HAL_RCC_OscConfig+0x358>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b05      	cmp	r3, #5
 800357c:	d10c      	bne.n	8003598 <HAL_RCC_OscConfig+0x340>
 800357e:	4b61      	ldr	r3, [pc, #388]	@ (8003704 <HAL_RCC_OscConfig+0x4ac>)
 8003580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003582:	4a60      	ldr	r2, [pc, #384]	@ (8003704 <HAL_RCC_OscConfig+0x4ac>)
 8003584:	f043 0304 	orr.w	r3, r3, #4
 8003588:	6713      	str	r3, [r2, #112]	@ 0x70
 800358a:	4b5e      	ldr	r3, [pc, #376]	@ (8003704 <HAL_RCC_OscConfig+0x4ac>)
 800358c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800358e:	4a5d      	ldr	r2, [pc, #372]	@ (8003704 <HAL_RCC_OscConfig+0x4ac>)
 8003590:	f043 0301 	orr.w	r3, r3, #1
 8003594:	6713      	str	r3, [r2, #112]	@ 0x70
 8003596:	e00b      	b.n	80035b0 <HAL_RCC_OscConfig+0x358>
 8003598:	4b5a      	ldr	r3, [pc, #360]	@ (8003704 <HAL_RCC_OscConfig+0x4ac>)
 800359a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800359c:	4a59      	ldr	r2, [pc, #356]	@ (8003704 <HAL_RCC_OscConfig+0x4ac>)
 800359e:	f023 0301 	bic.w	r3, r3, #1
 80035a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80035a4:	4b57      	ldr	r3, [pc, #348]	@ (8003704 <HAL_RCC_OscConfig+0x4ac>)
 80035a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a8:	4a56      	ldr	r2, [pc, #344]	@ (8003704 <HAL_RCC_OscConfig+0x4ac>)
 80035aa:	f023 0304 	bic.w	r3, r3, #4
 80035ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d015      	beq.n	80035e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b8:	f7ff f8bc 	bl	8002734 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035be:	e00a      	b.n	80035d6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035c0:	f7ff f8b8 	bl	8002734 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e0d7      	b.n	8003786 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d6:	4b4b      	ldr	r3, [pc, #300]	@ (8003704 <HAL_RCC_OscConfig+0x4ac>)
 80035d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0ee      	beq.n	80035c0 <HAL_RCC_OscConfig+0x368>
 80035e2:	e014      	b.n	800360e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e4:	f7ff f8a6 	bl	8002734 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ea:	e00a      	b.n	8003602 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ec:	f7ff f8a2 	bl	8002734 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e0c1      	b.n	8003786 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003602:	4b40      	ldr	r3, [pc, #256]	@ (8003704 <HAL_RCC_OscConfig+0x4ac>)
 8003604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1ee      	bne.n	80035ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800360e:	7dfb      	ldrb	r3, [r7, #23]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d105      	bne.n	8003620 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003614:	4b3b      	ldr	r3, [pc, #236]	@ (8003704 <HAL_RCC_OscConfig+0x4ac>)
 8003616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003618:	4a3a      	ldr	r2, [pc, #232]	@ (8003704 <HAL_RCC_OscConfig+0x4ac>)
 800361a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800361e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 80ad 	beq.w	8003784 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800362a:	4b36      	ldr	r3, [pc, #216]	@ (8003704 <HAL_RCC_OscConfig+0x4ac>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 030c 	and.w	r3, r3, #12
 8003632:	2b08      	cmp	r3, #8
 8003634:	d060      	beq.n	80036f8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d145      	bne.n	80036ca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800363e:	4b33      	ldr	r3, [pc, #204]	@ (800370c <HAL_RCC_OscConfig+0x4b4>)
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003644:	f7ff f876 	bl	8002734 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800364c:	f7ff f872 	bl	8002734 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e093      	b.n	8003786 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365e:	4b29      	ldr	r3, [pc, #164]	@ (8003704 <HAL_RCC_OscConfig+0x4ac>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f0      	bne.n	800364c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69da      	ldr	r2, [r3, #28]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003678:	019b      	lsls	r3, r3, #6
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003680:	085b      	lsrs	r3, r3, #1
 8003682:	3b01      	subs	r3, #1
 8003684:	041b      	lsls	r3, r3, #16
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368c:	061b      	lsls	r3, r3, #24
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003694:	071b      	lsls	r3, r3, #28
 8003696:	491b      	ldr	r1, [pc, #108]	@ (8003704 <HAL_RCC_OscConfig+0x4ac>)
 8003698:	4313      	orrs	r3, r2
 800369a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800369c:	4b1b      	ldr	r3, [pc, #108]	@ (800370c <HAL_RCC_OscConfig+0x4b4>)
 800369e:	2201      	movs	r2, #1
 80036a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a2:	f7ff f847 	bl	8002734 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036aa:	f7ff f843 	bl	8002734 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e064      	b.n	8003786 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036bc:	4b11      	ldr	r3, [pc, #68]	@ (8003704 <HAL_RCC_OscConfig+0x4ac>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f0      	beq.n	80036aa <HAL_RCC_OscConfig+0x452>
 80036c8:	e05c      	b.n	8003784 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ca:	4b10      	ldr	r3, [pc, #64]	@ (800370c <HAL_RCC_OscConfig+0x4b4>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d0:	f7ff f830 	bl	8002734 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d8:	f7ff f82c 	bl	8002734 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e04d      	b.n	8003786 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ea:	4b06      	ldr	r3, [pc, #24]	@ (8003704 <HAL_RCC_OscConfig+0x4ac>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1f0      	bne.n	80036d8 <HAL_RCC_OscConfig+0x480>
 80036f6:	e045      	b.n	8003784 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d107      	bne.n	8003710 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e040      	b.n	8003786 <HAL_RCC_OscConfig+0x52e>
 8003704:	40023800 	.word	0x40023800
 8003708:	40007000 	.word	0x40007000
 800370c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003710:	4b1f      	ldr	r3, [pc, #124]	@ (8003790 <HAL_RCC_OscConfig+0x538>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d030      	beq.n	8003780 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003728:	429a      	cmp	r2, r3
 800372a:	d129      	bne.n	8003780 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003736:	429a      	cmp	r2, r3
 8003738:	d122      	bne.n	8003780 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003740:	4013      	ands	r3, r2
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003746:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003748:	4293      	cmp	r3, r2
 800374a:	d119      	bne.n	8003780 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003756:	085b      	lsrs	r3, r3, #1
 8003758:	3b01      	subs	r3, #1
 800375a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800375c:	429a      	cmp	r2, r3
 800375e:	d10f      	bne.n	8003780 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800376c:	429a      	cmp	r2, r3
 800376e:	d107      	bne.n	8003780 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800377c:	429a      	cmp	r2, r3
 800377e:	d001      	beq.n	8003784 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e000      	b.n	8003786 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40023800 	.word	0x40023800

08003794 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e07b      	b.n	800389e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d108      	bne.n	80037c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037b6:	d009      	beq.n	80037cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	61da      	str	r2, [r3, #28]
 80037be:	e005      	b.n	80037cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d106      	bne.n	80037ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7fe fcbc 	bl	8002164 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003802:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800383c:	431a      	orrs	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003846:	431a      	orrs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003850:	ea42 0103 	orr.w	r1, r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003858:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	0c1b      	lsrs	r3, r3, #16
 800386a:	f003 0104 	and.w	r1, r3, #4
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003872:	f003 0210 	and.w	r2, r3, #16
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	69da      	ldr	r2, [r3, #28]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800388c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b088      	sub	sp, #32
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	603b      	str	r3, [r7, #0]
 80038b2:	4613      	mov	r3, r2
 80038b4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038b6:	f7fe ff3d 	bl	8002734 <HAL_GetTick>
 80038ba:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80038bc:	88fb      	ldrh	r3, [r7, #6]
 80038be:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d001      	beq.n	80038d0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80038cc:	2302      	movs	r3, #2
 80038ce:	e12a      	b.n	8003b26 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d002      	beq.n	80038dc <HAL_SPI_Transmit+0x36>
 80038d6:	88fb      	ldrh	r3, [r7, #6]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e122      	b.n	8003b26 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d101      	bne.n	80038ee <HAL_SPI_Transmit+0x48>
 80038ea:	2302      	movs	r3, #2
 80038ec:	e11b      	b.n	8003b26 <HAL_SPI_Transmit+0x280>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2203      	movs	r2, #3
 80038fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	88fa      	ldrh	r2, [r7, #6]
 800390e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	88fa      	ldrh	r2, [r7, #6]
 8003914:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800393c:	d10f      	bne.n	800395e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800394c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800395c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003968:	2b40      	cmp	r3, #64	@ 0x40
 800396a:	d007      	beq.n	800397c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800397a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003984:	d152      	bne.n	8003a2c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d002      	beq.n	8003994 <HAL_SPI_Transmit+0xee>
 800398e:	8b7b      	ldrh	r3, [r7, #26]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d145      	bne.n	8003a20 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003998:	881a      	ldrh	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a4:	1c9a      	adds	r2, r3, #2
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039b8:	e032      	b.n	8003a20 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d112      	bne.n	80039ee <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039cc:	881a      	ldrh	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d8:	1c9a      	adds	r2, r3, #2
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	3b01      	subs	r3, #1
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	86da      	strh	r2, [r3, #54]	@ 0x36
 80039ec:	e018      	b.n	8003a20 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039ee:	f7fe fea1 	bl	8002734 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d803      	bhi.n	8003a06 <HAL_SPI_Transmit+0x160>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a04:	d102      	bne.n	8003a0c <HAL_SPI_Transmit+0x166>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d109      	bne.n	8003a20 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e082      	b.n	8003b26 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1c7      	bne.n	80039ba <HAL_SPI_Transmit+0x114>
 8003a2a:	e053      	b.n	8003ad4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d002      	beq.n	8003a3a <HAL_SPI_Transmit+0x194>
 8003a34:	8b7b      	ldrh	r3, [r7, #26]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d147      	bne.n	8003aca <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	330c      	adds	r3, #12
 8003a44:	7812      	ldrb	r2, [r2, #0]
 8003a46:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a60:	e033      	b.n	8003aca <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d113      	bne.n	8003a98 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	330c      	adds	r3, #12
 8003a7a:	7812      	ldrb	r2, [r2, #0]
 8003a7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003a96:	e018      	b.n	8003aca <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a98:	f7fe fe4c 	bl	8002734 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d803      	bhi.n	8003ab0 <HAL_SPI_Transmit+0x20a>
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aae:	d102      	bne.n	8003ab6 <HAL_SPI_Transmit+0x210>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d109      	bne.n	8003aca <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e02d      	b.n	8003b26 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1c6      	bne.n	8003a62 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ad4:	69fa      	ldr	r2, [r7, #28]
 8003ad6:	6839      	ldr	r1, [r7, #0]
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 fa59 	bl	8003f90 <SPI_EndRxTxTransaction>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d002      	beq.n	8003aea <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10a      	bne.n	8003b08 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	617b      	str	r3, [r7, #20]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	617b      	str	r3, [r7, #20]
 8003b06:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e000      	b.n	8003b26 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003b24:	2300      	movs	r3, #0
  }
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3720      	adds	r7, #32
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b08a      	sub	sp, #40	@ 0x28
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	60f8      	str	r0, [r7, #12]
 8003b36:	60b9      	str	r1, [r7, #8]
 8003b38:	607a      	str	r2, [r7, #4]
 8003b3a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b40:	f7fe fdf8 	bl	8002734 <HAL_GetTick>
 8003b44:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b4c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003b54:	887b      	ldrh	r3, [r7, #2]
 8003b56:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b58:	7ffb      	ldrb	r3, [r7, #31]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d00c      	beq.n	8003b78 <HAL_SPI_TransmitReceive+0x4a>
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b64:	d106      	bne.n	8003b74 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d102      	bne.n	8003b74 <HAL_SPI_TransmitReceive+0x46>
 8003b6e:	7ffb      	ldrb	r3, [r7, #31]
 8003b70:	2b04      	cmp	r3, #4
 8003b72:	d001      	beq.n	8003b78 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003b74:	2302      	movs	r3, #2
 8003b76:	e17f      	b.n	8003e78 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d005      	beq.n	8003b8a <HAL_SPI_TransmitReceive+0x5c>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d002      	beq.n	8003b8a <HAL_SPI_TransmitReceive+0x5c>
 8003b84:	887b      	ldrh	r3, [r7, #2]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e174      	b.n	8003e78 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <HAL_SPI_TransmitReceive+0x6e>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e16d      	b.n	8003e78 <HAL_SPI_TransmitReceive+0x34a>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b04      	cmp	r3, #4
 8003bae:	d003      	beq.n	8003bb8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2205      	movs	r2, #5
 8003bb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	887a      	ldrh	r2, [r7, #2]
 8003bc8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	887a      	ldrh	r2, [r7, #2]
 8003bce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	887a      	ldrh	r2, [r7, #2]
 8003bda:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	887a      	ldrh	r2, [r7, #2]
 8003be0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf8:	2b40      	cmp	r3, #64	@ 0x40
 8003bfa:	d007      	beq.n	8003c0c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c14:	d17e      	bne.n	8003d14 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d002      	beq.n	8003c24 <HAL_SPI_TransmitReceive+0xf6>
 8003c1e:	8afb      	ldrh	r3, [r7, #22]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d16c      	bne.n	8003cfe <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c28:	881a      	ldrh	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c34:	1c9a      	adds	r2, r3, #2
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	3b01      	subs	r3, #1
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c48:	e059      	b.n	8003cfe <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d11b      	bne.n	8003c90 <HAL_SPI_TransmitReceive+0x162>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d016      	beq.n	8003c90 <HAL_SPI_TransmitReceive+0x162>
 8003c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d113      	bne.n	8003c90 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6c:	881a      	ldrh	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c78:	1c9a      	adds	r2, r3, #2
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d119      	bne.n	8003cd2 <HAL_SPI_TransmitReceive+0x1a4>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d014      	beq.n	8003cd2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb2:	b292      	uxth	r2, r2
 8003cb4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cba:	1c9a      	adds	r2, r3, #2
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003cd2:	f7fe fd2f 	bl	8002734 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d80d      	bhi.n	8003cfe <HAL_SPI_TransmitReceive+0x1d0>
 8003ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce8:	d009      	beq.n	8003cfe <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e0bc      	b.n	8003e78 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1a0      	bne.n	8003c4a <HAL_SPI_TransmitReceive+0x11c>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d19b      	bne.n	8003c4a <HAL_SPI_TransmitReceive+0x11c>
 8003d12:	e082      	b.n	8003e1a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <HAL_SPI_TransmitReceive+0x1f4>
 8003d1c:	8afb      	ldrh	r3, [r7, #22]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d171      	bne.n	8003e06 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	330c      	adds	r3, #12
 8003d2c:	7812      	ldrb	r2, [r2, #0]
 8003d2e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d48:	e05d      	b.n	8003e06 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d11c      	bne.n	8003d92 <HAL_SPI_TransmitReceive+0x264>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d017      	beq.n	8003d92 <HAL_SPI_TransmitReceive+0x264>
 8003d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d114      	bne.n	8003d92 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	330c      	adds	r3, #12
 8003d72:	7812      	ldrb	r2, [r2, #0]
 8003d74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	3b01      	subs	r3, #1
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d119      	bne.n	8003dd4 <HAL_SPI_TransmitReceive+0x2a6>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d014      	beq.n	8003dd4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68da      	ldr	r2, [r3, #12]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dbc:	1c5a      	adds	r2, r3, #1
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003dd4:	f7fe fcae 	bl	8002734 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d803      	bhi.n	8003dec <HAL_SPI_TransmitReceive+0x2be>
 8003de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dea:	d102      	bne.n	8003df2 <HAL_SPI_TransmitReceive+0x2c4>
 8003dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d109      	bne.n	8003e06 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e038      	b.n	8003e78 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d19c      	bne.n	8003d4a <HAL_SPI_TransmitReceive+0x21c>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d197      	bne.n	8003d4a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e1a:	6a3a      	ldr	r2, [r7, #32]
 8003e1c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 f8b6 	bl	8003f90 <SPI_EndRxTxTransaction>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d008      	beq.n	8003e3c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e01d      	b.n	8003e78 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10a      	bne.n	8003e5a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e44:	2300      	movs	r3, #0
 8003e46:	613b      	str	r3, [r7, #16]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	613b      	str	r3, [r7, #16]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	613b      	str	r3, [r7, #16]
 8003e58:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003e76:	2300      	movs	r3, #0
  }
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3728      	adds	r7, #40	@ 0x28
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b088      	sub	sp, #32
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	603b      	str	r3, [r7, #0]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e90:	f7fe fc50 	bl	8002734 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e98:	1a9b      	subs	r3, r3, r2
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ea0:	f7fe fc48 	bl	8002734 <HAL_GetTick>
 8003ea4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ea6:	4b39      	ldr	r3, [pc, #228]	@ (8003f8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	015b      	lsls	r3, r3, #5
 8003eac:	0d1b      	lsrs	r3, r3, #20
 8003eae:	69fa      	ldr	r2, [r7, #28]
 8003eb0:	fb02 f303 	mul.w	r3, r2, r3
 8003eb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003eb6:	e054      	b.n	8003f62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebe:	d050      	beq.n	8003f62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ec0:	f7fe fc38 	bl	8002734 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	69fa      	ldr	r2, [r7, #28]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d902      	bls.n	8003ed6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d13d      	bne.n	8003f52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003ee4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003eee:	d111      	bne.n	8003f14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ef8:	d004      	beq.n	8003f04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f02:	d107      	bne.n	8003f14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f1c:	d10f      	bne.n	8003f3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e017      	b.n	8003f82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	bf0c      	ite	eq
 8003f72:	2301      	moveq	r3, #1
 8003f74:	2300      	movne	r3, #0
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	461a      	mov	r2, r3
 8003f7a:	79fb      	ldrb	r3, [r7, #7]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d19b      	bne.n	8003eb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3720      	adds	r7, #32
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20000000 	.word	0x20000000

08003f90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b088      	sub	sp, #32
 8003f94:	af02      	add	r7, sp, #8
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	2102      	movs	r1, #2
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f7ff ff6a 	bl	8003e80 <SPI_WaitFlagStateUntilTimeout>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d007      	beq.n	8003fc2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fb6:	f043 0220 	orr.w	r2, r3, #32
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e032      	b.n	8004028 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8004030 <SPI_EndRxTxTransaction+0xa0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a1b      	ldr	r2, [pc, #108]	@ (8004034 <SPI_EndRxTxTransaction+0xa4>)
 8003fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fcc:	0d5b      	lsrs	r3, r3, #21
 8003fce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003fd2:	fb02 f303 	mul.w	r3, r2, r3
 8003fd6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fe0:	d112      	bne.n	8004008 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	2180      	movs	r1, #128	@ 0x80
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f7ff ff47 	bl	8003e80 <SPI_WaitFlagStateUntilTimeout>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d016      	beq.n	8004026 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ffc:	f043 0220 	orr.w	r2, r3, #32
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e00f      	b.n	8004028 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	3b01      	subs	r3, #1
 8004012:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800401e:	2b80      	cmp	r3, #128	@ 0x80
 8004020:	d0f2      	beq.n	8004008 <SPI_EndRxTxTransaction+0x78>
 8004022:	e000      	b.n	8004026 <SPI_EndRxTxTransaction+0x96>
        break;
 8004024:	bf00      	nop
  }

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	20000000 	.word	0x20000000
 8004034:	165e9f81 	.word	0x165e9f81

08004038 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e041      	b.n	80040ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d106      	bne.n	8004064 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f839 	bl	80040d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3304      	adds	r3, #4
 8004074:	4619      	mov	r1, r3
 8004076:	4610      	mov	r0, r2
 8004078:	f000 fad2 	bl	8004620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
	...

080040ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d001      	beq.n	8004104 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e04e      	b.n	80041a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68da      	ldr	r2, [r3, #12]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0201 	orr.w	r2, r2, #1
 800411a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a23      	ldr	r2, [pc, #140]	@ (80041b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d022      	beq.n	800416c <HAL_TIM_Base_Start_IT+0x80>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800412e:	d01d      	beq.n	800416c <HAL_TIM_Base_Start_IT+0x80>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a1f      	ldr	r2, [pc, #124]	@ (80041b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d018      	beq.n	800416c <HAL_TIM_Base_Start_IT+0x80>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a1e      	ldr	r2, [pc, #120]	@ (80041b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d013      	beq.n	800416c <HAL_TIM_Base_Start_IT+0x80>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a1c      	ldr	r2, [pc, #112]	@ (80041bc <HAL_TIM_Base_Start_IT+0xd0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d00e      	beq.n	800416c <HAL_TIM_Base_Start_IT+0x80>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a1b      	ldr	r2, [pc, #108]	@ (80041c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d009      	beq.n	800416c <HAL_TIM_Base_Start_IT+0x80>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a19      	ldr	r2, [pc, #100]	@ (80041c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d004      	beq.n	800416c <HAL_TIM_Base_Start_IT+0x80>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a18      	ldr	r2, [pc, #96]	@ (80041c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d111      	bne.n	8004190 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2b06      	cmp	r3, #6
 800417c:	d010      	beq.n	80041a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 0201 	orr.w	r2, r2, #1
 800418c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800418e:	e007      	b.n	80041a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 0201 	orr.w	r2, r2, #1
 800419e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	40010000 	.word	0x40010000
 80041b4:	40000400 	.word	0x40000400
 80041b8:	40000800 	.word	0x40000800
 80041bc:	40000c00 	.word	0x40000c00
 80041c0:	40010400 	.word	0x40010400
 80041c4:	40014000 	.word	0x40014000
 80041c8:	40001800 	.word	0x40001800

080041cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e041      	b.n	8004262 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d106      	bne.n	80041f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7fd fffe 	bl	80021f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3304      	adds	r3, #4
 8004208:	4619      	mov	r1, r3
 800420a:	4610      	mov	r0, r2
 800420c:	f000 fa08 	bl	8004620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b084      	sub	sp, #16
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d020      	beq.n	80042ce <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d01b      	beq.n	80042ce <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f06f 0202 	mvn.w	r2, #2
 800429e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	f003 0303 	and.w	r3, r3, #3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f995 	bl	80045e4 <HAL_TIM_IC_CaptureCallback>
 80042ba:	e005      	b.n	80042c8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f987 	bl	80045d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f998 	bl	80045f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d020      	beq.n	800431a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f003 0304 	and.w	r3, r3, #4
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d01b      	beq.n	800431a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f06f 0204 	mvn.w	r2, #4
 80042ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f96f 	bl	80045e4 <HAL_TIM_IC_CaptureCallback>
 8004306:	e005      	b.n	8004314 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f961 	bl	80045d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f972 	bl	80045f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	f003 0308 	and.w	r3, r3, #8
 8004320:	2b00      	cmp	r3, #0
 8004322:	d020      	beq.n	8004366 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f003 0308 	and.w	r3, r3, #8
 800432a:	2b00      	cmp	r3, #0
 800432c:	d01b      	beq.n	8004366 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f06f 0208 	mvn.w	r2, #8
 8004336:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2204      	movs	r2, #4
 800433c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	f003 0303 	and.w	r3, r3, #3
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f949 	bl	80045e4 <HAL_TIM_IC_CaptureCallback>
 8004352:	e005      	b.n	8004360 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f93b 	bl	80045d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f94c 	bl	80045f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	f003 0310 	and.w	r3, r3, #16
 800436c:	2b00      	cmp	r3, #0
 800436e:	d020      	beq.n	80043b2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f003 0310 	and.w	r3, r3, #16
 8004376:	2b00      	cmp	r3, #0
 8004378:	d01b      	beq.n	80043b2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f06f 0210 	mvn.w	r2, #16
 8004382:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2208      	movs	r2, #8
 8004388:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	69db      	ldr	r3, [r3, #28]
 8004390:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f923 	bl	80045e4 <HAL_TIM_IC_CaptureCallback>
 800439e:	e005      	b.n	80043ac <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f915 	bl	80045d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f926 	bl	80045f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00c      	beq.n	80043d6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d007      	beq.n	80043d6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f06f 0201 	mvn.w	r2, #1
 80043ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7fd f89d 	bl	8001510 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00c      	beq.n	80043fa <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d007      	beq.n	80043fa <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80043f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 fc47 	bl	8004c88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00c      	beq.n	800441e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800440a:	2b00      	cmp	r3, #0
 800440c:	d007      	beq.n	800441e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 f8f7 	bl	800460c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	f003 0320 	and.w	r3, r3, #32
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00c      	beq.n	8004442 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f003 0320 	and.w	r3, r3, #32
 800442e:	2b00      	cmp	r3, #0
 8004430:	d007      	beq.n	8004442 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f06f 0220 	mvn.w	r2, #32
 800443a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 fc19 	bl	8004c74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004442:	bf00      	nop
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
	...

0800444c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004458:	2300      	movs	r3, #0
 800445a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004462:	2b01      	cmp	r3, #1
 8004464:	d101      	bne.n	800446a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004466:	2302      	movs	r3, #2
 8004468:	e0ae      	b.n	80045c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b0c      	cmp	r3, #12
 8004476:	f200 809f 	bhi.w	80045b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800447a:	a201      	add	r2, pc, #4	@ (adr r2, 8004480 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800447c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004480:	080044b5 	.word	0x080044b5
 8004484:	080045b9 	.word	0x080045b9
 8004488:	080045b9 	.word	0x080045b9
 800448c:	080045b9 	.word	0x080045b9
 8004490:	080044f5 	.word	0x080044f5
 8004494:	080045b9 	.word	0x080045b9
 8004498:	080045b9 	.word	0x080045b9
 800449c:	080045b9 	.word	0x080045b9
 80044a0:	08004537 	.word	0x08004537
 80044a4:	080045b9 	.word	0x080045b9
 80044a8:	080045b9 	.word	0x080045b9
 80044ac:	080045b9 	.word	0x080045b9
 80044b0:	08004577 	.word	0x08004577
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68b9      	ldr	r1, [r7, #8]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 f95c 	bl	8004778 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699a      	ldr	r2, [r3, #24]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0208 	orr.w	r2, r2, #8
 80044ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	699a      	ldr	r2, [r3, #24]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f022 0204 	bic.w	r2, r2, #4
 80044de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6999      	ldr	r1, [r3, #24]
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	691a      	ldr	r2, [r3, #16]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	619a      	str	r2, [r3, #24]
      break;
 80044f2:	e064      	b.n	80045be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68b9      	ldr	r1, [r7, #8]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 f9ac 	bl	8004858 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699a      	ldr	r2, [r3, #24]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800450e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	699a      	ldr	r2, [r3, #24]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800451e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6999      	ldr	r1, [r3, #24]
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	021a      	lsls	r2, r3, #8
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	430a      	orrs	r2, r1
 8004532:	619a      	str	r2, [r3, #24]
      break;
 8004534:	e043      	b.n	80045be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68b9      	ldr	r1, [r7, #8]
 800453c:	4618      	mov	r0, r3
 800453e:	f000 fa01 	bl	8004944 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	69da      	ldr	r2, [r3, #28]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f042 0208 	orr.w	r2, r2, #8
 8004550:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	69da      	ldr	r2, [r3, #28]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0204 	bic.w	r2, r2, #4
 8004560:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	69d9      	ldr	r1, [r3, #28]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	691a      	ldr	r2, [r3, #16]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	61da      	str	r2, [r3, #28]
      break;
 8004574:	e023      	b.n	80045be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68b9      	ldr	r1, [r7, #8]
 800457c:	4618      	mov	r0, r3
 800457e:	f000 fa55 	bl	8004a2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	69da      	ldr	r2, [r3, #28]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004590:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	69da      	ldr	r2, [r3, #28]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	69d9      	ldr	r1, [r3, #28]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	021a      	lsls	r2, r3, #8
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	61da      	str	r2, [r3, #28]
      break;
 80045b6:	e002      	b.n	80045be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	75fb      	strb	r3, [r7, #23]
      break;
 80045bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3718      	adds	r7, #24
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a46      	ldr	r2, [pc, #280]	@ (800474c <TIM_Base_SetConfig+0x12c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d013      	beq.n	8004660 <TIM_Base_SetConfig+0x40>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800463e:	d00f      	beq.n	8004660 <TIM_Base_SetConfig+0x40>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a43      	ldr	r2, [pc, #268]	@ (8004750 <TIM_Base_SetConfig+0x130>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d00b      	beq.n	8004660 <TIM_Base_SetConfig+0x40>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a42      	ldr	r2, [pc, #264]	@ (8004754 <TIM_Base_SetConfig+0x134>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d007      	beq.n	8004660 <TIM_Base_SetConfig+0x40>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a41      	ldr	r2, [pc, #260]	@ (8004758 <TIM_Base_SetConfig+0x138>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d003      	beq.n	8004660 <TIM_Base_SetConfig+0x40>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a40      	ldr	r2, [pc, #256]	@ (800475c <TIM_Base_SetConfig+0x13c>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d108      	bne.n	8004672 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004666:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	4313      	orrs	r3, r2
 8004670:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a35      	ldr	r2, [pc, #212]	@ (800474c <TIM_Base_SetConfig+0x12c>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d02b      	beq.n	80046d2 <TIM_Base_SetConfig+0xb2>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004680:	d027      	beq.n	80046d2 <TIM_Base_SetConfig+0xb2>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a32      	ldr	r2, [pc, #200]	@ (8004750 <TIM_Base_SetConfig+0x130>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d023      	beq.n	80046d2 <TIM_Base_SetConfig+0xb2>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a31      	ldr	r2, [pc, #196]	@ (8004754 <TIM_Base_SetConfig+0x134>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d01f      	beq.n	80046d2 <TIM_Base_SetConfig+0xb2>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a30      	ldr	r2, [pc, #192]	@ (8004758 <TIM_Base_SetConfig+0x138>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d01b      	beq.n	80046d2 <TIM_Base_SetConfig+0xb2>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a2f      	ldr	r2, [pc, #188]	@ (800475c <TIM_Base_SetConfig+0x13c>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d017      	beq.n	80046d2 <TIM_Base_SetConfig+0xb2>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a2e      	ldr	r2, [pc, #184]	@ (8004760 <TIM_Base_SetConfig+0x140>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d013      	beq.n	80046d2 <TIM_Base_SetConfig+0xb2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a2d      	ldr	r2, [pc, #180]	@ (8004764 <TIM_Base_SetConfig+0x144>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d00f      	beq.n	80046d2 <TIM_Base_SetConfig+0xb2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a2c      	ldr	r2, [pc, #176]	@ (8004768 <TIM_Base_SetConfig+0x148>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d00b      	beq.n	80046d2 <TIM_Base_SetConfig+0xb2>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a2b      	ldr	r2, [pc, #172]	@ (800476c <TIM_Base_SetConfig+0x14c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d007      	beq.n	80046d2 <TIM_Base_SetConfig+0xb2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a2a      	ldr	r2, [pc, #168]	@ (8004770 <TIM_Base_SetConfig+0x150>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d003      	beq.n	80046d2 <TIM_Base_SetConfig+0xb2>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a29      	ldr	r2, [pc, #164]	@ (8004774 <TIM_Base_SetConfig+0x154>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d108      	bne.n	80046e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a10      	ldr	r2, [pc, #64]	@ (800474c <TIM_Base_SetConfig+0x12c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d003      	beq.n	8004718 <TIM_Base_SetConfig+0xf8>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a12      	ldr	r2, [pc, #72]	@ (800475c <TIM_Base_SetConfig+0x13c>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d103      	bne.n	8004720 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	691a      	ldr	r2, [r3, #16]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b01      	cmp	r3, #1
 8004730:	d105      	bne.n	800473e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	f023 0201 	bic.w	r2, r3, #1
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	611a      	str	r2, [r3, #16]
  }
}
 800473e:	bf00      	nop
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	40010000 	.word	0x40010000
 8004750:	40000400 	.word	0x40000400
 8004754:	40000800 	.word	0x40000800
 8004758:	40000c00 	.word	0x40000c00
 800475c:	40010400 	.word	0x40010400
 8004760:	40014000 	.word	0x40014000
 8004764:	40014400 	.word	0x40014400
 8004768:	40014800 	.word	0x40014800
 800476c:	40001800 	.word	0x40001800
 8004770:	40001c00 	.word	0x40001c00
 8004774:	40002000 	.word	0x40002000

08004778 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004778:	b480      	push	{r7}
 800477a:	b087      	sub	sp, #28
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	f023 0201 	bic.w	r2, r3, #1
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 0303 	bic.w	r3, r3, #3
 80047ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f023 0302 	bic.w	r3, r3, #2
 80047c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a20      	ldr	r2, [pc, #128]	@ (8004850 <TIM_OC1_SetConfig+0xd8>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d003      	beq.n	80047dc <TIM_OC1_SetConfig+0x64>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a1f      	ldr	r2, [pc, #124]	@ (8004854 <TIM_OC1_SetConfig+0xdc>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d10c      	bne.n	80047f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	f023 0308 	bic.w	r3, r3, #8
 80047e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f023 0304 	bic.w	r3, r3, #4
 80047f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a15      	ldr	r2, [pc, #84]	@ (8004850 <TIM_OC1_SetConfig+0xd8>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d003      	beq.n	8004806 <TIM_OC1_SetConfig+0x8e>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a14      	ldr	r2, [pc, #80]	@ (8004854 <TIM_OC1_SetConfig+0xdc>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d111      	bne.n	800482a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800480c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	4313      	orrs	r3, r2
 800481e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	4313      	orrs	r3, r2
 8004828:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	621a      	str	r2, [r3, #32]
}
 8004844:	bf00      	nop
 8004846:	371c      	adds	r7, #28
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	40010000 	.word	0x40010000
 8004854:	40010400 	.word	0x40010400

08004858 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004858:	b480      	push	{r7}
 800485a:	b087      	sub	sp, #28
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	f023 0210 	bic.w	r2, r3, #16
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800488e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	021b      	lsls	r3, r3, #8
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	4313      	orrs	r3, r2
 800489a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f023 0320 	bic.w	r3, r3, #32
 80048a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	011b      	lsls	r3, r3, #4
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a22      	ldr	r2, [pc, #136]	@ (800493c <TIM_OC2_SetConfig+0xe4>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d003      	beq.n	80048c0 <TIM_OC2_SetConfig+0x68>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a21      	ldr	r2, [pc, #132]	@ (8004940 <TIM_OC2_SetConfig+0xe8>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d10d      	bne.n	80048dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a17      	ldr	r2, [pc, #92]	@ (800493c <TIM_OC2_SetConfig+0xe4>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d003      	beq.n	80048ec <TIM_OC2_SetConfig+0x94>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a16      	ldr	r2, [pc, #88]	@ (8004940 <TIM_OC2_SetConfig+0xe8>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d113      	bne.n	8004914 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80048f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80048fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	4313      	orrs	r3, r2
 8004906:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	4313      	orrs	r3, r2
 8004912:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	621a      	str	r2, [r3, #32]
}
 800492e:	bf00      	nop
 8004930:	371c      	adds	r7, #28
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	40010000 	.word	0x40010000
 8004940:	40010400 	.word	0x40010400

08004944 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004944:	b480      	push	{r7}
 8004946:	b087      	sub	sp, #28
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f023 0303 	bic.w	r3, r3, #3
 800497a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	4313      	orrs	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800498c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	021b      	lsls	r3, r3, #8
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	4313      	orrs	r3, r2
 8004998:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a21      	ldr	r2, [pc, #132]	@ (8004a24 <TIM_OC3_SetConfig+0xe0>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d003      	beq.n	80049aa <TIM_OC3_SetConfig+0x66>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a20      	ldr	r2, [pc, #128]	@ (8004a28 <TIM_OC3_SetConfig+0xe4>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d10d      	bne.n	80049c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	021b      	lsls	r3, r3, #8
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80049c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a16      	ldr	r2, [pc, #88]	@ (8004a24 <TIM_OC3_SetConfig+0xe0>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d003      	beq.n	80049d6 <TIM_OC3_SetConfig+0x92>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a15      	ldr	r2, [pc, #84]	@ (8004a28 <TIM_OC3_SetConfig+0xe4>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d113      	bne.n	80049fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80049e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	011b      	lsls	r3, r3, #4
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	621a      	str	r2, [r3, #32]
}
 8004a18:	bf00      	nop
 8004a1a:	371c      	adds	r7, #28
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr
 8004a24:	40010000 	.word	0x40010000
 8004a28:	40010400 	.word	0x40010400

08004a2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	021b      	lsls	r3, r3, #8
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	031b      	lsls	r3, r3, #12
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a12      	ldr	r2, [pc, #72]	@ (8004ad0 <TIM_OC4_SetConfig+0xa4>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d003      	beq.n	8004a94 <TIM_OC4_SetConfig+0x68>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a11      	ldr	r2, [pc, #68]	@ (8004ad4 <TIM_OC4_SetConfig+0xa8>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d109      	bne.n	8004aa8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	019b      	lsls	r3, r3, #6
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	621a      	str	r2, [r3, #32]
}
 8004ac2:	bf00      	nop
 8004ac4:	371c      	adds	r7, #28
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	40010000 	.word	0x40010000
 8004ad4:	40010400 	.word	0x40010400

08004ad8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d101      	bne.n	8004af0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004aec:	2302      	movs	r3, #2
 8004aee:	e05a      	b.n	8004ba6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2202      	movs	r2, #2
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a21      	ldr	r2, [pc, #132]	@ (8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d022      	beq.n	8004b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b3c:	d01d      	beq.n	8004b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a1d      	ldr	r2, [pc, #116]	@ (8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d018      	beq.n	8004b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8004bbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d013      	beq.n	8004b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a1a      	ldr	r2, [pc, #104]	@ (8004bc0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d00e      	beq.n	8004b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a18      	ldr	r2, [pc, #96]	@ (8004bc4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d009      	beq.n	8004b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a17      	ldr	r2, [pc, #92]	@ (8004bc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d004      	beq.n	8004b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a15      	ldr	r2, [pc, #84]	@ (8004bcc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d10c      	bne.n	8004b94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3714      	adds	r7, #20
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	40010000 	.word	0x40010000
 8004bb8:	40000400 	.word	0x40000400
 8004bbc:	40000800 	.word	0x40000800
 8004bc0:	40000c00 	.word	0x40000c00
 8004bc4:	40010400 	.word	0x40010400
 8004bc8:	40014000 	.word	0x40014000
 8004bcc:	40001800 	.word	0x40001800

08004bd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d101      	bne.n	8004bec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004be8:	2302      	movs	r3, #2
 8004bea:	e03d      	b.n	8004c68 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3714      	adds	r7, #20
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e042      	b.n	8004d34 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d106      	bne.n	8004cc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7fd faf2 	bl	80022ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2224      	movs	r2, #36	@ 0x24
 8004ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68da      	ldr	r2, [r3, #12]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004cde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 f973 	bl	8004fcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	691a      	ldr	r2, [r3, #16]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cf4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	695a      	ldr	r2, [r3, #20]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68da      	ldr	r2, [r3, #12]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2220      	movs	r2, #32
 8004d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3708      	adds	r7, #8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b08a      	sub	sp, #40	@ 0x28
 8004d40:	af02      	add	r7, sp, #8
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	603b      	str	r3, [r7, #0]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b20      	cmp	r3, #32
 8004d5a:	d175      	bne.n	8004e48 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d002      	beq.n	8004d68 <HAL_UART_Transmit+0x2c>
 8004d62:	88fb      	ldrh	r3, [r7, #6]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e06e      	b.n	8004e4a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2221      	movs	r2, #33	@ 0x21
 8004d76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d7a:	f7fd fcdb 	bl	8002734 <HAL_GetTick>
 8004d7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	88fa      	ldrh	r2, [r7, #6]
 8004d84:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	88fa      	ldrh	r2, [r7, #6]
 8004d8a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d94:	d108      	bne.n	8004da8 <HAL_UART_Transmit+0x6c>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d104      	bne.n	8004da8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	61bb      	str	r3, [r7, #24]
 8004da6:	e003      	b.n	8004db0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dac:	2300      	movs	r3, #0
 8004dae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004db0:	e02e      	b.n	8004e10 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	2200      	movs	r2, #0
 8004dba:	2180      	movs	r1, #128	@ 0x80
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f000 f848 	bl	8004e52 <UART_WaitOnFlagUntilTimeout>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d005      	beq.n	8004dd4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e03a      	b.n	8004e4a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10b      	bne.n	8004df2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	881b      	ldrh	r3, [r3, #0]
 8004dde:	461a      	mov	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004de8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	3302      	adds	r3, #2
 8004dee:	61bb      	str	r3, [r7, #24]
 8004df0:	e007      	b.n	8004e02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	781a      	ldrb	r2, [r3, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1cb      	bne.n	8004db2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2200      	movs	r2, #0
 8004e22:	2140      	movs	r1, #64	@ 0x40
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 f814 	bl	8004e52 <UART_WaitOnFlagUntilTimeout>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d005      	beq.n	8004e3c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2220      	movs	r2, #32
 8004e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e006      	b.n	8004e4a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004e44:	2300      	movs	r3, #0
 8004e46:	e000      	b.n	8004e4a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004e48:	2302      	movs	r3, #2
  }
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3720      	adds	r7, #32
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b086      	sub	sp, #24
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	60f8      	str	r0, [r7, #12]
 8004e5a:	60b9      	str	r1, [r7, #8]
 8004e5c:	603b      	str	r3, [r7, #0]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e62:	e03b      	b.n	8004edc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e64:	6a3b      	ldr	r3, [r7, #32]
 8004e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6a:	d037      	beq.n	8004edc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e6c:	f7fd fc62 	bl	8002734 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	6a3a      	ldr	r2, [r7, #32]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d302      	bcc.n	8004e82 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e03a      	b.n	8004efc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f003 0304 	and.w	r3, r3, #4
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d023      	beq.n	8004edc <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	2b80      	cmp	r3, #128	@ 0x80
 8004e98:	d020      	beq.n	8004edc <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2b40      	cmp	r3, #64	@ 0x40
 8004e9e:	d01d      	beq.n	8004edc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0308 	and.w	r3, r3, #8
 8004eaa:	2b08      	cmp	r3, #8
 8004eac:	d116      	bne.n	8004edc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004eae:	2300      	movs	r3, #0
 8004eb0:	617b      	str	r3, [r7, #20]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	617b      	str	r3, [r7, #20]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	617b      	str	r3, [r7, #20]
 8004ec2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f000 f81d 	bl	8004f04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2208      	movs	r2, #8
 8004ece:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e00f      	b.n	8004efc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	bf0c      	ite	eq
 8004eec:	2301      	moveq	r3, #1
 8004eee:	2300      	movne	r3, #0
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	79fb      	ldrb	r3, [r7, #7]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d0b4      	beq.n	8004e64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3718      	adds	r7, #24
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b095      	sub	sp, #84	@ 0x54
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	330c      	adds	r3, #12
 8004f12:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f16:	e853 3f00 	ldrex	r3, [r3]
 8004f1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	330c      	adds	r3, #12
 8004f2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f2c:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f30:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f34:	e841 2300 	strex	r3, r2, [r1]
 8004f38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1e5      	bne.n	8004f0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	3314      	adds	r3, #20
 8004f46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	e853 3f00 	ldrex	r3, [r3]
 8004f4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	f023 0301 	bic.w	r3, r3, #1
 8004f56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	3314      	adds	r3, #20
 8004f5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f60:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f68:	e841 2300 	strex	r3, r2, [r1]
 8004f6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1e5      	bne.n	8004f40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d119      	bne.n	8004fb0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	330c      	adds	r3, #12
 8004f82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	e853 3f00 	ldrex	r3, [r3]
 8004f8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	f023 0310 	bic.w	r3, r3, #16
 8004f92:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	330c      	adds	r3, #12
 8004f9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f9c:	61ba      	str	r2, [r7, #24]
 8004f9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa0:	6979      	ldr	r1, [r7, #20]
 8004fa2:	69ba      	ldr	r2, [r7, #24]
 8004fa4:	e841 2300 	strex	r3, r2, [r1]
 8004fa8:	613b      	str	r3, [r7, #16]
   return(result);
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1e5      	bne.n	8004f7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004fbe:	bf00      	nop
 8004fc0:	3754      	adds	r7, #84	@ 0x54
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
	...

08004fcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fd0:	b0c0      	sub	sp, #256	@ 0x100
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fe8:	68d9      	ldr	r1, [r3, #12]
 8004fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	ea40 0301 	orr.w	r3, r0, r1
 8004ff4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ffa:	689a      	ldr	r2, [r3, #8]
 8004ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	431a      	orrs	r2, r3
 8005004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	431a      	orrs	r2, r3
 800500c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	4313      	orrs	r3, r2
 8005014:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005024:	f021 010c 	bic.w	r1, r1, #12
 8005028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005032:	430b      	orrs	r3, r1
 8005034:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005046:	6999      	ldr	r1, [r3, #24]
 8005048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	ea40 0301 	orr.w	r3, r0, r1
 8005052:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	4b8f      	ldr	r3, [pc, #572]	@ (8005298 <UART_SetConfig+0x2cc>)
 800505c:	429a      	cmp	r2, r3
 800505e:	d005      	beq.n	800506c <UART_SetConfig+0xa0>
 8005060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	4b8d      	ldr	r3, [pc, #564]	@ (800529c <UART_SetConfig+0x2d0>)
 8005068:	429a      	cmp	r2, r3
 800506a:	d104      	bne.n	8005076 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800506c:	f7fd ff04 	bl	8002e78 <HAL_RCC_GetPCLK2Freq>
 8005070:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005074:	e003      	b.n	800507e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005076:	f7fd feeb 	bl	8002e50 <HAL_RCC_GetPCLK1Freq>
 800507a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800507e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005088:	f040 810c 	bne.w	80052a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800508c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005090:	2200      	movs	r2, #0
 8005092:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005096:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800509a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800509e:	4622      	mov	r2, r4
 80050a0:	462b      	mov	r3, r5
 80050a2:	1891      	adds	r1, r2, r2
 80050a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80050a6:	415b      	adcs	r3, r3
 80050a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80050ae:	4621      	mov	r1, r4
 80050b0:	eb12 0801 	adds.w	r8, r2, r1
 80050b4:	4629      	mov	r1, r5
 80050b6:	eb43 0901 	adc.w	r9, r3, r1
 80050ba:	f04f 0200 	mov.w	r2, #0
 80050be:	f04f 0300 	mov.w	r3, #0
 80050c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050ce:	4690      	mov	r8, r2
 80050d0:	4699      	mov	r9, r3
 80050d2:	4623      	mov	r3, r4
 80050d4:	eb18 0303 	adds.w	r3, r8, r3
 80050d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80050dc:	462b      	mov	r3, r5
 80050de:	eb49 0303 	adc.w	r3, r9, r3
 80050e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80050e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80050f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80050f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80050fa:	460b      	mov	r3, r1
 80050fc:	18db      	adds	r3, r3, r3
 80050fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005100:	4613      	mov	r3, r2
 8005102:	eb42 0303 	adc.w	r3, r2, r3
 8005106:	657b      	str	r3, [r7, #84]	@ 0x54
 8005108:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800510c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005110:	f7fb fd92 	bl	8000c38 <__aeabi_uldivmod>
 8005114:	4602      	mov	r2, r0
 8005116:	460b      	mov	r3, r1
 8005118:	4b61      	ldr	r3, [pc, #388]	@ (80052a0 <UART_SetConfig+0x2d4>)
 800511a:	fba3 2302 	umull	r2, r3, r3, r2
 800511e:	095b      	lsrs	r3, r3, #5
 8005120:	011c      	lsls	r4, r3, #4
 8005122:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005126:	2200      	movs	r2, #0
 8005128:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800512c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005130:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005134:	4642      	mov	r2, r8
 8005136:	464b      	mov	r3, r9
 8005138:	1891      	adds	r1, r2, r2
 800513a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800513c:	415b      	adcs	r3, r3
 800513e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005140:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005144:	4641      	mov	r1, r8
 8005146:	eb12 0a01 	adds.w	sl, r2, r1
 800514a:	4649      	mov	r1, r9
 800514c:	eb43 0b01 	adc.w	fp, r3, r1
 8005150:	f04f 0200 	mov.w	r2, #0
 8005154:	f04f 0300 	mov.w	r3, #0
 8005158:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800515c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005160:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005164:	4692      	mov	sl, r2
 8005166:	469b      	mov	fp, r3
 8005168:	4643      	mov	r3, r8
 800516a:	eb1a 0303 	adds.w	r3, sl, r3
 800516e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005172:	464b      	mov	r3, r9
 8005174:	eb4b 0303 	adc.w	r3, fp, r3
 8005178:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800517c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005188:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800518c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005190:	460b      	mov	r3, r1
 8005192:	18db      	adds	r3, r3, r3
 8005194:	643b      	str	r3, [r7, #64]	@ 0x40
 8005196:	4613      	mov	r3, r2
 8005198:	eb42 0303 	adc.w	r3, r2, r3
 800519c:	647b      	str	r3, [r7, #68]	@ 0x44
 800519e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80051a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80051a6:	f7fb fd47 	bl	8000c38 <__aeabi_uldivmod>
 80051aa:	4602      	mov	r2, r0
 80051ac:	460b      	mov	r3, r1
 80051ae:	4611      	mov	r1, r2
 80051b0:	4b3b      	ldr	r3, [pc, #236]	@ (80052a0 <UART_SetConfig+0x2d4>)
 80051b2:	fba3 2301 	umull	r2, r3, r3, r1
 80051b6:	095b      	lsrs	r3, r3, #5
 80051b8:	2264      	movs	r2, #100	@ 0x64
 80051ba:	fb02 f303 	mul.w	r3, r2, r3
 80051be:	1acb      	subs	r3, r1, r3
 80051c0:	00db      	lsls	r3, r3, #3
 80051c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80051c6:	4b36      	ldr	r3, [pc, #216]	@ (80052a0 <UART_SetConfig+0x2d4>)
 80051c8:	fba3 2302 	umull	r2, r3, r3, r2
 80051cc:	095b      	lsrs	r3, r3, #5
 80051ce:	005b      	lsls	r3, r3, #1
 80051d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80051d4:	441c      	add	r4, r3
 80051d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051da:	2200      	movs	r2, #0
 80051dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80051e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80051e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80051e8:	4642      	mov	r2, r8
 80051ea:	464b      	mov	r3, r9
 80051ec:	1891      	adds	r1, r2, r2
 80051ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80051f0:	415b      	adcs	r3, r3
 80051f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80051f8:	4641      	mov	r1, r8
 80051fa:	1851      	adds	r1, r2, r1
 80051fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80051fe:	4649      	mov	r1, r9
 8005200:	414b      	adcs	r3, r1
 8005202:	637b      	str	r3, [r7, #52]	@ 0x34
 8005204:	f04f 0200 	mov.w	r2, #0
 8005208:	f04f 0300 	mov.w	r3, #0
 800520c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005210:	4659      	mov	r1, fp
 8005212:	00cb      	lsls	r3, r1, #3
 8005214:	4651      	mov	r1, sl
 8005216:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800521a:	4651      	mov	r1, sl
 800521c:	00ca      	lsls	r2, r1, #3
 800521e:	4610      	mov	r0, r2
 8005220:	4619      	mov	r1, r3
 8005222:	4603      	mov	r3, r0
 8005224:	4642      	mov	r2, r8
 8005226:	189b      	adds	r3, r3, r2
 8005228:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800522c:	464b      	mov	r3, r9
 800522e:	460a      	mov	r2, r1
 8005230:	eb42 0303 	adc.w	r3, r2, r3
 8005234:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005244:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005248:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800524c:	460b      	mov	r3, r1
 800524e:	18db      	adds	r3, r3, r3
 8005250:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005252:	4613      	mov	r3, r2
 8005254:	eb42 0303 	adc.w	r3, r2, r3
 8005258:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800525a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800525e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005262:	f7fb fce9 	bl	8000c38 <__aeabi_uldivmod>
 8005266:	4602      	mov	r2, r0
 8005268:	460b      	mov	r3, r1
 800526a:	4b0d      	ldr	r3, [pc, #52]	@ (80052a0 <UART_SetConfig+0x2d4>)
 800526c:	fba3 1302 	umull	r1, r3, r3, r2
 8005270:	095b      	lsrs	r3, r3, #5
 8005272:	2164      	movs	r1, #100	@ 0x64
 8005274:	fb01 f303 	mul.w	r3, r1, r3
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	3332      	adds	r3, #50	@ 0x32
 800527e:	4a08      	ldr	r2, [pc, #32]	@ (80052a0 <UART_SetConfig+0x2d4>)
 8005280:	fba2 2303 	umull	r2, r3, r2, r3
 8005284:	095b      	lsrs	r3, r3, #5
 8005286:	f003 0207 	and.w	r2, r3, #7
 800528a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4422      	add	r2, r4
 8005292:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005294:	e106      	b.n	80054a4 <UART_SetConfig+0x4d8>
 8005296:	bf00      	nop
 8005298:	40011000 	.word	0x40011000
 800529c:	40011400 	.word	0x40011400
 80052a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052a8:	2200      	movs	r2, #0
 80052aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80052ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80052b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80052b6:	4642      	mov	r2, r8
 80052b8:	464b      	mov	r3, r9
 80052ba:	1891      	adds	r1, r2, r2
 80052bc:	6239      	str	r1, [r7, #32]
 80052be:	415b      	adcs	r3, r3
 80052c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80052c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052c6:	4641      	mov	r1, r8
 80052c8:	1854      	adds	r4, r2, r1
 80052ca:	4649      	mov	r1, r9
 80052cc:	eb43 0501 	adc.w	r5, r3, r1
 80052d0:	f04f 0200 	mov.w	r2, #0
 80052d4:	f04f 0300 	mov.w	r3, #0
 80052d8:	00eb      	lsls	r3, r5, #3
 80052da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052de:	00e2      	lsls	r2, r4, #3
 80052e0:	4614      	mov	r4, r2
 80052e2:	461d      	mov	r5, r3
 80052e4:	4643      	mov	r3, r8
 80052e6:	18e3      	adds	r3, r4, r3
 80052e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80052ec:	464b      	mov	r3, r9
 80052ee:	eb45 0303 	adc.w	r3, r5, r3
 80052f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80052f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005302:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005306:	f04f 0200 	mov.w	r2, #0
 800530a:	f04f 0300 	mov.w	r3, #0
 800530e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005312:	4629      	mov	r1, r5
 8005314:	008b      	lsls	r3, r1, #2
 8005316:	4621      	mov	r1, r4
 8005318:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800531c:	4621      	mov	r1, r4
 800531e:	008a      	lsls	r2, r1, #2
 8005320:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005324:	f7fb fc88 	bl	8000c38 <__aeabi_uldivmod>
 8005328:	4602      	mov	r2, r0
 800532a:	460b      	mov	r3, r1
 800532c:	4b60      	ldr	r3, [pc, #384]	@ (80054b0 <UART_SetConfig+0x4e4>)
 800532e:	fba3 2302 	umull	r2, r3, r3, r2
 8005332:	095b      	lsrs	r3, r3, #5
 8005334:	011c      	lsls	r4, r3, #4
 8005336:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800533a:	2200      	movs	r2, #0
 800533c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005340:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005344:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005348:	4642      	mov	r2, r8
 800534a:	464b      	mov	r3, r9
 800534c:	1891      	adds	r1, r2, r2
 800534e:	61b9      	str	r1, [r7, #24]
 8005350:	415b      	adcs	r3, r3
 8005352:	61fb      	str	r3, [r7, #28]
 8005354:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005358:	4641      	mov	r1, r8
 800535a:	1851      	adds	r1, r2, r1
 800535c:	6139      	str	r1, [r7, #16]
 800535e:	4649      	mov	r1, r9
 8005360:	414b      	adcs	r3, r1
 8005362:	617b      	str	r3, [r7, #20]
 8005364:	f04f 0200 	mov.w	r2, #0
 8005368:	f04f 0300 	mov.w	r3, #0
 800536c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005370:	4659      	mov	r1, fp
 8005372:	00cb      	lsls	r3, r1, #3
 8005374:	4651      	mov	r1, sl
 8005376:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800537a:	4651      	mov	r1, sl
 800537c:	00ca      	lsls	r2, r1, #3
 800537e:	4610      	mov	r0, r2
 8005380:	4619      	mov	r1, r3
 8005382:	4603      	mov	r3, r0
 8005384:	4642      	mov	r2, r8
 8005386:	189b      	adds	r3, r3, r2
 8005388:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800538c:	464b      	mov	r3, r9
 800538e:	460a      	mov	r2, r1
 8005390:	eb42 0303 	adc.w	r3, r2, r3
 8005394:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80053a4:	f04f 0200 	mov.w	r2, #0
 80053a8:	f04f 0300 	mov.w	r3, #0
 80053ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80053b0:	4649      	mov	r1, r9
 80053b2:	008b      	lsls	r3, r1, #2
 80053b4:	4641      	mov	r1, r8
 80053b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053ba:	4641      	mov	r1, r8
 80053bc:	008a      	lsls	r2, r1, #2
 80053be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80053c2:	f7fb fc39 	bl	8000c38 <__aeabi_uldivmod>
 80053c6:	4602      	mov	r2, r0
 80053c8:	460b      	mov	r3, r1
 80053ca:	4611      	mov	r1, r2
 80053cc:	4b38      	ldr	r3, [pc, #224]	@ (80054b0 <UART_SetConfig+0x4e4>)
 80053ce:	fba3 2301 	umull	r2, r3, r3, r1
 80053d2:	095b      	lsrs	r3, r3, #5
 80053d4:	2264      	movs	r2, #100	@ 0x64
 80053d6:	fb02 f303 	mul.w	r3, r2, r3
 80053da:	1acb      	subs	r3, r1, r3
 80053dc:	011b      	lsls	r3, r3, #4
 80053de:	3332      	adds	r3, #50	@ 0x32
 80053e0:	4a33      	ldr	r2, [pc, #204]	@ (80054b0 <UART_SetConfig+0x4e4>)
 80053e2:	fba2 2303 	umull	r2, r3, r2, r3
 80053e6:	095b      	lsrs	r3, r3, #5
 80053e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053ec:	441c      	add	r4, r3
 80053ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053f2:	2200      	movs	r2, #0
 80053f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80053f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80053f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80053fc:	4642      	mov	r2, r8
 80053fe:	464b      	mov	r3, r9
 8005400:	1891      	adds	r1, r2, r2
 8005402:	60b9      	str	r1, [r7, #8]
 8005404:	415b      	adcs	r3, r3
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800540c:	4641      	mov	r1, r8
 800540e:	1851      	adds	r1, r2, r1
 8005410:	6039      	str	r1, [r7, #0]
 8005412:	4649      	mov	r1, r9
 8005414:	414b      	adcs	r3, r1
 8005416:	607b      	str	r3, [r7, #4]
 8005418:	f04f 0200 	mov.w	r2, #0
 800541c:	f04f 0300 	mov.w	r3, #0
 8005420:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005424:	4659      	mov	r1, fp
 8005426:	00cb      	lsls	r3, r1, #3
 8005428:	4651      	mov	r1, sl
 800542a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800542e:	4651      	mov	r1, sl
 8005430:	00ca      	lsls	r2, r1, #3
 8005432:	4610      	mov	r0, r2
 8005434:	4619      	mov	r1, r3
 8005436:	4603      	mov	r3, r0
 8005438:	4642      	mov	r2, r8
 800543a:	189b      	adds	r3, r3, r2
 800543c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800543e:	464b      	mov	r3, r9
 8005440:	460a      	mov	r2, r1
 8005442:	eb42 0303 	adc.w	r3, r2, r3
 8005446:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	663b      	str	r3, [r7, #96]	@ 0x60
 8005452:	667a      	str	r2, [r7, #100]	@ 0x64
 8005454:	f04f 0200 	mov.w	r2, #0
 8005458:	f04f 0300 	mov.w	r3, #0
 800545c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005460:	4649      	mov	r1, r9
 8005462:	008b      	lsls	r3, r1, #2
 8005464:	4641      	mov	r1, r8
 8005466:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800546a:	4641      	mov	r1, r8
 800546c:	008a      	lsls	r2, r1, #2
 800546e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005472:	f7fb fbe1 	bl	8000c38 <__aeabi_uldivmod>
 8005476:	4602      	mov	r2, r0
 8005478:	460b      	mov	r3, r1
 800547a:	4b0d      	ldr	r3, [pc, #52]	@ (80054b0 <UART_SetConfig+0x4e4>)
 800547c:	fba3 1302 	umull	r1, r3, r3, r2
 8005480:	095b      	lsrs	r3, r3, #5
 8005482:	2164      	movs	r1, #100	@ 0x64
 8005484:	fb01 f303 	mul.w	r3, r1, r3
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	011b      	lsls	r3, r3, #4
 800548c:	3332      	adds	r3, #50	@ 0x32
 800548e:	4a08      	ldr	r2, [pc, #32]	@ (80054b0 <UART_SetConfig+0x4e4>)
 8005490:	fba2 2303 	umull	r2, r3, r2, r3
 8005494:	095b      	lsrs	r3, r3, #5
 8005496:	f003 020f 	and.w	r2, r3, #15
 800549a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4422      	add	r2, r4
 80054a2:	609a      	str	r2, [r3, #8]
}
 80054a4:	bf00      	nop
 80054a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80054aa:	46bd      	mov	sp, r7
 80054ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054b0:	51eb851f 	.word	0x51eb851f

080054b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80054b8:	4904      	ldr	r1, [pc, #16]	@ (80054cc <MX_FATFS_Init+0x18>)
 80054ba:	4805      	ldr	r0, [pc, #20]	@ (80054d0 <MX_FATFS_Init+0x1c>)
 80054bc:	f003 f836 	bl	800852c <FATFS_LinkDriver>
 80054c0:	4603      	mov	r3, r0
 80054c2:	461a      	mov	r2, r3
 80054c4:	4b03      	ldr	r3, [pc, #12]	@ (80054d4 <MX_FATFS_Init+0x20>)
 80054c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80054c8:	bf00      	nop
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	20000544 	.word	0x20000544
 80054d0:	2000000c 	.word	0x2000000c
 80054d4:	20000540 	.word	0x20000540

080054d8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80054d8:	b480      	push	{r7}
 80054da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80054dc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80054de:	4618      	mov	r0, r3
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	4603      	mov	r3, r0
 80054f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINEStat = STA_NOINIT;
 80054f2:	79fb      	ldrb	r3, [r7, #7]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f000 f9d3 	bl	80058a0 <USER_SPI_initialize>
 80054fa:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3708      	adds	r7, #8
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	4603      	mov	r3, r0
 800550c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 800550e:	79fb      	ldrb	r3, [r7, #7]
 8005510:	4618      	mov	r0, r3
 8005512:	f000 fab1 	bl	8005a78 <USER_SPI_status>
 8005516:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005518:	4618      	mov	r0, r3
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	60b9      	str	r1, [r7, #8]
 8005528:	607a      	str	r2, [r7, #4]
 800552a:	603b      	str	r3, [r7, #0]
 800552c:	4603      	mov	r3, r0
 800552e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8005530:	7bf8      	ldrb	r0, [r7, #15]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	68b9      	ldr	r1, [r7, #8]
 8005538:	f000 fab4 	bl	8005aa4 <USER_SPI_read>
 800553c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800553e:	4618      	mov	r0, r3
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b084      	sub	sp, #16
 800554a:	af00      	add	r7, sp, #0
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
 8005550:	603b      	str	r3, [r7, #0]
 8005552:	4603      	mov	r3, r0
 8005554:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8005556:	7bf8      	ldrb	r0, [r7, #15]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	68b9      	ldr	r1, [r7, #8]
 800555e:	f000 fb07 	bl	8005b70 <USER_SPI_write>
 8005562:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005564:	4618      	mov	r0, r3
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	4603      	mov	r3, r0
 8005574:	603a      	str	r2, [r7, #0]
 8005576:	71fb      	strb	r3, [r7, #7]
 8005578:	460b      	mov	r3, r1
 800557a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 800557c:	79b9      	ldrb	r1, [r7, #6]
 800557e:	79fb      	ldrb	r3, [r7, #7]
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	4618      	mov	r0, r3
 8005584:	f000 fb70 	bl	8005c68 <USER_SPI_ioctl>
 8005588:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800558a:	4618      	mov	r0, r3
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
	...

08005594 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800559c:	f7fd f8ca 	bl	8002734 <HAL_GetTick>
 80055a0:	4603      	mov	r3, r0
 80055a2:	4a04      	ldr	r2, [pc, #16]	@ (80055b4 <SPI_Timer_On+0x20>)
 80055a4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80055a6:	4a04      	ldr	r2, [pc, #16]	@ (80055b8 <SPI_Timer_On+0x24>)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6013      	str	r3, [r2, #0]
}
 80055ac:	bf00      	nop
 80055ae:	3708      	adds	r7, #8
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	2000054c 	.word	0x2000054c
 80055b8:	20000550 	.word	0x20000550

080055bc <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80055bc:	b580      	push	{r7, lr}
 80055be:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80055c0:	f7fd f8b8 	bl	8002734 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	4b06      	ldr	r3, [pc, #24]	@ (80055e0 <SPI_Timer_Status+0x24>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	1ad2      	subs	r2, r2, r3
 80055cc:	4b05      	ldr	r3, [pc, #20]	@ (80055e4 <SPI_Timer_Status+0x28>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	bf34      	ite	cc
 80055d4:	2301      	movcc	r3, #1
 80055d6:	2300      	movcs	r3, #0
 80055d8:	b2db      	uxtb	r3, r3
}
 80055da:	4618      	mov	r0, r3
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	2000054c 	.word	0x2000054c
 80055e4:	20000550 	.word	0x20000550

080055e8 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b086      	sub	sp, #24
 80055ec:	af02      	add	r7, sp, #8
 80055ee:	4603      	mov	r3, r0
 80055f0:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80055f2:	f107 020f 	add.w	r2, r7, #15
 80055f6:	1df9      	adds	r1, r7, #7
 80055f8:	2332      	movs	r3, #50	@ 0x32
 80055fa:	9300      	str	r3, [sp, #0]
 80055fc:	2301      	movs	r3, #1
 80055fe:	4804      	ldr	r0, [pc, #16]	@ (8005610 <xchg_spi+0x28>)
 8005600:	f7fe fa95 	bl	8003b2e <HAL_SPI_TransmitReceive>
    return rxDat;
 8005604:	7bfb      	ldrb	r3, [r7, #15]
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	200002f8 	.word	0x200002f8

08005614 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8005614:	b590      	push	{r4, r7, lr}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800561e:	2300      	movs	r3, #0
 8005620:	60fb      	str	r3, [r7, #12]
 8005622:	e00a      	b.n	800563a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	18d4      	adds	r4, r2, r3
 800562a:	20ff      	movs	r0, #255	@ 0xff
 800562c:	f7ff ffdc 	bl	80055e8 <xchg_spi>
 8005630:	4603      	mov	r3, r0
 8005632:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	3301      	adds	r3, #1
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	429a      	cmp	r2, r3
 8005640:	d3f0      	bcc.n	8005624 <rcvr_spi_multi+0x10>
	}
}
 8005642:	bf00      	nop
 8005644:	bf00      	nop
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	bd90      	pop	{r4, r7, pc}

0800564c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	b29a      	uxth	r2, r3
 800565a:	f04f 33ff 	mov.w	r3, #4294967295
 800565e:	6879      	ldr	r1, [r7, #4]
 8005660:	4803      	ldr	r0, [pc, #12]	@ (8005670 <xmit_spi_multi+0x24>)
 8005662:	f7fe f920 	bl	80038a6 <HAL_SPI_Transmit>
}
 8005666:	bf00      	nop
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	200002f8 	.word	0x200002f8

08005674 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800567c:	f7fd f85a 	bl	8002734 <HAL_GetTick>
 8005680:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8005686:	20ff      	movs	r0, #255	@ 0xff
 8005688:	f7ff ffae 	bl	80055e8 <xchg_spi>
 800568c:	4603      	mov	r3, r0
 800568e:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8005690:	7bfb      	ldrb	r3, [r7, #15]
 8005692:	2bff      	cmp	r3, #255	@ 0xff
 8005694:	d007      	beq.n	80056a6 <wait_ready+0x32>
 8005696:	f7fd f84d 	bl	8002734 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d8ef      	bhi.n	8005686 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80056a6:	7bfb      	ldrb	r3, [r7, #15]
 80056a8:	2bff      	cmp	r3, #255	@ 0xff
 80056aa:	bf0c      	ite	eq
 80056ac:	2301      	moveq	r3, #1
 80056ae:	2300      	movne	r3, #0
 80056b0:	b2db      	uxtb	r3, r3
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3718      	adds	r7, #24
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
	...

080056bc <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80056c0:	2201      	movs	r2, #1
 80056c2:	2110      	movs	r1, #16
 80056c4:	4803      	ldr	r0, [pc, #12]	@ (80056d4 <despiselect+0x18>)
 80056c6:	f7fd fab7 	bl	8002c38 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80056ca:	20ff      	movs	r0, #255	@ 0xff
 80056cc:	f7ff ff8c 	bl	80055e8 <xchg_spi>

}
 80056d0:	bf00      	nop
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	40020000 	.word	0x40020000

080056d8 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80056dc:	2200      	movs	r2, #0
 80056de:	2110      	movs	r1, #16
 80056e0:	4809      	ldr	r0, [pc, #36]	@ (8005708 <spiselect+0x30>)
 80056e2:	f7fd faa9 	bl	8002c38 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80056e6:	20ff      	movs	r0, #255	@ 0xff
 80056e8:	f7ff ff7e 	bl	80055e8 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80056ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80056f0:	f7ff ffc0 	bl	8005674 <wait_ready>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d001      	beq.n	80056fe <spiselect+0x26>
 80056fa:	2301      	movs	r3, #1
 80056fc:	e002      	b.n	8005704 <spiselect+0x2c>

	despiselect();
 80056fe:	f7ff ffdd 	bl	80056bc <despiselect>
	return 0;	/* Timeout */
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	bd80      	pop	{r7, pc}
 8005708:	40020000 	.word	0x40020000

0800570c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8005716:	20c8      	movs	r0, #200	@ 0xc8
 8005718:	f7ff ff3c 	bl	8005594 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800571c:	20ff      	movs	r0, #255	@ 0xff
 800571e:	f7ff ff63 	bl	80055e8 <xchg_spi>
 8005722:	4603      	mov	r3, r0
 8005724:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8005726:	7bfb      	ldrb	r3, [r7, #15]
 8005728:	2bff      	cmp	r3, #255	@ 0xff
 800572a:	d104      	bne.n	8005736 <rcvr_datablock+0x2a>
 800572c:	f7ff ff46 	bl	80055bc <SPI_Timer_Status>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1f2      	bne.n	800571c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8005736:	7bfb      	ldrb	r3, [r7, #15]
 8005738:	2bfe      	cmp	r3, #254	@ 0xfe
 800573a:	d001      	beq.n	8005740 <rcvr_datablock+0x34>
 800573c:	2300      	movs	r3, #0
 800573e:	e00a      	b.n	8005756 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8005740:	6839      	ldr	r1, [r7, #0]
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7ff ff66 	bl	8005614 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8005748:	20ff      	movs	r0, #255	@ 0xff
 800574a:	f7ff ff4d 	bl	80055e8 <xchg_spi>
 800574e:	20ff      	movs	r0, #255	@ 0xff
 8005750:	f7ff ff4a 	bl	80055e8 <xchg_spi>

	return 1;						/* Function succeeded */
 8005754:	2301      	movs	r3, #1
}
 8005756:	4618      	mov	r0, r3
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b084      	sub	sp, #16
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
 8005766:	460b      	mov	r3, r1
 8005768:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800576a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800576e:	f7ff ff81 	bl	8005674 <wait_ready>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d101      	bne.n	800577c <xmit_datablock+0x1e>
 8005778:	2300      	movs	r3, #0
 800577a:	e01e      	b.n	80057ba <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800577c:	78fb      	ldrb	r3, [r7, #3]
 800577e:	4618      	mov	r0, r3
 8005780:	f7ff ff32 	bl	80055e8 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8005784:	78fb      	ldrb	r3, [r7, #3]
 8005786:	2bfd      	cmp	r3, #253	@ 0xfd
 8005788:	d016      	beq.n	80057b8 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800578a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7ff ff5c 	bl	800564c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8005794:	20ff      	movs	r0, #255	@ 0xff
 8005796:	f7ff ff27 	bl	80055e8 <xchg_spi>
 800579a:	20ff      	movs	r0, #255	@ 0xff
 800579c:	f7ff ff24 	bl	80055e8 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80057a0:	20ff      	movs	r0, #255	@ 0xff
 80057a2:	f7ff ff21 	bl	80055e8 <xchg_spi>
 80057a6:	4603      	mov	r3, r0
 80057a8:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80057aa:	7bfb      	ldrb	r3, [r7, #15]
 80057ac:	f003 031f 	and.w	r3, r3, #31
 80057b0:	2b05      	cmp	r3, #5
 80057b2:	d001      	beq.n	80057b8 <xmit_datablock+0x5a>
 80057b4:	2300      	movs	r3, #0
 80057b6:	e000      	b.n	80057ba <xmit_datablock+0x5c>
	}
	return 1;
 80057b8:	2301      	movs	r3, #1
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b084      	sub	sp, #16
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	4603      	mov	r3, r0
 80057ca:	6039      	str	r1, [r7, #0]
 80057cc:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80057ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	da0e      	bge.n	80057f4 <send_cmd+0x32>
		cmd &= 0x7F;
 80057d6:	79fb      	ldrb	r3, [r7, #7]
 80057d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057dc:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80057de:	2100      	movs	r1, #0
 80057e0:	2037      	movs	r0, #55	@ 0x37
 80057e2:	f7ff ffee 	bl	80057c2 <send_cmd>
 80057e6:	4603      	mov	r3, r0
 80057e8:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80057ea:	7bbb      	ldrb	r3, [r7, #14]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d901      	bls.n	80057f4 <send_cmd+0x32>
 80057f0:	7bbb      	ldrb	r3, [r7, #14]
 80057f2:	e051      	b.n	8005898 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80057f4:	79fb      	ldrb	r3, [r7, #7]
 80057f6:	2b0c      	cmp	r3, #12
 80057f8:	d008      	beq.n	800580c <send_cmd+0x4a>
		despiselect();
 80057fa:	f7ff ff5f 	bl	80056bc <despiselect>
		if (!spiselect()) return 0xFF;
 80057fe:	f7ff ff6b 	bl	80056d8 <spiselect>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d101      	bne.n	800580c <send_cmd+0x4a>
 8005808:	23ff      	movs	r3, #255	@ 0xff
 800580a:	e045      	b.n	8005898 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800580c:	79fb      	ldrb	r3, [r7, #7]
 800580e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005812:	b2db      	uxtb	r3, r3
 8005814:	4618      	mov	r0, r3
 8005816:	f7ff fee7 	bl	80055e8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	0e1b      	lsrs	r3, r3, #24
 800581e:	b2db      	uxtb	r3, r3
 8005820:	4618      	mov	r0, r3
 8005822:	f7ff fee1 	bl	80055e8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	0c1b      	lsrs	r3, r3, #16
 800582a:	b2db      	uxtb	r3, r3
 800582c:	4618      	mov	r0, r3
 800582e:	f7ff fedb 	bl	80055e8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	0a1b      	lsrs	r3, r3, #8
 8005836:	b2db      	uxtb	r3, r3
 8005838:	4618      	mov	r0, r3
 800583a:	f7ff fed5 	bl	80055e8 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	b2db      	uxtb	r3, r3
 8005842:	4618      	mov	r0, r3
 8005844:	f7ff fed0 	bl	80055e8 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8005848:	2301      	movs	r3, #1
 800584a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800584c:	79fb      	ldrb	r3, [r7, #7]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <send_cmd+0x94>
 8005852:	2395      	movs	r3, #149	@ 0x95
 8005854:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8005856:	79fb      	ldrb	r3, [r7, #7]
 8005858:	2b08      	cmp	r3, #8
 800585a:	d101      	bne.n	8005860 <send_cmd+0x9e>
 800585c:	2387      	movs	r3, #135	@ 0x87
 800585e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8005860:	7bfb      	ldrb	r3, [r7, #15]
 8005862:	4618      	mov	r0, r3
 8005864:	f7ff fec0 	bl	80055e8 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8005868:	79fb      	ldrb	r3, [r7, #7]
 800586a:	2b0c      	cmp	r3, #12
 800586c:	d102      	bne.n	8005874 <send_cmd+0xb2>
 800586e:	20ff      	movs	r0, #255	@ 0xff
 8005870:	f7ff feba 	bl	80055e8 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8005874:	230a      	movs	r3, #10
 8005876:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8005878:	20ff      	movs	r0, #255	@ 0xff
 800587a:	f7ff feb5 	bl	80055e8 <xchg_spi>
 800587e:	4603      	mov	r3, r0
 8005880:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8005882:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005886:	2b00      	cmp	r3, #0
 8005888:	da05      	bge.n	8005896 <send_cmd+0xd4>
 800588a:	7bfb      	ldrb	r3, [r7, #15]
 800588c:	3b01      	subs	r3, #1
 800588e:	73fb      	strb	r3, [r7, #15]
 8005890:	7bfb      	ldrb	r3, [r7, #15]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1f0      	bne.n	8005878 <send_cmd+0xb6>

	return res;							/* Return received response */
 8005896:	7bbb      	ldrb	r3, [r7, #14]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80058a0:	b590      	push	{r4, r7, lr}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	4603      	mov	r3, r0
 80058a8:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80058aa:	79fb      	ldrb	r3, [r7, #7]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d001      	beq.n	80058b4 <USER_SPI_initialize+0x14>
 80058b0:	2301      	movs	r3, #1
 80058b2:	e0d6      	b.n	8005a62 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80058b4:	4b6d      	ldr	r3, [pc, #436]	@ (8005a6c <USER_SPI_initialize+0x1cc>)
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d003      	beq.n	80058ca <USER_SPI_initialize+0x2a>
 80058c2:	4b6a      	ldr	r3, [pc, #424]	@ (8005a6c <USER_SPI_initialize+0x1cc>)
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	e0cb      	b.n	8005a62 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80058ca:	4b69      	ldr	r3, [pc, #420]	@ (8005a70 <USER_SPI_initialize+0x1d0>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80058d4:	4b66      	ldr	r3, [pc, #408]	@ (8005a70 <USER_SPI_initialize+0x1d0>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 80058dc:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80058de:	230a      	movs	r3, #10
 80058e0:	73fb      	strb	r3, [r7, #15]
 80058e2:	e005      	b.n	80058f0 <USER_SPI_initialize+0x50>
 80058e4:	20ff      	movs	r0, #255	@ 0xff
 80058e6:	f7ff fe7f 	bl	80055e8 <xchg_spi>
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
 80058ec:	3b01      	subs	r3, #1
 80058ee:	73fb      	strb	r3, [r7, #15]
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1f6      	bne.n	80058e4 <USER_SPI_initialize+0x44>

	ty = 0;
 80058f6:	2300      	movs	r3, #0
 80058f8:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80058fa:	2100      	movs	r1, #0
 80058fc:	2000      	movs	r0, #0
 80058fe:	f7ff ff60 	bl	80057c2 <send_cmd>
 8005902:	4603      	mov	r3, r0
 8005904:	2b01      	cmp	r3, #1
 8005906:	f040 808b 	bne.w	8005a20 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800590a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800590e:	f7ff fe41 	bl	8005594 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8005912:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8005916:	2008      	movs	r0, #8
 8005918:	f7ff ff53 	bl	80057c2 <send_cmd>
 800591c:	4603      	mov	r3, r0
 800591e:	2b01      	cmp	r3, #1
 8005920:	d151      	bne.n	80059c6 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8005922:	2300      	movs	r3, #0
 8005924:	73fb      	strb	r3, [r7, #15]
 8005926:	e00d      	b.n	8005944 <USER_SPI_initialize+0xa4>
 8005928:	7bfc      	ldrb	r4, [r7, #15]
 800592a:	20ff      	movs	r0, #255	@ 0xff
 800592c:	f7ff fe5c 	bl	80055e8 <xchg_spi>
 8005930:	4603      	mov	r3, r0
 8005932:	461a      	mov	r2, r3
 8005934:	f104 0310 	add.w	r3, r4, #16
 8005938:	443b      	add	r3, r7
 800593a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800593e:	7bfb      	ldrb	r3, [r7, #15]
 8005940:	3301      	adds	r3, #1
 8005942:	73fb      	strb	r3, [r7, #15]
 8005944:	7bfb      	ldrb	r3, [r7, #15]
 8005946:	2b03      	cmp	r3, #3
 8005948:	d9ee      	bls.n	8005928 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800594a:	7abb      	ldrb	r3, [r7, #10]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d167      	bne.n	8005a20 <USER_SPI_initialize+0x180>
 8005950:	7afb      	ldrb	r3, [r7, #11]
 8005952:	2baa      	cmp	r3, #170	@ 0xaa
 8005954:	d164      	bne.n	8005a20 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8005956:	bf00      	nop
 8005958:	f7ff fe30 	bl	80055bc <SPI_Timer_Status>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d007      	beq.n	8005972 <USER_SPI_initialize+0xd2>
 8005962:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005966:	20a9      	movs	r0, #169	@ 0xa9
 8005968:	f7ff ff2b 	bl	80057c2 <send_cmd>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1f2      	bne.n	8005958 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8005972:	f7ff fe23 	bl	80055bc <SPI_Timer_Status>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d051      	beq.n	8005a20 <USER_SPI_initialize+0x180>
 800597c:	2100      	movs	r1, #0
 800597e:	203a      	movs	r0, #58	@ 0x3a
 8005980:	f7ff ff1f 	bl	80057c2 <send_cmd>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d14a      	bne.n	8005a20 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800598a:	2300      	movs	r3, #0
 800598c:	73fb      	strb	r3, [r7, #15]
 800598e:	e00d      	b.n	80059ac <USER_SPI_initialize+0x10c>
 8005990:	7bfc      	ldrb	r4, [r7, #15]
 8005992:	20ff      	movs	r0, #255	@ 0xff
 8005994:	f7ff fe28 	bl	80055e8 <xchg_spi>
 8005998:	4603      	mov	r3, r0
 800599a:	461a      	mov	r2, r3
 800599c:	f104 0310 	add.w	r3, r4, #16
 80059a0:	443b      	add	r3, r7
 80059a2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80059a6:	7bfb      	ldrb	r3, [r7, #15]
 80059a8:	3301      	adds	r3, #1
 80059aa:	73fb      	strb	r3, [r7, #15]
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
 80059ae:	2b03      	cmp	r3, #3
 80059b0:	d9ee      	bls.n	8005990 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80059b2:	7a3b      	ldrb	r3, [r7, #8]
 80059b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <USER_SPI_initialize+0x120>
 80059bc:	230c      	movs	r3, #12
 80059be:	e000      	b.n	80059c2 <USER_SPI_initialize+0x122>
 80059c0:	2304      	movs	r3, #4
 80059c2:	737b      	strb	r3, [r7, #13]
 80059c4:	e02c      	b.n	8005a20 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80059c6:	2100      	movs	r1, #0
 80059c8:	20a9      	movs	r0, #169	@ 0xa9
 80059ca:	f7ff fefa 	bl	80057c2 <send_cmd>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d804      	bhi.n	80059de <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80059d4:	2302      	movs	r3, #2
 80059d6:	737b      	strb	r3, [r7, #13]
 80059d8:	23a9      	movs	r3, #169	@ 0xa9
 80059da:	73bb      	strb	r3, [r7, #14]
 80059dc:	e003      	b.n	80059e6 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80059de:	2301      	movs	r3, #1
 80059e0:	737b      	strb	r3, [r7, #13]
 80059e2:	2301      	movs	r3, #1
 80059e4:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80059e6:	bf00      	nop
 80059e8:	f7ff fde8 	bl	80055bc <SPI_Timer_Status>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d007      	beq.n	8005a02 <USER_SPI_initialize+0x162>
 80059f2:	7bbb      	ldrb	r3, [r7, #14]
 80059f4:	2100      	movs	r1, #0
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff fee3 	bl	80057c2 <send_cmd>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1f2      	bne.n	80059e8 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8005a02:	f7ff fddb 	bl	80055bc <SPI_Timer_Status>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d007      	beq.n	8005a1c <USER_SPI_initialize+0x17c>
 8005a0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005a10:	2010      	movs	r0, #16
 8005a12:	f7ff fed6 	bl	80057c2 <send_cmd>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <USER_SPI_initialize+0x180>
				ty = 0;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8005a20:	4a14      	ldr	r2, [pc, #80]	@ (8005a74 <USER_SPI_initialize+0x1d4>)
 8005a22:	7b7b      	ldrb	r3, [r7, #13]
 8005a24:	7013      	strb	r3, [r2, #0]
	despiselect();
 8005a26:	f7ff fe49 	bl	80056bc <despiselect>

	if (ty) {			/* OK */
 8005a2a:	7b7b      	ldrb	r3, [r7, #13]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d012      	beq.n	8005a56 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8005a30:	4b0f      	ldr	r3, [pc, #60]	@ (8005a70 <USER_SPI_initialize+0x1d0>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8005a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a70 <USER_SPI_initialize+0x1d0>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f042 0210 	orr.w	r2, r2, #16
 8005a42:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8005a44:	4b09      	ldr	r3, [pc, #36]	@ (8005a6c <USER_SPI_initialize+0x1cc>)
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	f023 0301 	bic.w	r3, r3, #1
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	4b06      	ldr	r3, [pc, #24]	@ (8005a6c <USER_SPI_initialize+0x1cc>)
 8005a52:	701a      	strb	r2, [r3, #0]
 8005a54:	e002      	b.n	8005a5c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8005a56:	4b05      	ldr	r3, [pc, #20]	@ (8005a6c <USER_SPI_initialize+0x1cc>)
 8005a58:	2201      	movs	r2, #1
 8005a5a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8005a5c:	4b03      	ldr	r3, [pc, #12]	@ (8005a6c <USER_SPI_initialize+0x1cc>)
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	b2db      	uxtb	r3, r3
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd90      	pop	{r4, r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20000020 	.word	0x20000020
 8005a70:	200002f8 	.word	0x200002f8
 8005a74:	20000548 	.word	0x20000548

08005a78 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	4603      	mov	r3, r0
 8005a80:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8005a82:	79fb      	ldrb	r3, [r7, #7]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d001      	beq.n	8005a8c <USER_SPI_status+0x14>
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e002      	b.n	8005a92 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8005a8c:	4b04      	ldr	r3, [pc, #16]	@ (8005aa0 <USER_SPI_status+0x28>)
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	b2db      	uxtb	r3, r3
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	370c      	adds	r7, #12
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	20000020 	.word	0x20000020

08005aa4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60b9      	str	r1, [r7, #8]
 8005aac:	607a      	str	r2, [r7, #4]
 8005aae:	603b      	str	r3, [r7, #0]
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005ab4:	7bfb      	ldrb	r3, [r7, #15]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d102      	bne.n	8005ac0 <USER_SPI_read+0x1c>
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <USER_SPI_read+0x20>
 8005ac0:	2304      	movs	r3, #4
 8005ac2:	e04d      	b.n	8005b60 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005ac4:	4b28      	ldr	r3, [pc, #160]	@ (8005b68 <USER_SPI_read+0xc4>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d001      	beq.n	8005ad6 <USER_SPI_read+0x32>
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e044      	b.n	8005b60 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8005ad6:	4b25      	ldr	r3, [pc, #148]	@ (8005b6c <USER_SPI_read+0xc8>)
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	f003 0308 	and.w	r3, r3, #8
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d102      	bne.n	8005ae8 <USER_SPI_read+0x44>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	025b      	lsls	r3, r3, #9
 8005ae6:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d111      	bne.n	8005b12 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8005aee:	6879      	ldr	r1, [r7, #4]
 8005af0:	2011      	movs	r0, #17
 8005af2:	f7ff fe66 	bl	80057c2 <send_cmd>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d129      	bne.n	8005b50 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8005afc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005b00:	68b8      	ldr	r0, [r7, #8]
 8005b02:	f7ff fe03 	bl	800570c <rcvr_datablock>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d021      	beq.n	8005b50 <USER_SPI_read+0xac>
			count = 0;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	603b      	str	r3, [r7, #0]
 8005b10:	e01e      	b.n	8005b50 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8005b12:	6879      	ldr	r1, [r7, #4]
 8005b14:	2012      	movs	r0, #18
 8005b16:	f7ff fe54 	bl	80057c2 <send_cmd>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d117      	bne.n	8005b50 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8005b20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005b24:	68b8      	ldr	r0, [r7, #8]
 8005b26:	f7ff fdf1 	bl	800570c <rcvr_datablock>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00a      	beq.n	8005b46 <USER_SPI_read+0xa2>
				buff += 512;
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005b36:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	603b      	str	r3, [r7, #0]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1ed      	bne.n	8005b20 <USER_SPI_read+0x7c>
 8005b44:	e000      	b.n	8005b48 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8005b46:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8005b48:	2100      	movs	r1, #0
 8005b4a:	200c      	movs	r0, #12
 8005b4c:	f7ff fe39 	bl	80057c2 <send_cmd>
		}
	}
	despiselect();
 8005b50:	f7ff fdb4 	bl	80056bc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	bf14      	ite	ne
 8005b5a:	2301      	movne	r3, #1
 8005b5c:	2300      	moveq	r3, #0
 8005b5e:	b2db      	uxtb	r3, r3
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	20000020 	.word	0x20000020
 8005b6c:	20000548 	.word	0x20000548

08005b70 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60b9      	str	r1, [r7, #8]
 8005b78:	607a      	str	r2, [r7, #4]
 8005b7a:	603b      	str	r3, [r7, #0]
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005b80:	7bfb      	ldrb	r3, [r7, #15]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d102      	bne.n	8005b8c <USER_SPI_write+0x1c>
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d101      	bne.n	8005b90 <USER_SPI_write+0x20>
 8005b8c:	2304      	movs	r3, #4
 8005b8e:	e063      	b.n	8005c58 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8005b90:	4b33      	ldr	r3, [pc, #204]	@ (8005c60 <USER_SPI_write+0xf0>)
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	f003 0301 	and.w	r3, r3, #1
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d001      	beq.n	8005ba2 <USER_SPI_write+0x32>
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e05a      	b.n	8005c58 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8005ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8005c60 <USER_SPI_write+0xf0>)
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d001      	beq.n	8005bb4 <USER_SPI_write+0x44>
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	e051      	b.n	8005c58 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8005bb4:	4b2b      	ldr	r3, [pc, #172]	@ (8005c64 <USER_SPI_write+0xf4>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	f003 0308 	and.w	r3, r3, #8
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d102      	bne.n	8005bc6 <USER_SPI_write+0x56>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	025b      	lsls	r3, r3, #9
 8005bc4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d110      	bne.n	8005bee <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8005bcc:	6879      	ldr	r1, [r7, #4]
 8005bce:	2018      	movs	r0, #24
 8005bd0:	f7ff fdf7 	bl	80057c2 <send_cmd>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d136      	bne.n	8005c48 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8005bda:	21fe      	movs	r1, #254	@ 0xfe
 8005bdc:	68b8      	ldr	r0, [r7, #8]
 8005bde:	f7ff fdbe 	bl	800575e <xmit_datablock>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d02f      	beq.n	8005c48 <USER_SPI_write+0xd8>
			count = 0;
 8005be8:	2300      	movs	r3, #0
 8005bea:	603b      	str	r3, [r7, #0]
 8005bec:	e02c      	b.n	8005c48 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8005bee:	4b1d      	ldr	r3, [pc, #116]	@ (8005c64 <USER_SPI_write+0xf4>)
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	f003 0306 	and.w	r3, r3, #6
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d003      	beq.n	8005c02 <USER_SPI_write+0x92>
 8005bfa:	6839      	ldr	r1, [r7, #0]
 8005bfc:	2097      	movs	r0, #151	@ 0x97
 8005bfe:	f7ff fde0 	bl	80057c2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8005c02:	6879      	ldr	r1, [r7, #4]
 8005c04:	2019      	movs	r0, #25
 8005c06:	f7ff fddc 	bl	80057c2 <send_cmd>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d11b      	bne.n	8005c48 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8005c10:	21fc      	movs	r1, #252	@ 0xfc
 8005c12:	68b8      	ldr	r0, [r7, #8]
 8005c14:	f7ff fda3 	bl	800575e <xmit_datablock>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00a      	beq.n	8005c34 <USER_SPI_write+0xc4>
				buff += 512;
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005c24:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	603b      	str	r3, [r7, #0]
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1ee      	bne.n	8005c10 <USER_SPI_write+0xa0>
 8005c32:	e000      	b.n	8005c36 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8005c34:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8005c36:	21fd      	movs	r1, #253	@ 0xfd
 8005c38:	2000      	movs	r0, #0
 8005c3a:	f7ff fd90 	bl	800575e <xmit_datablock>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d101      	bne.n	8005c48 <USER_SPI_write+0xd8>
 8005c44:	2301      	movs	r3, #1
 8005c46:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8005c48:	f7ff fd38 	bl	80056bc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	bf14      	ite	ne
 8005c52:	2301      	movne	r3, #1
 8005c54:	2300      	moveq	r3, #0
 8005c56:	b2db      	uxtb	r3, r3
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	20000020 	.word	0x20000020
 8005c64:	20000548 	.word	0x20000548

08005c68 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08c      	sub	sp, #48	@ 0x30
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	4603      	mov	r3, r0
 8005c70:	603a      	str	r2, [r7, #0]
 8005c72:	71fb      	strb	r3, [r7, #7]
 8005c74:	460b      	mov	r3, r1
 8005c76:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8005c78:	79fb      	ldrb	r3, [r7, #7]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d001      	beq.n	8005c82 <USER_SPI_ioctl+0x1a>
 8005c7e:	2304      	movs	r3, #4
 8005c80:	e15a      	b.n	8005f38 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005c82:	4baf      	ldr	r3, [pc, #700]	@ (8005f40 <USER_SPI_ioctl+0x2d8>)
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d001      	beq.n	8005c94 <USER_SPI_ioctl+0x2c>
 8005c90:	2303      	movs	r3, #3
 8005c92:	e151      	b.n	8005f38 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8005c9a:	79bb      	ldrb	r3, [r7, #6]
 8005c9c:	2b04      	cmp	r3, #4
 8005c9e:	f200 8136 	bhi.w	8005f0e <USER_SPI_ioctl+0x2a6>
 8005ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ca8 <USER_SPI_ioctl+0x40>)
 8005ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca8:	08005cbd 	.word	0x08005cbd
 8005cac:	08005cd1 	.word	0x08005cd1
 8005cb0:	08005f0f 	.word	0x08005f0f
 8005cb4:	08005d7d 	.word	0x08005d7d
 8005cb8:	08005e73 	.word	0x08005e73
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8005cbc:	f7ff fd0c 	bl	80056d8 <spiselect>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f000 8127 	beq.w	8005f16 <USER_SPI_ioctl+0x2ae>
 8005cc8:	2300      	movs	r3, #0
 8005cca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8005cce:	e122      	b.n	8005f16 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	2009      	movs	r0, #9
 8005cd4:	f7ff fd75 	bl	80057c2 <send_cmd>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	f040 811d 	bne.w	8005f1a <USER_SPI_ioctl+0x2b2>
 8005ce0:	f107 030c 	add.w	r3, r7, #12
 8005ce4:	2110      	movs	r1, #16
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7ff fd10 	bl	800570c <rcvr_datablock>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f000 8113 	beq.w	8005f1a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8005cf4:	7b3b      	ldrb	r3, [r7, #12]
 8005cf6:	099b      	lsrs	r3, r3, #6
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d111      	bne.n	8005d22 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8005cfe:	7d7b      	ldrb	r3, [r7, #21]
 8005d00:	461a      	mov	r2, r3
 8005d02:	7d3b      	ldrb	r3, [r7, #20]
 8005d04:	021b      	lsls	r3, r3, #8
 8005d06:	4413      	add	r3, r2
 8005d08:	461a      	mov	r2, r3
 8005d0a:	7cfb      	ldrb	r3, [r7, #19]
 8005d0c:	041b      	lsls	r3, r3, #16
 8005d0e:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8005d12:	4413      	add	r3, r2
 8005d14:	3301      	adds	r3, #1
 8005d16:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	029a      	lsls	r2, r3, #10
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	601a      	str	r2, [r3, #0]
 8005d20:	e028      	b.n	8005d74 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8005d22:	7c7b      	ldrb	r3, [r7, #17]
 8005d24:	f003 030f 	and.w	r3, r3, #15
 8005d28:	b2da      	uxtb	r2, r3
 8005d2a:	7dbb      	ldrb	r3, [r7, #22]
 8005d2c:	09db      	lsrs	r3, r3, #7
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	4413      	add	r3, r2
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	7d7b      	ldrb	r3, [r7, #21]
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	f003 0306 	and.w	r3, r3, #6
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	4413      	add	r3, r2
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	3302      	adds	r3, #2
 8005d46:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8005d4a:	7d3b      	ldrb	r3, [r7, #20]
 8005d4c:	099b      	lsrs	r3, r3, #6
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	461a      	mov	r2, r3
 8005d52:	7cfb      	ldrb	r3, [r7, #19]
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	441a      	add	r2, r3
 8005d58:	7cbb      	ldrb	r3, [r7, #18]
 8005d5a:	029b      	lsls	r3, r3, #10
 8005d5c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005d60:	4413      	add	r3, r2
 8005d62:	3301      	adds	r3, #1
 8005d64:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8005d66:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d6a:	3b09      	subs	r3, #9
 8005d6c:	69fa      	ldr	r2, [r7, #28]
 8005d6e:	409a      	lsls	r2, r3
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8005d74:	2300      	movs	r3, #0
 8005d76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8005d7a:	e0ce      	b.n	8005f1a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8005d7c:	4b71      	ldr	r3, [pc, #452]	@ (8005f44 <USER_SPI_ioctl+0x2dc>)
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	f003 0304 	and.w	r3, r3, #4
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d031      	beq.n	8005dec <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8005d88:	2100      	movs	r1, #0
 8005d8a:	208d      	movs	r0, #141	@ 0x8d
 8005d8c:	f7ff fd19 	bl	80057c2 <send_cmd>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f040 80c3 	bne.w	8005f1e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8005d98:	20ff      	movs	r0, #255	@ 0xff
 8005d9a:	f7ff fc25 	bl	80055e8 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8005d9e:	f107 030c 	add.w	r3, r7, #12
 8005da2:	2110      	movs	r1, #16
 8005da4:	4618      	mov	r0, r3
 8005da6:	f7ff fcb1 	bl	800570c <rcvr_datablock>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 80b6 	beq.w	8005f1e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8005db2:	2330      	movs	r3, #48	@ 0x30
 8005db4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8005db8:	e007      	b.n	8005dca <USER_SPI_ioctl+0x162>
 8005dba:	20ff      	movs	r0, #255	@ 0xff
 8005dbc:	f7ff fc14 	bl	80055e8 <xchg_spi>
 8005dc0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8005dca:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1f3      	bne.n	8005dba <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8005dd2:	7dbb      	ldrb	r3, [r7, #22]
 8005dd4:	091b      	lsrs	r3, r3, #4
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	461a      	mov	r2, r3
 8005dda:	2310      	movs	r3, #16
 8005ddc:	fa03 f202 	lsl.w	r2, r3, r2
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8005de4:	2300      	movs	r3, #0
 8005de6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8005dea:	e098      	b.n	8005f1e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8005dec:	2100      	movs	r1, #0
 8005dee:	2009      	movs	r0, #9
 8005df0:	f7ff fce7 	bl	80057c2 <send_cmd>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f040 8091 	bne.w	8005f1e <USER_SPI_ioctl+0x2b6>
 8005dfc:	f107 030c 	add.w	r3, r7, #12
 8005e00:	2110      	movs	r1, #16
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7ff fc82 	bl	800570c <rcvr_datablock>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f000 8087 	beq.w	8005f1e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8005e10:	4b4c      	ldr	r3, [pc, #304]	@ (8005f44 <USER_SPI_ioctl+0x2dc>)
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	f003 0302 	and.w	r3, r3, #2
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d012      	beq.n	8005e42 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8005e1c:	7dbb      	ldrb	r3, [r7, #22]
 8005e1e:	005b      	lsls	r3, r3, #1
 8005e20:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8005e24:	7dfa      	ldrb	r2, [r7, #23]
 8005e26:	09d2      	lsrs	r2, r2, #7
 8005e28:	b2d2      	uxtb	r2, r2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	1c5a      	adds	r2, r3, #1
 8005e2e:	7e7b      	ldrb	r3, [r7, #25]
 8005e30:	099b      	lsrs	r3, r3, #6
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	3b01      	subs	r3, #1
 8005e36:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	601a      	str	r2, [r3, #0]
 8005e40:	e013      	b.n	8005e6a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8005e42:	7dbb      	ldrb	r3, [r7, #22]
 8005e44:	109b      	asrs	r3, r3, #2
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	f003 031f 	and.w	r3, r3, #31
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	7dfa      	ldrb	r2, [r7, #23]
 8005e50:	00d2      	lsls	r2, r2, #3
 8005e52:	f002 0218 	and.w	r2, r2, #24
 8005e56:	7df9      	ldrb	r1, [r7, #23]
 8005e58:	0949      	lsrs	r1, r1, #5
 8005e5a:	b2c9      	uxtb	r1, r1
 8005e5c:	440a      	add	r2, r1
 8005e5e:	3201      	adds	r2, #1
 8005e60:	fb02 f303 	mul.w	r3, r2, r3
 8005e64:	461a      	mov	r2, r3
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8005e70:	e055      	b.n	8005f1e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005e72:	4b34      	ldr	r3, [pc, #208]	@ (8005f44 <USER_SPI_ioctl+0x2dc>)
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	f003 0306 	and.w	r3, r3, #6
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d051      	beq.n	8005f22 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005e7e:	f107 020c 	add.w	r2, r7, #12
 8005e82:	79fb      	ldrb	r3, [r7, #7]
 8005e84:	210b      	movs	r1, #11
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7ff feee 	bl	8005c68 <USER_SPI_ioctl>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d149      	bne.n	8005f26 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005e92:	7b3b      	ldrb	r3, [r7, #12]
 8005e94:	099b      	lsrs	r3, r3, #6
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d104      	bne.n	8005ea6 <USER_SPI_ioctl+0x23e>
 8005e9c:	7dbb      	ldrb	r3, [r7, #22]
 8005e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d041      	beq.n	8005f2a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	623b      	str	r3, [r7, #32]
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8005eb6:	4b23      	ldr	r3, [pc, #140]	@ (8005f44 <USER_SPI_ioctl+0x2dc>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	f003 0308 	and.w	r3, r3, #8
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d105      	bne.n	8005ece <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8005ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec4:	025b      	lsls	r3, r3, #9
 8005ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eca:	025b      	lsls	r3, r3, #9
 8005ecc:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8005ece:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ed0:	2020      	movs	r0, #32
 8005ed2:	f7ff fc76 	bl	80057c2 <send_cmd>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d128      	bne.n	8005f2e <USER_SPI_ioctl+0x2c6>
 8005edc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ede:	2021      	movs	r0, #33	@ 0x21
 8005ee0:	f7ff fc6f 	bl	80057c2 <send_cmd>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d121      	bne.n	8005f2e <USER_SPI_ioctl+0x2c6>
 8005eea:	2100      	movs	r1, #0
 8005eec:	2026      	movs	r0, #38	@ 0x26
 8005eee:	f7ff fc68 	bl	80057c2 <send_cmd>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d11a      	bne.n	8005f2e <USER_SPI_ioctl+0x2c6>
 8005ef8:	f247 5030 	movw	r0, #30000	@ 0x7530
 8005efc:	f7ff fbba 	bl	8005674 <wait_ready>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d013      	beq.n	8005f2e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8005f06:	2300      	movs	r3, #0
 8005f08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8005f0c:	e00f      	b.n	8005f2e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8005f0e:	2304      	movs	r3, #4
 8005f10:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005f14:	e00c      	b.n	8005f30 <USER_SPI_ioctl+0x2c8>
		break;
 8005f16:	bf00      	nop
 8005f18:	e00a      	b.n	8005f30 <USER_SPI_ioctl+0x2c8>
		break;
 8005f1a:	bf00      	nop
 8005f1c:	e008      	b.n	8005f30 <USER_SPI_ioctl+0x2c8>
		break;
 8005f1e:	bf00      	nop
 8005f20:	e006      	b.n	8005f30 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005f22:	bf00      	nop
 8005f24:	e004      	b.n	8005f30 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005f26:	bf00      	nop
 8005f28:	e002      	b.n	8005f30 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005f2a:	bf00      	nop
 8005f2c:	e000      	b.n	8005f30 <USER_SPI_ioctl+0x2c8>
		break;
 8005f2e:	bf00      	nop
	}

	despiselect();
 8005f30:	f7ff fbc4 	bl	80056bc <despiselect>

	return res;
 8005f34:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3730      	adds	r7, #48	@ 0x30
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	20000020 	.word	0x20000020
 8005f44:	20000548 	.word	0x20000548

08005f48 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	4603      	mov	r3, r0
 8005f50:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005f52:	79fb      	ldrb	r3, [r7, #7]
 8005f54:	4a08      	ldr	r2, [pc, #32]	@ (8005f78 <disk_status+0x30>)
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	79fa      	ldrb	r2, [r7, #7]
 8005f60:	4905      	ldr	r1, [pc, #20]	@ (8005f78 <disk_status+0x30>)
 8005f62:	440a      	add	r2, r1
 8005f64:	7a12      	ldrb	r2, [r2, #8]
 8005f66:	4610      	mov	r0, r2
 8005f68:	4798      	blx	r3
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	2000057c 	.word	0x2000057c

08005f7c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	4603      	mov	r3, r0
 8005f84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005f86:	2300      	movs	r3, #0
 8005f88:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005f8a:	79fb      	ldrb	r3, [r7, #7]
 8005f8c:	4a0e      	ldr	r2, [pc, #56]	@ (8005fc8 <disk_initialize+0x4c>)
 8005f8e:	5cd3      	ldrb	r3, [r2, r3]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d114      	bne.n	8005fbe <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005f94:	79fb      	ldrb	r3, [r7, #7]
 8005f96:	4a0c      	ldr	r2, [pc, #48]	@ (8005fc8 <disk_initialize+0x4c>)
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	79fa      	ldrb	r2, [r7, #7]
 8005fa2:	4909      	ldr	r1, [pc, #36]	@ (8005fc8 <disk_initialize+0x4c>)
 8005fa4:	440a      	add	r2, r1
 8005fa6:	7a12      	ldrb	r2, [r2, #8]
 8005fa8:	4610      	mov	r0, r2
 8005faa:	4798      	blx	r3
 8005fac:	4603      	mov	r3, r0
 8005fae:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d103      	bne.n	8005fbe <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8005fb6:	79fb      	ldrb	r3, [r7, #7]
 8005fb8:	4a03      	ldr	r2, [pc, #12]	@ (8005fc8 <disk_initialize+0x4c>)
 8005fba:	2101      	movs	r1, #1
 8005fbc:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8005fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	2000057c 	.word	0x2000057c

08005fcc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005fcc:	b590      	push	{r4, r7, lr}
 8005fce:	b087      	sub	sp, #28
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60b9      	str	r1, [r7, #8]
 8005fd4:	607a      	str	r2, [r7, #4]
 8005fd6:	603b      	str	r3, [r7, #0]
 8005fd8:	4603      	mov	r3, r0
 8005fda:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005fdc:	7bfb      	ldrb	r3, [r7, #15]
 8005fde:	4a0a      	ldr	r2, [pc, #40]	@ (8006008 <disk_read+0x3c>)
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	689c      	ldr	r4, [r3, #8]
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
 8005fea:	4a07      	ldr	r2, [pc, #28]	@ (8006008 <disk_read+0x3c>)
 8005fec:	4413      	add	r3, r2
 8005fee:	7a18      	ldrb	r0, [r3, #8]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	68b9      	ldr	r1, [r7, #8]
 8005ff6:	47a0      	blx	r4
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	75fb      	strb	r3, [r7, #23]
  return res;
 8005ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	371c      	adds	r7, #28
 8006002:	46bd      	mov	sp, r7
 8006004:	bd90      	pop	{r4, r7, pc}
 8006006:	bf00      	nop
 8006008:	2000057c 	.word	0x2000057c

0800600c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800600c:	b590      	push	{r4, r7, lr}
 800600e:	b087      	sub	sp, #28
 8006010:	af00      	add	r7, sp, #0
 8006012:	60b9      	str	r1, [r7, #8]
 8006014:	607a      	str	r2, [r7, #4]
 8006016:	603b      	str	r3, [r7, #0]
 8006018:	4603      	mov	r3, r0
 800601a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800601c:	7bfb      	ldrb	r3, [r7, #15]
 800601e:	4a0a      	ldr	r2, [pc, #40]	@ (8006048 <disk_write+0x3c>)
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	4413      	add	r3, r2
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	68dc      	ldr	r4, [r3, #12]
 8006028:	7bfb      	ldrb	r3, [r7, #15]
 800602a:	4a07      	ldr	r2, [pc, #28]	@ (8006048 <disk_write+0x3c>)
 800602c:	4413      	add	r3, r2
 800602e:	7a18      	ldrb	r0, [r3, #8]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	68b9      	ldr	r1, [r7, #8]
 8006036:	47a0      	blx	r4
 8006038:	4603      	mov	r3, r0
 800603a:	75fb      	strb	r3, [r7, #23]
  return res;
 800603c:	7dfb      	ldrb	r3, [r7, #23]
}
 800603e:	4618      	mov	r0, r3
 8006040:	371c      	adds	r7, #28
 8006042:	46bd      	mov	sp, r7
 8006044:	bd90      	pop	{r4, r7, pc}
 8006046:	bf00      	nop
 8006048:	2000057c 	.word	0x2000057c

0800604c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	3301      	adds	r3, #1
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800605c:	89fb      	ldrh	r3, [r7, #14]
 800605e:	021b      	lsls	r3, r3, #8
 8006060:	b21a      	sxth	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	b21b      	sxth	r3, r3
 8006068:	4313      	orrs	r3, r2
 800606a:	b21b      	sxth	r3, r3
 800606c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800606e:	89fb      	ldrh	r3, [r7, #14]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3714      	adds	r7, #20
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	3303      	adds	r3, #3
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	021b      	lsls	r3, r3, #8
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	3202      	adds	r2, #2
 8006094:	7812      	ldrb	r2, [r2, #0]
 8006096:	4313      	orrs	r3, r2
 8006098:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	021b      	lsls	r3, r3, #8
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	3201      	adds	r2, #1
 80060a2:	7812      	ldrb	r2, [r2, #0]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	021b      	lsls	r3, r3, #8
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	7812      	ldrb	r2, [r2, #0]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	60fb      	str	r3, [r7, #12]
	return rv;
 80060b4:	68fb      	ldr	r3, [r7, #12]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3714      	adds	r7, #20
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80060c2:	b480      	push	{r7}
 80060c4:	b083      	sub	sp, #12
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
 80060ca:	460b      	mov	r3, r1
 80060cc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	1c5a      	adds	r2, r3, #1
 80060d2:	607a      	str	r2, [r7, #4]
 80060d4:	887a      	ldrh	r2, [r7, #2]
 80060d6:	b2d2      	uxtb	r2, r2
 80060d8:	701a      	strb	r2, [r3, #0]
 80060da:	887b      	ldrh	r3, [r7, #2]
 80060dc:	0a1b      	lsrs	r3, r3, #8
 80060de:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	1c5a      	adds	r2, r3, #1
 80060e4:	607a      	str	r2, [r7, #4]
 80060e6:	887a      	ldrh	r2, [r7, #2]
 80060e8:	b2d2      	uxtb	r2, r2
 80060ea:	701a      	strb	r2, [r3, #0]
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	1c5a      	adds	r2, r3, #1
 8006106:	607a      	str	r2, [r7, #4]
 8006108:	683a      	ldr	r2, [r7, #0]
 800610a:	b2d2      	uxtb	r2, r2
 800610c:	701a      	strb	r2, [r3, #0]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	0a1b      	lsrs	r3, r3, #8
 8006112:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	1c5a      	adds	r2, r3, #1
 8006118:	607a      	str	r2, [r7, #4]
 800611a:	683a      	ldr	r2, [r7, #0]
 800611c:	b2d2      	uxtb	r2, r2
 800611e:	701a      	strb	r2, [r3, #0]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	0a1b      	lsrs	r3, r3, #8
 8006124:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	1c5a      	adds	r2, r3, #1
 800612a:	607a      	str	r2, [r7, #4]
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	b2d2      	uxtb	r2, r2
 8006130:	701a      	strb	r2, [r3, #0]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	0a1b      	lsrs	r3, r3, #8
 8006136:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	1c5a      	adds	r2, r3, #1
 800613c:	607a      	str	r2, [r7, #4]
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	b2d2      	uxtb	r2, r2
 8006142:	701a      	strb	r2, [r3, #0]
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006150:	b480      	push	{r7}
 8006152:	b087      	sub	sp, #28
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00d      	beq.n	8006186 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	1c53      	adds	r3, r2, #1
 800616e:	613b      	str	r3, [r7, #16]
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	1c59      	adds	r1, r3, #1
 8006174:	6179      	str	r1, [r7, #20]
 8006176:	7812      	ldrb	r2, [r2, #0]
 8006178:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	3b01      	subs	r3, #1
 800617e:	607b      	str	r3, [r7, #4]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1f1      	bne.n	800616a <mem_cpy+0x1a>
	}
}
 8006186:	bf00      	nop
 8006188:	371c      	adds	r7, #28
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006192:	b480      	push	{r7}
 8006194:	b087      	sub	sp, #28
 8006196:	af00      	add	r7, sp, #0
 8006198:	60f8      	str	r0, [r7, #12]
 800619a:	60b9      	str	r1, [r7, #8]
 800619c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	1c5a      	adds	r2, r3, #1
 80061a6:	617a      	str	r2, [r7, #20]
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	b2d2      	uxtb	r2, r2
 80061ac:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	3b01      	subs	r3, #1
 80061b2:	607b      	str	r3, [r7, #4]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1f3      	bne.n	80061a2 <mem_set+0x10>
}
 80061ba:	bf00      	nop
 80061bc:	bf00      	nop
 80061be:	371c      	adds	r7, #28
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80061c8:	b480      	push	{r7}
 80061ca:	b089      	sub	sp, #36	@ 0x24
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	61fb      	str	r3, [r7, #28]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80061dc:	2300      	movs	r3, #0
 80061de:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	1c5a      	adds	r2, r3, #1
 80061e4:	61fa      	str	r2, [r7, #28]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	4619      	mov	r1, r3
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	1c5a      	adds	r2, r3, #1
 80061ee:	61ba      	str	r2, [r7, #24]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	1acb      	subs	r3, r1, r3
 80061f4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	3b01      	subs	r3, #1
 80061fa:	607b      	str	r3, [r7, #4]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d002      	beq.n	8006208 <mem_cmp+0x40>
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d0eb      	beq.n	80061e0 <mem_cmp+0x18>

	return r;
 8006208:	697b      	ldr	r3, [r7, #20]
}
 800620a:	4618      	mov	r0, r3
 800620c:	3724      	adds	r7, #36	@ 0x24
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006216:	b480      	push	{r7}
 8006218:	b083      	sub	sp, #12
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
 800621e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006220:	e002      	b.n	8006228 <chk_chr+0x12>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	3301      	adds	r3, #1
 8006226:	607b      	str	r3, [r7, #4]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d005      	beq.n	800623c <chk_chr+0x26>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	461a      	mov	r2, r3
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	4293      	cmp	r3, r2
 800623a:	d1f2      	bne.n	8006222 <chk_chr+0xc>
	return *str;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	781b      	ldrb	r3, [r3, #0]
}
 8006240:	4618      	mov	r0, r3
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d009      	beq.n	800626e <lock_fs+0x22>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	4618      	mov	r0, r3
 8006260:	f002 f99f 	bl	80085a2 <ff_req_grant>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <lock_fs+0x22>
 800626a:	2301      	movs	r3, #1
 800626c:	e000      	b.n	8006270 <lock_fs+0x24>
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	460b      	mov	r3, r1
 8006282:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00d      	beq.n	80062a6 <unlock_fs+0x2e>
 800628a:	78fb      	ldrb	r3, [r7, #3]
 800628c:	2b0c      	cmp	r3, #12
 800628e:	d00a      	beq.n	80062a6 <unlock_fs+0x2e>
 8006290:	78fb      	ldrb	r3, [r7, #3]
 8006292:	2b0b      	cmp	r3, #11
 8006294:	d007      	beq.n	80062a6 <unlock_fs+0x2e>
 8006296:	78fb      	ldrb	r3, [r7, #3]
 8006298:	2b0f      	cmp	r3, #15
 800629a:	d004      	beq.n	80062a6 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f002 f993 	bl	80085cc <ff_rel_grant>
	}
}
 80062a6:	bf00      	nop
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
	...

080062b0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80062ba:	2300      	movs	r3, #0
 80062bc:	60bb      	str	r3, [r7, #8]
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	60fb      	str	r3, [r7, #12]
 80062c2:	e029      	b.n	8006318 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80062c4:	4a27      	ldr	r2, [pc, #156]	@ (8006364 <chk_lock+0xb4>)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	011b      	lsls	r3, r3, #4
 80062ca:	4413      	add	r3, r2
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d01d      	beq.n	800630e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80062d2:	4a24      	ldr	r2, [pc, #144]	@ (8006364 <chk_lock+0xb4>)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	011b      	lsls	r3, r3, #4
 80062d8:	4413      	add	r3, r2
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d116      	bne.n	8006312 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80062e4:	4a1f      	ldr	r2, [pc, #124]	@ (8006364 <chk_lock+0xb4>)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	011b      	lsls	r3, r3, #4
 80062ea:	4413      	add	r3, r2
 80062ec:	3304      	adds	r3, #4
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d10c      	bne.n	8006312 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80062f8:	4a1a      	ldr	r2, [pc, #104]	@ (8006364 <chk_lock+0xb4>)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	011b      	lsls	r3, r3, #4
 80062fe:	4413      	add	r3, r2
 8006300:	3308      	adds	r3, #8
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006308:	429a      	cmp	r2, r3
 800630a:	d102      	bne.n	8006312 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800630c:	e007      	b.n	800631e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800630e:	2301      	movs	r3, #1
 8006310:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	3301      	adds	r3, #1
 8006316:	60fb      	str	r3, [r7, #12]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d9d2      	bls.n	80062c4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2b02      	cmp	r3, #2
 8006322:	d109      	bne.n	8006338 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d102      	bne.n	8006330 <chk_lock+0x80>
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b02      	cmp	r3, #2
 800632e:	d101      	bne.n	8006334 <chk_lock+0x84>
 8006330:	2300      	movs	r3, #0
 8006332:	e010      	b.n	8006356 <chk_lock+0xa6>
 8006334:	2312      	movs	r3, #18
 8006336:	e00e      	b.n	8006356 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d108      	bne.n	8006350 <chk_lock+0xa0>
 800633e:	4a09      	ldr	r2, [pc, #36]	@ (8006364 <chk_lock+0xb4>)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	011b      	lsls	r3, r3, #4
 8006344:	4413      	add	r3, r2
 8006346:	330c      	adds	r3, #12
 8006348:	881b      	ldrh	r3, [r3, #0]
 800634a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800634e:	d101      	bne.n	8006354 <chk_lock+0xa4>
 8006350:	2310      	movs	r3, #16
 8006352:	e000      	b.n	8006356 <chk_lock+0xa6>
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	2000055c 	.word	0x2000055c

08006368 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800636e:	2300      	movs	r3, #0
 8006370:	607b      	str	r3, [r7, #4]
 8006372:	e002      	b.n	800637a <enq_lock+0x12>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	3301      	adds	r3, #1
 8006378:	607b      	str	r3, [r7, #4]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d806      	bhi.n	800638e <enq_lock+0x26>
 8006380:	4a09      	ldr	r2, [pc, #36]	@ (80063a8 <enq_lock+0x40>)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	011b      	lsls	r3, r3, #4
 8006386:	4413      	add	r3, r2
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1f2      	bne.n	8006374 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2b02      	cmp	r3, #2
 8006392:	bf14      	ite	ne
 8006394:	2301      	movne	r3, #1
 8006396:	2300      	moveq	r3, #0
 8006398:	b2db      	uxtb	r3, r3
}
 800639a:	4618      	mov	r0, r3
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	2000055c 	.word	0x2000055c

080063ac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80063b6:	2300      	movs	r3, #0
 80063b8:	60fb      	str	r3, [r7, #12]
 80063ba:	e01f      	b.n	80063fc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80063bc:	4a41      	ldr	r2, [pc, #260]	@ (80064c4 <inc_lock+0x118>)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	011b      	lsls	r3, r3, #4
 80063c2:	4413      	add	r3, r2
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d113      	bne.n	80063f6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80063ce:	4a3d      	ldr	r2, [pc, #244]	@ (80064c4 <inc_lock+0x118>)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	011b      	lsls	r3, r3, #4
 80063d4:	4413      	add	r3, r2
 80063d6:	3304      	adds	r3, #4
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80063de:	429a      	cmp	r2, r3
 80063e0:	d109      	bne.n	80063f6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80063e2:	4a38      	ldr	r2, [pc, #224]	@ (80064c4 <inc_lock+0x118>)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	011b      	lsls	r3, r3, #4
 80063e8:	4413      	add	r3, r2
 80063ea:	3308      	adds	r3, #8
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d006      	beq.n	8006404 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	3301      	adds	r3, #1
 80063fa:	60fb      	str	r3, [r7, #12]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d9dc      	bls.n	80063bc <inc_lock+0x10>
 8006402:	e000      	b.n	8006406 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006404:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2b02      	cmp	r3, #2
 800640a:	d132      	bne.n	8006472 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800640c:	2300      	movs	r3, #0
 800640e:	60fb      	str	r3, [r7, #12]
 8006410:	e002      	b.n	8006418 <inc_lock+0x6c>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	3301      	adds	r3, #1
 8006416:	60fb      	str	r3, [r7, #12]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d806      	bhi.n	800642c <inc_lock+0x80>
 800641e:	4a29      	ldr	r2, [pc, #164]	@ (80064c4 <inc_lock+0x118>)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	011b      	lsls	r3, r3, #4
 8006424:	4413      	add	r3, r2
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1f2      	bne.n	8006412 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2b02      	cmp	r3, #2
 8006430:	d101      	bne.n	8006436 <inc_lock+0x8a>
 8006432:	2300      	movs	r3, #0
 8006434:	e040      	b.n	80064b8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	4922      	ldr	r1, [pc, #136]	@ (80064c4 <inc_lock+0x118>)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	011b      	lsls	r3, r3, #4
 8006440:	440b      	add	r3, r1
 8006442:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	689a      	ldr	r2, [r3, #8]
 8006448:	491e      	ldr	r1, [pc, #120]	@ (80064c4 <inc_lock+0x118>)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	011b      	lsls	r3, r3, #4
 800644e:	440b      	add	r3, r1
 8006450:	3304      	adds	r3, #4
 8006452:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	695a      	ldr	r2, [r3, #20]
 8006458:	491a      	ldr	r1, [pc, #104]	@ (80064c4 <inc_lock+0x118>)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	011b      	lsls	r3, r3, #4
 800645e:	440b      	add	r3, r1
 8006460:	3308      	adds	r3, #8
 8006462:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006464:	4a17      	ldr	r2, [pc, #92]	@ (80064c4 <inc_lock+0x118>)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	011b      	lsls	r3, r3, #4
 800646a:	4413      	add	r3, r2
 800646c:	330c      	adds	r3, #12
 800646e:	2200      	movs	r2, #0
 8006470:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d009      	beq.n	800648c <inc_lock+0xe0>
 8006478:	4a12      	ldr	r2, [pc, #72]	@ (80064c4 <inc_lock+0x118>)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	011b      	lsls	r3, r3, #4
 800647e:	4413      	add	r3, r2
 8006480:	330c      	adds	r3, #12
 8006482:	881b      	ldrh	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d001      	beq.n	800648c <inc_lock+0xe0>
 8006488:	2300      	movs	r3, #0
 800648a:	e015      	b.n	80064b8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d108      	bne.n	80064a4 <inc_lock+0xf8>
 8006492:	4a0c      	ldr	r2, [pc, #48]	@ (80064c4 <inc_lock+0x118>)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	011b      	lsls	r3, r3, #4
 8006498:	4413      	add	r3, r2
 800649a:	330c      	adds	r3, #12
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	3301      	adds	r3, #1
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	e001      	b.n	80064a8 <inc_lock+0xfc>
 80064a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80064a8:	4906      	ldr	r1, [pc, #24]	@ (80064c4 <inc_lock+0x118>)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	011b      	lsls	r3, r3, #4
 80064ae:	440b      	add	r3, r1
 80064b0:	330c      	adds	r3, #12
 80064b2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	3301      	adds	r3, #1
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr
 80064c4:	2000055c 	.word	0x2000055c

080064c8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80064d0:	2300      	movs	r3, #0
 80064d2:	60fb      	str	r3, [r7, #12]
 80064d4:	e010      	b.n	80064f8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80064d6:	4a0d      	ldr	r2, [pc, #52]	@ (800650c <clear_lock+0x44>)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	011b      	lsls	r3, r3, #4
 80064dc:	4413      	add	r3, r2
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d105      	bne.n	80064f2 <clear_lock+0x2a>
 80064e6:	4a09      	ldr	r2, [pc, #36]	@ (800650c <clear_lock+0x44>)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	011b      	lsls	r3, r3, #4
 80064ec:	4413      	add	r3, r2
 80064ee:	2200      	movs	r2, #0
 80064f0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	3301      	adds	r3, #1
 80064f6:	60fb      	str	r3, [r7, #12]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d9eb      	bls.n	80064d6 <clear_lock+0xe>
	}
}
 80064fe:	bf00      	nop
 8006500:	bf00      	nop
 8006502:	3714      	adds	r7, #20
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr
 800650c:	2000055c 	.word	0x2000055c

08006510 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b086      	sub	sp, #24
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006518:	2300      	movs	r3, #0
 800651a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	78db      	ldrb	r3, [r3, #3]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d034      	beq.n	800658e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006528:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	7858      	ldrb	r0, [r3, #1]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006534:	2301      	movs	r3, #1
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	f7ff fd68 	bl	800600c <disk_write>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d002      	beq.n	8006548 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006542:	2301      	movs	r3, #1
 8006544:	73fb      	strb	r3, [r7, #15]
 8006546:	e022      	b.n	800658e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	1ad2      	subs	r2, r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	429a      	cmp	r2, r3
 800655c:	d217      	bcs.n	800658e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	789b      	ldrb	r3, [r3, #2]
 8006562:	613b      	str	r3, [r7, #16]
 8006564:	e010      	b.n	8006588 <sync_window+0x78>
					wsect += fs->fsize;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	69db      	ldr	r3, [r3, #28]
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	4413      	add	r3, r2
 800656e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	7858      	ldrb	r0, [r3, #1]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800657a:	2301      	movs	r3, #1
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	f7ff fd45 	bl	800600c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	3b01      	subs	r3, #1
 8006586:	613b      	str	r3, [r7, #16]
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d8eb      	bhi.n	8006566 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800658e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3718      	adds	r7, #24
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80065a2:	2300      	movs	r3, #0
 80065a4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065aa:	683a      	ldr	r2, [r7, #0]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d01b      	beq.n	80065e8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f7ff ffad 	bl	8006510 <sync_window>
 80065b6:	4603      	mov	r3, r0
 80065b8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80065ba:	7bfb      	ldrb	r3, [r7, #15]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d113      	bne.n	80065e8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	7858      	ldrb	r0, [r3, #1]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80065ca:	2301      	movs	r3, #1
 80065cc:	683a      	ldr	r2, [r7, #0]
 80065ce:	f7ff fcfd 	bl	8005fcc <disk_read>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d004      	beq.n	80065e2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80065d8:	f04f 33ff 	mov.w	r3, #4294967295
 80065dc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80065de:	2301      	movs	r3, #1
 80065e0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 80065e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80065f2:	b480      	push	{r7}
 80065f4:	b083      	sub	sp, #12
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
 80065fa:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	3b02      	subs	r3, #2
 8006600:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	3b02      	subs	r3, #2
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	429a      	cmp	r2, r3
 800660c:	d301      	bcc.n	8006612 <clust2sect+0x20>
 800660e:	2300      	movs	r3, #0
 8006610:	e008      	b.n	8006624 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	895b      	ldrh	r3, [r3, #10]
 8006616:	461a      	mov	r2, r3
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	fb03 f202 	mul.w	r2, r3, r2
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006622:	4413      	add	r3, r2
}
 8006624:	4618      	mov	r0, r3
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d904      	bls.n	8006650 <get_fat+0x20>
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	683a      	ldr	r2, [r7, #0]
 800664c:	429a      	cmp	r2, r3
 800664e:	d302      	bcc.n	8006656 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006650:	2301      	movs	r3, #1
 8006652:	617b      	str	r3, [r7, #20]
 8006654:	e08e      	b.n	8006774 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006656:	f04f 33ff 	mov.w	r3, #4294967295
 800665a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	2b03      	cmp	r3, #3
 8006662:	d061      	beq.n	8006728 <get_fat+0xf8>
 8006664:	2b03      	cmp	r3, #3
 8006666:	dc7b      	bgt.n	8006760 <get_fat+0x130>
 8006668:	2b01      	cmp	r3, #1
 800666a:	d002      	beq.n	8006672 <get_fat+0x42>
 800666c:	2b02      	cmp	r3, #2
 800666e:	d041      	beq.n	80066f4 <get_fat+0xc4>
 8006670:	e076      	b.n	8006760 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	60fb      	str	r3, [r7, #12]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	085b      	lsrs	r3, r3, #1
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	4413      	add	r3, r2
 800667e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	0a5b      	lsrs	r3, r3, #9
 8006688:	4413      	add	r3, r2
 800668a:	4619      	mov	r1, r3
 800668c:	6938      	ldr	r0, [r7, #16]
 800668e:	f7ff ff83 	bl	8006598 <move_window>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d166      	bne.n	8006766 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	1c5a      	adds	r2, r3, #1
 800669c:	60fa      	str	r2, [r7, #12]
 800669e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	4413      	add	r3, r2
 80066a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80066aa:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	0a5b      	lsrs	r3, r3, #9
 80066b4:	4413      	add	r3, r2
 80066b6:	4619      	mov	r1, r3
 80066b8:	6938      	ldr	r0, [r7, #16]
 80066ba:	f7ff ff6d 	bl	8006598 <move_window>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d152      	bne.n	800676a <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	4413      	add	r3, r2
 80066ce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80066d2:	021b      	lsls	r3, r3, #8
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	f003 0301 	and.w	r3, r3, #1
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d002      	beq.n	80066ea <get_fat+0xba>
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	091b      	lsrs	r3, r3, #4
 80066e8:	e002      	b.n	80066f0 <get_fat+0xc0>
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066f0:	617b      	str	r3, [r7, #20]
			break;
 80066f2:	e03f      	b.n	8006774 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	0a1b      	lsrs	r3, r3, #8
 80066fc:	4413      	add	r3, r2
 80066fe:	4619      	mov	r1, r3
 8006700:	6938      	ldr	r0, [r7, #16]
 8006702:	f7ff ff49 	bl	8006598 <move_window>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d130      	bne.n	800676e <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	005b      	lsls	r3, r3, #1
 8006716:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800671a:	4413      	add	r3, r2
 800671c:	4618      	mov	r0, r3
 800671e:	f7ff fc95 	bl	800604c <ld_word>
 8006722:	4603      	mov	r3, r0
 8006724:	617b      	str	r3, [r7, #20]
			break;
 8006726:	e025      	b.n	8006774 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	09db      	lsrs	r3, r3, #7
 8006730:	4413      	add	r3, r2
 8006732:	4619      	mov	r1, r3
 8006734:	6938      	ldr	r0, [r7, #16]
 8006736:	f7ff ff2f 	bl	8006598 <move_window>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d118      	bne.n	8006772 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800674e:	4413      	add	r3, r2
 8006750:	4618      	mov	r0, r3
 8006752:	f7ff fc93 	bl	800607c <ld_dword>
 8006756:	4603      	mov	r3, r0
 8006758:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800675c:	617b      	str	r3, [r7, #20]
			break;
 800675e:	e009      	b.n	8006774 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006760:	2301      	movs	r3, #1
 8006762:	617b      	str	r3, [r7, #20]
 8006764:	e006      	b.n	8006774 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006766:	bf00      	nop
 8006768:	e004      	b.n	8006774 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800676a:	bf00      	nop
 800676c:	e002      	b.n	8006774 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800676e:	bf00      	nop
 8006770:	e000      	b.n	8006774 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006772:	bf00      	nop
		}
	}

	return val;
 8006774:	697b      	ldr	r3, [r7, #20]
}
 8006776:	4618      	mov	r0, r3
 8006778:	3718      	adds	r7, #24
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800677e:	b590      	push	{r4, r7, lr}
 8006780:	b089      	sub	sp, #36	@ 0x24
 8006782:	af00      	add	r7, sp, #0
 8006784:	60f8      	str	r0, [r7, #12]
 8006786:	60b9      	str	r1, [r7, #8]
 8006788:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800678a:	2302      	movs	r3, #2
 800678c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	2b01      	cmp	r3, #1
 8006792:	f240 80d9 	bls.w	8006948 <put_fat+0x1ca>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	699b      	ldr	r3, [r3, #24]
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	429a      	cmp	r2, r3
 800679e:	f080 80d3 	bcs.w	8006948 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	2b03      	cmp	r3, #3
 80067a8:	f000 8096 	beq.w	80068d8 <put_fat+0x15a>
 80067ac:	2b03      	cmp	r3, #3
 80067ae:	f300 80cb 	bgt.w	8006948 <put_fat+0x1ca>
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d002      	beq.n	80067bc <put_fat+0x3e>
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d06e      	beq.n	8006898 <put_fat+0x11a>
 80067ba:	e0c5      	b.n	8006948 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	61bb      	str	r3, [r7, #24]
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	085b      	lsrs	r3, r3, #1
 80067c4:	69ba      	ldr	r2, [r7, #24]
 80067c6:	4413      	add	r3, r2
 80067c8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	0a5b      	lsrs	r3, r3, #9
 80067d2:	4413      	add	r3, r2
 80067d4:	4619      	mov	r1, r3
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f7ff fede 	bl	8006598 <move_window>
 80067dc:	4603      	mov	r3, r0
 80067de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80067e0:	7ffb      	ldrb	r3, [r7, #31]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f040 80a9 	bne.w	800693a <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	1c59      	adds	r1, r3, #1
 80067f2:	61b9      	str	r1, [r7, #24]
 80067f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067f8:	4413      	add	r3, r2
 80067fa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00d      	beq.n	8006822 <put_fat+0xa4>
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	b25b      	sxtb	r3, r3
 800680c:	f003 030f 	and.w	r3, r3, #15
 8006810:	b25a      	sxtb	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	b2db      	uxtb	r3, r3
 8006816:	011b      	lsls	r3, r3, #4
 8006818:	b25b      	sxtb	r3, r3
 800681a:	4313      	orrs	r3, r2
 800681c:	b25b      	sxtb	r3, r3
 800681e:	b2db      	uxtb	r3, r3
 8006820:	e001      	b.n	8006826 <put_fat+0xa8>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	b2db      	uxtb	r3, r3
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2201      	movs	r2, #1
 800682e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	0a5b      	lsrs	r3, r3, #9
 8006838:	4413      	add	r3, r2
 800683a:	4619      	mov	r1, r3
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f7ff feab 	bl	8006598 <move_window>
 8006842:	4603      	mov	r3, r0
 8006844:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006846:	7ffb      	ldrb	r3, [r7, #31]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d178      	bne.n	800693e <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006858:	4413      	add	r3, r2
 800685a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	2b00      	cmp	r3, #0
 8006864:	d003      	beq.n	800686e <put_fat+0xf0>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	091b      	lsrs	r3, r3, #4
 800686a:	b2db      	uxtb	r3, r3
 800686c:	e00e      	b.n	800688c <put_fat+0x10e>
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	b25b      	sxtb	r3, r3
 8006874:	f023 030f 	bic.w	r3, r3, #15
 8006878:	b25a      	sxtb	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	0a1b      	lsrs	r3, r3, #8
 800687e:	b25b      	sxtb	r3, r3
 8006880:	f003 030f 	and.w	r3, r3, #15
 8006884:	b25b      	sxtb	r3, r3
 8006886:	4313      	orrs	r3, r2
 8006888:	b25b      	sxtb	r3, r3
 800688a:	b2db      	uxtb	r3, r3
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2201      	movs	r2, #1
 8006894:	70da      	strb	r2, [r3, #3]
			break;
 8006896:	e057      	b.n	8006948 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	0a1b      	lsrs	r3, r3, #8
 80068a0:	4413      	add	r3, r2
 80068a2:	4619      	mov	r1, r3
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f7ff fe77 	bl	8006598 <move_window>
 80068aa:	4603      	mov	r3, r0
 80068ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80068ae:	7ffb      	ldrb	r3, [r7, #31]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d146      	bne.n	8006942 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	005b      	lsls	r3, r3, #1
 80068be:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80068c2:	4413      	add	r3, r2
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	b292      	uxth	r2, r2
 80068c8:	4611      	mov	r1, r2
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7ff fbf9 	bl	80060c2 <st_word>
			fs->wflag = 1;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2201      	movs	r2, #1
 80068d4:	70da      	strb	r2, [r3, #3]
			break;
 80068d6:	e037      	b.n	8006948 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	09db      	lsrs	r3, r3, #7
 80068e0:	4413      	add	r3, r2
 80068e2:	4619      	mov	r1, r3
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f7ff fe57 	bl	8006598 <move_window>
 80068ea:	4603      	mov	r3, r0
 80068ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80068ee:	7ffb      	ldrb	r3, [r7, #31]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d128      	bne.n	8006946 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006908:	4413      	add	r3, r2
 800690a:	4618      	mov	r0, r3
 800690c:	f7ff fbb6 	bl	800607c <ld_dword>
 8006910:	4603      	mov	r3, r0
 8006912:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006916:	4323      	orrs	r3, r4
 8006918:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006928:	4413      	add	r3, r2
 800692a:	6879      	ldr	r1, [r7, #4]
 800692c:	4618      	mov	r0, r3
 800692e:	f7ff fbe3 	bl	80060f8 <st_dword>
			fs->wflag = 1;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2201      	movs	r2, #1
 8006936:	70da      	strb	r2, [r3, #3]
			break;
 8006938:	e006      	b.n	8006948 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800693a:	bf00      	nop
 800693c:	e004      	b.n	8006948 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800693e:	bf00      	nop
 8006940:	e002      	b.n	8006948 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006942:	bf00      	nop
 8006944:	e000      	b.n	8006948 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006946:	bf00      	nop
		}
	}
	return res;
 8006948:	7ffb      	ldrb	r3, [r7, #31]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3724      	adds	r7, #36	@ 0x24
 800694e:	46bd      	mov	sp, r7
 8006950:	bd90      	pop	{r4, r7, pc}

08006952 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b088      	sub	sp, #32
 8006956:	af00      	add	r7, sp, #0
 8006958:	60f8      	str	r0, [r7, #12]
 800695a:	60b9      	str	r1, [r7, #8]
 800695c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800695e:	2300      	movs	r3, #0
 8006960:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	2b01      	cmp	r3, #1
 800696c:	d904      	bls.n	8006978 <remove_chain+0x26>
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	68ba      	ldr	r2, [r7, #8]
 8006974:	429a      	cmp	r2, r3
 8006976:	d301      	bcc.n	800697c <remove_chain+0x2a>
 8006978:	2302      	movs	r3, #2
 800697a:	e04b      	b.n	8006a14 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00c      	beq.n	800699c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006982:	f04f 32ff 	mov.w	r2, #4294967295
 8006986:	6879      	ldr	r1, [r7, #4]
 8006988:	69b8      	ldr	r0, [r7, #24]
 800698a:	f7ff fef8 	bl	800677e <put_fat>
 800698e:	4603      	mov	r3, r0
 8006990:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006992:	7ffb      	ldrb	r3, [r7, #31]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <remove_chain+0x4a>
 8006998:	7ffb      	ldrb	r3, [r7, #31]
 800699a:	e03b      	b.n	8006a14 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800699c:	68b9      	ldr	r1, [r7, #8]
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f7ff fe46 	bl	8006630 <get_fat>
 80069a4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d031      	beq.n	8006a10 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d101      	bne.n	80069b6 <remove_chain+0x64>
 80069b2:	2302      	movs	r3, #2
 80069b4:	e02e      	b.n	8006a14 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069bc:	d101      	bne.n	80069c2 <remove_chain+0x70>
 80069be:	2301      	movs	r3, #1
 80069c0:	e028      	b.n	8006a14 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80069c2:	2200      	movs	r2, #0
 80069c4:	68b9      	ldr	r1, [r7, #8]
 80069c6:	69b8      	ldr	r0, [r7, #24]
 80069c8:	f7ff fed9 	bl	800677e <put_fat>
 80069cc:	4603      	mov	r3, r0
 80069ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80069d0:	7ffb      	ldrb	r3, [r7, #31]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d001      	beq.n	80069da <remove_chain+0x88>
 80069d6:	7ffb      	ldrb	r3, [r7, #31]
 80069d8:	e01c      	b.n	8006a14 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	695a      	ldr	r2, [r3, #20]
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	3b02      	subs	r3, #2
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d20b      	bcs.n	8006a00 <remove_chain+0xae>
			fs->free_clst++;
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	695b      	ldr	r3, [r3, #20]
 80069ec:	1c5a      	adds	r2, r3, #1
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	791b      	ldrb	r3, [r3, #4]
 80069f6:	f043 0301 	orr.w	r3, r3, #1
 80069fa:	b2da      	uxtb	r2, r3
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d3c6      	bcc.n	800699c <remove_chain+0x4a>
 8006a0e:	e000      	b.n	8006a12 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006a10:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3720      	adds	r7, #32
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b088      	sub	sp, #32
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10d      	bne.n	8006a4e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d004      	beq.n	8006a48 <create_chain+0x2c>
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	69ba      	ldr	r2, [r7, #24]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d31b      	bcc.n	8006a80 <create_chain+0x64>
 8006a48:	2301      	movs	r3, #1
 8006a4a:	61bb      	str	r3, [r7, #24]
 8006a4c:	e018      	b.n	8006a80 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006a4e:	6839      	ldr	r1, [r7, #0]
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f7ff fded 	bl	8006630 <get_fat>
 8006a56:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d801      	bhi.n	8006a62 <create_chain+0x46>
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e070      	b.n	8006b44 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a68:	d101      	bne.n	8006a6e <create_chain+0x52>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	e06a      	b.n	8006b44 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d201      	bcs.n	8006a7c <create_chain+0x60>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	e063      	b.n	8006b44 <create_chain+0x128>
		scl = clst;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	3301      	adds	r3, #1
 8006a88:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	69fa      	ldr	r2, [r7, #28]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d307      	bcc.n	8006aa4 <create_chain+0x88>
				ncl = 2;
 8006a94:	2302      	movs	r3, #2
 8006a96:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006a98:	69fa      	ldr	r2, [r7, #28]
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d901      	bls.n	8006aa4 <create_chain+0x88>
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	e04f      	b.n	8006b44 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006aa4:	69f9      	ldr	r1, [r7, #28]
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f7ff fdc2 	bl	8006630 <get_fat>
 8006aac:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00e      	beq.n	8006ad2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d003      	beq.n	8006ac2 <create_chain+0xa6>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac0:	d101      	bne.n	8006ac6 <create_chain+0xaa>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	e03e      	b.n	8006b44 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006ac6:	69fa      	ldr	r2, [r7, #28]
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d1da      	bne.n	8006a84 <create_chain+0x68>
 8006ace:	2300      	movs	r3, #0
 8006ad0:	e038      	b.n	8006b44 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006ad2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ad8:	69f9      	ldr	r1, [r7, #28]
 8006ada:	6938      	ldr	r0, [r7, #16]
 8006adc:	f7ff fe4f 	bl	800677e <put_fat>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006ae4:	7dfb      	ldrb	r3, [r7, #23]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d109      	bne.n	8006afe <create_chain+0xe2>
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d006      	beq.n	8006afe <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006af0:	69fa      	ldr	r2, [r7, #28]
 8006af2:	6839      	ldr	r1, [r7, #0]
 8006af4:	6938      	ldr	r0, [r7, #16]
 8006af6:	f7ff fe42 	bl	800677e <put_fat>
 8006afa:	4603      	mov	r3, r0
 8006afc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006afe:	7dfb      	ldrb	r3, [r7, #23]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d116      	bne.n	8006b32 <create_chain+0x116>
		fs->last_clst = ncl;
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	69fa      	ldr	r2, [r7, #28]
 8006b08:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	695a      	ldr	r2, [r3, #20]
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	3b02      	subs	r3, #2
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d804      	bhi.n	8006b22 <create_chain+0x106>
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	1e5a      	subs	r2, r3, #1
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	791b      	ldrb	r3, [r3, #4]
 8006b26:	f043 0301 	orr.w	r3, r3, #1
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	711a      	strb	r2, [r3, #4]
 8006b30:	e007      	b.n	8006b42 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006b32:	7dfb      	ldrb	r3, [r7, #23]
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d102      	bne.n	8006b3e <create_chain+0x122>
 8006b38:	f04f 33ff 	mov.w	r3, #4294967295
 8006b3c:	e000      	b.n	8006b40 <create_chain+0x124>
 8006b3e:	2301      	movs	r3, #1
 8006b40:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006b42:	69fb      	ldr	r3, [r7, #28]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3720      	adds	r7, #32
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b087      	sub	sp, #28
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b60:	3304      	adds	r3, #4
 8006b62:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	0a5b      	lsrs	r3, r3, #9
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	8952      	ldrh	r2, [r2, #10]
 8006b6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b70:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	1d1a      	adds	r2, r3, #4
 8006b76:	613a      	str	r2, [r7, #16]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d101      	bne.n	8006b86 <clmt_clust+0x3a>
 8006b82:	2300      	movs	r3, #0
 8006b84:	e010      	b.n	8006ba8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d307      	bcc.n	8006b9e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	617b      	str	r3, [r7, #20]
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	3304      	adds	r3, #4
 8006b9a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006b9c:	e7e9      	b.n	8006b72 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006b9e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	4413      	add	r3, r2
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	371c      	adds	r7, #28
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b086      	sub	sp, #24
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006bca:	d204      	bcs.n	8006bd6 <dir_sdi+0x22>
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	f003 031f 	and.w	r3, r3, #31
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d001      	beq.n	8006bda <dir_sdi+0x26>
		return FR_INT_ERR;
 8006bd6:	2302      	movs	r3, #2
 8006bd8:	e063      	b.n	8006ca2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	683a      	ldr	r2, [r7, #0]
 8006bde:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d106      	bne.n	8006bfa <dir_sdi+0x46>
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d902      	bls.n	8006bfa <dir_sdi+0x46>
		clst = fs->dirbase;
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10c      	bne.n	8006c1a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	095b      	lsrs	r3, r3, #5
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	8912      	ldrh	r2, [r2, #8]
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d301      	bcc.n	8006c10 <dir_sdi+0x5c>
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	e048      	b.n	8006ca2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	61da      	str	r2, [r3, #28]
 8006c18:	e029      	b.n	8006c6e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	895b      	ldrh	r3, [r3, #10]
 8006c1e:	025b      	lsls	r3, r3, #9
 8006c20:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006c22:	e019      	b.n	8006c58 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6979      	ldr	r1, [r7, #20]
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7ff fd01 	bl	8006630 <get_fat>
 8006c2e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c36:	d101      	bne.n	8006c3c <dir_sdi+0x88>
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e032      	b.n	8006ca2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d904      	bls.n	8006c4c <dir_sdi+0x98>
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d301      	bcc.n	8006c50 <dir_sdi+0x9c>
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	e028      	b.n	8006ca2 <dir_sdi+0xee>
			ofs -= csz;
 8006c50:	683a      	ldr	r2, [r7, #0]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006c58:	683a      	ldr	r2, [r7, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d2e1      	bcs.n	8006c24 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006c60:	6979      	ldr	r1, [r7, #20]
 8006c62:	6938      	ldr	r0, [r7, #16]
 8006c64:	f7ff fcc5 	bl	80065f2 <clust2sect>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	69db      	ldr	r3, [r3, #28]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d101      	bne.n	8006c80 <dir_sdi+0xcc>
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	e010      	b.n	8006ca2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	69da      	ldr	r2, [r3, #28]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	0a5b      	lsrs	r3, r3, #9
 8006c88:	441a      	add	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c9a:	441a      	add	r2, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3718      	adds	r7, #24
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b086      	sub	sp, #24
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
 8006cb2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	3320      	adds	r3, #32
 8006cc0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	69db      	ldr	r3, [r3, #28]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d003      	beq.n	8006cd2 <dir_next+0x28>
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006cd0:	d301      	bcc.n	8006cd6 <dir_next+0x2c>
 8006cd2:	2304      	movs	r3, #4
 8006cd4:	e0aa      	b.n	8006e2c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f040 8098 	bne.w	8006e12 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	69db      	ldr	r3, [r3, #28]
 8006ce6:	1c5a      	adds	r2, r3, #1
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d10b      	bne.n	8006d0c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	095b      	lsrs	r3, r3, #5
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	8912      	ldrh	r2, [r2, #8]
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	f0c0 8088 	bcc.w	8006e12 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	61da      	str	r2, [r3, #28]
 8006d08:	2304      	movs	r3, #4
 8006d0a:	e08f      	b.n	8006e2c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	0a5b      	lsrs	r3, r3, #9
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	8952      	ldrh	r2, [r2, #10]
 8006d14:	3a01      	subs	r2, #1
 8006d16:	4013      	ands	r3, r2
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d17a      	bne.n	8006e12 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	4619      	mov	r1, r3
 8006d24:	4610      	mov	r0, r2
 8006d26:	f7ff fc83 	bl	8006630 <get_fat>
 8006d2a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d801      	bhi.n	8006d36 <dir_next+0x8c>
 8006d32:	2302      	movs	r3, #2
 8006d34:	e07a      	b.n	8006e2c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d3c:	d101      	bne.n	8006d42 <dir_next+0x98>
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e074      	b.n	8006e2c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	697a      	ldr	r2, [r7, #20]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d358      	bcc.n	8006dfe <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d104      	bne.n	8006d5c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	61da      	str	r2, [r3, #28]
 8006d58:	2304      	movs	r3, #4
 8006d5a:	e067      	b.n	8006e2c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	4619      	mov	r1, r3
 8006d64:	4610      	mov	r0, r2
 8006d66:	f7ff fe59 	bl	8006a1c <create_chain>
 8006d6a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d101      	bne.n	8006d76 <dir_next+0xcc>
 8006d72:	2307      	movs	r3, #7
 8006d74:	e05a      	b.n	8006e2c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d101      	bne.n	8006d80 <dir_next+0xd6>
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	e055      	b.n	8006e2c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d86:	d101      	bne.n	8006d8c <dir_next+0xe2>
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e04f      	b.n	8006e2c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f7ff fbbf 	bl	8006510 <sync_window>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d001      	beq.n	8006d9c <dir_next+0xf2>
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e047      	b.n	8006e2c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	3334      	adds	r3, #52	@ 0x34
 8006da0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006da4:	2100      	movs	r1, #0
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7ff f9f3 	bl	8006192 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006dac:	2300      	movs	r3, #0
 8006dae:	613b      	str	r3, [r7, #16]
 8006db0:	6979      	ldr	r1, [r7, #20]
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f7ff fc1d 	bl	80065f2 <clust2sect>
 8006db8:	4602      	mov	r2, r0
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	631a      	str	r2, [r3, #48]	@ 0x30
 8006dbe:	e012      	b.n	8006de6 <dir_next+0x13c>
						fs->wflag = 1;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f7ff fba2 	bl	8006510 <sync_window>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d001      	beq.n	8006dd6 <dir_next+0x12c>
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e02a      	b.n	8006e2c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	613b      	str	r3, [r7, #16]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006de0:	1c5a      	adds	r2, r3, #1
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	631a      	str	r2, [r3, #48]	@ 0x30
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	895b      	ldrh	r3, [r3, #10]
 8006dea:	461a      	mov	r2, r3
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d3e6      	bcc.n	8006dc0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	1ad2      	subs	r2, r2, r3
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006e04:	6979      	ldr	r1, [r7, #20]
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f7ff fbf3 	bl	80065f2 <clust2sect>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	68ba      	ldr	r2, [r7, #8]
 8006e16:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e24:	441a      	add	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3718      	adds	r7, #24
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006e44:	2100      	movs	r1, #0
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f7ff feb4 	bl	8006bb4 <dir_sdi>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006e50:	7dfb      	ldrb	r3, [r7, #23]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d12b      	bne.n	8006eae <dir_alloc+0x7a>
		n = 0;
 8006e56:	2300      	movs	r3, #0
 8006e58:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	69db      	ldr	r3, [r3, #28]
 8006e5e:	4619      	mov	r1, r3
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f7ff fb99 	bl	8006598 <move_window>
 8006e66:	4603      	mov	r3, r0
 8006e68:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006e6a:	7dfb      	ldrb	r3, [r7, #23]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d11d      	bne.n	8006eac <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a1b      	ldr	r3, [r3, #32]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	2be5      	cmp	r3, #229	@ 0xe5
 8006e78:	d004      	beq.n	8006e84 <dir_alloc+0x50>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d107      	bne.n	8006e94 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	3301      	adds	r3, #1
 8006e88:	613b      	str	r3, [r7, #16]
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d102      	bne.n	8006e98 <dir_alloc+0x64>
 8006e92:	e00c      	b.n	8006eae <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006e94:	2300      	movs	r3, #0
 8006e96:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006e98:	2101      	movs	r1, #1
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7ff ff05 	bl	8006caa <dir_next>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006ea4:	7dfb      	ldrb	r3, [r7, #23]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d0d7      	beq.n	8006e5a <dir_alloc+0x26>
 8006eaa:	e000      	b.n	8006eae <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006eac:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006eae:	7dfb      	ldrb	r3, [r7, #23]
 8006eb0:	2b04      	cmp	r3, #4
 8006eb2:	d101      	bne.n	8006eb8 <dir_alloc+0x84>
 8006eb4:	2307      	movs	r3, #7
 8006eb6:	75fb      	strb	r3, [r7, #23]
	return res;
 8006eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3718      	adds	r7, #24
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b084      	sub	sp, #16
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	331a      	adds	r3, #26
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7ff f8bb 	bl	800604c <ld_word>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	2b03      	cmp	r3, #3
 8006ee0:	d109      	bne.n	8006ef6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	3314      	adds	r3, #20
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7ff f8b0 	bl	800604c <ld_word>
 8006eec:	4603      	mov	r3, r0
 8006eee:	041b      	lsls	r3, r3, #16
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	331a      	adds	r3, #26
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	b292      	uxth	r2, r2
 8006f14:	4611      	mov	r1, r2
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7ff f8d3 	bl	80060c2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	2b03      	cmp	r3, #3
 8006f22:	d109      	bne.n	8006f38 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	f103 0214 	add.w	r2, r3, #20
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	0c1b      	lsrs	r3, r3, #16
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	4619      	mov	r1, r3
 8006f32:	4610      	mov	r0, r2
 8006f34:	f7ff f8c5 	bl	80060c2 <st_word>
	}
}
 8006f38:	bf00      	nop
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006f4e:	2100      	movs	r1, #0
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f7ff fe2f 	bl	8006bb4 <dir_sdi>
 8006f56:	4603      	mov	r3, r0
 8006f58:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006f5a:	7dfb      	ldrb	r3, [r7, #23]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d001      	beq.n	8006f64 <dir_find+0x24>
 8006f60:	7dfb      	ldrb	r3, [r7, #23]
 8006f62:	e03e      	b.n	8006fe2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	69db      	ldr	r3, [r3, #28]
 8006f68:	4619      	mov	r1, r3
 8006f6a:	6938      	ldr	r0, [r7, #16]
 8006f6c:	f7ff fb14 	bl	8006598 <move_window>
 8006f70:	4603      	mov	r3, r0
 8006f72:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006f74:	7dfb      	ldrb	r3, [r7, #23]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d12f      	bne.n	8006fda <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006f82:	7bfb      	ldrb	r3, [r7, #15]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d102      	bne.n	8006f8e <dir_find+0x4e>
 8006f88:	2304      	movs	r3, #4
 8006f8a:	75fb      	strb	r3, [r7, #23]
 8006f8c:	e028      	b.n	8006fe0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	330b      	adds	r3, #11
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f9a:	b2da      	uxtb	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6a1b      	ldr	r3, [r3, #32]
 8006fa4:	330b      	adds	r3, #11
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	f003 0308 	and.w	r3, r3, #8
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10a      	bne.n	8006fc6 <dir_find+0x86>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a18      	ldr	r0, [r3, #32]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	3324      	adds	r3, #36	@ 0x24
 8006fb8:	220b      	movs	r2, #11
 8006fba:	4619      	mov	r1, r3
 8006fbc:	f7ff f904 	bl	80061c8 <mem_cmp>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00b      	beq.n	8006fde <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f7ff fe6e 	bl	8006caa <dir_next>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006fd2:	7dfb      	ldrb	r3, [r7, #23]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d0c5      	beq.n	8006f64 <dir_find+0x24>
 8006fd8:	e002      	b.n	8006fe0 <dir_find+0xa0>
		if (res != FR_OK) break;
 8006fda:	bf00      	nop
 8006fdc:	e000      	b.n	8006fe0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006fde:	bf00      	nop

	return res;
 8006fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3718      	adds	r7, #24
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b084      	sub	sp, #16
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006ff8:	2101      	movs	r1, #1
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f7ff ff1a 	bl	8006e34 <dir_alloc>
 8007000:	4603      	mov	r3, r0
 8007002:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007004:	7bfb      	ldrb	r3, [r7, #15]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d11c      	bne.n	8007044 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	69db      	ldr	r3, [r3, #28]
 800700e:	4619      	mov	r1, r3
 8007010:	68b8      	ldr	r0, [r7, #8]
 8007012:	f7ff fac1 	bl	8006598 <move_window>
 8007016:	4603      	mov	r3, r0
 8007018:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800701a:	7bfb      	ldrb	r3, [r7, #15]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d111      	bne.n	8007044 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a1b      	ldr	r3, [r3, #32]
 8007024:	2220      	movs	r2, #32
 8007026:	2100      	movs	r1, #0
 8007028:	4618      	mov	r0, r3
 800702a:	f7ff f8b2 	bl	8006192 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a18      	ldr	r0, [r3, #32]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	3324      	adds	r3, #36	@ 0x24
 8007036:	220b      	movs	r2, #11
 8007038:	4619      	mov	r1, r3
 800703a:	f7ff f889 	bl	8006150 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	2201      	movs	r2, #1
 8007042:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007044:	7bfb      	ldrb	r3, [r7, #15]
}
 8007046:	4618      	mov	r0, r3
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
	...

08007050 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b088      	sub	sp, #32
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	60fb      	str	r3, [r7, #12]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	3324      	adds	r3, #36	@ 0x24
 8007064:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007066:	220b      	movs	r2, #11
 8007068:	2120      	movs	r1, #32
 800706a:	68b8      	ldr	r0, [r7, #8]
 800706c:	f7ff f891 	bl	8006192 <mem_set>
	si = i = 0; ni = 8;
 8007070:	2300      	movs	r3, #0
 8007072:	613b      	str	r3, [r7, #16]
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	61fb      	str	r3, [r7, #28]
 8007078:	2308      	movs	r3, #8
 800707a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	1c5a      	adds	r2, r3, #1
 8007080:	61fa      	str	r2, [r7, #28]
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	4413      	add	r3, r2
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800708a:	7efb      	ldrb	r3, [r7, #27]
 800708c:	2b20      	cmp	r3, #32
 800708e:	d94e      	bls.n	800712e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007090:	7efb      	ldrb	r3, [r7, #27]
 8007092:	2b2f      	cmp	r3, #47	@ 0x2f
 8007094:	d006      	beq.n	80070a4 <create_name+0x54>
 8007096:	7efb      	ldrb	r3, [r7, #27]
 8007098:	2b5c      	cmp	r3, #92	@ 0x5c
 800709a:	d110      	bne.n	80070be <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800709c:	e002      	b.n	80070a4 <create_name+0x54>
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	3301      	adds	r3, #1
 80070a2:	61fb      	str	r3, [r7, #28]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	4413      	add	r3, r2
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	2b2f      	cmp	r3, #47	@ 0x2f
 80070ae:	d0f6      	beq.n	800709e <create_name+0x4e>
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	4413      	add	r3, r2
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	2b5c      	cmp	r3, #92	@ 0x5c
 80070ba:	d0f0      	beq.n	800709e <create_name+0x4e>
			break;
 80070bc:	e038      	b.n	8007130 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80070be:	7efb      	ldrb	r3, [r7, #27]
 80070c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80070c2:	d003      	beq.n	80070cc <create_name+0x7c>
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d30c      	bcc.n	80070e6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	2b0b      	cmp	r3, #11
 80070d0:	d002      	beq.n	80070d8 <create_name+0x88>
 80070d2:	7efb      	ldrb	r3, [r7, #27]
 80070d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80070d6:	d001      	beq.n	80070dc <create_name+0x8c>
 80070d8:	2306      	movs	r3, #6
 80070da:	e044      	b.n	8007166 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80070dc:	2308      	movs	r3, #8
 80070de:	613b      	str	r3, [r7, #16]
 80070e0:	230b      	movs	r3, #11
 80070e2:	617b      	str	r3, [r7, #20]
			continue;
 80070e4:	e022      	b.n	800712c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80070e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	da04      	bge.n	80070f8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80070ee:	7efb      	ldrb	r3, [r7, #27]
 80070f0:	3b80      	subs	r3, #128	@ 0x80
 80070f2:	4a1f      	ldr	r2, [pc, #124]	@ (8007170 <create_name+0x120>)
 80070f4:	5cd3      	ldrb	r3, [r2, r3]
 80070f6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80070f8:	7efb      	ldrb	r3, [r7, #27]
 80070fa:	4619      	mov	r1, r3
 80070fc:	481d      	ldr	r0, [pc, #116]	@ (8007174 <create_name+0x124>)
 80070fe:	f7ff f88a 	bl	8006216 <chk_chr>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d001      	beq.n	800710c <create_name+0xbc>
 8007108:	2306      	movs	r3, #6
 800710a:	e02c      	b.n	8007166 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800710c:	7efb      	ldrb	r3, [r7, #27]
 800710e:	2b60      	cmp	r3, #96	@ 0x60
 8007110:	d905      	bls.n	800711e <create_name+0xce>
 8007112:	7efb      	ldrb	r3, [r7, #27]
 8007114:	2b7a      	cmp	r3, #122	@ 0x7a
 8007116:	d802      	bhi.n	800711e <create_name+0xce>
 8007118:	7efb      	ldrb	r3, [r7, #27]
 800711a:	3b20      	subs	r3, #32
 800711c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	1c5a      	adds	r2, r3, #1
 8007122:	613a      	str	r2, [r7, #16]
 8007124:	68ba      	ldr	r2, [r7, #8]
 8007126:	4413      	add	r3, r2
 8007128:	7efa      	ldrb	r2, [r7, #27]
 800712a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800712c:	e7a6      	b.n	800707c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800712e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	441a      	add	r2, r3
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d101      	bne.n	8007144 <create_name+0xf4>
 8007140:	2306      	movs	r3, #6
 8007142:	e010      	b.n	8007166 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	2be5      	cmp	r3, #229	@ 0xe5
 800714a:	d102      	bne.n	8007152 <create_name+0x102>
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	2205      	movs	r2, #5
 8007150:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007152:	7efb      	ldrb	r3, [r7, #27]
 8007154:	2b20      	cmp	r3, #32
 8007156:	d801      	bhi.n	800715c <create_name+0x10c>
 8007158:	2204      	movs	r2, #4
 800715a:	e000      	b.n	800715e <create_name+0x10e>
 800715c:	2200      	movs	r2, #0
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	330b      	adds	r3, #11
 8007162:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007164:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007166:	4618      	mov	r0, r3
 8007168:	3720      	adds	r7, #32
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	0800d568 	.word	0x0800d568
 8007174:	0800d504 	.word	0x0800d504

08007178 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b086      	sub	sp, #24
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800718c:	e002      	b.n	8007194 <follow_path+0x1c>
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	3301      	adds	r3, #1
 8007192:	603b      	str	r3, [r7, #0]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	2b2f      	cmp	r3, #47	@ 0x2f
 800719a:	d0f8      	beq.n	800718e <follow_path+0x16>
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	2b5c      	cmp	r3, #92	@ 0x5c
 80071a2:	d0f4      	beq.n	800718e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	2200      	movs	r2, #0
 80071a8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	2b1f      	cmp	r3, #31
 80071b0:	d80a      	bhi.n	80071c8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2280      	movs	r2, #128	@ 0x80
 80071b6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80071ba:	2100      	movs	r1, #0
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f7ff fcf9 	bl	8006bb4 <dir_sdi>
 80071c2:	4603      	mov	r3, r0
 80071c4:	75fb      	strb	r3, [r7, #23]
 80071c6:	e043      	b.n	8007250 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80071c8:	463b      	mov	r3, r7
 80071ca:	4619      	mov	r1, r3
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f7ff ff3f 	bl	8007050 <create_name>
 80071d2:	4603      	mov	r3, r0
 80071d4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80071d6:	7dfb      	ldrb	r3, [r7, #23]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d134      	bne.n	8007246 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f7ff feaf 	bl	8006f40 <dir_find>
 80071e2:	4603      	mov	r3, r0
 80071e4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80071ec:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80071ee:	7dfb      	ldrb	r3, [r7, #23]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00a      	beq.n	800720a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80071f4:	7dfb      	ldrb	r3, [r7, #23]
 80071f6:	2b04      	cmp	r3, #4
 80071f8:	d127      	bne.n	800724a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80071fa:	7afb      	ldrb	r3, [r7, #11]
 80071fc:	f003 0304 	and.w	r3, r3, #4
 8007200:	2b00      	cmp	r3, #0
 8007202:	d122      	bne.n	800724a <follow_path+0xd2>
 8007204:	2305      	movs	r3, #5
 8007206:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007208:	e01f      	b.n	800724a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800720a:	7afb      	ldrb	r3, [r7, #11]
 800720c:	f003 0304 	and.w	r3, r3, #4
 8007210:	2b00      	cmp	r3, #0
 8007212:	d11c      	bne.n	800724e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	799b      	ldrb	r3, [r3, #6]
 8007218:	f003 0310 	and.w	r3, r3, #16
 800721c:	2b00      	cmp	r3, #0
 800721e:	d102      	bne.n	8007226 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007220:	2305      	movs	r3, #5
 8007222:	75fb      	strb	r3, [r7, #23]
 8007224:	e014      	b.n	8007250 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	695b      	ldr	r3, [r3, #20]
 8007230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007234:	4413      	add	r3, r2
 8007236:	4619      	mov	r1, r3
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f7ff fe42 	bl	8006ec2 <ld_clust>
 800723e:	4602      	mov	r2, r0
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007244:	e7c0      	b.n	80071c8 <follow_path+0x50>
			if (res != FR_OK) break;
 8007246:	bf00      	nop
 8007248:	e002      	b.n	8007250 <follow_path+0xd8>
				break;
 800724a:	bf00      	nop
 800724c:	e000      	b.n	8007250 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800724e:	bf00      	nop
			}
		}
	}

	return res;
 8007250:	7dfb      	ldrb	r3, [r7, #23]
}
 8007252:	4618      	mov	r0, r3
 8007254:	3718      	adds	r7, #24
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800725a:	b480      	push	{r7}
 800725c:	b087      	sub	sp, #28
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007262:	f04f 33ff 	mov.w	r3, #4294967295
 8007266:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d031      	beq.n	80072d4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	617b      	str	r3, [r7, #20]
 8007276:	e002      	b.n	800727e <get_ldnumber+0x24>
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	3301      	adds	r3, #1
 800727c:	617b      	str	r3, [r7, #20]
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	2b20      	cmp	r3, #32
 8007284:	d903      	bls.n	800728e <get_ldnumber+0x34>
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	2b3a      	cmp	r3, #58	@ 0x3a
 800728c:	d1f4      	bne.n	8007278 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	2b3a      	cmp	r3, #58	@ 0x3a
 8007294:	d11c      	bne.n	80072d0 <get_ldnumber+0x76>
			tp = *path;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	1c5a      	adds	r2, r3, #1
 80072a0:	60fa      	str	r2, [r7, #12]
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	3b30      	subs	r3, #48	@ 0x30
 80072a6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	2b09      	cmp	r3, #9
 80072ac:	d80e      	bhi.n	80072cc <get_ldnumber+0x72>
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d10a      	bne.n	80072cc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d107      	bne.n	80072cc <get_ldnumber+0x72>
					vol = (int)i;
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	3301      	adds	r3, #1
 80072c4:	617b      	str	r3, [r7, #20]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	e002      	b.n	80072d6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80072d0:	2300      	movs	r3, #0
 80072d2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80072d4:	693b      	ldr	r3, [r7, #16]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	371c      	adds	r7, #28
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
	...

080072e4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	70da      	strb	r2, [r3, #3]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f04f 32ff 	mov.w	r2, #4294967295
 80072fa:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80072fc:	6839      	ldr	r1, [r7, #0]
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7ff f94a 	bl	8006598 <move_window>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <check_fs+0x2a>
 800730a:	2304      	movs	r3, #4
 800730c:	e038      	b.n	8007380 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	3334      	adds	r3, #52	@ 0x34
 8007312:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007316:	4618      	mov	r0, r3
 8007318:	f7fe fe98 	bl	800604c <ld_word>
 800731c:	4603      	mov	r3, r0
 800731e:	461a      	mov	r2, r3
 8007320:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007324:	429a      	cmp	r2, r3
 8007326:	d001      	beq.n	800732c <check_fs+0x48>
 8007328:	2303      	movs	r3, #3
 800732a:	e029      	b.n	8007380 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007332:	2be9      	cmp	r3, #233	@ 0xe9
 8007334:	d009      	beq.n	800734a <check_fs+0x66>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800733c:	2beb      	cmp	r3, #235	@ 0xeb
 800733e:	d11e      	bne.n	800737e <check_fs+0x9a>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007346:	2b90      	cmp	r3, #144	@ 0x90
 8007348:	d119      	bne.n	800737e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	3334      	adds	r3, #52	@ 0x34
 800734e:	3336      	adds	r3, #54	@ 0x36
 8007350:	4618      	mov	r0, r3
 8007352:	f7fe fe93 	bl	800607c <ld_dword>
 8007356:	4603      	mov	r3, r0
 8007358:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800735c:	4a0a      	ldr	r2, [pc, #40]	@ (8007388 <check_fs+0xa4>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d101      	bne.n	8007366 <check_fs+0x82>
 8007362:	2300      	movs	r3, #0
 8007364:	e00c      	b.n	8007380 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	3334      	adds	r3, #52	@ 0x34
 800736a:	3352      	adds	r3, #82	@ 0x52
 800736c:	4618      	mov	r0, r3
 800736e:	f7fe fe85 	bl	800607c <ld_dword>
 8007372:	4603      	mov	r3, r0
 8007374:	4a05      	ldr	r2, [pc, #20]	@ (800738c <check_fs+0xa8>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d101      	bne.n	800737e <check_fs+0x9a>
 800737a:	2300      	movs	r3, #0
 800737c:	e000      	b.n	8007380 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800737e:	2302      	movs	r3, #2
}
 8007380:	4618      	mov	r0, r3
 8007382:	3708      	adds	r7, #8
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	00544146 	.word	0x00544146
 800738c:	33544146 	.word	0x33544146

08007390 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b096      	sub	sp, #88	@ 0x58
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	4613      	mov	r3, r2
 800739c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	2200      	movs	r2, #0
 80073a2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f7ff ff58 	bl	800725a <get_ldnumber>
 80073aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80073ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	da01      	bge.n	80073b6 <find_volume+0x26>
 80073b2:	230b      	movs	r3, #11
 80073b4:	e235      	b.n	8007822 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80073b6:	4aa5      	ldr	r2, [pc, #660]	@ (800764c <find_volume+0x2bc>)
 80073b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073be:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80073c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d101      	bne.n	80073ca <find_volume+0x3a>
 80073c6:	230c      	movs	r3, #12
 80073c8:	e22b      	b.n	8007822 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 80073ca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80073cc:	f7fe ff3e 	bl	800624c <lock_fs>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d101      	bne.n	80073da <find_volume+0x4a>
 80073d6:	230f      	movs	r3, #15
 80073d8:	e223      	b.n	8007822 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80073de:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80073e0:	79fb      	ldrb	r3, [r7, #7]
 80073e2:	f023 0301 	bic.w	r3, r3, #1
 80073e6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80073e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d01a      	beq.n	8007426 <find_volume+0x96>
		stat = disk_status(fs->drv);
 80073f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f2:	785b      	ldrb	r3, [r3, #1]
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7fe fda7 	bl	8005f48 <disk_status>
 80073fa:	4603      	mov	r3, r0
 80073fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007400:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007404:	f003 0301 	and.w	r3, r3, #1
 8007408:	2b00      	cmp	r3, #0
 800740a:	d10c      	bne.n	8007426 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800740c:	79fb      	ldrb	r3, [r7, #7]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d007      	beq.n	8007422 <find_volume+0x92>
 8007412:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007416:	f003 0304 	and.w	r3, r3, #4
 800741a:	2b00      	cmp	r3, #0
 800741c:	d001      	beq.n	8007422 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800741e:	230a      	movs	r3, #10
 8007420:	e1ff      	b.n	8007822 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8007422:	2300      	movs	r3, #0
 8007424:	e1fd      	b.n	8007822 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007428:	2200      	movs	r2, #0
 800742a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800742c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800742e:	b2da      	uxtb	r2, r3
 8007430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007432:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007436:	785b      	ldrb	r3, [r3, #1]
 8007438:	4618      	mov	r0, r3
 800743a:	f7fe fd9f 	bl	8005f7c <disk_initialize>
 800743e:	4603      	mov	r3, r0
 8007440:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007444:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007448:	f003 0301 	and.w	r3, r3, #1
 800744c:	2b00      	cmp	r3, #0
 800744e:	d001      	beq.n	8007454 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007450:	2303      	movs	r3, #3
 8007452:	e1e6      	b.n	8007822 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007454:	79fb      	ldrb	r3, [r7, #7]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d007      	beq.n	800746a <find_volume+0xda>
 800745a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800745e:	f003 0304 	and.w	r3, r3, #4
 8007462:	2b00      	cmp	r3, #0
 8007464:	d001      	beq.n	800746a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8007466:	230a      	movs	r3, #10
 8007468:	e1db      	b.n	8007822 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800746a:	2300      	movs	r3, #0
 800746c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800746e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007470:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007472:	f7ff ff37 	bl	80072e4 <check_fs>
 8007476:	4603      	mov	r3, r0
 8007478:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800747c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007480:	2b02      	cmp	r3, #2
 8007482:	d149      	bne.n	8007518 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007484:	2300      	movs	r3, #0
 8007486:	643b      	str	r3, [r7, #64]	@ 0x40
 8007488:	e01e      	b.n	80074c8 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800748a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800748c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007490:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007492:	011b      	lsls	r3, r3, #4
 8007494:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007498:	4413      	add	r3, r2
 800749a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800749c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749e:	3304      	adds	r3, #4
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d006      	beq.n	80074b4 <find_volume+0x124>
 80074a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a8:	3308      	adds	r3, #8
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7fe fde6 	bl	800607c <ld_dword>
 80074b0:	4602      	mov	r2, r0
 80074b2:	e000      	b.n	80074b6 <find_volume+0x126>
 80074b4:	2200      	movs	r2, #0
 80074b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	3358      	adds	r3, #88	@ 0x58
 80074bc:	443b      	add	r3, r7
 80074be:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80074c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074c4:	3301      	adds	r3, #1
 80074c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80074c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074ca:	2b03      	cmp	r3, #3
 80074cc:	d9dd      	bls.n	800748a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80074ce:	2300      	movs	r3, #0
 80074d0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80074d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d002      	beq.n	80074de <find_volume+0x14e>
 80074d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074da:	3b01      	subs	r3, #1
 80074dc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80074de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	3358      	adds	r3, #88	@ 0x58
 80074e4:	443b      	add	r3, r7
 80074e6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80074ea:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80074ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d005      	beq.n	80074fe <find_volume+0x16e>
 80074f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80074f4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80074f6:	f7ff fef5 	bl	80072e4 <check_fs>
 80074fa:	4603      	mov	r3, r0
 80074fc:	e000      	b.n	8007500 <find_volume+0x170>
 80074fe:	2303      	movs	r3, #3
 8007500:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007504:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007508:	2b01      	cmp	r3, #1
 800750a:	d905      	bls.n	8007518 <find_volume+0x188>
 800750c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800750e:	3301      	adds	r3, #1
 8007510:	643b      	str	r3, [r7, #64]	@ 0x40
 8007512:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007514:	2b03      	cmp	r3, #3
 8007516:	d9e2      	bls.n	80074de <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007518:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800751c:	2b04      	cmp	r3, #4
 800751e:	d101      	bne.n	8007524 <find_volume+0x194>
 8007520:	2301      	movs	r3, #1
 8007522:	e17e      	b.n	8007822 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007524:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007528:	2b01      	cmp	r3, #1
 800752a:	d901      	bls.n	8007530 <find_volume+0x1a0>
 800752c:	230d      	movs	r3, #13
 800752e:	e178      	b.n	8007822 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007532:	3334      	adds	r3, #52	@ 0x34
 8007534:	330b      	adds	r3, #11
 8007536:	4618      	mov	r0, r3
 8007538:	f7fe fd88 	bl	800604c <ld_word>
 800753c:	4603      	mov	r3, r0
 800753e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007542:	d001      	beq.n	8007548 <find_volume+0x1b8>
 8007544:	230d      	movs	r3, #13
 8007546:	e16c      	b.n	8007822 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800754a:	3334      	adds	r3, #52	@ 0x34
 800754c:	3316      	adds	r3, #22
 800754e:	4618      	mov	r0, r3
 8007550:	f7fe fd7c 	bl	800604c <ld_word>
 8007554:	4603      	mov	r3, r0
 8007556:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007558:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800755a:	2b00      	cmp	r3, #0
 800755c:	d106      	bne.n	800756c <find_volume+0x1dc>
 800755e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007560:	3334      	adds	r3, #52	@ 0x34
 8007562:	3324      	adds	r3, #36	@ 0x24
 8007564:	4618      	mov	r0, r3
 8007566:	f7fe fd89 	bl	800607c <ld_dword>
 800756a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800756c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800756e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007570:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007574:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800757a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800757c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800757e:	789b      	ldrb	r3, [r3, #2]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d005      	beq.n	8007590 <find_volume+0x200>
 8007584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007586:	789b      	ldrb	r3, [r3, #2]
 8007588:	2b02      	cmp	r3, #2
 800758a:	d001      	beq.n	8007590 <find_volume+0x200>
 800758c:	230d      	movs	r3, #13
 800758e:	e148      	b.n	8007822 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007592:	789b      	ldrb	r3, [r3, #2]
 8007594:	461a      	mov	r2, r3
 8007596:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007598:	fb02 f303 	mul.w	r3, r2, r3
 800759c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800759e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075a4:	461a      	mov	r2, r3
 80075a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075a8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80075aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ac:	895b      	ldrh	r3, [r3, #10]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d008      	beq.n	80075c4 <find_volume+0x234>
 80075b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075b4:	895b      	ldrh	r3, [r3, #10]
 80075b6:	461a      	mov	r2, r3
 80075b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ba:	895b      	ldrh	r3, [r3, #10]
 80075bc:	3b01      	subs	r3, #1
 80075be:	4013      	ands	r3, r2
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d001      	beq.n	80075c8 <find_volume+0x238>
 80075c4:	230d      	movs	r3, #13
 80075c6:	e12c      	b.n	8007822 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80075c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ca:	3334      	adds	r3, #52	@ 0x34
 80075cc:	3311      	adds	r3, #17
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fe fd3c 	bl	800604c <ld_word>
 80075d4:	4603      	mov	r3, r0
 80075d6:	461a      	mov	r2, r3
 80075d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075da:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80075dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075de:	891b      	ldrh	r3, [r3, #8]
 80075e0:	f003 030f 	and.w	r3, r3, #15
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d001      	beq.n	80075ee <find_volume+0x25e>
 80075ea:	230d      	movs	r3, #13
 80075ec:	e119      	b.n	8007822 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80075ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f0:	3334      	adds	r3, #52	@ 0x34
 80075f2:	3313      	adds	r3, #19
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7fe fd29 	bl	800604c <ld_word>
 80075fa:	4603      	mov	r3, r0
 80075fc:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80075fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007600:	2b00      	cmp	r3, #0
 8007602:	d106      	bne.n	8007612 <find_volume+0x282>
 8007604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007606:	3334      	adds	r3, #52	@ 0x34
 8007608:	3320      	adds	r3, #32
 800760a:	4618      	mov	r0, r3
 800760c:	f7fe fd36 	bl	800607c <ld_dword>
 8007610:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007614:	3334      	adds	r3, #52	@ 0x34
 8007616:	330e      	adds	r3, #14
 8007618:	4618      	mov	r0, r3
 800761a:	f7fe fd17 	bl	800604c <ld_word>
 800761e:	4603      	mov	r3, r0
 8007620:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007622:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007624:	2b00      	cmp	r3, #0
 8007626:	d101      	bne.n	800762c <find_volume+0x29c>
 8007628:	230d      	movs	r3, #13
 800762a:	e0fa      	b.n	8007822 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800762c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800762e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007630:	4413      	add	r3, r2
 8007632:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007634:	8912      	ldrh	r2, [r2, #8]
 8007636:	0912      	lsrs	r2, r2, #4
 8007638:	b292      	uxth	r2, r2
 800763a:	4413      	add	r3, r2
 800763c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800763e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007642:	429a      	cmp	r2, r3
 8007644:	d204      	bcs.n	8007650 <find_volume+0x2c0>
 8007646:	230d      	movs	r3, #13
 8007648:	e0eb      	b.n	8007822 <find_volume+0x492>
 800764a:	bf00      	nop
 800764c:	20000554 	.word	0x20000554
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007650:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007658:	8952      	ldrh	r2, [r2, #10]
 800765a:	fbb3 f3f2 	udiv	r3, r3, r2
 800765e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007662:	2b00      	cmp	r3, #0
 8007664:	d101      	bne.n	800766a <find_volume+0x2da>
 8007666:	230d      	movs	r3, #13
 8007668:	e0db      	b.n	8007822 <find_volume+0x492>
		fmt = FS_FAT32;
 800766a:	2303      	movs	r3, #3
 800766c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007672:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007676:	4293      	cmp	r3, r2
 8007678:	d802      	bhi.n	8007680 <find_volume+0x2f0>
 800767a:	2302      	movs	r3, #2
 800767c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007682:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007686:	4293      	cmp	r3, r2
 8007688:	d802      	bhi.n	8007690 <find_volume+0x300>
 800768a:	2301      	movs	r3, #1
 800768c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007692:	1c9a      	adds	r2, r3, #2
 8007694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007696:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800769a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800769c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800769e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80076a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076a2:	441a      	add	r2, r3
 80076a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a6:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80076a8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80076aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ac:	441a      	add	r2, r3
 80076ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b0:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 80076b2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80076b6:	2b03      	cmp	r3, #3
 80076b8:	d11e      	bne.n	80076f8 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80076ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076bc:	3334      	adds	r3, #52	@ 0x34
 80076be:	332a      	adds	r3, #42	@ 0x2a
 80076c0:	4618      	mov	r0, r3
 80076c2:	f7fe fcc3 	bl	800604c <ld_word>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d001      	beq.n	80076d0 <find_volume+0x340>
 80076cc:	230d      	movs	r3, #13
 80076ce:	e0a8      	b.n	8007822 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80076d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076d2:	891b      	ldrh	r3, [r3, #8]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d001      	beq.n	80076dc <find_volume+0x34c>
 80076d8:	230d      	movs	r3, #13
 80076da:	e0a2      	b.n	8007822 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80076dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076de:	3334      	adds	r3, #52	@ 0x34
 80076e0:	332c      	adds	r3, #44	@ 0x2c
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7fe fcca 	bl	800607c <ld_dword>
 80076e8:	4602      	mov	r2, r0
 80076ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ec:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80076ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076f0:	699b      	ldr	r3, [r3, #24]
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80076f6:	e01f      	b.n	8007738 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80076f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076fa:	891b      	ldrh	r3, [r3, #8]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d101      	bne.n	8007704 <find_volume+0x374>
 8007700:	230d      	movs	r3, #13
 8007702:	e08e      	b.n	8007822 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007706:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007708:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800770a:	441a      	add	r2, r3
 800770c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800770e:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007710:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007714:	2b02      	cmp	r3, #2
 8007716:	d103      	bne.n	8007720 <find_volume+0x390>
 8007718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800771a:	699b      	ldr	r3, [r3, #24]
 800771c:	005b      	lsls	r3, r3, #1
 800771e:	e00a      	b.n	8007736 <find_volume+0x3a6>
 8007720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007722:	699a      	ldr	r2, [r3, #24]
 8007724:	4613      	mov	r3, r2
 8007726:	005b      	lsls	r3, r3, #1
 8007728:	4413      	add	r3, r2
 800772a:	085a      	lsrs	r2, r3, #1
 800772c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	f003 0301 	and.w	r3, r3, #1
 8007734:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007736:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800773a:	69da      	ldr	r2, [r3, #28]
 800773c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800773e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8007742:	0a5b      	lsrs	r3, r3, #9
 8007744:	429a      	cmp	r2, r3
 8007746:	d201      	bcs.n	800774c <find_volume+0x3bc>
 8007748:	230d      	movs	r3, #13
 800774a:	e06a      	b.n	8007822 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800774c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800774e:	f04f 32ff 	mov.w	r2, #4294967295
 8007752:	615a      	str	r2, [r3, #20]
 8007754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007756:	695a      	ldr	r2, [r3, #20]
 8007758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800775a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800775c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800775e:	2280      	movs	r2, #128	@ 0x80
 8007760:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007762:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007766:	2b03      	cmp	r3, #3
 8007768:	d149      	bne.n	80077fe <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800776a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800776c:	3334      	adds	r3, #52	@ 0x34
 800776e:	3330      	adds	r3, #48	@ 0x30
 8007770:	4618      	mov	r0, r3
 8007772:	f7fe fc6b 	bl	800604c <ld_word>
 8007776:	4603      	mov	r3, r0
 8007778:	2b01      	cmp	r3, #1
 800777a:	d140      	bne.n	80077fe <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800777c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800777e:	3301      	adds	r3, #1
 8007780:	4619      	mov	r1, r3
 8007782:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007784:	f7fe ff08 	bl	8006598 <move_window>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d137      	bne.n	80077fe <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800778e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007790:	2200      	movs	r2, #0
 8007792:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007796:	3334      	adds	r3, #52	@ 0x34
 8007798:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800779c:	4618      	mov	r0, r3
 800779e:	f7fe fc55 	bl	800604c <ld_word>
 80077a2:	4603      	mov	r3, r0
 80077a4:	461a      	mov	r2, r3
 80077a6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d127      	bne.n	80077fe <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80077ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b0:	3334      	adds	r3, #52	@ 0x34
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7fe fc62 	bl	800607c <ld_dword>
 80077b8:	4603      	mov	r3, r0
 80077ba:	4a1c      	ldr	r2, [pc, #112]	@ (800782c <find_volume+0x49c>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d11e      	bne.n	80077fe <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80077c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c2:	3334      	adds	r3, #52	@ 0x34
 80077c4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80077c8:	4618      	mov	r0, r3
 80077ca:	f7fe fc57 	bl	800607c <ld_dword>
 80077ce:	4603      	mov	r3, r0
 80077d0:	4a17      	ldr	r2, [pc, #92]	@ (8007830 <find_volume+0x4a0>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d113      	bne.n	80077fe <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80077d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077d8:	3334      	adds	r3, #52	@ 0x34
 80077da:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80077de:	4618      	mov	r0, r3
 80077e0:	f7fe fc4c 	bl	800607c <ld_dword>
 80077e4:	4602      	mov	r2, r0
 80077e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80077ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ec:	3334      	adds	r3, #52	@ 0x34
 80077ee:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7fe fc42 	bl	800607c <ld_dword>
 80077f8:	4602      	mov	r2, r0
 80077fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077fc:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80077fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007800:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8007804:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007806:	4b0b      	ldr	r3, [pc, #44]	@ (8007834 <find_volume+0x4a4>)
 8007808:	881b      	ldrh	r3, [r3, #0]
 800780a:	3301      	adds	r3, #1
 800780c:	b29a      	uxth	r2, r3
 800780e:	4b09      	ldr	r3, [pc, #36]	@ (8007834 <find_volume+0x4a4>)
 8007810:	801a      	strh	r2, [r3, #0]
 8007812:	4b08      	ldr	r3, [pc, #32]	@ (8007834 <find_volume+0x4a4>)
 8007814:	881a      	ldrh	r2, [r3, #0]
 8007816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007818:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800781a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800781c:	f7fe fe54 	bl	80064c8 <clear_lock>
#endif
	return FR_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3758      	adds	r7, #88	@ 0x58
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	41615252 	.word	0x41615252
 8007830:	61417272 	.word	0x61417272
 8007834:	20000558 	.word	0x20000558

08007838 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007842:	2309      	movs	r3, #9
 8007844:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d02e      	beq.n	80078aa <validate+0x72>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d02a      	beq.n	80078aa <validate+0x72>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d025      	beq.n	80078aa <validate+0x72>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	889a      	ldrh	r2, [r3, #4]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	88db      	ldrh	r3, [r3, #6]
 8007868:	429a      	cmp	r2, r3
 800786a:	d11e      	bne.n	80078aa <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4618      	mov	r0, r3
 8007872:	f7fe fceb 	bl	800624c <lock_fs>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d014      	beq.n	80078a6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	785b      	ldrb	r3, [r3, #1]
 8007882:	4618      	mov	r0, r3
 8007884:	f7fe fb60 	bl	8005f48 <disk_status>
 8007888:	4603      	mov	r3, r0
 800788a:	f003 0301 	and.w	r3, r3, #1
 800788e:	2b00      	cmp	r3, #0
 8007890:	d102      	bne.n	8007898 <validate+0x60>
				res = FR_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	73fb      	strb	r3, [r7, #15]
 8007896:	e008      	b.n	80078aa <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2100      	movs	r1, #0
 800789e:	4618      	mov	r0, r3
 80078a0:	f7fe fcea 	bl	8006278 <unlock_fs>
 80078a4:	e001      	b.n	80078aa <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80078a6:	230f      	movs	r3, #15
 80078a8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80078aa:	7bfb      	ldrb	r3, [r7, #15]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d102      	bne.n	80078b6 <validate+0x7e>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	e000      	b.n	80078b8 <validate+0x80>
 80078b6:	2300      	movs	r3, #0
 80078b8:	683a      	ldr	r2, [r7, #0]
 80078ba:	6013      	str	r3, [r2, #0]
	return res;
 80078bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
	...

080078c8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b088      	sub	sp, #32
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	4613      	mov	r3, r2
 80078d4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80078da:	f107 0310 	add.w	r3, r7, #16
 80078de:	4618      	mov	r0, r3
 80078e0:	f7ff fcbb 	bl	800725a <get_ldnumber>
 80078e4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	da01      	bge.n	80078f0 <f_mount+0x28>
 80078ec:	230b      	movs	r3, #11
 80078ee:	e048      	b.n	8007982 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80078f0:	4a26      	ldr	r2, [pc, #152]	@ (800798c <f_mount+0xc4>)
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078f8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00f      	beq.n	8007920 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007900:	69b8      	ldr	r0, [r7, #24]
 8007902:	f7fe fde1 	bl	80064c8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	4618      	mov	r0, r3
 800790c:	f000 fe3d 	bl	800858a <ff_del_syncobj>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <f_mount+0x52>
 8007916:	2302      	movs	r3, #2
 8007918:	e033      	b.n	8007982 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	2200      	movs	r2, #0
 800791e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00f      	beq.n	8007946 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2200      	movs	r2, #0
 800792a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	b2da      	uxtb	r2, r3
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	330c      	adds	r3, #12
 8007934:	4619      	mov	r1, r3
 8007936:	4610      	mov	r0, r2
 8007938:	f000 fe07 	bl	800854a <ff_cre_syncobj>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d101      	bne.n	8007946 <f_mount+0x7e>
 8007942:	2302      	movs	r3, #2
 8007944:	e01d      	b.n	8007982 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	4910      	ldr	r1, [pc, #64]	@ (800798c <f_mount+0xc4>)
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d002      	beq.n	800795c <f_mount+0x94>
 8007956:	79fb      	ldrb	r3, [r7, #7]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d001      	beq.n	8007960 <f_mount+0x98>
 800795c:	2300      	movs	r3, #0
 800795e:	e010      	b.n	8007982 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007960:	f107 010c 	add.w	r1, r7, #12
 8007964:	f107 0308 	add.w	r3, r7, #8
 8007968:	2200      	movs	r2, #0
 800796a:	4618      	mov	r0, r3
 800796c:	f7ff fd10 	bl	8007390 <find_volume>
 8007970:	4603      	mov	r3, r0
 8007972:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	7dfa      	ldrb	r2, [r7, #23]
 8007978:	4611      	mov	r1, r2
 800797a:	4618      	mov	r0, r3
 800797c:	f7fe fc7c 	bl	8006278 <unlock_fs>
 8007980:	7dfb      	ldrb	r3, [r7, #23]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3720      	adds	r7, #32
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	20000554 	.word	0x20000554

08007990 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b098      	sub	sp, #96	@ 0x60
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	4613      	mov	r3, r2
 800799c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d101      	bne.n	80079a8 <f_open+0x18>
 80079a4:	2309      	movs	r3, #9
 80079a6:	e1b0      	b.n	8007d0a <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80079a8:	79fb      	ldrb	r3, [r7, #7]
 80079aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079ae:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80079b0:	79fa      	ldrb	r2, [r7, #7]
 80079b2:	f107 0110 	add.w	r1, r7, #16
 80079b6:	f107 0308 	add.w	r3, r7, #8
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7ff fce8 	bl	8007390 <find_volume>
 80079c0:	4603      	mov	r3, r0
 80079c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80079c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	f040 818d 	bne.w	8007cea <f_open+0x35a>
		dj.obj.fs = fs;
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	f107 0314 	add.w	r3, r7, #20
 80079da:	4611      	mov	r1, r2
 80079dc:	4618      	mov	r0, r3
 80079de:	f7ff fbcb 	bl	8007178 <follow_path>
 80079e2:	4603      	mov	r3, r0
 80079e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80079e8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d118      	bne.n	8007a22 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80079f0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80079f4:	b25b      	sxtb	r3, r3
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	da03      	bge.n	8007a02 <f_open+0x72>
				res = FR_INVALID_NAME;
 80079fa:	2306      	movs	r3, #6
 80079fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007a00:	e00f      	b.n	8007a22 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007a02:	79fb      	ldrb	r3, [r7, #7]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	bf8c      	ite	hi
 8007a08:	2301      	movhi	r3, #1
 8007a0a:	2300      	movls	r3, #0
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	461a      	mov	r2, r3
 8007a10:	f107 0314 	add.w	r3, r7, #20
 8007a14:	4611      	mov	r1, r2
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7fe fc4a 	bl	80062b0 <chk_lock>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007a22:	79fb      	ldrb	r3, [r7, #7]
 8007a24:	f003 031c 	and.w	r3, r3, #28
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d07f      	beq.n	8007b2c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8007a2c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d017      	beq.n	8007a64 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007a34:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007a38:	2b04      	cmp	r3, #4
 8007a3a:	d10e      	bne.n	8007a5a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007a3c:	f7fe fc94 	bl	8006368 <enq_lock>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d006      	beq.n	8007a54 <f_open+0xc4>
 8007a46:	f107 0314 	add.w	r3, r7, #20
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7ff facd 	bl	8006fea <dir_register>
 8007a50:	4603      	mov	r3, r0
 8007a52:	e000      	b.n	8007a56 <f_open+0xc6>
 8007a54:	2312      	movs	r3, #18
 8007a56:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007a5a:	79fb      	ldrb	r3, [r7, #7]
 8007a5c:	f043 0308 	orr.w	r3, r3, #8
 8007a60:	71fb      	strb	r3, [r7, #7]
 8007a62:	e010      	b.n	8007a86 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007a64:	7ebb      	ldrb	r3, [r7, #26]
 8007a66:	f003 0311 	and.w	r3, r3, #17
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d003      	beq.n	8007a76 <f_open+0xe6>
					res = FR_DENIED;
 8007a6e:	2307      	movs	r3, #7
 8007a70:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007a74:	e007      	b.n	8007a86 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007a76:	79fb      	ldrb	r3, [r7, #7]
 8007a78:	f003 0304 	and.w	r3, r3, #4
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d002      	beq.n	8007a86 <f_open+0xf6>
 8007a80:	2308      	movs	r3, #8
 8007a82:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007a86:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d168      	bne.n	8007b60 <f_open+0x1d0>
 8007a8e:	79fb      	ldrb	r3, [r7, #7]
 8007a90:	f003 0308 	and.w	r3, r3, #8
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d063      	beq.n	8007b60 <f_open+0x1d0>
				dw = GET_FATTIME();
 8007a98:	f7fd fd1e 	bl	80054d8 <get_fattime>
 8007a9c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aa0:	330e      	adds	r3, #14
 8007aa2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7fe fb27 	bl	80060f8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aac:	3316      	adds	r3, #22
 8007aae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7fe fb21 	bl	80060f8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ab8:	330b      	adds	r3, #11
 8007aba:	2220      	movs	r2, #32
 8007abc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ac2:	4611      	mov	r1, r2
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7ff f9fc 	bl	8006ec2 <ld_clust>
 8007aca:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7ff fa14 	bl	8006f00 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ada:	331c      	adds	r3, #28
 8007adc:	2100      	movs	r1, #0
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7fe fb0a 	bl	80060f8 <st_dword>
					fs->wflag = 1;
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007aea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d037      	beq.n	8007b60 <f_open+0x1d0>
						dw = fs->winsect;
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007af4:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007af6:	f107 0314 	add.w	r3, r7, #20
 8007afa:	2200      	movs	r2, #0
 8007afc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7fe ff27 	bl	8006952 <remove_chain>
 8007b04:	4603      	mov	r3, r0
 8007b06:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8007b0a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d126      	bne.n	8007b60 <f_open+0x1d0>
							res = move_window(fs, dw);
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7fe fd3e 	bl	8006598 <move_window>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007b26:	3a01      	subs	r2, #1
 8007b28:	611a      	str	r2, [r3, #16]
 8007b2a:	e019      	b.n	8007b60 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007b2c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d115      	bne.n	8007b60 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007b34:	7ebb      	ldrb	r3, [r7, #26]
 8007b36:	f003 0310 	and.w	r3, r3, #16
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d003      	beq.n	8007b46 <f_open+0x1b6>
					res = FR_NO_FILE;
 8007b3e:	2304      	movs	r3, #4
 8007b40:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007b44:	e00c      	b.n	8007b60 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007b46:	79fb      	ldrb	r3, [r7, #7]
 8007b48:	f003 0302 	and.w	r3, r3, #2
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d007      	beq.n	8007b60 <f_open+0x1d0>
 8007b50:	7ebb      	ldrb	r3, [r7, #26]
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d002      	beq.n	8007b60 <f_open+0x1d0>
						res = FR_DENIED;
 8007b5a:	2307      	movs	r3, #7
 8007b5c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007b60:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d126      	bne.n	8007bb6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007b68:	79fb      	ldrb	r3, [r7, #7]
 8007b6a:	f003 0308 	and.w	r3, r3, #8
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d003      	beq.n	8007b7a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8007b72:	79fb      	ldrb	r3, [r7, #7]
 8007b74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b78:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007b82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007b88:	79fb      	ldrb	r3, [r7, #7]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	bf8c      	ite	hi
 8007b8e:	2301      	movhi	r3, #1
 8007b90:	2300      	movls	r3, #0
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	461a      	mov	r2, r3
 8007b96:	f107 0314 	add.w	r3, r7, #20
 8007b9a:	4611      	mov	r1, r2
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7fe fc05 	bl	80063ac <inc_lock>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	691b      	ldr	r3, [r3, #16]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d102      	bne.n	8007bb6 <f_open+0x226>
 8007bb0:	2302      	movs	r3, #2
 8007bb2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007bb6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f040 8095 	bne.w	8007cea <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007bc4:	4611      	mov	r1, r2
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7ff f97b 	bl	8006ec2 <ld_clust>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bd4:	331c      	adds	r3, #28
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7fe fa50 	bl	800607c <ld_dword>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007be8:	693a      	ldr	r2, [r7, #16]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	88da      	ldrh	r2, [r3, #6]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	79fa      	ldrb	r2, [r7, #7]
 8007bfa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	3330      	adds	r3, #48	@ 0x30
 8007c12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c16:	2100      	movs	r1, #0
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f7fe faba 	bl	8006192 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007c1e:	79fb      	ldrb	r3, [r7, #7]
 8007c20:	f003 0320 	and.w	r3, r3, #32
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d060      	beq.n	8007cea <f_open+0x35a>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d05c      	beq.n	8007cea <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	68da      	ldr	r2, [r3, #12]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	895b      	ldrh	r3, [r3, #10]
 8007c3c:	025b      	lsls	r3, r3, #9
 8007c3e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c4c:	e016      	b.n	8007c7c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7fe fcec 	bl	8006630 <get_fat>
 8007c58:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007c5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d802      	bhi.n	8007c66 <f_open+0x2d6>
 8007c60:	2302      	movs	r3, #2
 8007c62:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007c66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c6c:	d102      	bne.n	8007c74 <f_open+0x2e4>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007c74:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007c76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c78:	1ad3      	subs	r3, r2, r3
 8007c7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c7c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d103      	bne.n	8007c8c <f_open+0x2fc>
 8007c84:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007c86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d8e0      	bhi.n	8007c4e <f_open+0x2be>
				}
				fp->clust = clst;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c90:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007c92:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d127      	bne.n	8007cea <f_open+0x35a>
 8007c9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d022      	beq.n	8007cea <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7fe fca2 	bl	80065f2 <clust2sect>
 8007cae:	6478      	str	r0, [r7, #68]	@ 0x44
 8007cb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d103      	bne.n	8007cbe <f_open+0x32e>
						res = FR_INT_ERR;
 8007cb6:	2302      	movs	r3, #2
 8007cb8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007cbc:	e015      	b.n	8007cea <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007cbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cc0:	0a5a      	lsrs	r2, r3, #9
 8007cc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cc4:	441a      	add	r2, r3
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	7858      	ldrb	r0, [r3, #1]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6a1a      	ldr	r2, [r3, #32]
 8007cd8:	2301      	movs	r3, #1
 8007cda:	f7fe f977 	bl	8005fcc <disk_read>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d002      	beq.n	8007cea <f_open+0x35a>
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007cea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d002      	beq.n	8007cf8 <f_open+0x368>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8007cfe:	4611      	mov	r1, r2
 8007d00:	4618      	mov	r0, r3
 8007d02:	f7fe fab9 	bl	8006278 <unlock_fs>
 8007d06:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3760      	adds	r7, #96	@ 0x60
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b08e      	sub	sp, #56	@ 0x38
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	60f8      	str	r0, [r7, #12]
 8007d1a:	60b9      	str	r1, [r7, #8]
 8007d1c:	607a      	str	r2, [r7, #4]
 8007d1e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	2200      	movs	r2, #0
 8007d28:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f107 0214 	add.w	r2, r7, #20
 8007d30:	4611      	mov	r1, r2
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7ff fd80 	bl	8007838 <validate>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007d3e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d107      	bne.n	8007d56 <f_read+0x44>
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	7d5b      	ldrb	r3, [r3, #21]
 8007d4a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007d4e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d009      	beq.n	8007d6a <f_read+0x58>
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8007d5c:	4611      	mov	r1, r2
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7fe fa8a 	bl	8006278 <unlock_fs>
 8007d64:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007d68:	e13d      	b.n	8007fe6 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	7d1b      	ldrb	r3, [r3, #20]
 8007d6e:	f003 0301 	and.w	r3, r3, #1
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d106      	bne.n	8007d84 <f_read+0x72>
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	2107      	movs	r1, #7
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fe fa7c 	bl	8006278 <unlock_fs>
 8007d80:	2307      	movs	r3, #7
 8007d82:	e130      	b.n	8007fe6 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	68da      	ldr	r2, [r3, #12]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	699b      	ldr	r3, [r3, #24]
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	6a3b      	ldr	r3, [r7, #32]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	f240 811c 	bls.w	8007fd2 <f_read+0x2c0>
 8007d9a:	6a3b      	ldr	r3, [r7, #32]
 8007d9c:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007d9e:	e118      	b.n	8007fd2 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f040 80e4 	bne.w	8007f76 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	0a5b      	lsrs	r3, r3, #9
 8007db4:	697a      	ldr	r2, [r7, #20]
 8007db6:	8952      	ldrh	r2, [r2, #10]
 8007db8:	3a01      	subs	r2, #1
 8007dba:	4013      	ands	r3, r2
 8007dbc:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d139      	bne.n	8007e38 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	699b      	ldr	r3, [r3, #24]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d103      	bne.n	8007dd4 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8007dd2:	e013      	b.n	8007dfc <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d007      	beq.n	8007dec <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	699b      	ldr	r3, [r3, #24]
 8007de0:	4619      	mov	r1, r3
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f7fe feb2 	bl	8006b4c <clmt_clust>
 8007de8:	6338      	str	r0, [r7, #48]	@ 0x30
 8007dea:	e007      	b.n	8007dfc <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	69db      	ldr	r3, [r3, #28]
 8007df2:	4619      	mov	r1, r3
 8007df4:	4610      	mov	r0, r2
 8007df6:	f7fe fc1b 	bl	8006630 <get_fat>
 8007dfa:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d809      	bhi.n	8007e16 <f_read+0x104>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2202      	movs	r2, #2
 8007e06:	755a      	strb	r2, [r3, #21]
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	2102      	movs	r1, #2
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f7fe fa33 	bl	8006278 <unlock_fs>
 8007e12:	2302      	movs	r3, #2
 8007e14:	e0e7      	b.n	8007fe6 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e1c:	d109      	bne.n	8007e32 <f_read+0x120>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2201      	movs	r2, #1
 8007e22:	755a      	strb	r2, [r3, #21]
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	2101      	movs	r1, #1
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7fe fa25 	bl	8006278 <unlock_fs>
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e0d9      	b.n	8007fe6 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e36:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007e38:	697a      	ldr	r2, [r7, #20]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	69db      	ldr	r3, [r3, #28]
 8007e3e:	4619      	mov	r1, r3
 8007e40:	4610      	mov	r0, r2
 8007e42:	f7fe fbd6 	bl	80065f2 <clust2sect>
 8007e46:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d109      	bne.n	8007e62 <f_read+0x150>
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2202      	movs	r2, #2
 8007e52:	755a      	strb	r2, [r3, #21]
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	2102      	movs	r1, #2
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7fe fa0d 	bl	8006278 <unlock_fs>
 8007e5e:	2302      	movs	r3, #2
 8007e60:	e0c1      	b.n	8007fe6 <f_read+0x2d4>
			sect += csect;
 8007e62:	69ba      	ldr	r2, [r7, #24]
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	4413      	add	r3, r2
 8007e68:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	0a5b      	lsrs	r3, r3, #9
 8007e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d03e      	beq.n	8007ef4 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007e76:	69fa      	ldr	r2, [r7, #28]
 8007e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e7a:	4413      	add	r3, r2
 8007e7c:	697a      	ldr	r2, [r7, #20]
 8007e7e:	8952      	ldrh	r2, [r2, #10]
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d905      	bls.n	8007e90 <f_read+0x17e>
					cc = fs->csize - csect;
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	895b      	ldrh	r3, [r3, #10]
 8007e88:	461a      	mov	r2, r3
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	1ad3      	subs	r3, r2, r3
 8007e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	7858      	ldrb	r0, [r3, #1]
 8007e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e96:	69ba      	ldr	r2, [r7, #24]
 8007e98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007e9a:	f7fe f897 	bl	8005fcc <disk_read>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d009      	beq.n	8007eb8 <f_read+0x1a6>
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	755a      	strb	r2, [r3, #21]
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	2101      	movs	r1, #1
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7fe f9e2 	bl	8006278 <unlock_fs>
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e096      	b.n	8007fe6 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	7d1b      	ldrb	r3, [r3, #20]
 8007ebc:	b25b      	sxtb	r3, r3
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	da14      	bge.n	8007eec <f_read+0x1da>
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6a1a      	ldr	r2, [r3, #32]
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d90d      	bls.n	8007eec <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6a1a      	ldr	r2, [r3, #32]
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	1ad3      	subs	r3, r2, r3
 8007ed8:	025b      	lsls	r3, r3, #9
 8007eda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007edc:	18d0      	adds	r0, r2, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	3330      	adds	r3, #48	@ 0x30
 8007ee2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	f7fe f932 	bl	8006150 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eee:	025b      	lsls	r3, r3, #9
 8007ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8007ef2:	e05a      	b.n	8007faa <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6a1b      	ldr	r3, [r3, #32]
 8007ef8:	69ba      	ldr	r2, [r7, #24]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d038      	beq.n	8007f70 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	7d1b      	ldrb	r3, [r3, #20]
 8007f02:	b25b      	sxtb	r3, r3
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	da1d      	bge.n	8007f44 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	7858      	ldrb	r0, [r3, #1]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6a1a      	ldr	r2, [r3, #32]
 8007f16:	2301      	movs	r3, #1
 8007f18:	f7fe f878 	bl	800600c <disk_write>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d009      	beq.n	8007f36 <f_read+0x224>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2201      	movs	r2, #1
 8007f26:	755a      	strb	r2, [r3, #21]
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	2101      	movs	r1, #1
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7fe f9a3 	bl	8006278 <unlock_fs>
 8007f32:	2301      	movs	r3, #1
 8007f34:	e057      	b.n	8007fe6 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	7d1b      	ldrb	r3, [r3, #20]
 8007f3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f3e:	b2da      	uxtb	r2, r3
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	7858      	ldrb	r0, [r3, #1]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007f4e:	2301      	movs	r3, #1
 8007f50:	69ba      	ldr	r2, [r7, #24]
 8007f52:	f7fe f83b 	bl	8005fcc <disk_read>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d009      	beq.n	8007f70 <f_read+0x25e>
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	755a      	strb	r2, [r3, #21]
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	2101      	movs	r1, #1
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7fe f986 	bl	8006278 <unlock_fs>
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	e03a      	b.n	8007fe6 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	69ba      	ldr	r2, [r7, #24]
 8007f74:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	699b      	ldr	r3, [r3, #24]
 8007f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f7e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8007f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007f84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d901      	bls.n	8007f90 <f_read+0x27e>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	699b      	ldr	r3, [r3, #24]
 8007f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f9e:	4413      	add	r3, r2
 8007fa0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007fa6:	f7fe f8d3 	bl	8006150 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fae:	4413      	add	r3, r2
 8007fb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	699a      	ldr	r2, [r3, #24]
 8007fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fb8:	441a      	add	r2, r3
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	619a      	str	r2, [r3, #24]
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fc4:	441a      	add	r2, r3
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	601a      	str	r2, [r3, #0]
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fce:	1ad3      	subs	r3, r2, r3
 8007fd0:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f47f aee3 	bne.w	8007da0 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	2100      	movs	r1, #0
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7fe f94a 	bl	8006278 <unlock_fs>
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3738      	adds	r7, #56	@ 0x38
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b090      	sub	sp, #64	@ 0x40
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
 8007ff6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f107 0208 	add.w	r2, r7, #8
 8007ffe:	4611      	mov	r1, r2
 8008000:	4618      	mov	r0, r3
 8008002:	f7ff fc19 	bl	8007838 <validate>
 8008006:	4603      	mov	r3, r0
 8008008:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800800c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008010:	2b00      	cmp	r3, #0
 8008012:	d103      	bne.n	800801c <f_lseek+0x2e>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	7d5b      	ldrb	r3, [r3, #21]
 8008018:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800801c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008020:	2b00      	cmp	r3, #0
 8008022:	d009      	beq.n	8008038 <f_lseek+0x4a>
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800802a:	4611      	mov	r1, r2
 800802c:	4618      	mov	r0, r3
 800802e:	f7fe f923 	bl	8006278 <unlock_fs>
 8008032:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008036:	e229      	b.n	800848c <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800803c:	2b00      	cmp	r3, #0
 800803e:	f000 80ea 	beq.w	8008216 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008048:	d164      	bne.n	8008114 <f_lseek+0x126>
			tbl = fp->cltbl;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800804e:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008052:	1d1a      	adds	r2, r3, #4
 8008054:	627a      	str	r2, [r7, #36]	@ 0x24
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	617b      	str	r3, [r7, #20]
 800805a:	2302      	movs	r3, #2
 800805c:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8008064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008066:	2b00      	cmp	r3, #0
 8008068:	d044      	beq.n	80080f4 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800806a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800806c:	613b      	str	r3, [r7, #16]
 800806e:	2300      	movs	r3, #0
 8008070:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008074:	3302      	adds	r3, #2
 8008076:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8008078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800807a:	60fb      	str	r3, [r7, #12]
 800807c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800807e:	3301      	adds	r3, #1
 8008080:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008086:	4618      	mov	r0, r3
 8008088:	f7fe fad2 	bl	8006630 <get_fat>
 800808c:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800808e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008090:	2b01      	cmp	r3, #1
 8008092:	d809      	bhi.n	80080a8 <f_lseek+0xba>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2202      	movs	r2, #2
 8008098:	755a      	strb	r2, [r3, #21]
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	2102      	movs	r1, #2
 800809e:	4618      	mov	r0, r3
 80080a0:	f7fe f8ea 	bl	8006278 <unlock_fs>
 80080a4:	2302      	movs	r3, #2
 80080a6:	e1f1      	b.n	800848c <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80080a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ae:	d109      	bne.n	80080c4 <f_lseek+0xd6>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	755a      	strb	r2, [r3, #21]
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	2101      	movs	r1, #1
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7fe f8dc 	bl	8006278 <unlock_fs>
 80080c0:	2301      	movs	r3, #1
 80080c2:	e1e3      	b.n	800848c <f_lseek+0x49e>
					} while (cl == pcl + 1);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	3301      	adds	r3, #1
 80080c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d0d4      	beq.n	8008078 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80080ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d809      	bhi.n	80080ea <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 80080d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d8:	1d1a      	adds	r2, r3, #4
 80080da:	627a      	str	r2, [r7, #36]	@ 0x24
 80080dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080de:	601a      	str	r2, [r3, #0]
 80080e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e2:	1d1a      	adds	r2, r3, #4
 80080e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80080e6:	693a      	ldr	r2, [r7, #16]
 80080e8:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	699b      	ldr	r3, [r3, #24]
 80080ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d3ba      	bcc.n	800806a <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80080fa:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80080fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	429a      	cmp	r2, r3
 8008102:	d803      	bhi.n	800810c <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8008104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008106:	2200      	movs	r2, #0
 8008108:	601a      	str	r2, [r3, #0]
 800810a:	e1b6      	b.n	800847a <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800810c:	2311      	movs	r3, #17
 800810e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008112:	e1b2      	b.n	800847a <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	683a      	ldr	r2, [r7, #0]
 800811a:	429a      	cmp	r2, r3
 800811c:	d902      	bls.n	8008124 <f_lseek+0x136>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	683a      	ldr	r2, [r7, #0]
 8008128:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	f000 81a4 	beq.w	800847a <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	3b01      	subs	r3, #1
 8008136:	4619      	mov	r1, r3
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f7fe fd07 	bl	8006b4c <clmt_clust>
 800813e:	4602      	mov	r2, r0
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	69db      	ldr	r3, [r3, #28]
 800814a:	4619      	mov	r1, r3
 800814c:	4610      	mov	r0, r2
 800814e:	f7fe fa50 	bl	80065f2 <clust2sect>
 8008152:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8008154:	69bb      	ldr	r3, [r7, #24]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d109      	bne.n	800816e <f_lseek+0x180>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2202      	movs	r2, #2
 800815e:	755a      	strb	r2, [r3, #21]
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	2102      	movs	r1, #2
 8008164:	4618      	mov	r0, r3
 8008166:	f7fe f887 	bl	8006278 <unlock_fs>
 800816a:	2302      	movs	r3, #2
 800816c:	e18e      	b.n	800848c <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	3b01      	subs	r3, #1
 8008172:	0a5b      	lsrs	r3, r3, #9
 8008174:	68ba      	ldr	r2, [r7, #8]
 8008176:	8952      	ldrh	r2, [r2, #10]
 8008178:	3a01      	subs	r2, #1
 800817a:	4013      	ands	r3, r2
 800817c:	69ba      	ldr	r2, [r7, #24]
 800817e:	4413      	add	r3, r2
 8008180:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	699b      	ldr	r3, [r3, #24]
 8008186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800818a:	2b00      	cmp	r3, #0
 800818c:	f000 8175 	beq.w	800847a <f_lseek+0x48c>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6a1b      	ldr	r3, [r3, #32]
 8008194:	69ba      	ldr	r2, [r7, #24]
 8008196:	429a      	cmp	r2, r3
 8008198:	f000 816f 	beq.w	800847a <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	7d1b      	ldrb	r3, [r3, #20]
 80081a0:	b25b      	sxtb	r3, r3
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	da1d      	bge.n	80081e2 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	7858      	ldrb	r0, [r3, #1]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a1a      	ldr	r2, [r3, #32]
 80081b4:	2301      	movs	r3, #1
 80081b6:	f7fd ff29 	bl	800600c <disk_write>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d009      	beq.n	80081d4 <f_lseek+0x1e6>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	755a      	strb	r2, [r3, #21]
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	2101      	movs	r1, #1
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7fe f854 	bl	8006278 <unlock_fs>
 80081d0:	2301      	movs	r3, #1
 80081d2:	e15b      	b.n	800848c <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	7d1b      	ldrb	r3, [r3, #20]
 80081d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081dc:	b2da      	uxtb	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	7858      	ldrb	r0, [r3, #1]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80081ec:	2301      	movs	r3, #1
 80081ee:	69ba      	ldr	r2, [r7, #24]
 80081f0:	f7fd feec 	bl	8005fcc <disk_read>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d009      	beq.n	800820e <f_lseek+0x220>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	755a      	strb	r2, [r3, #21]
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	2101      	movs	r1, #1
 8008204:	4618      	mov	r0, r3
 8008206:	f7fe f837 	bl	8006278 <unlock_fs>
 800820a:	2301      	movs	r3, #1
 800820c:	e13e      	b.n	800848c <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	69ba      	ldr	r2, [r7, #24]
 8008212:	621a      	str	r2, [r3, #32]
 8008214:	e131      	b.n	800847a <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	683a      	ldr	r2, [r7, #0]
 800821c:	429a      	cmp	r2, r3
 800821e:	d908      	bls.n	8008232 <f_lseek+0x244>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	7d1b      	ldrb	r3, [r3, #20]
 8008224:	f003 0302 	and.w	r3, r3, #2
 8008228:	2b00      	cmp	r3, #0
 800822a:	d102      	bne.n	8008232 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	699b      	ldr	r3, [r3, #24]
 8008236:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008238:	2300      	movs	r3, #0
 800823a:	637b      	str	r3, [r7, #52]	@ 0x34
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008240:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	f000 80c0 	beq.w	80083ca <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	895b      	ldrh	r3, [r3, #10]
 800824e:	025b      	lsls	r3, r3, #9
 8008250:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008252:	6a3b      	ldr	r3, [r7, #32]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d01b      	beq.n	8008290 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	1e5a      	subs	r2, r3, #1
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008262:	6a3b      	ldr	r3, [r7, #32]
 8008264:	1e59      	subs	r1, r3, #1
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800826c:	429a      	cmp	r2, r3
 800826e:	d30f      	bcc.n	8008290 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8008270:	6a3b      	ldr	r3, [r7, #32]
 8008272:	1e5a      	subs	r2, r3, #1
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	425b      	negs	r3, r3
 8008278:	401a      	ands	r2, r3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	683a      	ldr	r2, [r7, #0]
 8008284:	1ad3      	subs	r3, r2, r3
 8008286:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	69db      	ldr	r3, [r3, #28]
 800828c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800828e:	e02c      	b.n	80082ea <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008298:	2b00      	cmp	r3, #0
 800829a:	d123      	bne.n	80082e4 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2100      	movs	r1, #0
 80082a0:	4618      	mov	r0, r3
 80082a2:	f7fe fbbb 	bl	8006a1c <create_chain>
 80082a6:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80082a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d109      	bne.n	80082c2 <f_lseek+0x2d4>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2202      	movs	r2, #2
 80082b2:	755a      	strb	r2, [r3, #21]
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	2102      	movs	r1, #2
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7fd ffdd 	bl	8006278 <unlock_fs>
 80082be:	2302      	movs	r3, #2
 80082c0:	e0e4      	b.n	800848c <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80082c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c8:	d109      	bne.n	80082de <f_lseek+0x2f0>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2201      	movs	r2, #1
 80082ce:	755a      	strb	r2, [r3, #21]
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	2101      	movs	r1, #1
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7fd ffcf 	bl	8006278 <unlock_fs>
 80082da:	2301      	movs	r3, #1
 80082dc:	e0d6      	b.n	800848c <f_lseek+0x49e>
					fp->obj.sclust = clst;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80082e2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80082e8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80082ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d06c      	beq.n	80083ca <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 80082f0:	e044      	b.n	800837c <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 80082f2:	683a      	ldr	r2, [r7, #0]
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	1ad3      	subs	r3, r2, r3
 80082f8:	603b      	str	r3, [r7, #0]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	699a      	ldr	r2, [r3, #24]
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	441a      	add	r2, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	7d1b      	ldrb	r3, [r3, #20]
 800830a:	f003 0302 	and.w	r3, r3, #2
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00b      	beq.n	800832a <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008316:	4618      	mov	r0, r3
 8008318:	f7fe fb80 	bl	8006a1c <create_chain>
 800831c:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800831e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008320:	2b00      	cmp	r3, #0
 8008322:	d108      	bne.n	8008336 <f_lseek+0x348>
							ofs = 0; break;
 8008324:	2300      	movs	r3, #0
 8008326:	603b      	str	r3, [r7, #0]
 8008328:	e02c      	b.n	8008384 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800832e:	4618      	mov	r0, r3
 8008330:	f7fe f97e 	bl	8006630 <get_fat>
 8008334:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800833c:	d109      	bne.n	8008352 <f_lseek+0x364>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2201      	movs	r2, #1
 8008342:	755a      	strb	r2, [r3, #21]
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	2101      	movs	r1, #1
 8008348:	4618      	mov	r0, r3
 800834a:	f7fd ff95 	bl	8006278 <unlock_fs>
 800834e:	2301      	movs	r3, #1
 8008350:	e09c      	b.n	800848c <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8008352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008354:	2b01      	cmp	r3, #1
 8008356:	d904      	bls.n	8008362 <f_lseek+0x374>
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	699b      	ldr	r3, [r3, #24]
 800835c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800835e:	429a      	cmp	r2, r3
 8008360:	d309      	bcc.n	8008376 <f_lseek+0x388>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2202      	movs	r2, #2
 8008366:	755a      	strb	r2, [r3, #21]
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	2102      	movs	r1, #2
 800836c:	4618      	mov	r0, r3
 800836e:	f7fd ff83 	bl	8006278 <unlock_fs>
 8008372:	2302      	movs	r3, #2
 8008374:	e08a      	b.n	800848c <f_lseek+0x49e>
					fp->clust = clst;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800837a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800837c:	683a      	ldr	r2, [r7, #0]
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	429a      	cmp	r2, r3
 8008382:	d8b6      	bhi.n	80082f2 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	699a      	ldr	r2, [r3, #24]
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	441a      	add	r2, r3
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008396:	2b00      	cmp	r3, #0
 8008398:	d017      	beq.n	80083ca <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800839e:	4618      	mov	r0, r3
 80083a0:	f7fe f927 	bl	80065f2 <clust2sect>
 80083a4:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80083a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d109      	bne.n	80083c0 <f_lseek+0x3d2>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2202      	movs	r2, #2
 80083b0:	755a      	strb	r2, [r3, #21]
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	2102      	movs	r1, #2
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7fd ff5e 	bl	8006278 <unlock_fs>
 80083bc:	2302      	movs	r3, #2
 80083be:	e065      	b.n	800848c <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	0a5b      	lsrs	r3, r3, #9
 80083c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083c6:	4413      	add	r3, r2
 80083c8:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	699a      	ldr	r2, [r3, #24]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d90a      	bls.n	80083ec <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	699a      	ldr	r2, [r3, #24]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	7d1b      	ldrb	r3, [r3, #20]
 80083e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083e6:	b2da      	uxtb	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	699b      	ldr	r3, [r3, #24]
 80083f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d040      	beq.n	800847a <f_lseek+0x48c>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6a1b      	ldr	r3, [r3, #32]
 80083fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083fe:	429a      	cmp	r2, r3
 8008400:	d03b      	beq.n	800847a <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	7d1b      	ldrb	r3, [r3, #20]
 8008406:	b25b      	sxtb	r3, r3
 8008408:	2b00      	cmp	r3, #0
 800840a:	da1d      	bge.n	8008448 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	7858      	ldrb	r0, [r3, #1]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a1a      	ldr	r2, [r3, #32]
 800841a:	2301      	movs	r3, #1
 800841c:	f7fd fdf6 	bl	800600c <disk_write>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d009      	beq.n	800843a <f_lseek+0x44c>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2201      	movs	r2, #1
 800842a:	755a      	strb	r2, [r3, #21]
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	2101      	movs	r1, #1
 8008430:	4618      	mov	r0, r3
 8008432:	f7fd ff21 	bl	8006278 <unlock_fs>
 8008436:	2301      	movs	r3, #1
 8008438:	e028      	b.n	800848c <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	7d1b      	ldrb	r3, [r3, #20]
 800843e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008442:	b2da      	uxtb	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	7858      	ldrb	r0, [r3, #1]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008452:	2301      	movs	r3, #1
 8008454:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008456:	f7fd fdb9 	bl	8005fcc <disk_read>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d009      	beq.n	8008474 <f_lseek+0x486>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	755a      	strb	r2, [r3, #21]
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	2101      	movs	r1, #1
 800846a:	4618      	mov	r0, r3
 800846c:	f7fd ff04 	bl	8006278 <unlock_fs>
 8008470:	2301      	movs	r3, #1
 8008472:	e00b      	b.n	800848c <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008478:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8008480:	4611      	mov	r1, r2
 8008482:	4618      	mov	r0, r3
 8008484:	f7fd fef8 	bl	8006278 <unlock_fs>
 8008488:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800848c:	4618      	mov	r0, r3
 800848e:	3740      	adds	r7, #64	@ 0x40
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008494:	b480      	push	{r7}
 8008496:	b087      	sub	sp, #28
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	4613      	mov	r3, r2
 80084a0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80084a2:	2301      	movs	r3, #1
 80084a4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80084a6:	2300      	movs	r3, #0
 80084a8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80084aa:	4b1f      	ldr	r3, [pc, #124]	@ (8008528 <FATFS_LinkDriverEx+0x94>)
 80084ac:	7a5b      	ldrb	r3, [r3, #9]
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d131      	bne.n	8008518 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80084b4:	4b1c      	ldr	r3, [pc, #112]	@ (8008528 <FATFS_LinkDriverEx+0x94>)
 80084b6:	7a5b      	ldrb	r3, [r3, #9]
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	461a      	mov	r2, r3
 80084bc:	4b1a      	ldr	r3, [pc, #104]	@ (8008528 <FATFS_LinkDriverEx+0x94>)
 80084be:	2100      	movs	r1, #0
 80084c0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80084c2:	4b19      	ldr	r3, [pc, #100]	@ (8008528 <FATFS_LinkDriverEx+0x94>)
 80084c4:	7a5b      	ldrb	r3, [r3, #9]
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	4a17      	ldr	r2, [pc, #92]	@ (8008528 <FATFS_LinkDriverEx+0x94>)
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	4413      	add	r3, r2
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80084d2:	4b15      	ldr	r3, [pc, #84]	@ (8008528 <FATFS_LinkDriverEx+0x94>)
 80084d4:	7a5b      	ldrb	r3, [r3, #9]
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	461a      	mov	r2, r3
 80084da:	4b13      	ldr	r3, [pc, #76]	@ (8008528 <FATFS_LinkDriverEx+0x94>)
 80084dc:	4413      	add	r3, r2
 80084de:	79fa      	ldrb	r2, [r7, #7]
 80084e0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80084e2:	4b11      	ldr	r3, [pc, #68]	@ (8008528 <FATFS_LinkDriverEx+0x94>)
 80084e4:	7a5b      	ldrb	r3, [r3, #9]
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	1c5a      	adds	r2, r3, #1
 80084ea:	b2d1      	uxtb	r1, r2
 80084ec:	4a0e      	ldr	r2, [pc, #56]	@ (8008528 <FATFS_LinkDriverEx+0x94>)
 80084ee:	7251      	strb	r1, [r2, #9]
 80084f0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80084f2:	7dbb      	ldrb	r3, [r7, #22]
 80084f4:	3330      	adds	r3, #48	@ 0x30
 80084f6:	b2da      	uxtb	r2, r3
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	3301      	adds	r3, #1
 8008500:	223a      	movs	r2, #58	@ 0x3a
 8008502:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	3302      	adds	r3, #2
 8008508:	222f      	movs	r2, #47	@ 0x2f
 800850a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	3303      	adds	r3, #3
 8008510:	2200      	movs	r2, #0
 8008512:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008514:	2300      	movs	r3, #0
 8008516:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008518:	7dfb      	ldrb	r3, [r7, #23]
}
 800851a:	4618      	mov	r0, r3
 800851c:	371c      	adds	r7, #28
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop
 8008528:	2000057c 	.word	0x2000057c

0800852c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008536:	2200      	movs	r2, #0
 8008538:	6839      	ldr	r1, [r7, #0]
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f7ff ffaa 	bl	8008494 <FATFS_LinkDriverEx>
 8008540:	4603      	mov	r3, r0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b086      	sub	sp, #24
 800854e:	af00      	add	r7, sp, #0
 8008550:	4603      	mov	r3, r0
 8008552:	6039      	str	r1, [r7, #0]
 8008554:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8008556:	2300      	movs	r3, #0
 8008558:	60fb      	str	r3, [r7, #12]
 800855a:	2300      	movs	r3, #0
 800855c:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800855e:	f107 030c 	add.w	r3, r7, #12
 8008562:	2101      	movs	r1, #1
 8008564:	4618      	mov	r0, r3
 8008566:	f000 f969 	bl	800883c <osSemaphoreCreate>
 800856a:	4602      	mov	r2, r0
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	bf14      	ite	ne
 8008578:	2301      	movne	r3, #1
 800857a:	2300      	moveq	r3, #0
 800857c:	b2db      	uxtb	r3, r3
 800857e:	617b      	str	r3, [r7, #20]

    return ret;
 8008580:	697b      	ldr	r3, [r7, #20]
}
 8008582:	4618      	mov	r0, r3
 8008584:	3718      	adds	r7, #24
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b082      	sub	sp, #8
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 fa08 	bl	80089a8 <osSemaphoreDelete>
#endif
    return 1;
 8008598:	2301      	movs	r3, #1
}
 800859a:	4618      	mov	r0, r3
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b084      	sub	sp, #16
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80085aa:	2300      	movs	r3, #0
 80085ac:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 80085ae:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 f974 	bl	80088a0 <osSemaphoreWait>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d101      	bne.n	80085c2 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 80085be:	2301      	movs	r3, #1
 80085c0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80085c2:	68fb      	ldr	r3, [r7, #12]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 f9b1 	bl	800893c <osSemaphoreRelease>
#endif
}
 80085da:	bf00      	nop
 80085dc:	3708      	adds	r7, #8
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}

080085e2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80085e2:	b480      	push	{r7}
 80085e4:	b085      	sub	sp, #20
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	4603      	mov	r3, r0
 80085ea:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80085ec:	2300      	movs	r3, #0
 80085ee:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80085f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80085f4:	2b84      	cmp	r3, #132	@ 0x84
 80085f6:	d005      	beq.n	8008604 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80085f8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	4413      	add	r3, r2
 8008600:	3303      	adds	r3, #3
 8008602:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008604:	68fb      	ldr	r3, [r7, #12]
}
 8008606:	4618      	mov	r0, r3
 8008608:	3714      	adds	r7, #20
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr

08008612 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008612:	b480      	push	{r7}
 8008614:	b083      	sub	sp, #12
 8008616:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008618:	f3ef 8305 	mrs	r3, IPSR
 800861c:	607b      	str	r3, [r7, #4]
  return(result);
 800861e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008620:	2b00      	cmp	r3, #0
 8008622:	bf14      	ite	ne
 8008624:	2301      	movne	r3, #1
 8008626:	2300      	moveq	r3, #0
 8008628:	b2db      	uxtb	r3, r3
}
 800862a:	4618      	mov	r0, r3
 800862c:	370c      	adds	r7, #12
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr

08008636 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800863a:	f001 fccf 	bl	8009fdc <vTaskStartScheduler>
  
  return osOK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	bd80      	pop	{r7, pc}

08008644 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008646:	b089      	sub	sp, #36	@ 0x24
 8008648:	af04      	add	r7, sp, #16
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	695b      	ldr	r3, [r3, #20]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d020      	beq.n	8008698 <osThreadCreate+0x54>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	699b      	ldr	r3, [r3, #24]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d01c      	beq.n	8008698 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	685c      	ldr	r4, [r3, #4]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	691e      	ldr	r6, [r3, #16]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008670:	4618      	mov	r0, r3
 8008672:	f7ff ffb6 	bl	80085e2 <makeFreeRtosPriority>
 8008676:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	695b      	ldr	r3, [r3, #20]
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008680:	9202      	str	r2, [sp, #8]
 8008682:	9301      	str	r3, [sp, #4]
 8008684:	9100      	str	r1, [sp, #0]
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	4632      	mov	r2, r6
 800868a:	4629      	mov	r1, r5
 800868c:	4620      	mov	r0, r4
 800868e:	f001 fad7 	bl	8009c40 <xTaskCreateStatic>
 8008692:	4603      	mov	r3, r0
 8008694:	60fb      	str	r3, [r7, #12]
 8008696:	e01c      	b.n	80086d2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	685c      	ldr	r4, [r3, #4]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80086a4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7ff ff98 	bl	80085e2 <makeFreeRtosPriority>
 80086b2:	4602      	mov	r2, r0
 80086b4:	f107 030c 	add.w	r3, r7, #12
 80086b8:	9301      	str	r3, [sp, #4]
 80086ba:	9200      	str	r2, [sp, #0]
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	4632      	mov	r2, r6
 80086c0:	4629      	mov	r1, r5
 80086c2:	4620      	mov	r0, r4
 80086c4:	f001 fb1c 	bl	8009d00 <xTaskCreate>
 80086c8:	4603      	mov	r3, r0
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d001      	beq.n	80086d2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80086ce:	2300      	movs	r3, #0
 80086d0:	e000      	b.n	80086d4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80086d2:	68fb      	ldr	r3, [r7, #12]
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3714      	adds	r7, #20
 80086d8:	46bd      	mov	sp, r7
 80086da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080086dc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d001      	beq.n	80086f2 <osDelay+0x16>
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	e000      	b.n	80086f4 <osDelay+0x18>
 80086f2:	2301      	movs	r3, #1
 80086f4:	4618      	mov	r0, r3
 80086f6:	f001 fc3b 	bl	8009f70 <vTaskDelay>
  
  return osOK;
 80086fa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3710      	adds	r7, #16
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d007      	beq.n	8008724 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	4619      	mov	r1, r3
 800871a:	2001      	movs	r0, #1
 800871c:	f000 fc5b 	bl	8008fd6 <xQueueCreateMutexStatic>
 8008720:	4603      	mov	r3, r0
 8008722:	e003      	b.n	800872c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8008724:	2001      	movs	r0, #1
 8008726:	f000 fc3e 	bl	8008fa6 <xQueueCreateMutex>
 800872a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800872c:	4618      	mov	r0, r3
 800872e:	3708      	adds	r7, #8
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800873e:	2300      	movs	r3, #0
 8008740:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d101      	bne.n	800874c <osMutexWait+0x18>
    return osErrorParameter;
 8008748:	2380      	movs	r3, #128	@ 0x80
 800874a:	e03a      	b.n	80087c2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800874c:	2300      	movs	r3, #0
 800874e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008756:	d103      	bne.n	8008760 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8008758:	f04f 33ff 	mov.w	r3, #4294967295
 800875c:	60fb      	str	r3, [r7, #12]
 800875e:	e009      	b.n	8008774 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d006      	beq.n	8008774 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d101      	bne.n	8008774 <osMutexWait+0x40>
      ticks = 1;
 8008770:	2301      	movs	r3, #1
 8008772:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008774:	f7ff ff4d 	bl	8008612 <inHandlerMode>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d017      	beq.n	80087ae <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800877e:	f107 0308 	add.w	r3, r7, #8
 8008782:	461a      	mov	r2, r3
 8008784:	2100      	movs	r1, #0
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f001 f862 	bl	8009850 <xQueueReceiveFromISR>
 800878c:	4603      	mov	r3, r0
 800878e:	2b01      	cmp	r3, #1
 8008790:	d001      	beq.n	8008796 <osMutexWait+0x62>
      return osErrorOS;
 8008792:	23ff      	movs	r3, #255	@ 0xff
 8008794:	e015      	b.n	80087c2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d011      	beq.n	80087c0 <osMutexWait+0x8c>
 800879c:	4b0b      	ldr	r3, [pc, #44]	@ (80087cc <osMutexWait+0x98>)
 800879e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087a2:	601a      	str	r2, [r3, #0]
 80087a4:	f3bf 8f4f 	dsb	sy
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	e008      	b.n	80087c0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80087ae:	68f9      	ldr	r1, [r7, #12]
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 ff3d 	bl	8009630 <xQueueSemaphoreTake>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d001      	beq.n	80087c0 <osMutexWait+0x8c>
    return osErrorOS;
 80087bc:	23ff      	movs	r3, #255	@ 0xff
 80087be:	e000      	b.n	80087c2 <osMutexWait+0x8e>
  }
  
  return osOK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	e000ed04 	.word	0xe000ed04

080087d0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80087d8:	2300      	movs	r3, #0
 80087da:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80087dc:	2300      	movs	r3, #0
 80087de:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80087e0:	f7ff ff17 	bl	8008612 <inHandlerMode>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d016      	beq.n	8008818 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80087ea:	f107 0308 	add.w	r3, r7, #8
 80087ee:	4619      	mov	r1, r3
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 fdab 	bl	800934c <xQueueGiveFromISR>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d001      	beq.n	8008800 <osMutexRelease+0x30>
      return osErrorOS;
 80087fc:	23ff      	movs	r3, #255	@ 0xff
 80087fe:	e017      	b.n	8008830 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d013      	beq.n	800882e <osMutexRelease+0x5e>
 8008806:	4b0c      	ldr	r3, [pc, #48]	@ (8008838 <osMutexRelease+0x68>)
 8008808:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800880c:	601a      	str	r2, [r3, #0]
 800880e:	f3bf 8f4f 	dsb	sy
 8008812:	f3bf 8f6f 	isb	sy
 8008816:	e00a      	b.n	800882e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8008818:	2300      	movs	r3, #0
 800881a:	2200      	movs	r2, #0
 800881c:	2100      	movs	r1, #0
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 fbf4 	bl	800900c <xQueueGenericSend>
 8008824:	4603      	mov	r3, r0
 8008826:	2b01      	cmp	r3, #1
 8008828:	d001      	beq.n	800882e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800882a:	23ff      	movs	r3, #255	@ 0xff
 800882c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800882e:	68fb      	ldr	r3, [r7, #12]
}
 8008830:	4618      	mov	r0, r3
 8008832:	3710      	adds	r7, #16
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	e000ed04 	.word	0xe000ed04

0800883c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800883c:	b580      	push	{r7, lr}
 800883e:	b086      	sub	sp, #24
 8008840:	af02      	add	r7, sp, #8
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d00f      	beq.n	800886e <osSemaphoreCreate+0x32>
    if (count == 1) {
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d10a      	bne.n	800886a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	2203      	movs	r2, #3
 800885a:	9200      	str	r2, [sp, #0]
 800885c:	2200      	movs	r2, #0
 800885e:	2100      	movs	r1, #0
 8008860:	2001      	movs	r0, #1
 8008862:	f000 faaf 	bl	8008dc4 <xQueueGenericCreateStatic>
 8008866:	4603      	mov	r3, r0
 8008868:	e016      	b.n	8008898 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800886a:	2300      	movs	r3, #0
 800886c:	e014      	b.n	8008898 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	2b01      	cmp	r3, #1
 8008872:	d110      	bne.n	8008896 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8008874:	2203      	movs	r2, #3
 8008876:	2100      	movs	r1, #0
 8008878:	2001      	movs	r0, #1
 800887a:	f000 fb20 	bl	8008ebe <xQueueGenericCreate>
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d005      	beq.n	8008892 <osSemaphoreCreate+0x56>
 8008886:	2300      	movs	r3, #0
 8008888:	2200      	movs	r2, #0
 800888a:	2100      	movs	r1, #0
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f000 fbbd 	bl	800900c <xQueueGenericSend>
      return sema;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	e000      	b.n	8008898 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8008896:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8008898:	4618      	mov	r0, r3
 800889a:	3710      	adds	r7, #16
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80088aa:	2300      	movs	r3, #0
 80088ac:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d101      	bne.n	80088b8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80088b4:	2380      	movs	r3, #128	@ 0x80
 80088b6:	e03a      	b.n	800892e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80088b8:	2300      	movs	r3, #0
 80088ba:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088c2:	d103      	bne.n	80088cc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80088c4:	f04f 33ff 	mov.w	r3, #4294967295
 80088c8:	60fb      	str	r3, [r7, #12]
 80088ca:	e009      	b.n	80088e0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d006      	beq.n	80088e0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d101      	bne.n	80088e0 <osSemaphoreWait+0x40>
      ticks = 1;
 80088dc:	2301      	movs	r3, #1
 80088de:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80088e0:	f7ff fe97 	bl	8008612 <inHandlerMode>
 80088e4:	4603      	mov	r3, r0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d017      	beq.n	800891a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80088ea:	f107 0308 	add.w	r3, r7, #8
 80088ee:	461a      	mov	r2, r3
 80088f0:	2100      	movs	r1, #0
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 ffac 	bl	8009850 <xQueueReceiveFromISR>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d001      	beq.n	8008902 <osSemaphoreWait+0x62>
      return osErrorOS;
 80088fe:	23ff      	movs	r3, #255	@ 0xff
 8008900:	e015      	b.n	800892e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d011      	beq.n	800892c <osSemaphoreWait+0x8c>
 8008908:	4b0b      	ldr	r3, [pc, #44]	@ (8008938 <osSemaphoreWait+0x98>)
 800890a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800890e:	601a      	str	r2, [r3, #0]
 8008910:	f3bf 8f4f 	dsb	sy
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	e008      	b.n	800892c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800891a:	68f9      	ldr	r1, [r7, #12]
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 fe87 	bl	8009630 <xQueueSemaphoreTake>
 8008922:	4603      	mov	r3, r0
 8008924:	2b01      	cmp	r3, #1
 8008926:	d001      	beq.n	800892c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8008928:	23ff      	movs	r3, #255	@ 0xff
 800892a:	e000      	b.n	800892e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3710      	adds	r7, #16
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	e000ed04 	.word	0xe000ed04

0800893c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008944:	2300      	movs	r3, #0
 8008946:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008948:	2300      	movs	r3, #0
 800894a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800894c:	f7ff fe61 	bl	8008612 <inHandlerMode>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d016      	beq.n	8008984 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008956:	f107 0308 	add.w	r3, r7, #8
 800895a:	4619      	mov	r1, r3
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 fcf5 	bl	800934c <xQueueGiveFromISR>
 8008962:	4603      	mov	r3, r0
 8008964:	2b01      	cmp	r3, #1
 8008966:	d001      	beq.n	800896c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8008968:	23ff      	movs	r3, #255	@ 0xff
 800896a:	e017      	b.n	800899c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d013      	beq.n	800899a <osSemaphoreRelease+0x5e>
 8008972:	4b0c      	ldr	r3, [pc, #48]	@ (80089a4 <osSemaphoreRelease+0x68>)
 8008974:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008978:	601a      	str	r2, [r3, #0]
 800897a:	f3bf 8f4f 	dsb	sy
 800897e:	f3bf 8f6f 	isb	sy
 8008982:	e00a      	b.n	800899a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8008984:	2300      	movs	r3, #0
 8008986:	2200      	movs	r2, #0
 8008988:	2100      	movs	r1, #0
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fb3e 	bl	800900c <xQueueGenericSend>
 8008990:	4603      	mov	r3, r0
 8008992:	2b01      	cmp	r3, #1
 8008994:	d001      	beq.n	800899a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8008996:	23ff      	movs	r3, #255	@ 0xff
 8008998:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800899a:	68fb      	ldr	r3, [r7, #12]
}
 800899c:	4618      	mov	r0, r3
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	e000ed04 	.word	0xe000ed04

080089a8 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80089b0:	f7ff fe2f 	bl	8008612 <inHandlerMode>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d001      	beq.n	80089be <osSemaphoreDelete+0x16>
    return osErrorISR;
 80089ba:	2382      	movs	r3, #130	@ 0x82
 80089bc:	e003      	b.n	80089c6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 ffc8 	bl	8009954 <vQueueDelete>

  return osOK; 
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3708      	adds	r7, #8
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80089ce:	b590      	push	{r4, r7, lr}
 80089d0:	b085      	sub	sp, #20
 80089d2:	af02      	add	r7, sp, #8
 80089d4:	6078      	str	r0, [r7, #4]
 80089d6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d011      	beq.n	8008a04 <osMessageCreate+0x36>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d00d      	beq.n	8008a04 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6818      	ldr	r0, [r3, #0]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6859      	ldr	r1, [r3, #4]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	689a      	ldr	r2, [r3, #8]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	2400      	movs	r4, #0
 80089fa:	9400      	str	r4, [sp, #0]
 80089fc:	f000 f9e2 	bl	8008dc4 <xQueueGenericCreateStatic>
 8008a00:	4603      	mov	r3, r0
 8008a02:	e008      	b.n	8008a16 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6818      	ldr	r0, [r3, #0]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	4619      	mov	r1, r3
 8008a10:	f000 fa55 	bl	8008ebe <xQueueGenericCreate>
 8008a14:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	370c      	adds	r7, #12
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd90      	pop	{r4, r7, pc}
	...

08008a20 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b086      	sub	sp, #24
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d101      	bne.n	8008a3e <osMessagePut+0x1e>
    ticks = 1;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008a3e:	f7ff fde8 	bl	8008612 <inHandlerMode>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d018      	beq.n	8008a7a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008a48:	f107 0210 	add.w	r2, r7, #16
 8008a4c:	f107 0108 	add.w	r1, r7, #8
 8008a50:	2300      	movs	r3, #0
 8008a52:	68f8      	ldr	r0, [r7, #12]
 8008a54:	f000 fbdc 	bl	8009210 <xQueueGenericSendFromISR>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d001      	beq.n	8008a62 <osMessagePut+0x42>
      return osErrorOS;
 8008a5e:	23ff      	movs	r3, #255	@ 0xff
 8008a60:	e018      	b.n	8008a94 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d014      	beq.n	8008a92 <osMessagePut+0x72>
 8008a68:	4b0c      	ldr	r3, [pc, #48]	@ (8008a9c <osMessagePut+0x7c>)
 8008a6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a6e:	601a      	str	r2, [r3, #0]
 8008a70:	f3bf 8f4f 	dsb	sy
 8008a74:	f3bf 8f6f 	isb	sy
 8008a78:	e00b      	b.n	8008a92 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008a7a:	f107 0108 	add.w	r1, r7, #8
 8008a7e:	2300      	movs	r3, #0
 8008a80:	697a      	ldr	r2, [r7, #20]
 8008a82:	68f8      	ldr	r0, [r7, #12]
 8008a84:	f000 fac2 	bl	800900c <xQueueGenericSend>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d001      	beq.n	8008a92 <osMessagePut+0x72>
      return osErrorOS;
 8008a8e:	23ff      	movs	r3, #255	@ 0xff
 8008a90:	e000      	b.n	8008a94 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3718      	adds	r7, #24
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	e000ed04 	.word	0xe000ed04

08008aa0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008aa0:	b590      	push	{r4, r7, lr}
 8008aa2:	b08b      	sub	sp, #44	@ 0x2c
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d10a      	bne.n	8008ad0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8008aba:	2380      	movs	r3, #128	@ 0x80
 8008abc:	617b      	str	r3, [r7, #20]
    return event;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	461c      	mov	r4, r3
 8008ac2:	f107 0314 	add.w	r3, r7, #20
 8008ac6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008aca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008ace:	e054      	b.n	8008b7a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ade:	d103      	bne.n	8008ae8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8008ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ae4:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ae6:	e009      	b.n	8008afc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d006      	beq.n	8008afc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8008af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d101      	bne.n	8008afc <osMessageGet+0x5c>
      ticks = 1;
 8008af8:	2301      	movs	r3, #1
 8008afa:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8008afc:	f7ff fd89 	bl	8008612 <inHandlerMode>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d01c      	beq.n	8008b40 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8008b06:	f107 0220 	add.w	r2, r7, #32
 8008b0a:	f107 0314 	add.w	r3, r7, #20
 8008b0e:	3304      	adds	r3, #4
 8008b10:	4619      	mov	r1, r3
 8008b12:	68b8      	ldr	r0, [r7, #8]
 8008b14:	f000 fe9c 	bl	8009850 <xQueueReceiveFromISR>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d102      	bne.n	8008b24 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8008b1e:	2310      	movs	r3, #16
 8008b20:	617b      	str	r3, [r7, #20]
 8008b22:	e001      	b.n	8008b28 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8008b24:	2300      	movs	r3, #0
 8008b26:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008b28:	6a3b      	ldr	r3, [r7, #32]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d01d      	beq.n	8008b6a <osMessageGet+0xca>
 8008b2e:	4b15      	ldr	r3, [pc, #84]	@ (8008b84 <osMessageGet+0xe4>)
 8008b30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b34:	601a      	str	r2, [r3, #0]
 8008b36:	f3bf 8f4f 	dsb	sy
 8008b3a:	f3bf 8f6f 	isb	sy
 8008b3e:	e014      	b.n	8008b6a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008b40:	f107 0314 	add.w	r3, r7, #20
 8008b44:	3304      	adds	r3, #4
 8008b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b48:	4619      	mov	r1, r3
 8008b4a:	68b8      	ldr	r0, [r7, #8]
 8008b4c:	f000 fc8e 	bl	800946c <xQueueReceive>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d102      	bne.n	8008b5c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8008b56:	2310      	movs	r3, #16
 8008b58:	617b      	str	r3, [r7, #20]
 8008b5a:	e006      	b.n	8008b6a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d101      	bne.n	8008b66 <osMessageGet+0xc6>
 8008b62:	2300      	movs	r3, #0
 8008b64:	e000      	b.n	8008b68 <osMessageGet+0xc8>
 8008b66:	2340      	movs	r3, #64	@ 0x40
 8008b68:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	461c      	mov	r4, r3
 8008b6e:	f107 0314 	add.w	r3, r7, #20
 8008b72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008b76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008b7a:	68f8      	ldr	r0, [r7, #12]
 8008b7c:	372c      	adds	r7, #44	@ 0x2c
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd90      	pop	{r4, r7, pc}
 8008b82:	bf00      	nop
 8008b84:	e000ed04 	.word	0xe000ed04

08008b88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f103 0208 	add.w	r2, r3, #8
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008ba0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f103 0208 	add.w	r2, r3, #8
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f103 0208 	add.w	r2, r3, #8
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008bbc:	bf00      	nop
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008bd6:	bf00      	nop
 8008bd8:	370c      	adds	r7, #12
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr

08008be2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008be2:	b480      	push	{r7}
 8008be4:	b085      	sub	sp, #20
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
 8008bea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	68fa      	ldr	r2, [r7, #12]
 8008bf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	689a      	ldr	r2, [r3, #8]
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	683a      	ldr	r2, [r7, #0]
 8008c06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	683a      	ldr	r2, [r7, #0]
 8008c0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	1c5a      	adds	r2, r3, #1
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	601a      	str	r2, [r3, #0]
}
 8008c1e:	bf00      	nop
 8008c20:	3714      	adds	r7, #20
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr

08008c2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c2a:	b480      	push	{r7}
 8008c2c:	b085      	sub	sp, #20
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
 8008c32:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c40:	d103      	bne.n	8008c4a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	60fb      	str	r3, [r7, #12]
 8008c48:	e00c      	b.n	8008c64 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	3308      	adds	r3, #8
 8008c4e:	60fb      	str	r3, [r7, #12]
 8008c50:	e002      	b.n	8008c58 <vListInsert+0x2e>
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	60fb      	str	r3, [r7, #12]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	68ba      	ldr	r2, [r7, #8]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d2f6      	bcs.n	8008c52 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	685a      	ldr	r2, [r3, #4]
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	683a      	ldr	r2, [r7, #0]
 8008c72:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	683a      	ldr	r2, [r7, #0]
 8008c7e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	1c5a      	adds	r2, r3, #1
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	601a      	str	r2, [r3, #0]
}
 8008c90:	bf00      	nop
 8008c92:	3714      	adds	r7, #20
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b085      	sub	sp, #20
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	691b      	ldr	r3, [r3, #16]
 8008ca8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	6892      	ldr	r2, [r2, #8]
 8008cb2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	689b      	ldr	r3, [r3, #8]
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	6852      	ldr	r2, [r2, #4]
 8008cbc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d103      	bne.n	8008cd0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	689a      	ldr	r2, [r3, #8]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	1e5a      	subs	r2, r3, #1
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3714      	adds	r7, #20
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d10b      	bne.n	8008d1c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d08:	f383 8811 	msr	BASEPRI, r3
 8008d0c:	f3bf 8f6f 	isb	sy
 8008d10:	f3bf 8f4f 	dsb	sy
 8008d14:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008d16:	bf00      	nop
 8008d18:	bf00      	nop
 8008d1a:	e7fd      	b.n	8008d18 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008d1c:	f002 f8bc 	bl	800ae98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d28:	68f9      	ldr	r1, [r7, #12]
 8008d2a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008d2c:	fb01 f303 	mul.w	r3, r1, r3
 8008d30:	441a      	add	r2, r3
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	68f9      	ldr	r1, [r7, #12]
 8008d50:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008d52:	fb01 f303 	mul.w	r3, r1, r3
 8008d56:	441a      	add	r2, r3
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	22ff      	movs	r2, #255	@ 0xff
 8008d60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	22ff      	movs	r2, #255	@ 0xff
 8008d68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d114      	bne.n	8008d9c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	691b      	ldr	r3, [r3, #16]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d01a      	beq.n	8008db0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	3310      	adds	r3, #16
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f001 fb76 	bl	800a470 <xTaskRemoveFromEventList>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d012      	beq.n	8008db0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8008dc0 <xQueueGenericReset+0xd0>)
 8008d8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d90:	601a      	str	r2, [r3, #0]
 8008d92:	f3bf 8f4f 	dsb	sy
 8008d96:	f3bf 8f6f 	isb	sy
 8008d9a:	e009      	b.n	8008db0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	3310      	adds	r3, #16
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7ff fef1 	bl	8008b88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	3324      	adds	r3, #36	@ 0x24
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7ff feec 	bl	8008b88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008db0:	f002 f8a4 	bl	800aefc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008db4:	2301      	movs	r3, #1
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	e000ed04 	.word	0xe000ed04

08008dc4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b08e      	sub	sp, #56	@ 0x38
 8008dc8:	af02      	add	r7, sp, #8
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	607a      	str	r2, [r7, #4]
 8008dd0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d10b      	bne.n	8008df0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ddc:	f383 8811 	msr	BASEPRI, r3
 8008de0:	f3bf 8f6f 	isb	sy
 8008de4:	f3bf 8f4f 	dsb	sy
 8008de8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008dea:	bf00      	nop
 8008dec:	bf00      	nop
 8008dee:	e7fd      	b.n	8008dec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d10b      	bne.n	8008e0e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dfa:	f383 8811 	msr	BASEPRI, r3
 8008dfe:	f3bf 8f6f 	isb	sy
 8008e02:	f3bf 8f4f 	dsb	sy
 8008e06:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008e08:	bf00      	nop
 8008e0a:	bf00      	nop
 8008e0c:	e7fd      	b.n	8008e0a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d002      	beq.n	8008e1a <xQueueGenericCreateStatic+0x56>
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d001      	beq.n	8008e1e <xQueueGenericCreateStatic+0x5a>
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e000      	b.n	8008e20 <xQueueGenericCreateStatic+0x5c>
 8008e1e:	2300      	movs	r3, #0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d10b      	bne.n	8008e3c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e28:	f383 8811 	msr	BASEPRI, r3
 8008e2c:	f3bf 8f6f 	isb	sy
 8008e30:	f3bf 8f4f 	dsb	sy
 8008e34:	623b      	str	r3, [r7, #32]
}
 8008e36:	bf00      	nop
 8008e38:	bf00      	nop
 8008e3a:	e7fd      	b.n	8008e38 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d102      	bne.n	8008e48 <xQueueGenericCreateStatic+0x84>
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d101      	bne.n	8008e4c <xQueueGenericCreateStatic+0x88>
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e000      	b.n	8008e4e <xQueueGenericCreateStatic+0x8a>
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d10b      	bne.n	8008e6a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e56:	f383 8811 	msr	BASEPRI, r3
 8008e5a:	f3bf 8f6f 	isb	sy
 8008e5e:	f3bf 8f4f 	dsb	sy
 8008e62:	61fb      	str	r3, [r7, #28]
}
 8008e64:	bf00      	nop
 8008e66:	bf00      	nop
 8008e68:	e7fd      	b.n	8008e66 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008e6a:	2348      	movs	r3, #72	@ 0x48
 8008e6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	2b48      	cmp	r3, #72	@ 0x48
 8008e72:	d00b      	beq.n	8008e8c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e78:	f383 8811 	msr	BASEPRI, r3
 8008e7c:	f3bf 8f6f 	isb	sy
 8008e80:	f3bf 8f4f 	dsb	sy
 8008e84:	61bb      	str	r3, [r7, #24]
}
 8008e86:	bf00      	nop
 8008e88:	bf00      	nop
 8008e8a:	e7fd      	b.n	8008e88 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008e8c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d00d      	beq.n	8008eb4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008ea0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ea6:	9300      	str	r3, [sp, #0]
 8008ea8:	4613      	mov	r3, r2
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	68b9      	ldr	r1, [r7, #8]
 8008eae:	68f8      	ldr	r0, [r7, #12]
 8008eb0:	f000 f840 	bl	8008f34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3730      	adds	r7, #48	@ 0x30
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}

08008ebe <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b08a      	sub	sp, #40	@ 0x28
 8008ec2:	af02      	add	r7, sp, #8
 8008ec4:	60f8      	str	r0, [r7, #12]
 8008ec6:	60b9      	str	r1, [r7, #8]
 8008ec8:	4613      	mov	r3, r2
 8008eca:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d10b      	bne.n	8008eea <xQueueGenericCreate+0x2c>
	__asm volatile
 8008ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed6:	f383 8811 	msr	BASEPRI, r3
 8008eda:	f3bf 8f6f 	isb	sy
 8008ede:	f3bf 8f4f 	dsb	sy
 8008ee2:	613b      	str	r3, [r7, #16]
}
 8008ee4:	bf00      	nop
 8008ee6:	bf00      	nop
 8008ee8:	e7fd      	b.n	8008ee6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	68ba      	ldr	r2, [r7, #8]
 8008eee:	fb02 f303 	mul.w	r3, r2, r3
 8008ef2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	3348      	adds	r3, #72	@ 0x48
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f002 f8ef 	bl	800b0dc <pvPortMalloc>
 8008efe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d011      	beq.n	8008f2a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	3348      	adds	r3, #72	@ 0x48
 8008f0e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f18:	79fa      	ldrb	r2, [r7, #7]
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	9300      	str	r3, [sp, #0]
 8008f1e:	4613      	mov	r3, r2
 8008f20:	697a      	ldr	r2, [r7, #20]
 8008f22:	68b9      	ldr	r1, [r7, #8]
 8008f24:	68f8      	ldr	r0, [r7, #12]
 8008f26:	f000 f805 	bl	8008f34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008f2a:	69bb      	ldr	r3, [r7, #24]
	}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3720      	adds	r7, #32
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	607a      	str	r2, [r7, #4]
 8008f40:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d103      	bne.n	8008f50 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	69ba      	ldr	r2, [r7, #24]
 8008f4c:	601a      	str	r2, [r3, #0]
 8008f4e:	e002      	b.n	8008f56 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	68fa      	ldr	r2, [r7, #12]
 8008f5a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	68ba      	ldr	r2, [r7, #8]
 8008f60:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008f62:	2101      	movs	r1, #1
 8008f64:	69b8      	ldr	r0, [r7, #24]
 8008f66:	f7ff fec3 	bl	8008cf0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008f6a:	bf00      	nop
 8008f6c:	3710      	adds	r7, #16
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b082      	sub	sp, #8
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d00e      	beq.n	8008f9e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008f92:	2300      	movs	r3, #0
 8008f94:	2200      	movs	r2, #0
 8008f96:	2100      	movs	r1, #0
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 f837 	bl	800900c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008f9e:	bf00      	nop
 8008fa0:	3708      	adds	r7, #8
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b086      	sub	sp, #24
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	4603      	mov	r3, r0
 8008fae:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	617b      	str	r3, [r7, #20]
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008fb8:	79fb      	ldrb	r3, [r7, #7]
 8008fba:	461a      	mov	r2, r3
 8008fbc:	6939      	ldr	r1, [r7, #16]
 8008fbe:	6978      	ldr	r0, [r7, #20]
 8008fc0:	f7ff ff7d 	bl	8008ebe <xQueueGenericCreate>
 8008fc4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008fc6:	68f8      	ldr	r0, [r7, #12]
 8008fc8:	f7ff ffd3 	bl	8008f72 <prvInitialiseMutex>

		return xNewQueue;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
	}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3718      	adds	r7, #24
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b088      	sub	sp, #32
 8008fda:	af02      	add	r7, sp, #8
 8008fdc:	4603      	mov	r3, r0
 8008fde:	6039      	str	r1, [r7, #0]
 8008fe0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	617b      	str	r3, [r7, #20]
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008fea:	79fb      	ldrb	r3, [r7, #7]
 8008fec:	9300      	str	r3, [sp, #0]
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	6939      	ldr	r1, [r7, #16]
 8008ff4:	6978      	ldr	r0, [r7, #20]
 8008ff6:	f7ff fee5 	bl	8008dc4 <xQueueGenericCreateStatic>
 8008ffa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	f7ff ffb8 	bl	8008f72 <prvInitialiseMutex>

		return xNewQueue;
 8009002:	68fb      	ldr	r3, [r7, #12]
	}
 8009004:	4618      	mov	r0, r3
 8009006:	3718      	adds	r7, #24
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b08e      	sub	sp, #56	@ 0x38
 8009010:	af00      	add	r7, sp, #0
 8009012:	60f8      	str	r0, [r7, #12]
 8009014:	60b9      	str	r1, [r7, #8]
 8009016:	607a      	str	r2, [r7, #4]
 8009018:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800901a:	2300      	movs	r3, #0
 800901c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009024:	2b00      	cmp	r3, #0
 8009026:	d10b      	bne.n	8009040 <xQueueGenericSend+0x34>
	__asm volatile
 8009028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800902c:	f383 8811 	msr	BASEPRI, r3
 8009030:	f3bf 8f6f 	isb	sy
 8009034:	f3bf 8f4f 	dsb	sy
 8009038:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800903a:	bf00      	nop
 800903c:	bf00      	nop
 800903e:	e7fd      	b.n	800903c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d103      	bne.n	800904e <xQueueGenericSend+0x42>
 8009046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800904a:	2b00      	cmp	r3, #0
 800904c:	d101      	bne.n	8009052 <xQueueGenericSend+0x46>
 800904e:	2301      	movs	r3, #1
 8009050:	e000      	b.n	8009054 <xQueueGenericSend+0x48>
 8009052:	2300      	movs	r3, #0
 8009054:	2b00      	cmp	r3, #0
 8009056:	d10b      	bne.n	8009070 <xQueueGenericSend+0x64>
	__asm volatile
 8009058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800905c:	f383 8811 	msr	BASEPRI, r3
 8009060:	f3bf 8f6f 	isb	sy
 8009064:	f3bf 8f4f 	dsb	sy
 8009068:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800906a:	bf00      	nop
 800906c:	bf00      	nop
 800906e:	e7fd      	b.n	800906c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	2b02      	cmp	r3, #2
 8009074:	d103      	bne.n	800907e <xQueueGenericSend+0x72>
 8009076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800907a:	2b01      	cmp	r3, #1
 800907c:	d101      	bne.n	8009082 <xQueueGenericSend+0x76>
 800907e:	2301      	movs	r3, #1
 8009080:	e000      	b.n	8009084 <xQueueGenericSend+0x78>
 8009082:	2300      	movs	r3, #0
 8009084:	2b00      	cmp	r3, #0
 8009086:	d10b      	bne.n	80090a0 <xQueueGenericSend+0x94>
	__asm volatile
 8009088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800908c:	f383 8811 	msr	BASEPRI, r3
 8009090:	f3bf 8f6f 	isb	sy
 8009094:	f3bf 8f4f 	dsb	sy
 8009098:	623b      	str	r3, [r7, #32]
}
 800909a:	bf00      	nop
 800909c:	bf00      	nop
 800909e:	e7fd      	b.n	800909c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80090a0:	f001 fba6 	bl	800a7f0 <xTaskGetSchedulerState>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d102      	bne.n	80090b0 <xQueueGenericSend+0xa4>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d101      	bne.n	80090b4 <xQueueGenericSend+0xa8>
 80090b0:	2301      	movs	r3, #1
 80090b2:	e000      	b.n	80090b6 <xQueueGenericSend+0xaa>
 80090b4:	2300      	movs	r3, #0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d10b      	bne.n	80090d2 <xQueueGenericSend+0xc6>
	__asm volatile
 80090ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090be:	f383 8811 	msr	BASEPRI, r3
 80090c2:	f3bf 8f6f 	isb	sy
 80090c6:	f3bf 8f4f 	dsb	sy
 80090ca:	61fb      	str	r3, [r7, #28]
}
 80090cc:	bf00      	nop
 80090ce:	bf00      	nop
 80090d0:	e7fd      	b.n	80090ce <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80090d2:	f001 fee1 	bl	800ae98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80090d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090de:	429a      	cmp	r2, r3
 80090e0:	d302      	bcc.n	80090e8 <xQueueGenericSend+0xdc>
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d129      	bne.n	800913c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80090e8:	683a      	ldr	r2, [r7, #0]
 80090ea:	68b9      	ldr	r1, [r7, #8]
 80090ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80090ee:	f000 fc6d 	bl	80099cc <prvCopyDataToQueue>
 80090f2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d010      	beq.n	800911e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090fe:	3324      	adds	r3, #36	@ 0x24
 8009100:	4618      	mov	r0, r3
 8009102:	f001 f9b5 	bl	800a470 <xTaskRemoveFromEventList>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d013      	beq.n	8009134 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800910c:	4b3f      	ldr	r3, [pc, #252]	@ (800920c <xQueueGenericSend+0x200>)
 800910e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009112:	601a      	str	r2, [r3, #0]
 8009114:	f3bf 8f4f 	dsb	sy
 8009118:	f3bf 8f6f 	isb	sy
 800911c:	e00a      	b.n	8009134 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800911e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009120:	2b00      	cmp	r3, #0
 8009122:	d007      	beq.n	8009134 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009124:	4b39      	ldr	r3, [pc, #228]	@ (800920c <xQueueGenericSend+0x200>)
 8009126:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800912a:	601a      	str	r2, [r3, #0]
 800912c:	f3bf 8f4f 	dsb	sy
 8009130:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009134:	f001 fee2 	bl	800aefc <vPortExitCritical>
				return pdPASS;
 8009138:	2301      	movs	r3, #1
 800913a:	e063      	b.n	8009204 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d103      	bne.n	800914a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009142:	f001 fedb 	bl	800aefc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009146:	2300      	movs	r3, #0
 8009148:	e05c      	b.n	8009204 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800914a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800914c:	2b00      	cmp	r3, #0
 800914e:	d106      	bne.n	800915e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009150:	f107 0314 	add.w	r3, r7, #20
 8009154:	4618      	mov	r0, r3
 8009156:	f001 f9ef 	bl	800a538 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800915a:	2301      	movs	r3, #1
 800915c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800915e:	f001 fecd 	bl	800aefc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009162:	f000 ff9d 	bl	800a0a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009166:	f001 fe97 	bl	800ae98 <vPortEnterCritical>
 800916a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009170:	b25b      	sxtb	r3, r3
 8009172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009176:	d103      	bne.n	8009180 <xQueueGenericSend+0x174>
 8009178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800917a:	2200      	movs	r2, #0
 800917c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009182:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009186:	b25b      	sxtb	r3, r3
 8009188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800918c:	d103      	bne.n	8009196 <xQueueGenericSend+0x18a>
 800918e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009190:	2200      	movs	r2, #0
 8009192:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009196:	f001 feb1 	bl	800aefc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800919a:	1d3a      	adds	r2, r7, #4
 800919c:	f107 0314 	add.w	r3, r7, #20
 80091a0:	4611      	mov	r1, r2
 80091a2:	4618      	mov	r0, r3
 80091a4:	f001 f9de 	bl	800a564 <xTaskCheckForTimeOut>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d124      	bne.n	80091f8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80091ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80091b0:	f000 fd04 	bl	8009bbc <prvIsQueueFull>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d018      	beq.n	80091ec <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80091ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091bc:	3310      	adds	r3, #16
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	4611      	mov	r1, r2
 80091c2:	4618      	mov	r0, r3
 80091c4:	f001 f92e 	bl	800a424 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80091c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80091ca:	f000 fc8f 	bl	8009aec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80091ce:	f000 ff75 	bl	800a0bc <xTaskResumeAll>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	f47f af7c 	bne.w	80090d2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80091da:	4b0c      	ldr	r3, [pc, #48]	@ (800920c <xQueueGenericSend+0x200>)
 80091dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091e0:	601a      	str	r2, [r3, #0]
 80091e2:	f3bf 8f4f 	dsb	sy
 80091e6:	f3bf 8f6f 	isb	sy
 80091ea:	e772      	b.n	80090d2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80091ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80091ee:	f000 fc7d 	bl	8009aec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091f2:	f000 ff63 	bl	800a0bc <xTaskResumeAll>
 80091f6:	e76c      	b.n	80090d2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80091f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80091fa:	f000 fc77 	bl	8009aec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091fe:	f000 ff5d 	bl	800a0bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009202:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009204:	4618      	mov	r0, r3
 8009206:	3738      	adds	r7, #56	@ 0x38
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}
 800920c:	e000ed04 	.word	0xe000ed04

08009210 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b090      	sub	sp, #64	@ 0x40
 8009214:	af00      	add	r7, sp, #0
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	607a      	str	r2, [r7, #4]
 800921c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009224:	2b00      	cmp	r3, #0
 8009226:	d10b      	bne.n	8009240 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800922c:	f383 8811 	msr	BASEPRI, r3
 8009230:	f3bf 8f6f 	isb	sy
 8009234:	f3bf 8f4f 	dsb	sy
 8009238:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800923a:	bf00      	nop
 800923c:	bf00      	nop
 800923e:	e7fd      	b.n	800923c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d103      	bne.n	800924e <xQueueGenericSendFromISR+0x3e>
 8009246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800924a:	2b00      	cmp	r3, #0
 800924c:	d101      	bne.n	8009252 <xQueueGenericSendFromISR+0x42>
 800924e:	2301      	movs	r3, #1
 8009250:	e000      	b.n	8009254 <xQueueGenericSendFromISR+0x44>
 8009252:	2300      	movs	r3, #0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10b      	bne.n	8009270 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800925c:	f383 8811 	msr	BASEPRI, r3
 8009260:	f3bf 8f6f 	isb	sy
 8009264:	f3bf 8f4f 	dsb	sy
 8009268:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800926a:	bf00      	nop
 800926c:	bf00      	nop
 800926e:	e7fd      	b.n	800926c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	2b02      	cmp	r3, #2
 8009274:	d103      	bne.n	800927e <xQueueGenericSendFromISR+0x6e>
 8009276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800927a:	2b01      	cmp	r3, #1
 800927c:	d101      	bne.n	8009282 <xQueueGenericSendFromISR+0x72>
 800927e:	2301      	movs	r3, #1
 8009280:	e000      	b.n	8009284 <xQueueGenericSendFromISR+0x74>
 8009282:	2300      	movs	r3, #0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d10b      	bne.n	80092a0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800928c:	f383 8811 	msr	BASEPRI, r3
 8009290:	f3bf 8f6f 	isb	sy
 8009294:	f3bf 8f4f 	dsb	sy
 8009298:	623b      	str	r3, [r7, #32]
}
 800929a:	bf00      	nop
 800929c:	bf00      	nop
 800929e:	e7fd      	b.n	800929c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80092a0:	f001 feda 	bl	800b058 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80092a4:	f3ef 8211 	mrs	r2, BASEPRI
 80092a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ac:	f383 8811 	msr	BASEPRI, r3
 80092b0:	f3bf 8f6f 	isb	sy
 80092b4:	f3bf 8f4f 	dsb	sy
 80092b8:	61fa      	str	r2, [r7, #28]
 80092ba:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80092bc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80092be:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80092c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d302      	bcc.n	80092d2 <xQueueGenericSendFromISR+0xc2>
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	2b02      	cmp	r3, #2
 80092d0:	d12f      	bne.n	8009332 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80092d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80092d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092e2:	683a      	ldr	r2, [r7, #0]
 80092e4:	68b9      	ldr	r1, [r7, #8]
 80092e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80092e8:	f000 fb70 	bl	80099cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80092ec:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80092f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092f4:	d112      	bne.n	800931c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d016      	beq.n	800932c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009300:	3324      	adds	r3, #36	@ 0x24
 8009302:	4618      	mov	r0, r3
 8009304:	f001 f8b4 	bl	800a470 <xTaskRemoveFromEventList>
 8009308:	4603      	mov	r3, r0
 800930a:	2b00      	cmp	r3, #0
 800930c:	d00e      	beq.n	800932c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d00b      	beq.n	800932c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2201      	movs	r2, #1
 8009318:	601a      	str	r2, [r3, #0]
 800931a:	e007      	b.n	800932c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800931c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009320:	3301      	adds	r3, #1
 8009322:	b2db      	uxtb	r3, r3
 8009324:	b25a      	sxtb	r2, r3
 8009326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009328:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800932c:	2301      	movs	r3, #1
 800932e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009330:	e001      	b.n	8009336 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009332:	2300      	movs	r3, #0
 8009334:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009338:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009340:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009344:	4618      	mov	r0, r3
 8009346:	3740      	adds	r7, #64	@ 0x40
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b08e      	sub	sp, #56	@ 0x38
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800935a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800935c:	2b00      	cmp	r3, #0
 800935e:	d10b      	bne.n	8009378 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8009360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009364:	f383 8811 	msr	BASEPRI, r3
 8009368:	f3bf 8f6f 	isb	sy
 800936c:	f3bf 8f4f 	dsb	sy
 8009370:	623b      	str	r3, [r7, #32]
}
 8009372:	bf00      	nop
 8009374:	bf00      	nop
 8009376:	e7fd      	b.n	8009374 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800937c:	2b00      	cmp	r3, #0
 800937e:	d00b      	beq.n	8009398 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8009380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009384:	f383 8811 	msr	BASEPRI, r3
 8009388:	f3bf 8f6f 	isb	sy
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	61fb      	str	r3, [r7, #28]
}
 8009392:	bf00      	nop
 8009394:	bf00      	nop
 8009396:	e7fd      	b.n	8009394 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d103      	bne.n	80093a8 <xQueueGiveFromISR+0x5c>
 80093a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d101      	bne.n	80093ac <xQueueGiveFromISR+0x60>
 80093a8:	2301      	movs	r3, #1
 80093aa:	e000      	b.n	80093ae <xQueueGiveFromISR+0x62>
 80093ac:	2300      	movs	r3, #0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d10b      	bne.n	80093ca <xQueueGiveFromISR+0x7e>
	__asm volatile
 80093b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093b6:	f383 8811 	msr	BASEPRI, r3
 80093ba:	f3bf 8f6f 	isb	sy
 80093be:	f3bf 8f4f 	dsb	sy
 80093c2:	61bb      	str	r3, [r7, #24]
}
 80093c4:	bf00      	nop
 80093c6:	bf00      	nop
 80093c8:	e7fd      	b.n	80093c6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80093ca:	f001 fe45 	bl	800b058 <vPortValidateInterruptPriority>
	__asm volatile
 80093ce:	f3ef 8211 	mrs	r2, BASEPRI
 80093d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093d6:	f383 8811 	msr	BASEPRI, r3
 80093da:	f3bf 8f6f 	isb	sy
 80093de:	f3bf 8f4f 	dsb	sy
 80093e2:	617a      	str	r2, [r7, #20]
 80093e4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80093e6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80093e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093ee:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80093f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d22b      	bcs.n	8009452 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80093fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009400:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009406:	1c5a      	adds	r2, r3, #1
 8009408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800940a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800940c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009414:	d112      	bne.n	800943c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800941a:	2b00      	cmp	r3, #0
 800941c:	d016      	beq.n	800944c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800941e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009420:	3324      	adds	r3, #36	@ 0x24
 8009422:	4618      	mov	r0, r3
 8009424:	f001 f824 	bl	800a470 <xTaskRemoveFromEventList>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00e      	beq.n	800944c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00b      	beq.n	800944c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	2201      	movs	r2, #1
 8009438:	601a      	str	r2, [r3, #0]
 800943a:	e007      	b.n	800944c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800943c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009440:	3301      	adds	r3, #1
 8009442:	b2db      	uxtb	r3, r3
 8009444:	b25a      	sxtb	r2, r3
 8009446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009448:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800944c:	2301      	movs	r3, #1
 800944e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009450:	e001      	b.n	8009456 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009452:	2300      	movs	r3, #0
 8009454:	637b      	str	r3, [r7, #52]	@ 0x34
 8009456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009458:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f383 8811 	msr	BASEPRI, r3
}
 8009460:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009464:	4618      	mov	r0, r3
 8009466:	3738      	adds	r7, #56	@ 0x38
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b08c      	sub	sp, #48	@ 0x30
 8009470:	af00      	add	r7, sp, #0
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	60b9      	str	r1, [r7, #8]
 8009476:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009478:	2300      	movs	r3, #0
 800947a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009482:	2b00      	cmp	r3, #0
 8009484:	d10b      	bne.n	800949e <xQueueReceive+0x32>
	__asm volatile
 8009486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800948a:	f383 8811 	msr	BASEPRI, r3
 800948e:	f3bf 8f6f 	isb	sy
 8009492:	f3bf 8f4f 	dsb	sy
 8009496:	623b      	str	r3, [r7, #32]
}
 8009498:	bf00      	nop
 800949a:	bf00      	nop
 800949c:	e7fd      	b.n	800949a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d103      	bne.n	80094ac <xQueueReceive+0x40>
 80094a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d101      	bne.n	80094b0 <xQueueReceive+0x44>
 80094ac:	2301      	movs	r3, #1
 80094ae:	e000      	b.n	80094b2 <xQueueReceive+0x46>
 80094b0:	2300      	movs	r3, #0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d10b      	bne.n	80094ce <xQueueReceive+0x62>
	__asm volatile
 80094b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ba:	f383 8811 	msr	BASEPRI, r3
 80094be:	f3bf 8f6f 	isb	sy
 80094c2:	f3bf 8f4f 	dsb	sy
 80094c6:	61fb      	str	r3, [r7, #28]
}
 80094c8:	bf00      	nop
 80094ca:	bf00      	nop
 80094cc:	e7fd      	b.n	80094ca <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80094ce:	f001 f98f 	bl	800a7f0 <xTaskGetSchedulerState>
 80094d2:	4603      	mov	r3, r0
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d102      	bne.n	80094de <xQueueReceive+0x72>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d101      	bne.n	80094e2 <xQueueReceive+0x76>
 80094de:	2301      	movs	r3, #1
 80094e0:	e000      	b.n	80094e4 <xQueueReceive+0x78>
 80094e2:	2300      	movs	r3, #0
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d10b      	bne.n	8009500 <xQueueReceive+0x94>
	__asm volatile
 80094e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ec:	f383 8811 	msr	BASEPRI, r3
 80094f0:	f3bf 8f6f 	isb	sy
 80094f4:	f3bf 8f4f 	dsb	sy
 80094f8:	61bb      	str	r3, [r7, #24]
}
 80094fa:	bf00      	nop
 80094fc:	bf00      	nop
 80094fe:	e7fd      	b.n	80094fc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009500:	f001 fcca 	bl	800ae98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009508:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800950a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800950c:	2b00      	cmp	r3, #0
 800950e:	d01f      	beq.n	8009550 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009510:	68b9      	ldr	r1, [r7, #8]
 8009512:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009514:	f000 fac4 	bl	8009aa0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800951a:	1e5a      	subs	r2, r3, #1
 800951c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800951e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009522:	691b      	ldr	r3, [r3, #16]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d00f      	beq.n	8009548 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800952a:	3310      	adds	r3, #16
 800952c:	4618      	mov	r0, r3
 800952e:	f000 ff9f 	bl	800a470 <xTaskRemoveFromEventList>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d007      	beq.n	8009548 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009538:	4b3c      	ldr	r3, [pc, #240]	@ (800962c <xQueueReceive+0x1c0>)
 800953a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800953e:	601a      	str	r2, [r3, #0]
 8009540:	f3bf 8f4f 	dsb	sy
 8009544:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009548:	f001 fcd8 	bl	800aefc <vPortExitCritical>
				return pdPASS;
 800954c:	2301      	movs	r3, #1
 800954e:	e069      	b.n	8009624 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d103      	bne.n	800955e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009556:	f001 fcd1 	bl	800aefc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800955a:	2300      	movs	r3, #0
 800955c:	e062      	b.n	8009624 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800955e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009560:	2b00      	cmp	r3, #0
 8009562:	d106      	bne.n	8009572 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009564:	f107 0310 	add.w	r3, r7, #16
 8009568:	4618      	mov	r0, r3
 800956a:	f000 ffe5 	bl	800a538 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800956e:	2301      	movs	r3, #1
 8009570:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009572:	f001 fcc3 	bl	800aefc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009576:	f000 fd93 	bl	800a0a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800957a:	f001 fc8d 	bl	800ae98 <vPortEnterCritical>
 800957e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009580:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009584:	b25b      	sxtb	r3, r3
 8009586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800958a:	d103      	bne.n	8009594 <xQueueReceive+0x128>
 800958c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800958e:	2200      	movs	r2, #0
 8009590:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009596:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800959a:	b25b      	sxtb	r3, r3
 800959c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095a0:	d103      	bne.n	80095aa <xQueueReceive+0x13e>
 80095a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a4:	2200      	movs	r2, #0
 80095a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80095aa:	f001 fca7 	bl	800aefc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80095ae:	1d3a      	adds	r2, r7, #4
 80095b0:	f107 0310 	add.w	r3, r7, #16
 80095b4:	4611      	mov	r1, r2
 80095b6:	4618      	mov	r0, r3
 80095b8:	f000 ffd4 	bl	800a564 <xTaskCheckForTimeOut>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d123      	bne.n	800960a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80095c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095c4:	f000 fae4 	bl	8009b90 <prvIsQueueEmpty>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d017      	beq.n	80095fe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80095ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d0:	3324      	adds	r3, #36	@ 0x24
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	4611      	mov	r1, r2
 80095d6:	4618      	mov	r0, r3
 80095d8:	f000 ff24 	bl	800a424 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80095dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095de:	f000 fa85 	bl	8009aec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80095e2:	f000 fd6b 	bl	800a0bc <xTaskResumeAll>
 80095e6:	4603      	mov	r3, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d189      	bne.n	8009500 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80095ec:	4b0f      	ldr	r3, [pc, #60]	@ (800962c <xQueueReceive+0x1c0>)
 80095ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095f2:	601a      	str	r2, [r3, #0]
 80095f4:	f3bf 8f4f 	dsb	sy
 80095f8:	f3bf 8f6f 	isb	sy
 80095fc:	e780      	b.n	8009500 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80095fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009600:	f000 fa74 	bl	8009aec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009604:	f000 fd5a 	bl	800a0bc <xTaskResumeAll>
 8009608:	e77a      	b.n	8009500 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800960a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800960c:	f000 fa6e 	bl	8009aec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009610:	f000 fd54 	bl	800a0bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009614:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009616:	f000 fabb 	bl	8009b90 <prvIsQueueEmpty>
 800961a:	4603      	mov	r3, r0
 800961c:	2b00      	cmp	r3, #0
 800961e:	f43f af6f 	beq.w	8009500 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009622:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009624:	4618      	mov	r0, r3
 8009626:	3730      	adds	r7, #48	@ 0x30
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	e000ed04 	.word	0xe000ed04

08009630 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b08e      	sub	sp, #56	@ 0x38
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800963a:	2300      	movs	r3, #0
 800963c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009642:	2300      	movs	r3, #0
 8009644:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009648:	2b00      	cmp	r3, #0
 800964a:	d10b      	bne.n	8009664 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800964c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009650:	f383 8811 	msr	BASEPRI, r3
 8009654:	f3bf 8f6f 	isb	sy
 8009658:	f3bf 8f4f 	dsb	sy
 800965c:	623b      	str	r3, [r7, #32]
}
 800965e:	bf00      	nop
 8009660:	bf00      	nop
 8009662:	e7fd      	b.n	8009660 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009668:	2b00      	cmp	r3, #0
 800966a:	d00b      	beq.n	8009684 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800966c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009670:	f383 8811 	msr	BASEPRI, r3
 8009674:	f3bf 8f6f 	isb	sy
 8009678:	f3bf 8f4f 	dsb	sy
 800967c:	61fb      	str	r3, [r7, #28]
}
 800967e:	bf00      	nop
 8009680:	bf00      	nop
 8009682:	e7fd      	b.n	8009680 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009684:	f001 f8b4 	bl	800a7f0 <xTaskGetSchedulerState>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d102      	bne.n	8009694 <xQueueSemaphoreTake+0x64>
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d101      	bne.n	8009698 <xQueueSemaphoreTake+0x68>
 8009694:	2301      	movs	r3, #1
 8009696:	e000      	b.n	800969a <xQueueSemaphoreTake+0x6a>
 8009698:	2300      	movs	r3, #0
 800969a:	2b00      	cmp	r3, #0
 800969c:	d10b      	bne.n	80096b6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800969e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096a2:	f383 8811 	msr	BASEPRI, r3
 80096a6:	f3bf 8f6f 	isb	sy
 80096aa:	f3bf 8f4f 	dsb	sy
 80096ae:	61bb      	str	r3, [r7, #24]
}
 80096b0:	bf00      	nop
 80096b2:	bf00      	nop
 80096b4:	e7fd      	b.n	80096b2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80096b6:	f001 fbef 	bl	800ae98 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80096ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096be:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80096c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d024      	beq.n	8009710 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80096c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c8:	1e5a      	subs	r2, r3, #1
 80096ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096cc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80096ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d104      	bne.n	80096e0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80096d6:	f001 fa37 	bl	800ab48 <pvTaskIncrementMutexHeldCount>
 80096da:	4602      	mov	r2, r0
 80096dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096de:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80096e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096e2:	691b      	ldr	r3, [r3, #16]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d00f      	beq.n	8009708 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096ea:	3310      	adds	r3, #16
 80096ec:	4618      	mov	r0, r3
 80096ee:	f000 febf 	bl	800a470 <xTaskRemoveFromEventList>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d007      	beq.n	8009708 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80096f8:	4b54      	ldr	r3, [pc, #336]	@ (800984c <xQueueSemaphoreTake+0x21c>)
 80096fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096fe:	601a      	str	r2, [r3, #0]
 8009700:	f3bf 8f4f 	dsb	sy
 8009704:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009708:	f001 fbf8 	bl	800aefc <vPortExitCritical>
				return pdPASS;
 800970c:	2301      	movs	r3, #1
 800970e:	e098      	b.n	8009842 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d112      	bne.n	800973c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009718:	2b00      	cmp	r3, #0
 800971a:	d00b      	beq.n	8009734 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800971c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009720:	f383 8811 	msr	BASEPRI, r3
 8009724:	f3bf 8f6f 	isb	sy
 8009728:	f3bf 8f4f 	dsb	sy
 800972c:	617b      	str	r3, [r7, #20]
}
 800972e:	bf00      	nop
 8009730:	bf00      	nop
 8009732:	e7fd      	b.n	8009730 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009734:	f001 fbe2 	bl	800aefc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009738:	2300      	movs	r3, #0
 800973a:	e082      	b.n	8009842 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800973c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800973e:	2b00      	cmp	r3, #0
 8009740:	d106      	bne.n	8009750 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009742:	f107 030c 	add.w	r3, r7, #12
 8009746:	4618      	mov	r0, r3
 8009748:	f000 fef6 	bl	800a538 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800974c:	2301      	movs	r3, #1
 800974e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009750:	f001 fbd4 	bl	800aefc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009754:	f000 fca4 	bl	800a0a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009758:	f001 fb9e 	bl	800ae98 <vPortEnterCritical>
 800975c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800975e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009762:	b25b      	sxtb	r3, r3
 8009764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009768:	d103      	bne.n	8009772 <xQueueSemaphoreTake+0x142>
 800976a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800976c:	2200      	movs	r2, #0
 800976e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009774:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009778:	b25b      	sxtb	r3, r3
 800977a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800977e:	d103      	bne.n	8009788 <xQueueSemaphoreTake+0x158>
 8009780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009782:	2200      	movs	r2, #0
 8009784:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009788:	f001 fbb8 	bl	800aefc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800978c:	463a      	mov	r2, r7
 800978e:	f107 030c 	add.w	r3, r7, #12
 8009792:	4611      	mov	r1, r2
 8009794:	4618      	mov	r0, r3
 8009796:	f000 fee5 	bl	800a564 <xTaskCheckForTimeOut>
 800979a:	4603      	mov	r3, r0
 800979c:	2b00      	cmp	r3, #0
 800979e:	d132      	bne.n	8009806 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80097a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80097a2:	f000 f9f5 	bl	8009b90 <prvIsQueueEmpty>
 80097a6:	4603      	mov	r3, r0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d026      	beq.n	80097fa <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80097ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d109      	bne.n	80097c8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80097b4:	f001 fb70 	bl	800ae98 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80097b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	4618      	mov	r0, r3
 80097be:	f001 f835 	bl	800a82c <xTaskPriorityInherit>
 80097c2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80097c4:	f001 fb9a 	bl	800aefc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80097c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ca:	3324      	adds	r3, #36	@ 0x24
 80097cc:	683a      	ldr	r2, [r7, #0]
 80097ce:	4611      	mov	r1, r2
 80097d0:	4618      	mov	r0, r3
 80097d2:	f000 fe27 	bl	800a424 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80097d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80097d8:	f000 f988 	bl	8009aec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80097dc:	f000 fc6e 	bl	800a0bc <xTaskResumeAll>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	f47f af67 	bne.w	80096b6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80097e8:	4b18      	ldr	r3, [pc, #96]	@ (800984c <xQueueSemaphoreTake+0x21c>)
 80097ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097ee:	601a      	str	r2, [r3, #0]
 80097f0:	f3bf 8f4f 	dsb	sy
 80097f4:	f3bf 8f6f 	isb	sy
 80097f8:	e75d      	b.n	80096b6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80097fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80097fc:	f000 f976 	bl	8009aec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009800:	f000 fc5c 	bl	800a0bc <xTaskResumeAll>
 8009804:	e757      	b.n	80096b6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009806:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009808:	f000 f970 	bl	8009aec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800980c:	f000 fc56 	bl	800a0bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009810:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009812:	f000 f9bd 	bl	8009b90 <prvIsQueueEmpty>
 8009816:	4603      	mov	r3, r0
 8009818:	2b00      	cmp	r3, #0
 800981a:	f43f af4c 	beq.w	80096b6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800981e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009820:	2b00      	cmp	r3, #0
 8009822:	d00d      	beq.n	8009840 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009824:	f001 fb38 	bl	800ae98 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009828:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800982a:	f000 f8b7 	bl	800999c <prvGetDisinheritPriorityAfterTimeout>
 800982e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009836:	4618      	mov	r0, r3
 8009838:	f001 f8f6 	bl	800aa28 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800983c:	f001 fb5e 	bl	800aefc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009840:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009842:	4618      	mov	r0, r3
 8009844:	3738      	adds	r7, #56	@ 0x38
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	e000ed04 	.word	0xe000ed04

08009850 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b08e      	sub	sp, #56	@ 0x38
 8009854:	af00      	add	r7, sp, #0
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009862:	2b00      	cmp	r3, #0
 8009864:	d10b      	bne.n	800987e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8009866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800986a:	f383 8811 	msr	BASEPRI, r3
 800986e:	f3bf 8f6f 	isb	sy
 8009872:	f3bf 8f4f 	dsb	sy
 8009876:	623b      	str	r3, [r7, #32]
}
 8009878:	bf00      	nop
 800987a:	bf00      	nop
 800987c:	e7fd      	b.n	800987a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d103      	bne.n	800988c <xQueueReceiveFromISR+0x3c>
 8009884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009888:	2b00      	cmp	r3, #0
 800988a:	d101      	bne.n	8009890 <xQueueReceiveFromISR+0x40>
 800988c:	2301      	movs	r3, #1
 800988e:	e000      	b.n	8009892 <xQueueReceiveFromISR+0x42>
 8009890:	2300      	movs	r3, #0
 8009892:	2b00      	cmp	r3, #0
 8009894:	d10b      	bne.n	80098ae <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8009896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800989a:	f383 8811 	msr	BASEPRI, r3
 800989e:	f3bf 8f6f 	isb	sy
 80098a2:	f3bf 8f4f 	dsb	sy
 80098a6:	61fb      	str	r3, [r7, #28]
}
 80098a8:	bf00      	nop
 80098aa:	bf00      	nop
 80098ac:	e7fd      	b.n	80098aa <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80098ae:	f001 fbd3 	bl	800b058 <vPortValidateInterruptPriority>
	__asm volatile
 80098b2:	f3ef 8211 	mrs	r2, BASEPRI
 80098b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ba:	f383 8811 	msr	BASEPRI, r3
 80098be:	f3bf 8f6f 	isb	sy
 80098c2:	f3bf 8f4f 	dsb	sy
 80098c6:	61ba      	str	r2, [r7, #24]
 80098c8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80098ca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80098cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098d2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d02f      	beq.n	800993a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80098da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80098e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80098e4:	68b9      	ldr	r1, [r7, #8]
 80098e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80098e8:	f000 f8da 	bl	8009aa0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80098ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ee:	1e5a      	subs	r2, r3, #1
 80098f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098f2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80098f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80098f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098fc:	d112      	bne.n	8009924 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009900:	691b      	ldr	r3, [r3, #16]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d016      	beq.n	8009934 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009908:	3310      	adds	r3, #16
 800990a:	4618      	mov	r0, r3
 800990c:	f000 fdb0 	bl	800a470 <xTaskRemoveFromEventList>
 8009910:	4603      	mov	r3, r0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d00e      	beq.n	8009934 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d00b      	beq.n	8009934 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2201      	movs	r2, #1
 8009920:	601a      	str	r2, [r3, #0]
 8009922:	e007      	b.n	8009934 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009924:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009928:	3301      	adds	r3, #1
 800992a:	b2db      	uxtb	r3, r3
 800992c:	b25a      	sxtb	r2, r3
 800992e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009930:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009934:	2301      	movs	r3, #1
 8009936:	637b      	str	r3, [r7, #52]	@ 0x34
 8009938:	e001      	b.n	800993e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800993a:	2300      	movs	r3, #0
 800993c:	637b      	str	r3, [r7, #52]	@ 0x34
 800993e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009940:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	f383 8811 	msr	BASEPRI, r3
}
 8009948:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800994a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800994c:	4618      	mov	r0, r3
 800994e:	3738      	adds	r7, #56	@ 0x38
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d10b      	bne.n	800997e <vQueueDelete+0x2a>
	__asm volatile
 8009966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800996a:	f383 8811 	msr	BASEPRI, r3
 800996e:	f3bf 8f6f 	isb	sy
 8009972:	f3bf 8f4f 	dsb	sy
 8009976:	60bb      	str	r3, [r7, #8]
}
 8009978:	bf00      	nop
 800997a:	bf00      	nop
 800997c:	e7fd      	b.n	800997a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800997e:	68f8      	ldr	r0, [r7, #12]
 8009980:	f000 f934 	bl	8009bec <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800998a:	2b00      	cmp	r3, #0
 800998c:	d102      	bne.n	8009994 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800998e:	68f8      	ldr	r0, [r7, #12]
 8009990:	f001 fc72 	bl	800b278 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009994:	bf00      	nop
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800999c:	b480      	push	{r7}
 800999e:	b085      	sub	sp, #20
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d006      	beq.n	80099ba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f1c3 0307 	rsb	r3, r3, #7
 80099b6:	60fb      	str	r3, [r7, #12]
 80099b8:	e001      	b.n	80099be <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80099ba:	2300      	movs	r3, #0
 80099bc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80099be:	68fb      	ldr	r3, [r7, #12]
	}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3714      	adds	r7, #20
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b086      	sub	sp, #24
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	60f8      	str	r0, [r7, #12]
 80099d4:	60b9      	str	r1, [r7, #8]
 80099d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80099d8:	2300      	movs	r3, #0
 80099da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d10d      	bne.n	8009a06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d14d      	bne.n	8009a8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	4618      	mov	r0, r3
 80099f8:	f000 ff8e 	bl	800a918 <xTaskPriorityDisinherit>
 80099fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2200      	movs	r2, #0
 8009a02:	609a      	str	r2, [r3, #8]
 8009a04:	e043      	b.n	8009a8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d119      	bne.n	8009a40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	6858      	ldr	r0, [r3, #4]
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a14:	461a      	mov	r2, r3
 8009a16:	68b9      	ldr	r1, [r7, #8]
 8009a18:	f001 fed6 	bl	800b7c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	685a      	ldr	r2, [r3, #4]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a24:	441a      	add	r2, r3
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	685a      	ldr	r2, [r3, #4]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d32b      	bcc.n	8009a8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681a      	ldr	r2, [r3, #0]
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	605a      	str	r2, [r3, #4]
 8009a3e:	e026      	b.n	8009a8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	68d8      	ldr	r0, [r3, #12]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a48:	461a      	mov	r2, r3
 8009a4a:	68b9      	ldr	r1, [r7, #8]
 8009a4c:	f001 febc 	bl	800b7c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	68da      	ldr	r2, [r3, #12]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a58:	425b      	negs	r3, r3
 8009a5a:	441a      	add	r2, r3
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	68da      	ldr	r2, [r3, #12]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d207      	bcs.n	8009a7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	689a      	ldr	r2, [r3, #8]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a74:	425b      	negs	r3, r3
 8009a76:	441a      	add	r2, r3
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2b02      	cmp	r3, #2
 8009a80:	d105      	bne.n	8009a8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d002      	beq.n	8009a8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	1c5a      	adds	r2, r3, #1
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009a96:	697b      	ldr	r3, [r7, #20]
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3718      	adds	r7, #24
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d018      	beq.n	8009ae4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	68da      	ldr	r2, [r3, #12]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aba:	441a      	add	r2, r3
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	68da      	ldr	r2, [r3, #12]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d303      	bcc.n	8009ad4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	68d9      	ldr	r1, [r3, #12]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009adc:	461a      	mov	r2, r3
 8009ade:	6838      	ldr	r0, [r7, #0]
 8009ae0:	f001 fe72 	bl	800b7c8 <memcpy>
	}
}
 8009ae4:	bf00      	nop
 8009ae6:	3708      	adds	r7, #8
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009af4:	f001 f9d0 	bl	800ae98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009afe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b00:	e011      	b.n	8009b26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d012      	beq.n	8009b30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	3324      	adds	r3, #36	@ 0x24
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f000 fcae 	bl	800a470 <xTaskRemoveFromEventList>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d001      	beq.n	8009b1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009b1a:	f000 fd87 	bl	800a62c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009b1e:	7bfb      	ldrb	r3, [r7, #15]
 8009b20:	3b01      	subs	r3, #1
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	dce9      	bgt.n	8009b02 <prvUnlockQueue+0x16>
 8009b2e:	e000      	b.n	8009b32 <prvUnlockQueue+0x46>
					break;
 8009b30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	22ff      	movs	r2, #255	@ 0xff
 8009b36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009b3a:	f001 f9df 	bl	800aefc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009b3e:	f001 f9ab 	bl	800ae98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b4a:	e011      	b.n	8009b70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	691b      	ldr	r3, [r3, #16]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d012      	beq.n	8009b7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	3310      	adds	r3, #16
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f000 fc89 	bl	800a470 <xTaskRemoveFromEventList>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d001      	beq.n	8009b68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009b64:	f000 fd62 	bl	800a62c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009b68:	7bbb      	ldrb	r3, [r7, #14]
 8009b6a:	3b01      	subs	r3, #1
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	dce9      	bgt.n	8009b4c <prvUnlockQueue+0x60>
 8009b78:	e000      	b.n	8009b7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009b7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	22ff      	movs	r2, #255	@ 0xff
 8009b80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009b84:	f001 f9ba 	bl	800aefc <vPortExitCritical>
}
 8009b88:	bf00      	nop
 8009b8a:	3710      	adds	r7, #16
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b98:	f001 f97e 	bl	800ae98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d102      	bne.n	8009baa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	60fb      	str	r3, [r7, #12]
 8009ba8:	e001      	b.n	8009bae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009baa:	2300      	movs	r3, #0
 8009bac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009bae:	f001 f9a5 	bl	800aefc <vPortExitCritical>

	return xReturn;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3710      	adds	r7, #16
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009bc4:	f001 f968 	bl	800ae98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d102      	bne.n	8009bda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	60fb      	str	r3, [r7, #12]
 8009bd8:	e001      	b.n	8009bde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009bde:	f001 f98d 	bl	800aefc <vPortExitCritical>

	return xReturn;
 8009be2:	68fb      	ldr	r3, [r7, #12]
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3710      	adds	r7, #16
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009bec:	b480      	push	{r7}
 8009bee:	b085      	sub	sp, #20
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	60fb      	str	r3, [r7, #12]
 8009bf8:	e016      	b.n	8009c28 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009bfa:	4a10      	ldr	r2, [pc, #64]	@ (8009c3c <vQueueUnregisterQueue+0x50>)
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	00db      	lsls	r3, r3, #3
 8009c00:	4413      	add	r3, r2
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d10b      	bne.n	8009c22 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009c0a:	4a0c      	ldr	r2, [pc, #48]	@ (8009c3c <vQueueUnregisterQueue+0x50>)
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2100      	movs	r1, #0
 8009c10:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009c14:	4a09      	ldr	r2, [pc, #36]	@ (8009c3c <vQueueUnregisterQueue+0x50>)
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	00db      	lsls	r3, r3, #3
 8009c1a:	4413      	add	r3, r2
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	605a      	str	r2, [r3, #4]
				break;
 8009c20:	e006      	b.n	8009c30 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	3301      	adds	r3, #1
 8009c26:	60fb      	str	r3, [r7, #12]
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2b07      	cmp	r3, #7
 8009c2c:	d9e5      	bls.n	8009bfa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009c2e:	bf00      	nop
 8009c30:	bf00      	nop
 8009c32:	3714      	adds	r7, #20
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr
 8009c3c:	20000588 	.word	0x20000588

08009c40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b08e      	sub	sp, #56	@ 0x38
 8009c44:	af04      	add	r7, sp, #16
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	607a      	str	r2, [r7, #4]
 8009c4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d10b      	bne.n	8009c6c <xTaskCreateStatic+0x2c>
	__asm volatile
 8009c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c58:	f383 8811 	msr	BASEPRI, r3
 8009c5c:	f3bf 8f6f 	isb	sy
 8009c60:	f3bf 8f4f 	dsb	sy
 8009c64:	623b      	str	r3, [r7, #32]
}
 8009c66:	bf00      	nop
 8009c68:	bf00      	nop
 8009c6a:	e7fd      	b.n	8009c68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d10b      	bne.n	8009c8a <xTaskCreateStatic+0x4a>
	__asm volatile
 8009c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c76:	f383 8811 	msr	BASEPRI, r3
 8009c7a:	f3bf 8f6f 	isb	sy
 8009c7e:	f3bf 8f4f 	dsb	sy
 8009c82:	61fb      	str	r3, [r7, #28]
}
 8009c84:	bf00      	nop
 8009c86:	bf00      	nop
 8009c88:	e7fd      	b.n	8009c86 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009c8a:	2354      	movs	r3, #84	@ 0x54
 8009c8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	2b54      	cmp	r3, #84	@ 0x54
 8009c92:	d00b      	beq.n	8009cac <xTaskCreateStatic+0x6c>
	__asm volatile
 8009c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c98:	f383 8811 	msr	BASEPRI, r3
 8009c9c:	f3bf 8f6f 	isb	sy
 8009ca0:	f3bf 8f4f 	dsb	sy
 8009ca4:	61bb      	str	r3, [r7, #24]
}
 8009ca6:	bf00      	nop
 8009ca8:	bf00      	nop
 8009caa:	e7fd      	b.n	8009ca8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009cac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d01e      	beq.n	8009cf2 <xTaskCreateStatic+0xb2>
 8009cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d01b      	beq.n	8009cf2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cbc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009cc2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cc6:	2202      	movs	r2, #2
 8009cc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009ccc:	2300      	movs	r3, #0
 8009cce:	9303      	str	r3, [sp, #12]
 8009cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cd2:	9302      	str	r3, [sp, #8]
 8009cd4:	f107 0314 	add.w	r3, r7, #20
 8009cd8:	9301      	str	r3, [sp, #4]
 8009cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cdc:	9300      	str	r3, [sp, #0]
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	68b9      	ldr	r1, [r7, #8]
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	f000 f850 	bl	8009d8a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009cea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009cec:	f000 f8d6 	bl	8009e9c <prvAddNewTaskToReadyList>
 8009cf0:	e001      	b.n	8009cf6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009cf6:	697b      	ldr	r3, [r7, #20]
	}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3728      	adds	r7, #40	@ 0x28
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b08c      	sub	sp, #48	@ 0x30
 8009d04:	af04      	add	r7, sp, #16
 8009d06:	60f8      	str	r0, [r7, #12]
 8009d08:	60b9      	str	r1, [r7, #8]
 8009d0a:	603b      	str	r3, [r7, #0]
 8009d0c:	4613      	mov	r3, r2
 8009d0e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009d10:	88fb      	ldrh	r3, [r7, #6]
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	4618      	mov	r0, r3
 8009d16:	f001 f9e1 	bl	800b0dc <pvPortMalloc>
 8009d1a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00e      	beq.n	8009d40 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009d22:	2054      	movs	r0, #84	@ 0x54
 8009d24:	f001 f9da 	bl	800b0dc <pvPortMalloc>
 8009d28:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009d2a:	69fb      	ldr	r3, [r7, #28]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d003      	beq.n	8009d38 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009d30:	69fb      	ldr	r3, [r7, #28]
 8009d32:	697a      	ldr	r2, [r7, #20]
 8009d34:	631a      	str	r2, [r3, #48]	@ 0x30
 8009d36:	e005      	b.n	8009d44 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009d38:	6978      	ldr	r0, [r7, #20]
 8009d3a:	f001 fa9d 	bl	800b278 <vPortFree>
 8009d3e:	e001      	b.n	8009d44 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009d40:	2300      	movs	r3, #0
 8009d42:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d017      	beq.n	8009d7a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009d4a:	69fb      	ldr	r3, [r7, #28]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009d52:	88fa      	ldrh	r2, [r7, #6]
 8009d54:	2300      	movs	r3, #0
 8009d56:	9303      	str	r3, [sp, #12]
 8009d58:	69fb      	ldr	r3, [r7, #28]
 8009d5a:	9302      	str	r3, [sp, #8]
 8009d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d5e:	9301      	str	r3, [sp, #4]
 8009d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d62:	9300      	str	r3, [sp, #0]
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	68b9      	ldr	r1, [r7, #8]
 8009d68:	68f8      	ldr	r0, [r7, #12]
 8009d6a:	f000 f80e 	bl	8009d8a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d6e:	69f8      	ldr	r0, [r7, #28]
 8009d70:	f000 f894 	bl	8009e9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009d74:	2301      	movs	r3, #1
 8009d76:	61bb      	str	r3, [r7, #24]
 8009d78:	e002      	b.n	8009d80 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8009d7e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009d80:	69bb      	ldr	r3, [r7, #24]
	}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3720      	adds	r7, #32
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b088      	sub	sp, #32
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	60f8      	str	r0, [r7, #12]
 8009d92:	60b9      	str	r1, [r7, #8]
 8009d94:	607a      	str	r2, [r7, #4]
 8009d96:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009da2:	3b01      	subs	r3, #1
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	4413      	add	r3, r2
 8009da8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009daa:	69bb      	ldr	r3, [r7, #24]
 8009dac:	f023 0307 	bic.w	r3, r3, #7
 8009db0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009db2:	69bb      	ldr	r3, [r7, #24]
 8009db4:	f003 0307 	and.w	r3, r3, #7
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d00b      	beq.n	8009dd4 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8009dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dc0:	f383 8811 	msr	BASEPRI, r3
 8009dc4:	f3bf 8f6f 	isb	sy
 8009dc8:	f3bf 8f4f 	dsb	sy
 8009dcc:	617b      	str	r3, [r7, #20]
}
 8009dce:	bf00      	nop
 8009dd0:	bf00      	nop
 8009dd2:	e7fd      	b.n	8009dd0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d01f      	beq.n	8009e1a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009dda:	2300      	movs	r3, #0
 8009ddc:	61fb      	str	r3, [r7, #28]
 8009dde:	e012      	b.n	8009e06 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009de0:	68ba      	ldr	r2, [r7, #8]
 8009de2:	69fb      	ldr	r3, [r7, #28]
 8009de4:	4413      	add	r3, r2
 8009de6:	7819      	ldrb	r1, [r3, #0]
 8009de8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009dea:	69fb      	ldr	r3, [r7, #28]
 8009dec:	4413      	add	r3, r2
 8009dee:	3334      	adds	r3, #52	@ 0x34
 8009df0:	460a      	mov	r2, r1
 8009df2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009df4:	68ba      	ldr	r2, [r7, #8]
 8009df6:	69fb      	ldr	r3, [r7, #28]
 8009df8:	4413      	add	r3, r2
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d006      	beq.n	8009e0e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	3301      	adds	r3, #1
 8009e04:	61fb      	str	r3, [r7, #28]
 8009e06:	69fb      	ldr	r3, [r7, #28]
 8009e08:	2b0f      	cmp	r3, #15
 8009e0a:	d9e9      	bls.n	8009de0 <prvInitialiseNewTask+0x56>
 8009e0c:	e000      	b.n	8009e10 <prvInitialiseNewTask+0x86>
			{
				break;
 8009e0e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e12:	2200      	movs	r2, #0
 8009e14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009e18:	e003      	b.n	8009e22 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e24:	2b06      	cmp	r3, #6
 8009e26:	d901      	bls.n	8009e2c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009e28:	2306      	movs	r3, #6
 8009e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e30:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e36:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e40:	3304      	adds	r3, #4
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7fe fec0 	bl	8008bc8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e4a:	3318      	adds	r3, #24
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f7fe febb 	bl	8008bc8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e56:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e5a:	f1c3 0207 	rsb	r2, r3, #7
 8009e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e60:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e66:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e70:	2200      	movs	r2, #0
 8009e72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009e76:	683a      	ldr	r2, [r7, #0]
 8009e78:	68f9      	ldr	r1, [r7, #12]
 8009e7a:	69b8      	ldr	r0, [r7, #24]
 8009e7c:	f000 fede 	bl	800ac3c <pxPortInitialiseStack>
 8009e80:	4602      	mov	r2, r0
 8009e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e84:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d002      	beq.n	8009e92 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e92:	bf00      	nop
 8009e94:	3720      	adds	r7, #32
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
	...

08009e9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009ea4:	f000 fff8 	bl	800ae98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009ea8:	4b2a      	ldr	r3, [pc, #168]	@ (8009f54 <prvAddNewTaskToReadyList+0xb8>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	3301      	adds	r3, #1
 8009eae:	4a29      	ldr	r2, [pc, #164]	@ (8009f54 <prvAddNewTaskToReadyList+0xb8>)
 8009eb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009eb2:	4b29      	ldr	r3, [pc, #164]	@ (8009f58 <prvAddNewTaskToReadyList+0xbc>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d109      	bne.n	8009ece <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009eba:	4a27      	ldr	r2, [pc, #156]	@ (8009f58 <prvAddNewTaskToReadyList+0xbc>)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009ec0:	4b24      	ldr	r3, [pc, #144]	@ (8009f54 <prvAddNewTaskToReadyList+0xb8>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d110      	bne.n	8009eea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009ec8:	f000 fbd4 	bl	800a674 <prvInitialiseTaskLists>
 8009ecc:	e00d      	b.n	8009eea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009ece:	4b23      	ldr	r3, [pc, #140]	@ (8009f5c <prvAddNewTaskToReadyList+0xc0>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d109      	bne.n	8009eea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009ed6:	4b20      	ldr	r3, [pc, #128]	@ (8009f58 <prvAddNewTaskToReadyList+0xbc>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d802      	bhi.n	8009eea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009ee4:	4a1c      	ldr	r2, [pc, #112]	@ (8009f58 <prvAddNewTaskToReadyList+0xbc>)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009eea:	4b1d      	ldr	r3, [pc, #116]	@ (8009f60 <prvAddNewTaskToReadyList+0xc4>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	3301      	adds	r3, #1
 8009ef0:	4a1b      	ldr	r2, [pc, #108]	@ (8009f60 <prvAddNewTaskToReadyList+0xc4>)
 8009ef2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ef8:	2201      	movs	r2, #1
 8009efa:	409a      	lsls	r2, r3
 8009efc:	4b19      	ldr	r3, [pc, #100]	@ (8009f64 <prvAddNewTaskToReadyList+0xc8>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4313      	orrs	r3, r2
 8009f02:	4a18      	ldr	r2, [pc, #96]	@ (8009f64 <prvAddNewTaskToReadyList+0xc8>)
 8009f04:	6013      	str	r3, [r2, #0]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f0a:	4613      	mov	r3, r2
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	4413      	add	r3, r2
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	4a15      	ldr	r2, [pc, #84]	@ (8009f68 <prvAddNewTaskToReadyList+0xcc>)
 8009f14:	441a      	add	r2, r3
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	3304      	adds	r3, #4
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	4610      	mov	r0, r2
 8009f1e:	f7fe fe60 	bl	8008be2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009f22:	f000 ffeb 	bl	800aefc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009f26:	4b0d      	ldr	r3, [pc, #52]	@ (8009f5c <prvAddNewTaskToReadyList+0xc0>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d00e      	beq.n	8009f4c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8009f58 <prvAddNewTaskToReadyList+0xbc>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d207      	bcs.n	8009f4c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8009f6c <prvAddNewTaskToReadyList+0xd0>)
 8009f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f42:	601a      	str	r2, [r3, #0]
 8009f44:	f3bf 8f4f 	dsb	sy
 8009f48:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f4c:	bf00      	nop
 8009f4e:	3708      	adds	r7, #8
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}
 8009f54:	200006c8 	.word	0x200006c8
 8009f58:	200005c8 	.word	0x200005c8
 8009f5c:	200006d4 	.word	0x200006d4
 8009f60:	200006e4 	.word	0x200006e4
 8009f64:	200006d0 	.word	0x200006d0
 8009f68:	200005cc 	.word	0x200005cc
 8009f6c:	e000ed04 	.word	0xe000ed04

08009f70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d018      	beq.n	8009fb4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009f82:	4b14      	ldr	r3, [pc, #80]	@ (8009fd4 <vTaskDelay+0x64>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d00b      	beq.n	8009fa2 <vTaskDelay+0x32>
	__asm volatile
 8009f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f8e:	f383 8811 	msr	BASEPRI, r3
 8009f92:	f3bf 8f6f 	isb	sy
 8009f96:	f3bf 8f4f 	dsb	sy
 8009f9a:	60bb      	str	r3, [r7, #8]
}
 8009f9c:	bf00      	nop
 8009f9e:	bf00      	nop
 8009fa0:	e7fd      	b.n	8009f9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009fa2:	f000 f87d 	bl	800a0a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009fa6:	2100      	movs	r1, #0
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f000 fde1 	bl	800ab70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009fae:	f000 f885 	bl	800a0bc <xTaskResumeAll>
 8009fb2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d107      	bne.n	8009fca <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009fba:	4b07      	ldr	r3, [pc, #28]	@ (8009fd8 <vTaskDelay+0x68>)
 8009fbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fc0:	601a      	str	r2, [r3, #0]
 8009fc2:	f3bf 8f4f 	dsb	sy
 8009fc6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009fca:	bf00      	nop
 8009fcc:	3710      	adds	r7, #16
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	200006f0 	.word	0x200006f0
 8009fd8:	e000ed04 	.word	0xe000ed04

08009fdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b08a      	sub	sp, #40	@ 0x28
 8009fe0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009fea:	463a      	mov	r2, r7
 8009fec:	1d39      	adds	r1, r7, #4
 8009fee:	f107 0308 	add.w	r3, r7, #8
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f7f6 ff98 	bl	8000f28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009ff8:	6839      	ldr	r1, [r7, #0]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	68ba      	ldr	r2, [r7, #8]
 8009ffe:	9202      	str	r2, [sp, #8]
 800a000:	9301      	str	r3, [sp, #4]
 800a002:	2300      	movs	r3, #0
 800a004:	9300      	str	r3, [sp, #0]
 800a006:	2300      	movs	r3, #0
 800a008:	460a      	mov	r2, r1
 800a00a:	491f      	ldr	r1, [pc, #124]	@ (800a088 <vTaskStartScheduler+0xac>)
 800a00c:	481f      	ldr	r0, [pc, #124]	@ (800a08c <vTaskStartScheduler+0xb0>)
 800a00e:	f7ff fe17 	bl	8009c40 <xTaskCreateStatic>
 800a012:	4603      	mov	r3, r0
 800a014:	4a1e      	ldr	r2, [pc, #120]	@ (800a090 <vTaskStartScheduler+0xb4>)
 800a016:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a018:	4b1d      	ldr	r3, [pc, #116]	@ (800a090 <vTaskStartScheduler+0xb4>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d002      	beq.n	800a026 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a020:	2301      	movs	r3, #1
 800a022:	617b      	str	r3, [r7, #20]
 800a024:	e001      	b.n	800a02a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a026:	2300      	movs	r3, #0
 800a028:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d116      	bne.n	800a05e <vTaskStartScheduler+0x82>
	__asm volatile
 800a030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a034:	f383 8811 	msr	BASEPRI, r3
 800a038:	f3bf 8f6f 	isb	sy
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	613b      	str	r3, [r7, #16]
}
 800a042:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a044:	4b13      	ldr	r3, [pc, #76]	@ (800a094 <vTaskStartScheduler+0xb8>)
 800a046:	f04f 32ff 	mov.w	r2, #4294967295
 800a04a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a04c:	4b12      	ldr	r3, [pc, #72]	@ (800a098 <vTaskStartScheduler+0xbc>)
 800a04e:	2201      	movs	r2, #1
 800a050:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a052:	4b12      	ldr	r3, [pc, #72]	@ (800a09c <vTaskStartScheduler+0xc0>)
 800a054:	2200      	movs	r2, #0
 800a056:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a058:	f000 fe7a 	bl	800ad50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a05c:	e00f      	b.n	800a07e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a064:	d10b      	bne.n	800a07e <vTaskStartScheduler+0xa2>
	__asm volatile
 800a066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a06a:	f383 8811 	msr	BASEPRI, r3
 800a06e:	f3bf 8f6f 	isb	sy
 800a072:	f3bf 8f4f 	dsb	sy
 800a076:	60fb      	str	r3, [r7, #12]
}
 800a078:	bf00      	nop
 800a07a:	bf00      	nop
 800a07c:	e7fd      	b.n	800a07a <vTaskStartScheduler+0x9e>
}
 800a07e:	bf00      	nop
 800a080:	3718      	adds	r7, #24
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	bf00      	nop
 800a088:	0800d548 	.word	0x0800d548
 800a08c:	0800a645 	.word	0x0800a645
 800a090:	200006ec 	.word	0x200006ec
 800a094:	200006e8 	.word	0x200006e8
 800a098:	200006d4 	.word	0x200006d4
 800a09c:	200006cc 	.word	0x200006cc

0800a0a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a0a4:	4b04      	ldr	r3, [pc, #16]	@ (800a0b8 <vTaskSuspendAll+0x18>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	4a03      	ldr	r2, [pc, #12]	@ (800a0b8 <vTaskSuspendAll+0x18>)
 800a0ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a0ae:	bf00      	nop
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr
 800a0b8:	200006f0 	.word	0x200006f0

0800a0bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a0ca:	4b42      	ldr	r3, [pc, #264]	@ (800a1d4 <xTaskResumeAll+0x118>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d10b      	bne.n	800a0ea <xTaskResumeAll+0x2e>
	__asm volatile
 800a0d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0d6:	f383 8811 	msr	BASEPRI, r3
 800a0da:	f3bf 8f6f 	isb	sy
 800a0de:	f3bf 8f4f 	dsb	sy
 800a0e2:	603b      	str	r3, [r7, #0]
}
 800a0e4:	bf00      	nop
 800a0e6:	bf00      	nop
 800a0e8:	e7fd      	b.n	800a0e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a0ea:	f000 fed5 	bl	800ae98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a0ee:	4b39      	ldr	r3, [pc, #228]	@ (800a1d4 <xTaskResumeAll+0x118>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	3b01      	subs	r3, #1
 800a0f4:	4a37      	ldr	r2, [pc, #220]	@ (800a1d4 <xTaskResumeAll+0x118>)
 800a0f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0f8:	4b36      	ldr	r3, [pc, #216]	@ (800a1d4 <xTaskResumeAll+0x118>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d161      	bne.n	800a1c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a100:	4b35      	ldr	r3, [pc, #212]	@ (800a1d8 <xTaskResumeAll+0x11c>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d05d      	beq.n	800a1c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a108:	e02e      	b.n	800a168 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a10a:	4b34      	ldr	r3, [pc, #208]	@ (800a1dc <xTaskResumeAll+0x120>)
 800a10c:	68db      	ldr	r3, [r3, #12]
 800a10e:	68db      	ldr	r3, [r3, #12]
 800a110:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	3318      	adds	r3, #24
 800a116:	4618      	mov	r0, r3
 800a118:	f7fe fdc0 	bl	8008c9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	3304      	adds	r3, #4
 800a120:	4618      	mov	r0, r3
 800a122:	f7fe fdbb 	bl	8008c9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a12a:	2201      	movs	r2, #1
 800a12c:	409a      	lsls	r2, r3
 800a12e:	4b2c      	ldr	r3, [pc, #176]	@ (800a1e0 <xTaskResumeAll+0x124>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4313      	orrs	r3, r2
 800a134:	4a2a      	ldr	r2, [pc, #168]	@ (800a1e0 <xTaskResumeAll+0x124>)
 800a136:	6013      	str	r3, [r2, #0]
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a13c:	4613      	mov	r3, r2
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	4413      	add	r3, r2
 800a142:	009b      	lsls	r3, r3, #2
 800a144:	4a27      	ldr	r2, [pc, #156]	@ (800a1e4 <xTaskResumeAll+0x128>)
 800a146:	441a      	add	r2, r3
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	3304      	adds	r3, #4
 800a14c:	4619      	mov	r1, r3
 800a14e:	4610      	mov	r0, r2
 800a150:	f7fe fd47 	bl	8008be2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a158:	4b23      	ldr	r3, [pc, #140]	@ (800a1e8 <xTaskResumeAll+0x12c>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a15e:	429a      	cmp	r2, r3
 800a160:	d302      	bcc.n	800a168 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a162:	4b22      	ldr	r3, [pc, #136]	@ (800a1ec <xTaskResumeAll+0x130>)
 800a164:	2201      	movs	r2, #1
 800a166:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a168:	4b1c      	ldr	r3, [pc, #112]	@ (800a1dc <xTaskResumeAll+0x120>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d1cc      	bne.n	800a10a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d001      	beq.n	800a17a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a176:	f000 fb1b 	bl	800a7b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a17a:	4b1d      	ldr	r3, [pc, #116]	@ (800a1f0 <xTaskResumeAll+0x134>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d010      	beq.n	800a1a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a186:	f000 f837 	bl	800a1f8 <xTaskIncrementTick>
 800a18a:	4603      	mov	r3, r0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d002      	beq.n	800a196 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a190:	4b16      	ldr	r3, [pc, #88]	@ (800a1ec <xTaskResumeAll+0x130>)
 800a192:	2201      	movs	r2, #1
 800a194:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	3b01      	subs	r3, #1
 800a19a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d1f1      	bne.n	800a186 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a1a2:	4b13      	ldr	r3, [pc, #76]	@ (800a1f0 <xTaskResumeAll+0x134>)
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a1a8:	4b10      	ldr	r3, [pc, #64]	@ (800a1ec <xTaskResumeAll+0x130>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d009      	beq.n	800a1c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a1b4:	4b0f      	ldr	r3, [pc, #60]	@ (800a1f4 <xTaskResumeAll+0x138>)
 800a1b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1ba:	601a      	str	r2, [r3, #0]
 800a1bc:	f3bf 8f4f 	dsb	sy
 800a1c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a1c4:	f000 fe9a 	bl	800aefc <vPortExitCritical>

	return xAlreadyYielded;
 800a1c8:	68bb      	ldr	r3, [r7, #8]
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3710      	adds	r7, #16
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	200006f0 	.word	0x200006f0
 800a1d8:	200006c8 	.word	0x200006c8
 800a1dc:	20000688 	.word	0x20000688
 800a1e0:	200006d0 	.word	0x200006d0
 800a1e4:	200005cc 	.word	0x200005cc
 800a1e8:	200005c8 	.word	0x200005c8
 800a1ec:	200006dc 	.word	0x200006dc
 800a1f0:	200006d8 	.word	0x200006d8
 800a1f4:	e000ed04 	.word	0xe000ed04

0800a1f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b086      	sub	sp, #24
 800a1fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a1fe:	2300      	movs	r3, #0
 800a200:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a202:	4b4f      	ldr	r3, [pc, #316]	@ (800a340 <xTaskIncrementTick+0x148>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	2b00      	cmp	r3, #0
 800a208:	f040 808f 	bne.w	800a32a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a20c:	4b4d      	ldr	r3, [pc, #308]	@ (800a344 <xTaskIncrementTick+0x14c>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	3301      	adds	r3, #1
 800a212:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a214:	4a4b      	ldr	r2, [pc, #300]	@ (800a344 <xTaskIncrementTick+0x14c>)
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d121      	bne.n	800a264 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a220:	4b49      	ldr	r3, [pc, #292]	@ (800a348 <xTaskIncrementTick+0x150>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d00b      	beq.n	800a242 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a22a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a22e:	f383 8811 	msr	BASEPRI, r3
 800a232:	f3bf 8f6f 	isb	sy
 800a236:	f3bf 8f4f 	dsb	sy
 800a23a:	603b      	str	r3, [r7, #0]
}
 800a23c:	bf00      	nop
 800a23e:	bf00      	nop
 800a240:	e7fd      	b.n	800a23e <xTaskIncrementTick+0x46>
 800a242:	4b41      	ldr	r3, [pc, #260]	@ (800a348 <xTaskIncrementTick+0x150>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	60fb      	str	r3, [r7, #12]
 800a248:	4b40      	ldr	r3, [pc, #256]	@ (800a34c <xTaskIncrementTick+0x154>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a3e      	ldr	r2, [pc, #248]	@ (800a348 <xTaskIncrementTick+0x150>)
 800a24e:	6013      	str	r3, [r2, #0]
 800a250:	4a3e      	ldr	r2, [pc, #248]	@ (800a34c <xTaskIncrementTick+0x154>)
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	6013      	str	r3, [r2, #0]
 800a256:	4b3e      	ldr	r3, [pc, #248]	@ (800a350 <xTaskIncrementTick+0x158>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	3301      	adds	r3, #1
 800a25c:	4a3c      	ldr	r2, [pc, #240]	@ (800a350 <xTaskIncrementTick+0x158>)
 800a25e:	6013      	str	r3, [r2, #0]
 800a260:	f000 faa6 	bl	800a7b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a264:	4b3b      	ldr	r3, [pc, #236]	@ (800a354 <xTaskIncrementTick+0x15c>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	693a      	ldr	r2, [r7, #16]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d348      	bcc.n	800a300 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a26e:	4b36      	ldr	r3, [pc, #216]	@ (800a348 <xTaskIncrementTick+0x150>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d104      	bne.n	800a282 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a278:	4b36      	ldr	r3, [pc, #216]	@ (800a354 <xTaskIncrementTick+0x15c>)
 800a27a:	f04f 32ff 	mov.w	r2, #4294967295
 800a27e:	601a      	str	r2, [r3, #0]
					break;
 800a280:	e03e      	b.n	800a300 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a282:	4b31      	ldr	r3, [pc, #196]	@ (800a348 <xTaskIncrementTick+0x150>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a292:	693a      	ldr	r2, [r7, #16]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	429a      	cmp	r2, r3
 800a298:	d203      	bcs.n	800a2a2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a29a:	4a2e      	ldr	r2, [pc, #184]	@ (800a354 <xTaskIncrementTick+0x15c>)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a2a0:	e02e      	b.n	800a300 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	3304      	adds	r3, #4
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7fe fcf8 	bl	8008c9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d004      	beq.n	800a2be <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	3318      	adds	r3, #24
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f7fe fcef 	bl	8008c9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	409a      	lsls	r2, r3
 800a2c6:	4b24      	ldr	r3, [pc, #144]	@ (800a358 <xTaskIncrementTick+0x160>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	4a22      	ldr	r2, [pc, #136]	@ (800a358 <xTaskIncrementTick+0x160>)
 800a2ce:	6013      	str	r3, [r2, #0]
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2d4:	4613      	mov	r3, r2
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	4413      	add	r3, r2
 800a2da:	009b      	lsls	r3, r3, #2
 800a2dc:	4a1f      	ldr	r2, [pc, #124]	@ (800a35c <xTaskIncrementTick+0x164>)
 800a2de:	441a      	add	r2, r3
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	3304      	adds	r3, #4
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	4610      	mov	r0, r2
 800a2e8:	f7fe fc7b 	bl	8008be2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2f0:	4b1b      	ldr	r3, [pc, #108]	@ (800a360 <xTaskIncrementTick+0x168>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d3b9      	bcc.n	800a26e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2fe:	e7b6      	b.n	800a26e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a300:	4b17      	ldr	r3, [pc, #92]	@ (800a360 <xTaskIncrementTick+0x168>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a306:	4915      	ldr	r1, [pc, #84]	@ (800a35c <xTaskIncrementTick+0x164>)
 800a308:	4613      	mov	r3, r2
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	4413      	add	r3, r2
 800a30e:	009b      	lsls	r3, r3, #2
 800a310:	440b      	add	r3, r1
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2b01      	cmp	r3, #1
 800a316:	d901      	bls.n	800a31c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a318:	2301      	movs	r3, #1
 800a31a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a31c:	4b11      	ldr	r3, [pc, #68]	@ (800a364 <xTaskIncrementTick+0x16c>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d007      	beq.n	800a334 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a324:	2301      	movs	r3, #1
 800a326:	617b      	str	r3, [r7, #20]
 800a328:	e004      	b.n	800a334 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a32a:	4b0f      	ldr	r3, [pc, #60]	@ (800a368 <xTaskIncrementTick+0x170>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	3301      	adds	r3, #1
 800a330:	4a0d      	ldr	r2, [pc, #52]	@ (800a368 <xTaskIncrementTick+0x170>)
 800a332:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a334:	697b      	ldr	r3, [r7, #20]
}
 800a336:	4618      	mov	r0, r3
 800a338:	3718      	adds	r7, #24
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	200006f0 	.word	0x200006f0
 800a344:	200006cc 	.word	0x200006cc
 800a348:	20000680 	.word	0x20000680
 800a34c:	20000684 	.word	0x20000684
 800a350:	200006e0 	.word	0x200006e0
 800a354:	200006e8 	.word	0x200006e8
 800a358:	200006d0 	.word	0x200006d0
 800a35c:	200005cc 	.word	0x200005cc
 800a360:	200005c8 	.word	0x200005c8
 800a364:	200006dc 	.word	0x200006dc
 800a368:	200006d8 	.word	0x200006d8

0800a36c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a36c:	b480      	push	{r7}
 800a36e:	b087      	sub	sp, #28
 800a370:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a372:	4b27      	ldr	r3, [pc, #156]	@ (800a410 <vTaskSwitchContext+0xa4>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d003      	beq.n	800a382 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a37a:	4b26      	ldr	r3, [pc, #152]	@ (800a414 <vTaskSwitchContext+0xa8>)
 800a37c:	2201      	movs	r2, #1
 800a37e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a380:	e040      	b.n	800a404 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800a382:	4b24      	ldr	r3, [pc, #144]	@ (800a414 <vTaskSwitchContext+0xa8>)
 800a384:	2200      	movs	r2, #0
 800a386:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a388:	4b23      	ldr	r3, [pc, #140]	@ (800a418 <vTaskSwitchContext+0xac>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	fab3 f383 	clz	r3, r3
 800a394:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a396:	7afb      	ldrb	r3, [r7, #11]
 800a398:	f1c3 031f 	rsb	r3, r3, #31
 800a39c:	617b      	str	r3, [r7, #20]
 800a39e:	491f      	ldr	r1, [pc, #124]	@ (800a41c <vTaskSwitchContext+0xb0>)
 800a3a0:	697a      	ldr	r2, [r7, #20]
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	4413      	add	r3, r2
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	440b      	add	r3, r1
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d10b      	bne.n	800a3ca <vTaskSwitchContext+0x5e>
	__asm volatile
 800a3b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3b6:	f383 8811 	msr	BASEPRI, r3
 800a3ba:	f3bf 8f6f 	isb	sy
 800a3be:	f3bf 8f4f 	dsb	sy
 800a3c2:	607b      	str	r3, [r7, #4]
}
 800a3c4:	bf00      	nop
 800a3c6:	bf00      	nop
 800a3c8:	e7fd      	b.n	800a3c6 <vTaskSwitchContext+0x5a>
 800a3ca:	697a      	ldr	r2, [r7, #20]
 800a3cc:	4613      	mov	r3, r2
 800a3ce:	009b      	lsls	r3, r3, #2
 800a3d0:	4413      	add	r3, r2
 800a3d2:	009b      	lsls	r3, r3, #2
 800a3d4:	4a11      	ldr	r2, [pc, #68]	@ (800a41c <vTaskSwitchContext+0xb0>)
 800a3d6:	4413      	add	r3, r2
 800a3d8:	613b      	str	r3, [r7, #16]
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	685a      	ldr	r2, [r3, #4]
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	605a      	str	r2, [r3, #4]
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	685a      	ldr	r2, [r3, #4]
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	3308      	adds	r3, #8
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d104      	bne.n	800a3fa <vTaskSwitchContext+0x8e>
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	685a      	ldr	r2, [r3, #4]
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	605a      	str	r2, [r3, #4]
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	68db      	ldr	r3, [r3, #12]
 800a400:	4a07      	ldr	r2, [pc, #28]	@ (800a420 <vTaskSwitchContext+0xb4>)
 800a402:	6013      	str	r3, [r2, #0]
}
 800a404:	bf00      	nop
 800a406:	371c      	adds	r7, #28
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr
 800a410:	200006f0 	.word	0x200006f0
 800a414:	200006dc 	.word	0x200006dc
 800a418:	200006d0 	.word	0x200006d0
 800a41c:	200005cc 	.word	0x200005cc
 800a420:	200005c8 	.word	0x200005c8

0800a424 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d10b      	bne.n	800a44c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a438:	f383 8811 	msr	BASEPRI, r3
 800a43c:	f3bf 8f6f 	isb	sy
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	60fb      	str	r3, [r7, #12]
}
 800a446:	bf00      	nop
 800a448:	bf00      	nop
 800a44a:	e7fd      	b.n	800a448 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a44c:	4b07      	ldr	r3, [pc, #28]	@ (800a46c <vTaskPlaceOnEventList+0x48>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	3318      	adds	r3, #24
 800a452:	4619      	mov	r1, r3
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f7fe fbe8 	bl	8008c2a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a45a:	2101      	movs	r1, #1
 800a45c:	6838      	ldr	r0, [r7, #0]
 800a45e:	f000 fb87 	bl	800ab70 <prvAddCurrentTaskToDelayedList>
}
 800a462:	bf00      	nop
 800a464:	3710      	adds	r7, #16
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	200005c8 	.word	0x200005c8

0800a470 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b086      	sub	sp, #24
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	68db      	ldr	r3, [r3, #12]
 800a47e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d10b      	bne.n	800a49e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a48a:	f383 8811 	msr	BASEPRI, r3
 800a48e:	f3bf 8f6f 	isb	sy
 800a492:	f3bf 8f4f 	dsb	sy
 800a496:	60fb      	str	r3, [r7, #12]
}
 800a498:	bf00      	nop
 800a49a:	bf00      	nop
 800a49c:	e7fd      	b.n	800a49a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	3318      	adds	r3, #24
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f7fe fbfa 	bl	8008c9c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4a8:	4b1d      	ldr	r3, [pc, #116]	@ (800a520 <xTaskRemoveFromEventList+0xb0>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d11c      	bne.n	800a4ea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	3304      	adds	r3, #4
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f7fe fbf1 	bl	8008c9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4be:	2201      	movs	r2, #1
 800a4c0:	409a      	lsls	r2, r3
 800a4c2:	4b18      	ldr	r3, [pc, #96]	@ (800a524 <xTaskRemoveFromEventList+0xb4>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	4a16      	ldr	r2, [pc, #88]	@ (800a524 <xTaskRemoveFromEventList+0xb4>)
 800a4ca:	6013      	str	r3, [r2, #0]
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4d0:	4613      	mov	r3, r2
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	4413      	add	r3, r2
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	4a13      	ldr	r2, [pc, #76]	@ (800a528 <xTaskRemoveFromEventList+0xb8>)
 800a4da:	441a      	add	r2, r3
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	3304      	adds	r3, #4
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	4610      	mov	r0, r2
 800a4e4:	f7fe fb7d 	bl	8008be2 <vListInsertEnd>
 800a4e8:	e005      	b.n	800a4f6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	3318      	adds	r3, #24
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	480e      	ldr	r0, [pc, #56]	@ (800a52c <xTaskRemoveFromEventList+0xbc>)
 800a4f2:	f7fe fb76 	bl	8008be2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4fa:	4b0d      	ldr	r3, [pc, #52]	@ (800a530 <xTaskRemoveFromEventList+0xc0>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a500:	429a      	cmp	r2, r3
 800a502:	d905      	bls.n	800a510 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a504:	2301      	movs	r3, #1
 800a506:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a508:	4b0a      	ldr	r3, [pc, #40]	@ (800a534 <xTaskRemoveFromEventList+0xc4>)
 800a50a:	2201      	movs	r2, #1
 800a50c:	601a      	str	r2, [r3, #0]
 800a50e:	e001      	b.n	800a514 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a510:	2300      	movs	r3, #0
 800a512:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a514:	697b      	ldr	r3, [r7, #20]
}
 800a516:	4618      	mov	r0, r3
 800a518:	3718      	adds	r7, #24
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop
 800a520:	200006f0 	.word	0x200006f0
 800a524:	200006d0 	.word	0x200006d0
 800a528:	200005cc 	.word	0x200005cc
 800a52c:	20000688 	.word	0x20000688
 800a530:	200005c8 	.word	0x200005c8
 800a534:	200006dc 	.word	0x200006dc

0800a538 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a538:	b480      	push	{r7}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a540:	4b06      	ldr	r3, [pc, #24]	@ (800a55c <vTaskInternalSetTimeOutState+0x24>)
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a548:	4b05      	ldr	r3, [pc, #20]	@ (800a560 <vTaskInternalSetTimeOutState+0x28>)
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	605a      	str	r2, [r3, #4]
}
 800a550:	bf00      	nop
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr
 800a55c:	200006e0 	.word	0x200006e0
 800a560:	200006cc 	.word	0x200006cc

0800a564 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b088      	sub	sp, #32
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d10b      	bne.n	800a58c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a578:	f383 8811 	msr	BASEPRI, r3
 800a57c:	f3bf 8f6f 	isb	sy
 800a580:	f3bf 8f4f 	dsb	sy
 800a584:	613b      	str	r3, [r7, #16]
}
 800a586:	bf00      	nop
 800a588:	bf00      	nop
 800a58a:	e7fd      	b.n	800a588 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d10b      	bne.n	800a5aa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a596:	f383 8811 	msr	BASEPRI, r3
 800a59a:	f3bf 8f6f 	isb	sy
 800a59e:	f3bf 8f4f 	dsb	sy
 800a5a2:	60fb      	str	r3, [r7, #12]
}
 800a5a4:	bf00      	nop
 800a5a6:	bf00      	nop
 800a5a8:	e7fd      	b.n	800a5a6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a5aa:	f000 fc75 	bl	800ae98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a5ae:	4b1d      	ldr	r3, [pc, #116]	@ (800a624 <xTaskCheckForTimeOut+0xc0>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	69ba      	ldr	r2, [r7, #24]
 800a5ba:	1ad3      	subs	r3, r2, r3
 800a5bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5c6:	d102      	bne.n	800a5ce <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	61fb      	str	r3, [r7, #28]
 800a5cc:	e023      	b.n	800a616 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	4b15      	ldr	r3, [pc, #84]	@ (800a628 <xTaskCheckForTimeOut+0xc4>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d007      	beq.n	800a5ea <xTaskCheckForTimeOut+0x86>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	69ba      	ldr	r2, [r7, #24]
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d302      	bcc.n	800a5ea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	61fb      	str	r3, [r7, #28]
 800a5e8:	e015      	b.n	800a616 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	697a      	ldr	r2, [r7, #20]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d20b      	bcs.n	800a60c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	681a      	ldr	r2, [r3, #0]
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	1ad2      	subs	r2, r2, r3
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f7ff ff99 	bl	800a538 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a606:	2300      	movs	r3, #0
 800a608:	61fb      	str	r3, [r7, #28]
 800a60a:	e004      	b.n	800a616 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	2200      	movs	r2, #0
 800a610:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a612:	2301      	movs	r3, #1
 800a614:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a616:	f000 fc71 	bl	800aefc <vPortExitCritical>

	return xReturn;
 800a61a:	69fb      	ldr	r3, [r7, #28]
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3720      	adds	r7, #32
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}
 800a624:	200006cc 	.word	0x200006cc
 800a628:	200006e0 	.word	0x200006e0

0800a62c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a62c:	b480      	push	{r7}
 800a62e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a630:	4b03      	ldr	r3, [pc, #12]	@ (800a640 <vTaskMissedYield+0x14>)
 800a632:	2201      	movs	r2, #1
 800a634:	601a      	str	r2, [r3, #0]
}
 800a636:	bf00      	nop
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr
 800a640:	200006dc 	.word	0x200006dc

0800a644 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a64c:	f000 f852 	bl	800a6f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a650:	4b06      	ldr	r3, [pc, #24]	@ (800a66c <prvIdleTask+0x28>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	2b01      	cmp	r3, #1
 800a656:	d9f9      	bls.n	800a64c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a658:	4b05      	ldr	r3, [pc, #20]	@ (800a670 <prvIdleTask+0x2c>)
 800a65a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a65e:	601a      	str	r2, [r3, #0]
 800a660:	f3bf 8f4f 	dsb	sy
 800a664:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a668:	e7f0      	b.n	800a64c <prvIdleTask+0x8>
 800a66a:	bf00      	nop
 800a66c:	200005cc 	.word	0x200005cc
 800a670:	e000ed04 	.word	0xe000ed04

0800a674 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b082      	sub	sp, #8
 800a678:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a67a:	2300      	movs	r3, #0
 800a67c:	607b      	str	r3, [r7, #4]
 800a67e:	e00c      	b.n	800a69a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	4613      	mov	r3, r2
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	4413      	add	r3, r2
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	4a12      	ldr	r2, [pc, #72]	@ (800a6d4 <prvInitialiseTaskLists+0x60>)
 800a68c:	4413      	add	r3, r2
 800a68e:	4618      	mov	r0, r3
 800a690:	f7fe fa7a 	bl	8008b88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	3301      	adds	r3, #1
 800a698:	607b      	str	r3, [r7, #4]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2b06      	cmp	r3, #6
 800a69e:	d9ef      	bls.n	800a680 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a6a0:	480d      	ldr	r0, [pc, #52]	@ (800a6d8 <prvInitialiseTaskLists+0x64>)
 800a6a2:	f7fe fa71 	bl	8008b88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a6a6:	480d      	ldr	r0, [pc, #52]	@ (800a6dc <prvInitialiseTaskLists+0x68>)
 800a6a8:	f7fe fa6e 	bl	8008b88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a6ac:	480c      	ldr	r0, [pc, #48]	@ (800a6e0 <prvInitialiseTaskLists+0x6c>)
 800a6ae:	f7fe fa6b 	bl	8008b88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a6b2:	480c      	ldr	r0, [pc, #48]	@ (800a6e4 <prvInitialiseTaskLists+0x70>)
 800a6b4:	f7fe fa68 	bl	8008b88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a6b8:	480b      	ldr	r0, [pc, #44]	@ (800a6e8 <prvInitialiseTaskLists+0x74>)
 800a6ba:	f7fe fa65 	bl	8008b88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a6be:	4b0b      	ldr	r3, [pc, #44]	@ (800a6ec <prvInitialiseTaskLists+0x78>)
 800a6c0:	4a05      	ldr	r2, [pc, #20]	@ (800a6d8 <prvInitialiseTaskLists+0x64>)
 800a6c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a6c4:	4b0a      	ldr	r3, [pc, #40]	@ (800a6f0 <prvInitialiseTaskLists+0x7c>)
 800a6c6:	4a05      	ldr	r2, [pc, #20]	@ (800a6dc <prvInitialiseTaskLists+0x68>)
 800a6c8:	601a      	str	r2, [r3, #0]
}
 800a6ca:	bf00      	nop
 800a6cc:	3708      	adds	r7, #8
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	200005cc 	.word	0x200005cc
 800a6d8:	20000658 	.word	0x20000658
 800a6dc:	2000066c 	.word	0x2000066c
 800a6e0:	20000688 	.word	0x20000688
 800a6e4:	2000069c 	.word	0x2000069c
 800a6e8:	200006b4 	.word	0x200006b4
 800a6ec:	20000680 	.word	0x20000680
 800a6f0:	20000684 	.word	0x20000684

0800a6f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b082      	sub	sp, #8
 800a6f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a6fa:	e019      	b.n	800a730 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a6fc:	f000 fbcc 	bl	800ae98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a700:	4b10      	ldr	r3, [pc, #64]	@ (800a744 <prvCheckTasksWaitingTermination+0x50>)
 800a702:	68db      	ldr	r3, [r3, #12]
 800a704:	68db      	ldr	r3, [r3, #12]
 800a706:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	3304      	adds	r3, #4
 800a70c:	4618      	mov	r0, r3
 800a70e:	f7fe fac5 	bl	8008c9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a712:	4b0d      	ldr	r3, [pc, #52]	@ (800a748 <prvCheckTasksWaitingTermination+0x54>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	3b01      	subs	r3, #1
 800a718:	4a0b      	ldr	r2, [pc, #44]	@ (800a748 <prvCheckTasksWaitingTermination+0x54>)
 800a71a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a71c:	4b0b      	ldr	r3, [pc, #44]	@ (800a74c <prvCheckTasksWaitingTermination+0x58>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	3b01      	subs	r3, #1
 800a722:	4a0a      	ldr	r2, [pc, #40]	@ (800a74c <prvCheckTasksWaitingTermination+0x58>)
 800a724:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a726:	f000 fbe9 	bl	800aefc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 f810 	bl	800a750 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a730:	4b06      	ldr	r3, [pc, #24]	@ (800a74c <prvCheckTasksWaitingTermination+0x58>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d1e1      	bne.n	800a6fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a738:	bf00      	nop
 800a73a:	bf00      	nop
 800a73c:	3708      	adds	r7, #8
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	2000069c 	.word	0x2000069c
 800a748:	200006c8 	.word	0x200006c8
 800a74c:	200006b0 	.word	0x200006b0

0800a750 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d108      	bne.n	800a774 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a766:	4618      	mov	r0, r3
 800a768:	f000 fd86 	bl	800b278 <vPortFree>
				vPortFree( pxTCB );
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f000 fd83 	bl	800b278 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a772:	e019      	b.n	800a7a8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d103      	bne.n	800a786 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 fd7a 	bl	800b278 <vPortFree>
	}
 800a784:	e010      	b.n	800a7a8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a78c:	2b02      	cmp	r3, #2
 800a78e:	d00b      	beq.n	800a7a8 <prvDeleteTCB+0x58>
	__asm volatile
 800a790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a794:	f383 8811 	msr	BASEPRI, r3
 800a798:	f3bf 8f6f 	isb	sy
 800a79c:	f3bf 8f4f 	dsb	sy
 800a7a0:	60fb      	str	r3, [r7, #12]
}
 800a7a2:	bf00      	nop
 800a7a4:	bf00      	nop
 800a7a6:	e7fd      	b.n	800a7a4 <prvDeleteTCB+0x54>
	}
 800a7a8:	bf00      	nop
 800a7aa:	3710      	adds	r7, #16
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}

0800a7b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b083      	sub	sp, #12
 800a7b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7b6:	4b0c      	ldr	r3, [pc, #48]	@ (800a7e8 <prvResetNextTaskUnblockTime+0x38>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d104      	bne.n	800a7ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a7c0:	4b0a      	ldr	r3, [pc, #40]	@ (800a7ec <prvResetNextTaskUnblockTime+0x3c>)
 800a7c2:	f04f 32ff 	mov.w	r2, #4294967295
 800a7c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a7c8:	e008      	b.n	800a7dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7ca:	4b07      	ldr	r3, [pc, #28]	@ (800a7e8 <prvResetNextTaskUnblockTime+0x38>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	68db      	ldr	r3, [r3, #12]
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	4a04      	ldr	r2, [pc, #16]	@ (800a7ec <prvResetNextTaskUnblockTime+0x3c>)
 800a7da:	6013      	str	r3, [r2, #0]
}
 800a7dc:	bf00      	nop
 800a7de:	370c      	adds	r7, #12
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr
 800a7e8:	20000680 	.word	0x20000680
 800a7ec:	200006e8 	.word	0x200006e8

0800a7f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a7f6:	4b0b      	ldr	r3, [pc, #44]	@ (800a824 <xTaskGetSchedulerState+0x34>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d102      	bne.n	800a804 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a7fe:	2301      	movs	r3, #1
 800a800:	607b      	str	r3, [r7, #4]
 800a802:	e008      	b.n	800a816 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a804:	4b08      	ldr	r3, [pc, #32]	@ (800a828 <xTaskGetSchedulerState+0x38>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d102      	bne.n	800a812 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a80c:	2302      	movs	r3, #2
 800a80e:	607b      	str	r3, [r7, #4]
 800a810:	e001      	b.n	800a816 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a812:	2300      	movs	r3, #0
 800a814:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a816:	687b      	ldr	r3, [r7, #4]
	}
 800a818:	4618      	mov	r0, r3
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr
 800a824:	200006d4 	.word	0x200006d4
 800a828:	200006f0 	.word	0x200006f0

0800a82c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a838:	2300      	movs	r3, #0
 800a83a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d05e      	beq.n	800a900 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a846:	4b31      	ldr	r3, [pc, #196]	@ (800a90c <xTaskPriorityInherit+0xe0>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d24e      	bcs.n	800a8ee <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	699b      	ldr	r3, [r3, #24]
 800a854:	2b00      	cmp	r3, #0
 800a856:	db06      	blt.n	800a866 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a858:	4b2c      	ldr	r3, [pc, #176]	@ (800a90c <xTaskPriorityInherit+0xe0>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a85e:	f1c3 0207 	rsb	r2, r3, #7
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	6959      	ldr	r1, [r3, #20]
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a86e:	4613      	mov	r3, r2
 800a870:	009b      	lsls	r3, r3, #2
 800a872:	4413      	add	r3, r2
 800a874:	009b      	lsls	r3, r3, #2
 800a876:	4a26      	ldr	r2, [pc, #152]	@ (800a910 <xTaskPriorityInherit+0xe4>)
 800a878:	4413      	add	r3, r2
 800a87a:	4299      	cmp	r1, r3
 800a87c:	d12f      	bne.n	800a8de <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	3304      	adds	r3, #4
 800a882:	4618      	mov	r0, r3
 800a884:	f7fe fa0a 	bl	8008c9c <uxListRemove>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d10a      	bne.n	800a8a4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a892:	2201      	movs	r2, #1
 800a894:	fa02 f303 	lsl.w	r3, r2, r3
 800a898:	43da      	mvns	r2, r3
 800a89a:	4b1e      	ldr	r3, [pc, #120]	@ (800a914 <xTaskPriorityInherit+0xe8>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4013      	ands	r3, r2
 800a8a0:	4a1c      	ldr	r2, [pc, #112]	@ (800a914 <xTaskPriorityInherit+0xe8>)
 800a8a2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a8a4:	4b19      	ldr	r3, [pc, #100]	@ (800a90c <xTaskPriorityInherit+0xe0>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	409a      	lsls	r2, r3
 800a8b6:	4b17      	ldr	r3, [pc, #92]	@ (800a914 <xTaskPriorityInherit+0xe8>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	4a15      	ldr	r2, [pc, #84]	@ (800a914 <xTaskPriorityInherit+0xe8>)
 800a8be:	6013      	str	r3, [r2, #0]
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8c4:	4613      	mov	r3, r2
 800a8c6:	009b      	lsls	r3, r3, #2
 800a8c8:	4413      	add	r3, r2
 800a8ca:	009b      	lsls	r3, r3, #2
 800a8cc:	4a10      	ldr	r2, [pc, #64]	@ (800a910 <xTaskPriorityInherit+0xe4>)
 800a8ce:	441a      	add	r2, r3
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	3304      	adds	r3, #4
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	4610      	mov	r0, r2
 800a8d8:	f7fe f983 	bl	8008be2 <vListInsertEnd>
 800a8dc:	e004      	b.n	800a8e8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a8de:	4b0b      	ldr	r3, [pc, #44]	@ (800a90c <xTaskPriorityInherit+0xe0>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	60fb      	str	r3, [r7, #12]
 800a8ec:	e008      	b.n	800a900 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a8f2:	4b06      	ldr	r3, [pc, #24]	@ (800a90c <xTaskPriorityInherit+0xe0>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d201      	bcs.n	800a900 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a900:	68fb      	ldr	r3, [r7, #12]
	}
 800a902:	4618      	mov	r0, r3
 800a904:	3710      	adds	r7, #16
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}
 800a90a:	bf00      	nop
 800a90c:	200005c8 	.word	0x200005c8
 800a910:	200005cc 	.word	0x200005cc
 800a914:	200006d0 	.word	0x200006d0

0800a918 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b086      	sub	sp, #24
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a924:	2300      	movs	r3, #0
 800a926:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d070      	beq.n	800aa10 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a92e:	4b3b      	ldr	r3, [pc, #236]	@ (800aa1c <xTaskPriorityDisinherit+0x104>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	693a      	ldr	r2, [r7, #16]
 800a934:	429a      	cmp	r2, r3
 800a936:	d00b      	beq.n	800a950 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a93c:	f383 8811 	msr	BASEPRI, r3
 800a940:	f3bf 8f6f 	isb	sy
 800a944:	f3bf 8f4f 	dsb	sy
 800a948:	60fb      	str	r3, [r7, #12]
}
 800a94a:	bf00      	nop
 800a94c:	bf00      	nop
 800a94e:	e7fd      	b.n	800a94c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a954:	2b00      	cmp	r3, #0
 800a956:	d10b      	bne.n	800a970 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a95c:	f383 8811 	msr	BASEPRI, r3
 800a960:	f3bf 8f6f 	isb	sy
 800a964:	f3bf 8f4f 	dsb	sy
 800a968:	60bb      	str	r3, [r7, #8]
}
 800a96a:	bf00      	nop
 800a96c:	bf00      	nop
 800a96e:	e7fd      	b.n	800a96c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a974:	1e5a      	subs	r2, r3, #1
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a982:	429a      	cmp	r2, r3
 800a984:	d044      	beq.n	800aa10 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d140      	bne.n	800aa10 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	3304      	adds	r3, #4
 800a992:	4618      	mov	r0, r3
 800a994:	f7fe f982 	bl	8008c9c <uxListRemove>
 800a998:	4603      	mov	r3, r0
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d115      	bne.n	800a9ca <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9a2:	491f      	ldr	r1, [pc, #124]	@ (800aa20 <xTaskPriorityDisinherit+0x108>)
 800a9a4:	4613      	mov	r3, r2
 800a9a6:	009b      	lsls	r3, r3, #2
 800a9a8:	4413      	add	r3, r2
 800a9aa:	009b      	lsls	r3, r3, #2
 800a9ac:	440b      	add	r3, r1
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d10a      	bne.n	800a9ca <xTaskPriorityDisinherit+0xb2>
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a9be:	43da      	mvns	r2, r3
 800a9c0:	4b18      	ldr	r3, [pc, #96]	@ (800aa24 <xTaskPriorityDisinherit+0x10c>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4013      	ands	r3, r2
 800a9c6:	4a17      	ldr	r2, [pc, #92]	@ (800aa24 <xTaskPriorityDisinherit+0x10c>)
 800a9c8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9d6:	f1c3 0207 	rsb	r2, r3, #7
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	409a      	lsls	r2, r3
 800a9e6:	4b0f      	ldr	r3, [pc, #60]	@ (800aa24 <xTaskPriorityDisinherit+0x10c>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	4a0d      	ldr	r2, [pc, #52]	@ (800aa24 <xTaskPriorityDisinherit+0x10c>)
 800a9ee:	6013      	str	r3, [r2, #0]
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9f4:	4613      	mov	r3, r2
 800a9f6:	009b      	lsls	r3, r3, #2
 800a9f8:	4413      	add	r3, r2
 800a9fa:	009b      	lsls	r3, r3, #2
 800a9fc:	4a08      	ldr	r2, [pc, #32]	@ (800aa20 <xTaskPriorityDisinherit+0x108>)
 800a9fe:	441a      	add	r2, r3
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	3304      	adds	r3, #4
 800aa04:	4619      	mov	r1, r3
 800aa06:	4610      	mov	r0, r2
 800aa08:	f7fe f8eb 	bl	8008be2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aa10:	697b      	ldr	r3, [r7, #20]
	}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3718      	adds	r7, #24
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}
 800aa1a:	bf00      	nop
 800aa1c:	200005c8 	.word	0x200005c8
 800aa20:	200005cc 	.word	0x200005cc
 800aa24:	200006d0 	.word	0x200006d0

0800aa28 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b088      	sub	sp, #32
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800aa36:	2301      	movs	r3, #1
 800aa38:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d079      	beq.n	800ab34 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800aa40:	69bb      	ldr	r3, [r7, #24]
 800aa42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d10b      	bne.n	800aa60 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800aa48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa4c:	f383 8811 	msr	BASEPRI, r3
 800aa50:	f3bf 8f6f 	isb	sy
 800aa54:	f3bf 8f4f 	dsb	sy
 800aa58:	60fb      	str	r3, [r7, #12]
}
 800aa5a:	bf00      	nop
 800aa5c:	bf00      	nop
 800aa5e:	e7fd      	b.n	800aa5c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800aa60:	69bb      	ldr	r3, [r7, #24]
 800aa62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa64:	683a      	ldr	r2, [r7, #0]
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d902      	bls.n	800aa70 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	61fb      	str	r3, [r7, #28]
 800aa6e:	e002      	b.n	800aa76 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800aa70:	69bb      	ldr	r3, [r7, #24]
 800aa72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa74:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800aa76:	69bb      	ldr	r3, [r7, #24]
 800aa78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa7a:	69fa      	ldr	r2, [r7, #28]
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d059      	beq.n	800ab34 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800aa80:	69bb      	ldr	r3, [r7, #24]
 800aa82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aa84:	697a      	ldr	r2, [r7, #20]
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d154      	bne.n	800ab34 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800aa8a:	4b2c      	ldr	r3, [pc, #176]	@ (800ab3c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	69ba      	ldr	r2, [r7, #24]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d10b      	bne.n	800aaac <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800aa94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa98:	f383 8811 	msr	BASEPRI, r3
 800aa9c:	f3bf 8f6f 	isb	sy
 800aaa0:	f3bf 8f4f 	dsb	sy
 800aaa4:	60bb      	str	r3, [r7, #8]
}
 800aaa6:	bf00      	nop
 800aaa8:	bf00      	nop
 800aaaa:	e7fd      	b.n	800aaa8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800aaac:	69bb      	ldr	r3, [r7, #24]
 800aaae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aab0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800aab2:	69bb      	ldr	r3, [r7, #24]
 800aab4:	69fa      	ldr	r2, [r7, #28]
 800aab6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aab8:	69bb      	ldr	r3, [r7, #24]
 800aaba:	699b      	ldr	r3, [r3, #24]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	db04      	blt.n	800aaca <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aac0:	69fb      	ldr	r3, [r7, #28]
 800aac2:	f1c3 0207 	rsb	r2, r3, #7
 800aac6:	69bb      	ldr	r3, [r7, #24]
 800aac8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800aaca:	69bb      	ldr	r3, [r7, #24]
 800aacc:	6959      	ldr	r1, [r3, #20]
 800aace:	693a      	ldr	r2, [r7, #16]
 800aad0:	4613      	mov	r3, r2
 800aad2:	009b      	lsls	r3, r3, #2
 800aad4:	4413      	add	r3, r2
 800aad6:	009b      	lsls	r3, r3, #2
 800aad8:	4a19      	ldr	r2, [pc, #100]	@ (800ab40 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800aada:	4413      	add	r3, r2
 800aadc:	4299      	cmp	r1, r3
 800aade:	d129      	bne.n	800ab34 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aae0:	69bb      	ldr	r3, [r7, #24]
 800aae2:	3304      	adds	r3, #4
 800aae4:	4618      	mov	r0, r3
 800aae6:	f7fe f8d9 	bl	8008c9c <uxListRemove>
 800aaea:	4603      	mov	r3, r0
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d10a      	bne.n	800ab06 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800aaf0:	69bb      	ldr	r3, [r7, #24]
 800aaf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	fa02 f303 	lsl.w	r3, r2, r3
 800aafa:	43da      	mvns	r2, r3
 800aafc:	4b11      	ldr	r3, [pc, #68]	@ (800ab44 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4013      	ands	r3, r2
 800ab02:	4a10      	ldr	r2, [pc, #64]	@ (800ab44 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800ab04:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ab06:	69bb      	ldr	r3, [r7, #24]
 800ab08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	409a      	lsls	r2, r3
 800ab0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ab44 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4313      	orrs	r3, r2
 800ab14:	4a0b      	ldr	r2, [pc, #44]	@ (800ab44 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800ab16:	6013      	str	r3, [r2, #0]
 800ab18:	69bb      	ldr	r3, [r7, #24]
 800ab1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab1c:	4613      	mov	r3, r2
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	4413      	add	r3, r2
 800ab22:	009b      	lsls	r3, r3, #2
 800ab24:	4a06      	ldr	r2, [pc, #24]	@ (800ab40 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ab26:	441a      	add	r2, r3
 800ab28:	69bb      	ldr	r3, [r7, #24]
 800ab2a:	3304      	adds	r3, #4
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	4610      	mov	r0, r2
 800ab30:	f7fe f857 	bl	8008be2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ab34:	bf00      	nop
 800ab36:	3720      	adds	r7, #32
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	200005c8 	.word	0x200005c8
 800ab40:	200005cc 	.word	0x200005cc
 800ab44:	200006d0 	.word	0x200006d0

0800ab48 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ab48:	b480      	push	{r7}
 800ab4a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ab4c:	4b07      	ldr	r3, [pc, #28]	@ (800ab6c <pvTaskIncrementMutexHeldCount+0x24>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d004      	beq.n	800ab5e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ab54:	4b05      	ldr	r3, [pc, #20]	@ (800ab6c <pvTaskIncrementMutexHeldCount+0x24>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ab5a:	3201      	adds	r2, #1
 800ab5c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800ab5e:	4b03      	ldr	r3, [pc, #12]	@ (800ab6c <pvTaskIncrementMutexHeldCount+0x24>)
 800ab60:	681b      	ldr	r3, [r3, #0]
	}
 800ab62:	4618      	mov	r0, r3
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr
 800ab6c:	200005c8 	.word	0x200005c8

0800ab70 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b084      	sub	sp, #16
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ab7a:	4b29      	ldr	r3, [pc, #164]	@ (800ac20 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab80:	4b28      	ldr	r3, [pc, #160]	@ (800ac24 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	3304      	adds	r3, #4
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7fe f888 	bl	8008c9c <uxListRemove>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d10b      	bne.n	800abaa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ab92:	4b24      	ldr	r3, [pc, #144]	@ (800ac24 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab98:	2201      	movs	r2, #1
 800ab9a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab9e:	43da      	mvns	r2, r3
 800aba0:	4b21      	ldr	r3, [pc, #132]	@ (800ac28 <prvAddCurrentTaskToDelayedList+0xb8>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4013      	ands	r3, r2
 800aba6:	4a20      	ldr	r2, [pc, #128]	@ (800ac28 <prvAddCurrentTaskToDelayedList+0xb8>)
 800aba8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abb0:	d10a      	bne.n	800abc8 <prvAddCurrentTaskToDelayedList+0x58>
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d007      	beq.n	800abc8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abb8:	4b1a      	ldr	r3, [pc, #104]	@ (800ac24 <prvAddCurrentTaskToDelayedList+0xb4>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	3304      	adds	r3, #4
 800abbe:	4619      	mov	r1, r3
 800abc0:	481a      	ldr	r0, [pc, #104]	@ (800ac2c <prvAddCurrentTaskToDelayedList+0xbc>)
 800abc2:	f7fe f80e 	bl	8008be2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800abc6:	e026      	b.n	800ac16 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800abc8:	68fa      	ldr	r2, [r7, #12]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4413      	add	r3, r2
 800abce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800abd0:	4b14      	ldr	r3, [pc, #80]	@ (800ac24 <prvAddCurrentTaskToDelayedList+0xb4>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	68ba      	ldr	r2, [r7, #8]
 800abd6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800abd8:	68ba      	ldr	r2, [r7, #8]
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	429a      	cmp	r2, r3
 800abde:	d209      	bcs.n	800abf4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abe0:	4b13      	ldr	r3, [pc, #76]	@ (800ac30 <prvAddCurrentTaskToDelayedList+0xc0>)
 800abe2:	681a      	ldr	r2, [r3, #0]
 800abe4:	4b0f      	ldr	r3, [pc, #60]	@ (800ac24 <prvAddCurrentTaskToDelayedList+0xb4>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	3304      	adds	r3, #4
 800abea:	4619      	mov	r1, r3
 800abec:	4610      	mov	r0, r2
 800abee:	f7fe f81c 	bl	8008c2a <vListInsert>
}
 800abf2:	e010      	b.n	800ac16 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abf4:	4b0f      	ldr	r3, [pc, #60]	@ (800ac34 <prvAddCurrentTaskToDelayedList+0xc4>)
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	4b0a      	ldr	r3, [pc, #40]	@ (800ac24 <prvAddCurrentTaskToDelayedList+0xb4>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	3304      	adds	r3, #4
 800abfe:	4619      	mov	r1, r3
 800ac00:	4610      	mov	r0, r2
 800ac02:	f7fe f812 	bl	8008c2a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ac06:	4b0c      	ldr	r3, [pc, #48]	@ (800ac38 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	68ba      	ldr	r2, [r7, #8]
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d202      	bcs.n	800ac16 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ac10:	4a09      	ldr	r2, [pc, #36]	@ (800ac38 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	6013      	str	r3, [r2, #0]
}
 800ac16:	bf00      	nop
 800ac18:	3710      	adds	r7, #16
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
 800ac1e:	bf00      	nop
 800ac20:	200006cc 	.word	0x200006cc
 800ac24:	200005c8 	.word	0x200005c8
 800ac28:	200006d0 	.word	0x200006d0
 800ac2c:	200006b4 	.word	0x200006b4
 800ac30:	20000684 	.word	0x20000684
 800ac34:	20000680 	.word	0x20000680
 800ac38:	200006e8 	.word	0x200006e8

0800ac3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b085      	sub	sp, #20
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	60f8      	str	r0, [r7, #12]
 800ac44:	60b9      	str	r1, [r7, #8]
 800ac46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	3b04      	subs	r3, #4
 800ac4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ac54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	3b04      	subs	r3, #4
 800ac5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	f023 0201 	bic.w	r2, r3, #1
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	3b04      	subs	r3, #4
 800ac6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ac6c:	4a0c      	ldr	r2, [pc, #48]	@ (800aca0 <pxPortInitialiseStack+0x64>)
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	3b14      	subs	r3, #20
 800ac76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	3b04      	subs	r3, #4
 800ac82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f06f 0202 	mvn.w	r2, #2
 800ac8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	3b20      	subs	r3, #32
 800ac90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ac92:	68fb      	ldr	r3, [r7, #12]
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3714      	adds	r7, #20
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr
 800aca0:	0800aca5 	.word	0x0800aca5

0800aca4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aca4:	b480      	push	{r7}
 800aca6:	b085      	sub	sp, #20
 800aca8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800acaa:	2300      	movs	r3, #0
 800acac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800acae:	4b13      	ldr	r3, [pc, #76]	@ (800acfc <prvTaskExitError+0x58>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acb6:	d00b      	beq.n	800acd0 <prvTaskExitError+0x2c>
	__asm volatile
 800acb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acbc:	f383 8811 	msr	BASEPRI, r3
 800acc0:	f3bf 8f6f 	isb	sy
 800acc4:	f3bf 8f4f 	dsb	sy
 800acc8:	60fb      	str	r3, [r7, #12]
}
 800acca:	bf00      	nop
 800accc:	bf00      	nop
 800acce:	e7fd      	b.n	800accc <prvTaskExitError+0x28>
	__asm volatile
 800acd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acd4:	f383 8811 	msr	BASEPRI, r3
 800acd8:	f3bf 8f6f 	isb	sy
 800acdc:	f3bf 8f4f 	dsb	sy
 800ace0:	60bb      	str	r3, [r7, #8]
}
 800ace2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ace4:	bf00      	nop
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d0fc      	beq.n	800ace6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800acec:	bf00      	nop
 800acee:	bf00      	nop
 800acf0:	3714      	adds	r7, #20
 800acf2:	46bd      	mov	sp, r7
 800acf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf8:	4770      	bx	lr
 800acfa:	bf00      	nop
 800acfc:	20000024 	.word	0x20000024

0800ad00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ad00:	4b07      	ldr	r3, [pc, #28]	@ (800ad20 <pxCurrentTCBConst2>)
 800ad02:	6819      	ldr	r1, [r3, #0]
 800ad04:	6808      	ldr	r0, [r1, #0]
 800ad06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad0a:	f380 8809 	msr	PSP, r0
 800ad0e:	f3bf 8f6f 	isb	sy
 800ad12:	f04f 0000 	mov.w	r0, #0
 800ad16:	f380 8811 	msr	BASEPRI, r0
 800ad1a:	4770      	bx	lr
 800ad1c:	f3af 8000 	nop.w

0800ad20 <pxCurrentTCBConst2>:
 800ad20:	200005c8 	.word	0x200005c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ad24:	bf00      	nop
 800ad26:	bf00      	nop

0800ad28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ad28:	4808      	ldr	r0, [pc, #32]	@ (800ad4c <prvPortStartFirstTask+0x24>)
 800ad2a:	6800      	ldr	r0, [r0, #0]
 800ad2c:	6800      	ldr	r0, [r0, #0]
 800ad2e:	f380 8808 	msr	MSP, r0
 800ad32:	f04f 0000 	mov.w	r0, #0
 800ad36:	f380 8814 	msr	CONTROL, r0
 800ad3a:	b662      	cpsie	i
 800ad3c:	b661      	cpsie	f
 800ad3e:	f3bf 8f4f 	dsb	sy
 800ad42:	f3bf 8f6f 	isb	sy
 800ad46:	df00      	svc	0
 800ad48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ad4a:	bf00      	nop
 800ad4c:	e000ed08 	.word	0xe000ed08

0800ad50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b086      	sub	sp, #24
 800ad54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ad56:	4b47      	ldr	r3, [pc, #284]	@ (800ae74 <xPortStartScheduler+0x124>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a47      	ldr	r2, [pc, #284]	@ (800ae78 <xPortStartScheduler+0x128>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d10b      	bne.n	800ad78 <xPortStartScheduler+0x28>
	__asm volatile
 800ad60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad64:	f383 8811 	msr	BASEPRI, r3
 800ad68:	f3bf 8f6f 	isb	sy
 800ad6c:	f3bf 8f4f 	dsb	sy
 800ad70:	613b      	str	r3, [r7, #16]
}
 800ad72:	bf00      	nop
 800ad74:	bf00      	nop
 800ad76:	e7fd      	b.n	800ad74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ad78:	4b3e      	ldr	r3, [pc, #248]	@ (800ae74 <xPortStartScheduler+0x124>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4a3f      	ldr	r2, [pc, #252]	@ (800ae7c <xPortStartScheduler+0x12c>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d10b      	bne.n	800ad9a <xPortStartScheduler+0x4a>
	__asm volatile
 800ad82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad86:	f383 8811 	msr	BASEPRI, r3
 800ad8a:	f3bf 8f6f 	isb	sy
 800ad8e:	f3bf 8f4f 	dsb	sy
 800ad92:	60fb      	str	r3, [r7, #12]
}
 800ad94:	bf00      	nop
 800ad96:	bf00      	nop
 800ad98:	e7fd      	b.n	800ad96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ad9a:	4b39      	ldr	r3, [pc, #228]	@ (800ae80 <xPortStartScheduler+0x130>)
 800ad9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	b2db      	uxtb	r3, r3
 800ada4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	22ff      	movs	r2, #255	@ 0xff
 800adaa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	781b      	ldrb	r3, [r3, #0]
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800adb4:	78fb      	ldrb	r3, [r7, #3]
 800adb6:	b2db      	uxtb	r3, r3
 800adb8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800adbc:	b2da      	uxtb	r2, r3
 800adbe:	4b31      	ldr	r3, [pc, #196]	@ (800ae84 <xPortStartScheduler+0x134>)
 800adc0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800adc2:	4b31      	ldr	r3, [pc, #196]	@ (800ae88 <xPortStartScheduler+0x138>)
 800adc4:	2207      	movs	r2, #7
 800adc6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800adc8:	e009      	b.n	800adde <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800adca:	4b2f      	ldr	r3, [pc, #188]	@ (800ae88 <xPortStartScheduler+0x138>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	3b01      	subs	r3, #1
 800add0:	4a2d      	ldr	r2, [pc, #180]	@ (800ae88 <xPortStartScheduler+0x138>)
 800add2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800add4:	78fb      	ldrb	r3, [r7, #3]
 800add6:	b2db      	uxtb	r3, r3
 800add8:	005b      	lsls	r3, r3, #1
 800adda:	b2db      	uxtb	r3, r3
 800addc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800adde:	78fb      	ldrb	r3, [r7, #3]
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ade6:	2b80      	cmp	r3, #128	@ 0x80
 800ade8:	d0ef      	beq.n	800adca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800adea:	4b27      	ldr	r3, [pc, #156]	@ (800ae88 <xPortStartScheduler+0x138>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f1c3 0307 	rsb	r3, r3, #7
 800adf2:	2b04      	cmp	r3, #4
 800adf4:	d00b      	beq.n	800ae0e <xPortStartScheduler+0xbe>
	__asm volatile
 800adf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adfa:	f383 8811 	msr	BASEPRI, r3
 800adfe:	f3bf 8f6f 	isb	sy
 800ae02:	f3bf 8f4f 	dsb	sy
 800ae06:	60bb      	str	r3, [r7, #8]
}
 800ae08:	bf00      	nop
 800ae0a:	bf00      	nop
 800ae0c:	e7fd      	b.n	800ae0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ae0e:	4b1e      	ldr	r3, [pc, #120]	@ (800ae88 <xPortStartScheduler+0x138>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	021b      	lsls	r3, r3, #8
 800ae14:	4a1c      	ldr	r2, [pc, #112]	@ (800ae88 <xPortStartScheduler+0x138>)
 800ae16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ae18:	4b1b      	ldr	r3, [pc, #108]	@ (800ae88 <xPortStartScheduler+0x138>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ae20:	4a19      	ldr	r2, [pc, #100]	@ (800ae88 <xPortStartScheduler+0x138>)
 800ae22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	b2da      	uxtb	r2, r3
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ae2c:	4b17      	ldr	r3, [pc, #92]	@ (800ae8c <xPortStartScheduler+0x13c>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	4a16      	ldr	r2, [pc, #88]	@ (800ae8c <xPortStartScheduler+0x13c>)
 800ae32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ae36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ae38:	4b14      	ldr	r3, [pc, #80]	@ (800ae8c <xPortStartScheduler+0x13c>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4a13      	ldr	r2, [pc, #76]	@ (800ae8c <xPortStartScheduler+0x13c>)
 800ae3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ae42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ae44:	f000 f8da 	bl	800affc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ae48:	4b11      	ldr	r3, [pc, #68]	@ (800ae90 <xPortStartScheduler+0x140>)
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ae4e:	f000 f8f9 	bl	800b044 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ae52:	4b10      	ldr	r3, [pc, #64]	@ (800ae94 <xPortStartScheduler+0x144>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	4a0f      	ldr	r2, [pc, #60]	@ (800ae94 <xPortStartScheduler+0x144>)
 800ae58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ae5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ae5e:	f7ff ff63 	bl	800ad28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ae62:	f7ff fa83 	bl	800a36c <vTaskSwitchContext>
	prvTaskExitError();
 800ae66:	f7ff ff1d 	bl	800aca4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ae6a:	2300      	movs	r3, #0
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3718      	adds	r7, #24
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	e000ed00 	.word	0xe000ed00
 800ae78:	410fc271 	.word	0x410fc271
 800ae7c:	410fc270 	.word	0x410fc270
 800ae80:	e000e400 	.word	0xe000e400
 800ae84:	200006f4 	.word	0x200006f4
 800ae88:	200006f8 	.word	0x200006f8
 800ae8c:	e000ed20 	.word	0xe000ed20
 800ae90:	20000024 	.word	0x20000024
 800ae94:	e000ef34 	.word	0xe000ef34

0800ae98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b083      	sub	sp, #12
 800ae9c:	af00      	add	r7, sp, #0
	__asm volatile
 800ae9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aea2:	f383 8811 	msr	BASEPRI, r3
 800aea6:	f3bf 8f6f 	isb	sy
 800aeaa:	f3bf 8f4f 	dsb	sy
 800aeae:	607b      	str	r3, [r7, #4]
}
 800aeb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aeb2:	4b10      	ldr	r3, [pc, #64]	@ (800aef4 <vPortEnterCritical+0x5c>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	4a0e      	ldr	r2, [pc, #56]	@ (800aef4 <vPortEnterCritical+0x5c>)
 800aeba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aebc:	4b0d      	ldr	r3, [pc, #52]	@ (800aef4 <vPortEnterCritical+0x5c>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	2b01      	cmp	r3, #1
 800aec2:	d110      	bne.n	800aee6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aec4:	4b0c      	ldr	r3, [pc, #48]	@ (800aef8 <vPortEnterCritical+0x60>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	b2db      	uxtb	r3, r3
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d00b      	beq.n	800aee6 <vPortEnterCritical+0x4e>
	__asm volatile
 800aece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aed2:	f383 8811 	msr	BASEPRI, r3
 800aed6:	f3bf 8f6f 	isb	sy
 800aeda:	f3bf 8f4f 	dsb	sy
 800aede:	603b      	str	r3, [r7, #0]
}
 800aee0:	bf00      	nop
 800aee2:	bf00      	nop
 800aee4:	e7fd      	b.n	800aee2 <vPortEnterCritical+0x4a>
	}
}
 800aee6:	bf00      	nop
 800aee8:	370c      	adds	r7, #12
 800aeea:	46bd      	mov	sp, r7
 800aeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef0:	4770      	bx	lr
 800aef2:	bf00      	nop
 800aef4:	20000024 	.word	0x20000024
 800aef8:	e000ed04 	.word	0xe000ed04

0800aefc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aefc:	b480      	push	{r7}
 800aefe:	b083      	sub	sp, #12
 800af00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800af02:	4b12      	ldr	r3, [pc, #72]	@ (800af4c <vPortExitCritical+0x50>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d10b      	bne.n	800af22 <vPortExitCritical+0x26>
	__asm volatile
 800af0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af0e:	f383 8811 	msr	BASEPRI, r3
 800af12:	f3bf 8f6f 	isb	sy
 800af16:	f3bf 8f4f 	dsb	sy
 800af1a:	607b      	str	r3, [r7, #4]
}
 800af1c:	bf00      	nop
 800af1e:	bf00      	nop
 800af20:	e7fd      	b.n	800af1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800af22:	4b0a      	ldr	r3, [pc, #40]	@ (800af4c <vPortExitCritical+0x50>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	3b01      	subs	r3, #1
 800af28:	4a08      	ldr	r2, [pc, #32]	@ (800af4c <vPortExitCritical+0x50>)
 800af2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800af2c:	4b07      	ldr	r3, [pc, #28]	@ (800af4c <vPortExitCritical+0x50>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d105      	bne.n	800af40 <vPortExitCritical+0x44>
 800af34:	2300      	movs	r3, #0
 800af36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	f383 8811 	msr	BASEPRI, r3
}
 800af3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800af40:	bf00      	nop
 800af42:	370c      	adds	r7, #12
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr
 800af4c:	20000024 	.word	0x20000024

0800af50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800af50:	f3ef 8009 	mrs	r0, PSP
 800af54:	f3bf 8f6f 	isb	sy
 800af58:	4b15      	ldr	r3, [pc, #84]	@ (800afb0 <pxCurrentTCBConst>)
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	f01e 0f10 	tst.w	lr, #16
 800af60:	bf08      	it	eq
 800af62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800af66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af6a:	6010      	str	r0, [r2, #0]
 800af6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800af70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800af74:	f380 8811 	msr	BASEPRI, r0
 800af78:	f3bf 8f4f 	dsb	sy
 800af7c:	f3bf 8f6f 	isb	sy
 800af80:	f7ff f9f4 	bl	800a36c <vTaskSwitchContext>
 800af84:	f04f 0000 	mov.w	r0, #0
 800af88:	f380 8811 	msr	BASEPRI, r0
 800af8c:	bc09      	pop	{r0, r3}
 800af8e:	6819      	ldr	r1, [r3, #0]
 800af90:	6808      	ldr	r0, [r1, #0]
 800af92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af96:	f01e 0f10 	tst.w	lr, #16
 800af9a:	bf08      	it	eq
 800af9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800afa0:	f380 8809 	msr	PSP, r0
 800afa4:	f3bf 8f6f 	isb	sy
 800afa8:	4770      	bx	lr
 800afaa:	bf00      	nop
 800afac:	f3af 8000 	nop.w

0800afb0 <pxCurrentTCBConst>:
 800afb0:	200005c8 	.word	0x200005c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800afb4:	bf00      	nop
 800afb6:	bf00      	nop

0800afb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
	__asm volatile
 800afbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afc2:	f383 8811 	msr	BASEPRI, r3
 800afc6:	f3bf 8f6f 	isb	sy
 800afca:	f3bf 8f4f 	dsb	sy
 800afce:	607b      	str	r3, [r7, #4]
}
 800afd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800afd2:	f7ff f911 	bl	800a1f8 <xTaskIncrementTick>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d003      	beq.n	800afe4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800afdc:	4b06      	ldr	r3, [pc, #24]	@ (800aff8 <SysTick_Handler+0x40>)
 800afde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afe2:	601a      	str	r2, [r3, #0]
 800afe4:	2300      	movs	r3, #0
 800afe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	f383 8811 	msr	BASEPRI, r3
}
 800afee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aff0:	bf00      	nop
 800aff2:	3708      	adds	r7, #8
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}
 800aff8:	e000ed04 	.word	0xe000ed04

0800affc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800affc:	b480      	push	{r7}
 800affe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b000:	4b0b      	ldr	r3, [pc, #44]	@ (800b030 <vPortSetupTimerInterrupt+0x34>)
 800b002:	2200      	movs	r2, #0
 800b004:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b006:	4b0b      	ldr	r3, [pc, #44]	@ (800b034 <vPortSetupTimerInterrupt+0x38>)
 800b008:	2200      	movs	r2, #0
 800b00a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b00c:	4b0a      	ldr	r3, [pc, #40]	@ (800b038 <vPortSetupTimerInterrupt+0x3c>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4a0a      	ldr	r2, [pc, #40]	@ (800b03c <vPortSetupTimerInterrupt+0x40>)
 800b012:	fba2 2303 	umull	r2, r3, r2, r3
 800b016:	099b      	lsrs	r3, r3, #6
 800b018:	4a09      	ldr	r2, [pc, #36]	@ (800b040 <vPortSetupTimerInterrupt+0x44>)
 800b01a:	3b01      	subs	r3, #1
 800b01c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b01e:	4b04      	ldr	r3, [pc, #16]	@ (800b030 <vPortSetupTimerInterrupt+0x34>)
 800b020:	2207      	movs	r2, #7
 800b022:	601a      	str	r2, [r3, #0]
}
 800b024:	bf00      	nop
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr
 800b02e:	bf00      	nop
 800b030:	e000e010 	.word	0xe000e010
 800b034:	e000e018 	.word	0xe000e018
 800b038:	20000000 	.word	0x20000000
 800b03c:	10624dd3 	.word	0x10624dd3
 800b040:	e000e014 	.word	0xe000e014

0800b044 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b044:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b054 <vPortEnableVFP+0x10>
 800b048:	6801      	ldr	r1, [r0, #0]
 800b04a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b04e:	6001      	str	r1, [r0, #0]
 800b050:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b052:	bf00      	nop
 800b054:	e000ed88 	.word	0xe000ed88

0800b058 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b058:	b480      	push	{r7}
 800b05a:	b085      	sub	sp, #20
 800b05c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b05e:	f3ef 8305 	mrs	r3, IPSR
 800b062:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2b0f      	cmp	r3, #15
 800b068:	d915      	bls.n	800b096 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b06a:	4a18      	ldr	r2, [pc, #96]	@ (800b0cc <vPortValidateInterruptPriority+0x74>)
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	4413      	add	r3, r2
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b074:	4b16      	ldr	r3, [pc, #88]	@ (800b0d0 <vPortValidateInterruptPriority+0x78>)
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	7afa      	ldrb	r2, [r7, #11]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d20b      	bcs.n	800b096 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b082:	f383 8811 	msr	BASEPRI, r3
 800b086:	f3bf 8f6f 	isb	sy
 800b08a:	f3bf 8f4f 	dsb	sy
 800b08e:	607b      	str	r3, [r7, #4]
}
 800b090:	bf00      	nop
 800b092:	bf00      	nop
 800b094:	e7fd      	b.n	800b092 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b096:	4b0f      	ldr	r3, [pc, #60]	@ (800b0d4 <vPortValidateInterruptPriority+0x7c>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b09e:	4b0e      	ldr	r3, [pc, #56]	@ (800b0d8 <vPortValidateInterruptPriority+0x80>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d90b      	bls.n	800b0be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b0a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0aa:	f383 8811 	msr	BASEPRI, r3
 800b0ae:	f3bf 8f6f 	isb	sy
 800b0b2:	f3bf 8f4f 	dsb	sy
 800b0b6:	603b      	str	r3, [r7, #0]
}
 800b0b8:	bf00      	nop
 800b0ba:	bf00      	nop
 800b0bc:	e7fd      	b.n	800b0ba <vPortValidateInterruptPriority+0x62>
	}
 800b0be:	bf00      	nop
 800b0c0:	3714      	adds	r7, #20
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr
 800b0ca:	bf00      	nop
 800b0cc:	e000e3f0 	.word	0xe000e3f0
 800b0d0:	200006f4 	.word	0x200006f4
 800b0d4:	e000ed0c 	.word	0xe000ed0c
 800b0d8:	200006f8 	.word	0x200006f8

0800b0dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b08a      	sub	sp, #40	@ 0x28
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b0e8:	f7fe ffda 	bl	800a0a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b0ec:	4b5c      	ldr	r3, [pc, #368]	@ (800b260 <pvPortMalloc+0x184>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d101      	bne.n	800b0f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b0f4:	f000 f924 	bl	800b340 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b0f8:	4b5a      	ldr	r3, [pc, #360]	@ (800b264 <pvPortMalloc+0x188>)
 800b0fa:	681a      	ldr	r2, [r3, #0]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	4013      	ands	r3, r2
 800b100:	2b00      	cmp	r3, #0
 800b102:	f040 8095 	bne.w	800b230 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d01e      	beq.n	800b14a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b10c:	2208      	movs	r2, #8
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	4413      	add	r3, r2
 800b112:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f003 0307 	and.w	r3, r3, #7
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d015      	beq.n	800b14a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f023 0307 	bic.w	r3, r3, #7
 800b124:	3308      	adds	r3, #8
 800b126:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f003 0307 	and.w	r3, r3, #7
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d00b      	beq.n	800b14a <pvPortMalloc+0x6e>
	__asm volatile
 800b132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b136:	f383 8811 	msr	BASEPRI, r3
 800b13a:	f3bf 8f6f 	isb	sy
 800b13e:	f3bf 8f4f 	dsb	sy
 800b142:	617b      	str	r3, [r7, #20]
}
 800b144:	bf00      	nop
 800b146:	bf00      	nop
 800b148:	e7fd      	b.n	800b146 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d06f      	beq.n	800b230 <pvPortMalloc+0x154>
 800b150:	4b45      	ldr	r3, [pc, #276]	@ (800b268 <pvPortMalloc+0x18c>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	429a      	cmp	r2, r3
 800b158:	d86a      	bhi.n	800b230 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b15a:	4b44      	ldr	r3, [pc, #272]	@ (800b26c <pvPortMalloc+0x190>)
 800b15c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b15e:	4b43      	ldr	r3, [pc, #268]	@ (800b26c <pvPortMalloc+0x190>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b164:	e004      	b.n	800b170 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b168:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b16a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	429a      	cmp	r2, r3
 800b178:	d903      	bls.n	800b182 <pvPortMalloc+0xa6>
 800b17a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d1f1      	bne.n	800b166 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b182:	4b37      	ldr	r3, [pc, #220]	@ (800b260 <pvPortMalloc+0x184>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b188:	429a      	cmp	r2, r3
 800b18a:	d051      	beq.n	800b230 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b18c:	6a3b      	ldr	r3, [r7, #32]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	2208      	movs	r2, #8
 800b192:	4413      	add	r3, r2
 800b194:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	6a3b      	ldr	r3, [r7, #32]
 800b19c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b19e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a0:	685a      	ldr	r2, [r3, #4]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	1ad2      	subs	r2, r2, r3
 800b1a6:	2308      	movs	r3, #8
 800b1a8:	005b      	lsls	r3, r3, #1
 800b1aa:	429a      	cmp	r2, r3
 800b1ac:	d920      	bls.n	800b1f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b1ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	4413      	add	r3, r2
 800b1b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b1b6:	69bb      	ldr	r3, [r7, #24]
 800b1b8:	f003 0307 	and.w	r3, r3, #7
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d00b      	beq.n	800b1d8 <pvPortMalloc+0xfc>
	__asm volatile
 800b1c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1c4:	f383 8811 	msr	BASEPRI, r3
 800b1c8:	f3bf 8f6f 	isb	sy
 800b1cc:	f3bf 8f4f 	dsb	sy
 800b1d0:	613b      	str	r3, [r7, #16]
}
 800b1d2:	bf00      	nop
 800b1d4:	bf00      	nop
 800b1d6:	e7fd      	b.n	800b1d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b1d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1da:	685a      	ldr	r2, [r3, #4]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	1ad2      	subs	r2, r2, r3
 800b1e0:	69bb      	ldr	r3, [r7, #24]
 800b1e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1e6:	687a      	ldr	r2, [r7, #4]
 800b1e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b1ea:	69b8      	ldr	r0, [r7, #24]
 800b1ec:	f000 f90a 	bl	800b404 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b1f0:	4b1d      	ldr	r3, [pc, #116]	@ (800b268 <pvPortMalloc+0x18c>)
 800b1f2:	681a      	ldr	r2, [r3, #0]
 800b1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1f6:	685b      	ldr	r3, [r3, #4]
 800b1f8:	1ad3      	subs	r3, r2, r3
 800b1fa:	4a1b      	ldr	r2, [pc, #108]	@ (800b268 <pvPortMalloc+0x18c>)
 800b1fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b1fe:	4b1a      	ldr	r3, [pc, #104]	@ (800b268 <pvPortMalloc+0x18c>)
 800b200:	681a      	ldr	r2, [r3, #0]
 800b202:	4b1b      	ldr	r3, [pc, #108]	@ (800b270 <pvPortMalloc+0x194>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	429a      	cmp	r2, r3
 800b208:	d203      	bcs.n	800b212 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b20a:	4b17      	ldr	r3, [pc, #92]	@ (800b268 <pvPortMalloc+0x18c>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	4a18      	ldr	r2, [pc, #96]	@ (800b270 <pvPortMalloc+0x194>)
 800b210:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b214:	685a      	ldr	r2, [r3, #4]
 800b216:	4b13      	ldr	r3, [pc, #76]	@ (800b264 <pvPortMalloc+0x188>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	431a      	orrs	r2, r3
 800b21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b21e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b222:	2200      	movs	r2, #0
 800b224:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b226:	4b13      	ldr	r3, [pc, #76]	@ (800b274 <pvPortMalloc+0x198>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	3301      	adds	r3, #1
 800b22c:	4a11      	ldr	r2, [pc, #68]	@ (800b274 <pvPortMalloc+0x198>)
 800b22e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b230:	f7fe ff44 	bl	800a0bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b234:	69fb      	ldr	r3, [r7, #28]
 800b236:	f003 0307 	and.w	r3, r3, #7
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d00b      	beq.n	800b256 <pvPortMalloc+0x17a>
	__asm volatile
 800b23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b242:	f383 8811 	msr	BASEPRI, r3
 800b246:	f3bf 8f6f 	isb	sy
 800b24a:	f3bf 8f4f 	dsb	sy
 800b24e:	60fb      	str	r3, [r7, #12]
}
 800b250:	bf00      	nop
 800b252:	bf00      	nop
 800b254:	e7fd      	b.n	800b252 <pvPortMalloc+0x176>
	return pvReturn;
 800b256:	69fb      	ldr	r3, [r7, #28]
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3728      	adds	r7, #40	@ 0x28
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}
 800b260:	20004304 	.word	0x20004304
 800b264:	20004318 	.word	0x20004318
 800b268:	20004308 	.word	0x20004308
 800b26c:	200042fc 	.word	0x200042fc
 800b270:	2000430c 	.word	0x2000430c
 800b274:	20004310 	.word	0x20004310

0800b278 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b086      	sub	sp, #24
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d04f      	beq.n	800b32a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b28a:	2308      	movs	r3, #8
 800b28c:	425b      	negs	r3, r3
 800b28e:	697a      	ldr	r2, [r7, #20]
 800b290:	4413      	add	r3, r2
 800b292:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	685a      	ldr	r2, [r3, #4]
 800b29c:	4b25      	ldr	r3, [pc, #148]	@ (800b334 <vPortFree+0xbc>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	4013      	ands	r3, r2
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d10b      	bne.n	800b2be <vPortFree+0x46>
	__asm volatile
 800b2a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2aa:	f383 8811 	msr	BASEPRI, r3
 800b2ae:	f3bf 8f6f 	isb	sy
 800b2b2:	f3bf 8f4f 	dsb	sy
 800b2b6:	60fb      	str	r3, [r7, #12]
}
 800b2b8:	bf00      	nop
 800b2ba:	bf00      	nop
 800b2bc:	e7fd      	b.n	800b2ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d00b      	beq.n	800b2de <vPortFree+0x66>
	__asm volatile
 800b2c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2ca:	f383 8811 	msr	BASEPRI, r3
 800b2ce:	f3bf 8f6f 	isb	sy
 800b2d2:	f3bf 8f4f 	dsb	sy
 800b2d6:	60bb      	str	r3, [r7, #8]
}
 800b2d8:	bf00      	nop
 800b2da:	bf00      	nop
 800b2dc:	e7fd      	b.n	800b2da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	685a      	ldr	r2, [r3, #4]
 800b2e2:	4b14      	ldr	r3, [pc, #80]	@ (800b334 <vPortFree+0xbc>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	4013      	ands	r3, r2
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d01e      	beq.n	800b32a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d11a      	bne.n	800b32a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	685a      	ldr	r2, [r3, #4]
 800b2f8:	4b0e      	ldr	r3, [pc, #56]	@ (800b334 <vPortFree+0xbc>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	43db      	mvns	r3, r3
 800b2fe:	401a      	ands	r2, r3
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b304:	f7fe fecc 	bl	800a0a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	685a      	ldr	r2, [r3, #4]
 800b30c:	4b0a      	ldr	r3, [pc, #40]	@ (800b338 <vPortFree+0xc0>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	4413      	add	r3, r2
 800b312:	4a09      	ldr	r2, [pc, #36]	@ (800b338 <vPortFree+0xc0>)
 800b314:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b316:	6938      	ldr	r0, [r7, #16]
 800b318:	f000 f874 	bl	800b404 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b31c:	4b07      	ldr	r3, [pc, #28]	@ (800b33c <vPortFree+0xc4>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	3301      	adds	r3, #1
 800b322:	4a06      	ldr	r2, [pc, #24]	@ (800b33c <vPortFree+0xc4>)
 800b324:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b326:	f7fe fec9 	bl	800a0bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b32a:	bf00      	nop
 800b32c:	3718      	adds	r7, #24
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
 800b332:	bf00      	nop
 800b334:	20004318 	.word	0x20004318
 800b338:	20004308 	.word	0x20004308
 800b33c:	20004314 	.word	0x20004314

0800b340 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b340:	b480      	push	{r7}
 800b342:	b085      	sub	sp, #20
 800b344:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b346:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b34a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b34c:	4b27      	ldr	r3, [pc, #156]	@ (800b3ec <prvHeapInit+0xac>)
 800b34e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f003 0307 	and.w	r3, r3, #7
 800b356:	2b00      	cmp	r3, #0
 800b358:	d00c      	beq.n	800b374 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	3307      	adds	r3, #7
 800b35e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f023 0307 	bic.w	r3, r3, #7
 800b366:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b368:	68ba      	ldr	r2, [r7, #8]
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	1ad3      	subs	r3, r2, r3
 800b36e:	4a1f      	ldr	r2, [pc, #124]	@ (800b3ec <prvHeapInit+0xac>)
 800b370:	4413      	add	r3, r2
 800b372:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b378:	4a1d      	ldr	r2, [pc, #116]	@ (800b3f0 <prvHeapInit+0xb0>)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b37e:	4b1c      	ldr	r3, [pc, #112]	@ (800b3f0 <prvHeapInit+0xb0>)
 800b380:	2200      	movs	r2, #0
 800b382:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	68ba      	ldr	r2, [r7, #8]
 800b388:	4413      	add	r3, r2
 800b38a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b38c:	2208      	movs	r2, #8
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	1a9b      	subs	r3, r3, r2
 800b392:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f023 0307 	bic.w	r3, r3, #7
 800b39a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	4a15      	ldr	r2, [pc, #84]	@ (800b3f4 <prvHeapInit+0xb4>)
 800b3a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b3a2:	4b14      	ldr	r3, [pc, #80]	@ (800b3f4 <prvHeapInit+0xb4>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b3aa:	4b12      	ldr	r3, [pc, #72]	@ (800b3f4 <prvHeapInit+0xb4>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	68fa      	ldr	r2, [r7, #12]
 800b3ba:	1ad2      	subs	r2, r2, r3
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b3c0:	4b0c      	ldr	r3, [pc, #48]	@ (800b3f4 <prvHeapInit+0xb4>)
 800b3c2:	681a      	ldr	r2, [r3, #0]
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	685b      	ldr	r3, [r3, #4]
 800b3cc:	4a0a      	ldr	r2, [pc, #40]	@ (800b3f8 <prvHeapInit+0xb8>)
 800b3ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	4a09      	ldr	r2, [pc, #36]	@ (800b3fc <prvHeapInit+0xbc>)
 800b3d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b3d8:	4b09      	ldr	r3, [pc, #36]	@ (800b400 <prvHeapInit+0xc0>)
 800b3da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b3de:	601a      	str	r2, [r3, #0]
}
 800b3e0:	bf00      	nop
 800b3e2:	3714      	adds	r7, #20
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr
 800b3ec:	200006fc 	.word	0x200006fc
 800b3f0:	200042fc 	.word	0x200042fc
 800b3f4:	20004304 	.word	0x20004304
 800b3f8:	2000430c 	.word	0x2000430c
 800b3fc:	20004308 	.word	0x20004308
 800b400:	20004318 	.word	0x20004318

0800b404 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b404:	b480      	push	{r7}
 800b406:	b085      	sub	sp, #20
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b40c:	4b28      	ldr	r3, [pc, #160]	@ (800b4b0 <prvInsertBlockIntoFreeList+0xac>)
 800b40e:	60fb      	str	r3, [r7, #12]
 800b410:	e002      	b.n	800b418 <prvInsertBlockIntoFreeList+0x14>
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	60fb      	str	r3, [r7, #12]
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	687a      	ldr	r2, [r7, #4]
 800b41e:	429a      	cmp	r2, r3
 800b420:	d8f7      	bhi.n	800b412 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	68ba      	ldr	r2, [r7, #8]
 800b42c:	4413      	add	r3, r2
 800b42e:	687a      	ldr	r2, [r7, #4]
 800b430:	429a      	cmp	r2, r3
 800b432:	d108      	bne.n	800b446 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	685a      	ldr	r2, [r3, #4]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	685b      	ldr	r3, [r3, #4]
 800b43c:	441a      	add	r2, r3
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	68ba      	ldr	r2, [r7, #8]
 800b450:	441a      	add	r2, r3
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	429a      	cmp	r2, r3
 800b458:	d118      	bne.n	800b48c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681a      	ldr	r2, [r3, #0]
 800b45e:	4b15      	ldr	r3, [pc, #84]	@ (800b4b4 <prvInsertBlockIntoFreeList+0xb0>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	429a      	cmp	r2, r3
 800b464:	d00d      	beq.n	800b482 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	685a      	ldr	r2, [r3, #4]
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	685b      	ldr	r3, [r3, #4]
 800b470:	441a      	add	r2, r3
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	601a      	str	r2, [r3, #0]
 800b480:	e008      	b.n	800b494 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b482:	4b0c      	ldr	r3, [pc, #48]	@ (800b4b4 <prvInsertBlockIntoFreeList+0xb0>)
 800b484:	681a      	ldr	r2, [r3, #0]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	601a      	str	r2, [r3, #0]
 800b48a:	e003      	b.n	800b494 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681a      	ldr	r2, [r3, #0]
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b494:	68fa      	ldr	r2, [r7, #12]
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	429a      	cmp	r2, r3
 800b49a:	d002      	beq.n	800b4a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	687a      	ldr	r2, [r7, #4]
 800b4a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4a2:	bf00      	nop
 800b4a4:	3714      	adds	r7, #20
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr
 800b4ae:	bf00      	nop
 800b4b0:	200042fc 	.word	0x200042fc
 800b4b4:	20004304 	.word	0x20004304

0800b4b8 <abort>:
 800b4b8:	b508      	push	{r3, lr}
 800b4ba:	2006      	movs	r0, #6
 800b4bc:	f000 f92c 	bl	800b718 <raise>
 800b4c0:	2001      	movs	r0, #1
 800b4c2:	f7f6 fffb 	bl	80024bc <_exit>
	...

0800b4c8 <malloc>:
 800b4c8:	4b02      	ldr	r3, [pc, #8]	@ (800b4d4 <malloc+0xc>)
 800b4ca:	4601      	mov	r1, r0
 800b4cc:	6818      	ldr	r0, [r3, #0]
 800b4ce:	f000 b82d 	b.w	800b52c <_malloc_r>
 800b4d2:	bf00      	nop
 800b4d4:	20000028 	.word	0x20000028

0800b4d8 <free>:
 800b4d8:	4b02      	ldr	r3, [pc, #8]	@ (800b4e4 <free+0xc>)
 800b4da:	4601      	mov	r1, r0
 800b4dc:	6818      	ldr	r0, [r3, #0]
 800b4de:	f000 b981 	b.w	800b7e4 <_free_r>
 800b4e2:	bf00      	nop
 800b4e4:	20000028 	.word	0x20000028

0800b4e8 <sbrk_aligned>:
 800b4e8:	b570      	push	{r4, r5, r6, lr}
 800b4ea:	4e0f      	ldr	r6, [pc, #60]	@ (800b528 <sbrk_aligned+0x40>)
 800b4ec:	460c      	mov	r4, r1
 800b4ee:	6831      	ldr	r1, [r6, #0]
 800b4f0:	4605      	mov	r5, r0
 800b4f2:	b911      	cbnz	r1, 800b4fa <sbrk_aligned+0x12>
 800b4f4:	f000 f92c 	bl	800b750 <_sbrk_r>
 800b4f8:	6030      	str	r0, [r6, #0]
 800b4fa:	4621      	mov	r1, r4
 800b4fc:	4628      	mov	r0, r5
 800b4fe:	f000 f927 	bl	800b750 <_sbrk_r>
 800b502:	1c43      	adds	r3, r0, #1
 800b504:	d103      	bne.n	800b50e <sbrk_aligned+0x26>
 800b506:	f04f 34ff 	mov.w	r4, #4294967295
 800b50a:	4620      	mov	r0, r4
 800b50c:	bd70      	pop	{r4, r5, r6, pc}
 800b50e:	1cc4      	adds	r4, r0, #3
 800b510:	f024 0403 	bic.w	r4, r4, #3
 800b514:	42a0      	cmp	r0, r4
 800b516:	d0f8      	beq.n	800b50a <sbrk_aligned+0x22>
 800b518:	1a21      	subs	r1, r4, r0
 800b51a:	4628      	mov	r0, r5
 800b51c:	f000 f918 	bl	800b750 <_sbrk_r>
 800b520:	3001      	adds	r0, #1
 800b522:	d1f2      	bne.n	800b50a <sbrk_aligned+0x22>
 800b524:	e7ef      	b.n	800b506 <sbrk_aligned+0x1e>
 800b526:	bf00      	nop
 800b528:	2000431c 	.word	0x2000431c

0800b52c <_malloc_r>:
 800b52c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b530:	1ccd      	adds	r5, r1, #3
 800b532:	f025 0503 	bic.w	r5, r5, #3
 800b536:	3508      	adds	r5, #8
 800b538:	2d0c      	cmp	r5, #12
 800b53a:	bf38      	it	cc
 800b53c:	250c      	movcc	r5, #12
 800b53e:	2d00      	cmp	r5, #0
 800b540:	4606      	mov	r6, r0
 800b542:	db01      	blt.n	800b548 <_malloc_r+0x1c>
 800b544:	42a9      	cmp	r1, r5
 800b546:	d904      	bls.n	800b552 <_malloc_r+0x26>
 800b548:	230c      	movs	r3, #12
 800b54a:	6033      	str	r3, [r6, #0]
 800b54c:	2000      	movs	r0, #0
 800b54e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b552:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b628 <_malloc_r+0xfc>
 800b556:	f000 f869 	bl	800b62c <__malloc_lock>
 800b55a:	f8d8 3000 	ldr.w	r3, [r8]
 800b55e:	461c      	mov	r4, r3
 800b560:	bb44      	cbnz	r4, 800b5b4 <_malloc_r+0x88>
 800b562:	4629      	mov	r1, r5
 800b564:	4630      	mov	r0, r6
 800b566:	f7ff ffbf 	bl	800b4e8 <sbrk_aligned>
 800b56a:	1c43      	adds	r3, r0, #1
 800b56c:	4604      	mov	r4, r0
 800b56e:	d158      	bne.n	800b622 <_malloc_r+0xf6>
 800b570:	f8d8 4000 	ldr.w	r4, [r8]
 800b574:	4627      	mov	r7, r4
 800b576:	2f00      	cmp	r7, #0
 800b578:	d143      	bne.n	800b602 <_malloc_r+0xd6>
 800b57a:	2c00      	cmp	r4, #0
 800b57c:	d04b      	beq.n	800b616 <_malloc_r+0xea>
 800b57e:	6823      	ldr	r3, [r4, #0]
 800b580:	4639      	mov	r1, r7
 800b582:	4630      	mov	r0, r6
 800b584:	eb04 0903 	add.w	r9, r4, r3
 800b588:	f000 f8e2 	bl	800b750 <_sbrk_r>
 800b58c:	4581      	cmp	r9, r0
 800b58e:	d142      	bne.n	800b616 <_malloc_r+0xea>
 800b590:	6821      	ldr	r1, [r4, #0]
 800b592:	1a6d      	subs	r5, r5, r1
 800b594:	4629      	mov	r1, r5
 800b596:	4630      	mov	r0, r6
 800b598:	f7ff ffa6 	bl	800b4e8 <sbrk_aligned>
 800b59c:	3001      	adds	r0, #1
 800b59e:	d03a      	beq.n	800b616 <_malloc_r+0xea>
 800b5a0:	6823      	ldr	r3, [r4, #0]
 800b5a2:	442b      	add	r3, r5
 800b5a4:	6023      	str	r3, [r4, #0]
 800b5a6:	f8d8 3000 	ldr.w	r3, [r8]
 800b5aa:	685a      	ldr	r2, [r3, #4]
 800b5ac:	bb62      	cbnz	r2, 800b608 <_malloc_r+0xdc>
 800b5ae:	f8c8 7000 	str.w	r7, [r8]
 800b5b2:	e00f      	b.n	800b5d4 <_malloc_r+0xa8>
 800b5b4:	6822      	ldr	r2, [r4, #0]
 800b5b6:	1b52      	subs	r2, r2, r5
 800b5b8:	d420      	bmi.n	800b5fc <_malloc_r+0xd0>
 800b5ba:	2a0b      	cmp	r2, #11
 800b5bc:	d917      	bls.n	800b5ee <_malloc_r+0xc2>
 800b5be:	1961      	adds	r1, r4, r5
 800b5c0:	42a3      	cmp	r3, r4
 800b5c2:	6025      	str	r5, [r4, #0]
 800b5c4:	bf18      	it	ne
 800b5c6:	6059      	strne	r1, [r3, #4]
 800b5c8:	6863      	ldr	r3, [r4, #4]
 800b5ca:	bf08      	it	eq
 800b5cc:	f8c8 1000 	streq.w	r1, [r8]
 800b5d0:	5162      	str	r2, [r4, r5]
 800b5d2:	604b      	str	r3, [r1, #4]
 800b5d4:	4630      	mov	r0, r6
 800b5d6:	f000 f82f 	bl	800b638 <__malloc_unlock>
 800b5da:	f104 000b 	add.w	r0, r4, #11
 800b5de:	1d23      	adds	r3, r4, #4
 800b5e0:	f020 0007 	bic.w	r0, r0, #7
 800b5e4:	1ac2      	subs	r2, r0, r3
 800b5e6:	bf1c      	itt	ne
 800b5e8:	1a1b      	subne	r3, r3, r0
 800b5ea:	50a3      	strne	r3, [r4, r2]
 800b5ec:	e7af      	b.n	800b54e <_malloc_r+0x22>
 800b5ee:	6862      	ldr	r2, [r4, #4]
 800b5f0:	42a3      	cmp	r3, r4
 800b5f2:	bf0c      	ite	eq
 800b5f4:	f8c8 2000 	streq.w	r2, [r8]
 800b5f8:	605a      	strne	r2, [r3, #4]
 800b5fa:	e7eb      	b.n	800b5d4 <_malloc_r+0xa8>
 800b5fc:	4623      	mov	r3, r4
 800b5fe:	6864      	ldr	r4, [r4, #4]
 800b600:	e7ae      	b.n	800b560 <_malloc_r+0x34>
 800b602:	463c      	mov	r4, r7
 800b604:	687f      	ldr	r7, [r7, #4]
 800b606:	e7b6      	b.n	800b576 <_malloc_r+0x4a>
 800b608:	461a      	mov	r2, r3
 800b60a:	685b      	ldr	r3, [r3, #4]
 800b60c:	42a3      	cmp	r3, r4
 800b60e:	d1fb      	bne.n	800b608 <_malloc_r+0xdc>
 800b610:	2300      	movs	r3, #0
 800b612:	6053      	str	r3, [r2, #4]
 800b614:	e7de      	b.n	800b5d4 <_malloc_r+0xa8>
 800b616:	230c      	movs	r3, #12
 800b618:	6033      	str	r3, [r6, #0]
 800b61a:	4630      	mov	r0, r6
 800b61c:	f000 f80c 	bl	800b638 <__malloc_unlock>
 800b620:	e794      	b.n	800b54c <_malloc_r+0x20>
 800b622:	6005      	str	r5, [r0, #0]
 800b624:	e7d6      	b.n	800b5d4 <_malloc_r+0xa8>
 800b626:	bf00      	nop
 800b628:	20004320 	.word	0x20004320

0800b62c <__malloc_lock>:
 800b62c:	4801      	ldr	r0, [pc, #4]	@ (800b634 <__malloc_lock+0x8>)
 800b62e:	f000 b8c9 	b.w	800b7c4 <__retarget_lock_acquire_recursive>
 800b632:	bf00      	nop
 800b634:	20004460 	.word	0x20004460

0800b638 <__malloc_unlock>:
 800b638:	4801      	ldr	r0, [pc, #4]	@ (800b640 <__malloc_unlock+0x8>)
 800b63a:	f000 b8c4 	b.w	800b7c6 <__retarget_lock_release_recursive>
 800b63e:	bf00      	nop
 800b640:	20004460 	.word	0x20004460

0800b644 <_vsniprintf_r>:
 800b644:	b530      	push	{r4, r5, lr}
 800b646:	4614      	mov	r4, r2
 800b648:	2c00      	cmp	r4, #0
 800b64a:	b09b      	sub	sp, #108	@ 0x6c
 800b64c:	4605      	mov	r5, r0
 800b64e:	461a      	mov	r2, r3
 800b650:	da05      	bge.n	800b65e <_vsniprintf_r+0x1a>
 800b652:	238b      	movs	r3, #139	@ 0x8b
 800b654:	6003      	str	r3, [r0, #0]
 800b656:	f04f 30ff 	mov.w	r0, #4294967295
 800b65a:	b01b      	add	sp, #108	@ 0x6c
 800b65c:	bd30      	pop	{r4, r5, pc}
 800b65e:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b662:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b666:	bf14      	ite	ne
 800b668:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b66c:	4623      	moveq	r3, r4
 800b66e:	9302      	str	r3, [sp, #8]
 800b670:	9305      	str	r3, [sp, #20]
 800b672:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b676:	9100      	str	r1, [sp, #0]
 800b678:	9104      	str	r1, [sp, #16]
 800b67a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b67e:	4669      	mov	r1, sp
 800b680:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b682:	f000 f955 	bl	800b930 <_svfiprintf_r>
 800b686:	1c43      	adds	r3, r0, #1
 800b688:	bfbc      	itt	lt
 800b68a:	238b      	movlt	r3, #139	@ 0x8b
 800b68c:	602b      	strlt	r3, [r5, #0]
 800b68e:	2c00      	cmp	r4, #0
 800b690:	d0e3      	beq.n	800b65a <_vsniprintf_r+0x16>
 800b692:	9b00      	ldr	r3, [sp, #0]
 800b694:	2200      	movs	r2, #0
 800b696:	701a      	strb	r2, [r3, #0]
 800b698:	e7df      	b.n	800b65a <_vsniprintf_r+0x16>
	...

0800b69c <vsniprintf>:
 800b69c:	b507      	push	{r0, r1, r2, lr}
 800b69e:	9300      	str	r3, [sp, #0]
 800b6a0:	4613      	mov	r3, r2
 800b6a2:	460a      	mov	r2, r1
 800b6a4:	4601      	mov	r1, r0
 800b6a6:	4803      	ldr	r0, [pc, #12]	@ (800b6b4 <vsniprintf+0x18>)
 800b6a8:	6800      	ldr	r0, [r0, #0]
 800b6aa:	f7ff ffcb 	bl	800b644 <_vsniprintf_r>
 800b6ae:	b003      	add	sp, #12
 800b6b0:	f85d fb04 	ldr.w	pc, [sp], #4
 800b6b4:	20000028 	.word	0x20000028

0800b6b8 <memset>:
 800b6b8:	4402      	add	r2, r0
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d100      	bne.n	800b6c2 <memset+0xa>
 800b6c0:	4770      	bx	lr
 800b6c2:	f803 1b01 	strb.w	r1, [r3], #1
 800b6c6:	e7f9      	b.n	800b6bc <memset+0x4>

0800b6c8 <_raise_r>:
 800b6c8:	291f      	cmp	r1, #31
 800b6ca:	b538      	push	{r3, r4, r5, lr}
 800b6cc:	4605      	mov	r5, r0
 800b6ce:	460c      	mov	r4, r1
 800b6d0:	d904      	bls.n	800b6dc <_raise_r+0x14>
 800b6d2:	2316      	movs	r3, #22
 800b6d4:	6003      	str	r3, [r0, #0]
 800b6d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b6da:	bd38      	pop	{r3, r4, r5, pc}
 800b6dc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b6de:	b112      	cbz	r2, 800b6e6 <_raise_r+0x1e>
 800b6e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b6e4:	b94b      	cbnz	r3, 800b6fa <_raise_r+0x32>
 800b6e6:	4628      	mov	r0, r5
 800b6e8:	f000 f830 	bl	800b74c <_getpid_r>
 800b6ec:	4622      	mov	r2, r4
 800b6ee:	4601      	mov	r1, r0
 800b6f0:	4628      	mov	r0, r5
 800b6f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6f6:	f000 b817 	b.w	800b728 <_kill_r>
 800b6fa:	2b01      	cmp	r3, #1
 800b6fc:	d00a      	beq.n	800b714 <_raise_r+0x4c>
 800b6fe:	1c59      	adds	r1, r3, #1
 800b700:	d103      	bne.n	800b70a <_raise_r+0x42>
 800b702:	2316      	movs	r3, #22
 800b704:	6003      	str	r3, [r0, #0]
 800b706:	2001      	movs	r0, #1
 800b708:	e7e7      	b.n	800b6da <_raise_r+0x12>
 800b70a:	2100      	movs	r1, #0
 800b70c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b710:	4620      	mov	r0, r4
 800b712:	4798      	blx	r3
 800b714:	2000      	movs	r0, #0
 800b716:	e7e0      	b.n	800b6da <_raise_r+0x12>

0800b718 <raise>:
 800b718:	4b02      	ldr	r3, [pc, #8]	@ (800b724 <raise+0xc>)
 800b71a:	4601      	mov	r1, r0
 800b71c:	6818      	ldr	r0, [r3, #0]
 800b71e:	f7ff bfd3 	b.w	800b6c8 <_raise_r>
 800b722:	bf00      	nop
 800b724:	20000028 	.word	0x20000028

0800b728 <_kill_r>:
 800b728:	b538      	push	{r3, r4, r5, lr}
 800b72a:	4d07      	ldr	r5, [pc, #28]	@ (800b748 <_kill_r+0x20>)
 800b72c:	2300      	movs	r3, #0
 800b72e:	4604      	mov	r4, r0
 800b730:	4608      	mov	r0, r1
 800b732:	4611      	mov	r1, r2
 800b734:	602b      	str	r3, [r5, #0]
 800b736:	f7f6 feb1 	bl	800249c <_kill>
 800b73a:	1c43      	adds	r3, r0, #1
 800b73c:	d102      	bne.n	800b744 <_kill_r+0x1c>
 800b73e:	682b      	ldr	r3, [r5, #0]
 800b740:	b103      	cbz	r3, 800b744 <_kill_r+0x1c>
 800b742:	6023      	str	r3, [r4, #0]
 800b744:	bd38      	pop	{r3, r4, r5, pc}
 800b746:	bf00      	nop
 800b748:	2000445c 	.word	0x2000445c

0800b74c <_getpid_r>:
 800b74c:	f7f6 be9e 	b.w	800248c <_getpid>

0800b750 <_sbrk_r>:
 800b750:	b538      	push	{r3, r4, r5, lr}
 800b752:	4d06      	ldr	r5, [pc, #24]	@ (800b76c <_sbrk_r+0x1c>)
 800b754:	2300      	movs	r3, #0
 800b756:	4604      	mov	r4, r0
 800b758:	4608      	mov	r0, r1
 800b75a:	602b      	str	r3, [r5, #0]
 800b75c:	f7f6 feba 	bl	80024d4 <_sbrk>
 800b760:	1c43      	adds	r3, r0, #1
 800b762:	d102      	bne.n	800b76a <_sbrk_r+0x1a>
 800b764:	682b      	ldr	r3, [r5, #0]
 800b766:	b103      	cbz	r3, 800b76a <_sbrk_r+0x1a>
 800b768:	6023      	str	r3, [r4, #0]
 800b76a:	bd38      	pop	{r3, r4, r5, pc}
 800b76c:	2000445c 	.word	0x2000445c

0800b770 <__errno>:
 800b770:	4b01      	ldr	r3, [pc, #4]	@ (800b778 <__errno+0x8>)
 800b772:	6818      	ldr	r0, [r3, #0]
 800b774:	4770      	bx	lr
 800b776:	bf00      	nop
 800b778:	20000028 	.word	0x20000028

0800b77c <__libc_init_array>:
 800b77c:	b570      	push	{r4, r5, r6, lr}
 800b77e:	4d0d      	ldr	r5, [pc, #52]	@ (800b7b4 <__libc_init_array+0x38>)
 800b780:	4c0d      	ldr	r4, [pc, #52]	@ (800b7b8 <__libc_init_array+0x3c>)
 800b782:	1b64      	subs	r4, r4, r5
 800b784:	10a4      	asrs	r4, r4, #2
 800b786:	2600      	movs	r6, #0
 800b788:	42a6      	cmp	r6, r4
 800b78a:	d109      	bne.n	800b7a0 <__libc_init_array+0x24>
 800b78c:	4d0b      	ldr	r5, [pc, #44]	@ (800b7bc <__libc_init_array+0x40>)
 800b78e:	4c0c      	ldr	r4, [pc, #48]	@ (800b7c0 <__libc_init_array+0x44>)
 800b790:	f001 fb08 	bl	800cda4 <_init>
 800b794:	1b64      	subs	r4, r4, r5
 800b796:	10a4      	asrs	r4, r4, #2
 800b798:	2600      	movs	r6, #0
 800b79a:	42a6      	cmp	r6, r4
 800b79c:	d105      	bne.n	800b7aa <__libc_init_array+0x2e>
 800b79e:	bd70      	pop	{r4, r5, r6, pc}
 800b7a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7a4:	4798      	blx	r3
 800b7a6:	3601      	adds	r6, #1
 800b7a8:	e7ee      	b.n	800b788 <__libc_init_array+0xc>
 800b7aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7ae:	4798      	blx	r3
 800b7b0:	3601      	adds	r6, #1
 800b7b2:	e7f2      	b.n	800b79a <__libc_init_array+0x1e>
 800b7b4:	0800d658 	.word	0x0800d658
 800b7b8:	0800d658 	.word	0x0800d658
 800b7bc:	0800d658 	.word	0x0800d658
 800b7c0:	0800d65c 	.word	0x0800d65c

0800b7c4 <__retarget_lock_acquire_recursive>:
 800b7c4:	4770      	bx	lr

0800b7c6 <__retarget_lock_release_recursive>:
 800b7c6:	4770      	bx	lr

0800b7c8 <memcpy>:
 800b7c8:	440a      	add	r2, r1
 800b7ca:	4291      	cmp	r1, r2
 800b7cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b7d0:	d100      	bne.n	800b7d4 <memcpy+0xc>
 800b7d2:	4770      	bx	lr
 800b7d4:	b510      	push	{r4, lr}
 800b7d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b7de:	4291      	cmp	r1, r2
 800b7e0:	d1f9      	bne.n	800b7d6 <memcpy+0xe>
 800b7e2:	bd10      	pop	{r4, pc}

0800b7e4 <_free_r>:
 800b7e4:	b538      	push	{r3, r4, r5, lr}
 800b7e6:	4605      	mov	r5, r0
 800b7e8:	2900      	cmp	r1, #0
 800b7ea:	d041      	beq.n	800b870 <_free_r+0x8c>
 800b7ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7f0:	1f0c      	subs	r4, r1, #4
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	bfb8      	it	lt
 800b7f6:	18e4      	addlt	r4, r4, r3
 800b7f8:	f7ff ff18 	bl	800b62c <__malloc_lock>
 800b7fc:	4a1d      	ldr	r2, [pc, #116]	@ (800b874 <_free_r+0x90>)
 800b7fe:	6813      	ldr	r3, [r2, #0]
 800b800:	b933      	cbnz	r3, 800b810 <_free_r+0x2c>
 800b802:	6063      	str	r3, [r4, #4]
 800b804:	6014      	str	r4, [r2, #0]
 800b806:	4628      	mov	r0, r5
 800b808:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b80c:	f7ff bf14 	b.w	800b638 <__malloc_unlock>
 800b810:	42a3      	cmp	r3, r4
 800b812:	d908      	bls.n	800b826 <_free_r+0x42>
 800b814:	6820      	ldr	r0, [r4, #0]
 800b816:	1821      	adds	r1, r4, r0
 800b818:	428b      	cmp	r3, r1
 800b81a:	bf01      	itttt	eq
 800b81c:	6819      	ldreq	r1, [r3, #0]
 800b81e:	685b      	ldreq	r3, [r3, #4]
 800b820:	1809      	addeq	r1, r1, r0
 800b822:	6021      	streq	r1, [r4, #0]
 800b824:	e7ed      	b.n	800b802 <_free_r+0x1e>
 800b826:	461a      	mov	r2, r3
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	b10b      	cbz	r3, 800b830 <_free_r+0x4c>
 800b82c:	42a3      	cmp	r3, r4
 800b82e:	d9fa      	bls.n	800b826 <_free_r+0x42>
 800b830:	6811      	ldr	r1, [r2, #0]
 800b832:	1850      	adds	r0, r2, r1
 800b834:	42a0      	cmp	r0, r4
 800b836:	d10b      	bne.n	800b850 <_free_r+0x6c>
 800b838:	6820      	ldr	r0, [r4, #0]
 800b83a:	4401      	add	r1, r0
 800b83c:	1850      	adds	r0, r2, r1
 800b83e:	4283      	cmp	r3, r0
 800b840:	6011      	str	r1, [r2, #0]
 800b842:	d1e0      	bne.n	800b806 <_free_r+0x22>
 800b844:	6818      	ldr	r0, [r3, #0]
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	6053      	str	r3, [r2, #4]
 800b84a:	4408      	add	r0, r1
 800b84c:	6010      	str	r0, [r2, #0]
 800b84e:	e7da      	b.n	800b806 <_free_r+0x22>
 800b850:	d902      	bls.n	800b858 <_free_r+0x74>
 800b852:	230c      	movs	r3, #12
 800b854:	602b      	str	r3, [r5, #0]
 800b856:	e7d6      	b.n	800b806 <_free_r+0x22>
 800b858:	6820      	ldr	r0, [r4, #0]
 800b85a:	1821      	adds	r1, r4, r0
 800b85c:	428b      	cmp	r3, r1
 800b85e:	bf04      	itt	eq
 800b860:	6819      	ldreq	r1, [r3, #0]
 800b862:	685b      	ldreq	r3, [r3, #4]
 800b864:	6063      	str	r3, [r4, #4]
 800b866:	bf04      	itt	eq
 800b868:	1809      	addeq	r1, r1, r0
 800b86a:	6021      	streq	r1, [r4, #0]
 800b86c:	6054      	str	r4, [r2, #4]
 800b86e:	e7ca      	b.n	800b806 <_free_r+0x22>
 800b870:	bd38      	pop	{r3, r4, r5, pc}
 800b872:	bf00      	nop
 800b874:	20004320 	.word	0x20004320

0800b878 <__ssputs_r>:
 800b878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b87c:	688e      	ldr	r6, [r1, #8]
 800b87e:	461f      	mov	r7, r3
 800b880:	42be      	cmp	r6, r7
 800b882:	680b      	ldr	r3, [r1, #0]
 800b884:	4682      	mov	sl, r0
 800b886:	460c      	mov	r4, r1
 800b888:	4690      	mov	r8, r2
 800b88a:	d82d      	bhi.n	800b8e8 <__ssputs_r+0x70>
 800b88c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b890:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b894:	d026      	beq.n	800b8e4 <__ssputs_r+0x6c>
 800b896:	6965      	ldr	r5, [r4, #20]
 800b898:	6909      	ldr	r1, [r1, #16]
 800b89a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b89e:	eba3 0901 	sub.w	r9, r3, r1
 800b8a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b8a6:	1c7b      	adds	r3, r7, #1
 800b8a8:	444b      	add	r3, r9
 800b8aa:	106d      	asrs	r5, r5, #1
 800b8ac:	429d      	cmp	r5, r3
 800b8ae:	bf38      	it	cc
 800b8b0:	461d      	movcc	r5, r3
 800b8b2:	0553      	lsls	r3, r2, #21
 800b8b4:	d527      	bpl.n	800b906 <__ssputs_r+0x8e>
 800b8b6:	4629      	mov	r1, r5
 800b8b8:	f7ff fe38 	bl	800b52c <_malloc_r>
 800b8bc:	4606      	mov	r6, r0
 800b8be:	b360      	cbz	r0, 800b91a <__ssputs_r+0xa2>
 800b8c0:	6921      	ldr	r1, [r4, #16]
 800b8c2:	464a      	mov	r2, r9
 800b8c4:	f7ff ff80 	bl	800b7c8 <memcpy>
 800b8c8:	89a3      	ldrh	r3, [r4, #12]
 800b8ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b8ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8d2:	81a3      	strh	r3, [r4, #12]
 800b8d4:	6126      	str	r6, [r4, #16]
 800b8d6:	6165      	str	r5, [r4, #20]
 800b8d8:	444e      	add	r6, r9
 800b8da:	eba5 0509 	sub.w	r5, r5, r9
 800b8de:	6026      	str	r6, [r4, #0]
 800b8e0:	60a5      	str	r5, [r4, #8]
 800b8e2:	463e      	mov	r6, r7
 800b8e4:	42be      	cmp	r6, r7
 800b8e6:	d900      	bls.n	800b8ea <__ssputs_r+0x72>
 800b8e8:	463e      	mov	r6, r7
 800b8ea:	6820      	ldr	r0, [r4, #0]
 800b8ec:	4632      	mov	r2, r6
 800b8ee:	4641      	mov	r1, r8
 800b8f0:	f000 faa8 	bl	800be44 <memmove>
 800b8f4:	68a3      	ldr	r3, [r4, #8]
 800b8f6:	1b9b      	subs	r3, r3, r6
 800b8f8:	60a3      	str	r3, [r4, #8]
 800b8fa:	6823      	ldr	r3, [r4, #0]
 800b8fc:	4433      	add	r3, r6
 800b8fe:	6023      	str	r3, [r4, #0]
 800b900:	2000      	movs	r0, #0
 800b902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b906:	462a      	mov	r2, r5
 800b908:	f000 fab6 	bl	800be78 <_realloc_r>
 800b90c:	4606      	mov	r6, r0
 800b90e:	2800      	cmp	r0, #0
 800b910:	d1e0      	bne.n	800b8d4 <__ssputs_r+0x5c>
 800b912:	6921      	ldr	r1, [r4, #16]
 800b914:	4650      	mov	r0, sl
 800b916:	f7ff ff65 	bl	800b7e4 <_free_r>
 800b91a:	230c      	movs	r3, #12
 800b91c:	f8ca 3000 	str.w	r3, [sl]
 800b920:	89a3      	ldrh	r3, [r4, #12]
 800b922:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b926:	81a3      	strh	r3, [r4, #12]
 800b928:	f04f 30ff 	mov.w	r0, #4294967295
 800b92c:	e7e9      	b.n	800b902 <__ssputs_r+0x8a>
	...

0800b930 <_svfiprintf_r>:
 800b930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b934:	4698      	mov	r8, r3
 800b936:	898b      	ldrh	r3, [r1, #12]
 800b938:	061b      	lsls	r3, r3, #24
 800b93a:	b09d      	sub	sp, #116	@ 0x74
 800b93c:	4607      	mov	r7, r0
 800b93e:	460d      	mov	r5, r1
 800b940:	4614      	mov	r4, r2
 800b942:	d510      	bpl.n	800b966 <_svfiprintf_r+0x36>
 800b944:	690b      	ldr	r3, [r1, #16]
 800b946:	b973      	cbnz	r3, 800b966 <_svfiprintf_r+0x36>
 800b948:	2140      	movs	r1, #64	@ 0x40
 800b94a:	f7ff fdef 	bl	800b52c <_malloc_r>
 800b94e:	6028      	str	r0, [r5, #0]
 800b950:	6128      	str	r0, [r5, #16]
 800b952:	b930      	cbnz	r0, 800b962 <_svfiprintf_r+0x32>
 800b954:	230c      	movs	r3, #12
 800b956:	603b      	str	r3, [r7, #0]
 800b958:	f04f 30ff 	mov.w	r0, #4294967295
 800b95c:	b01d      	add	sp, #116	@ 0x74
 800b95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b962:	2340      	movs	r3, #64	@ 0x40
 800b964:	616b      	str	r3, [r5, #20]
 800b966:	2300      	movs	r3, #0
 800b968:	9309      	str	r3, [sp, #36]	@ 0x24
 800b96a:	2320      	movs	r3, #32
 800b96c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b970:	f8cd 800c 	str.w	r8, [sp, #12]
 800b974:	2330      	movs	r3, #48	@ 0x30
 800b976:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bb14 <_svfiprintf_r+0x1e4>
 800b97a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b97e:	f04f 0901 	mov.w	r9, #1
 800b982:	4623      	mov	r3, r4
 800b984:	469a      	mov	sl, r3
 800b986:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b98a:	b10a      	cbz	r2, 800b990 <_svfiprintf_r+0x60>
 800b98c:	2a25      	cmp	r2, #37	@ 0x25
 800b98e:	d1f9      	bne.n	800b984 <_svfiprintf_r+0x54>
 800b990:	ebba 0b04 	subs.w	fp, sl, r4
 800b994:	d00b      	beq.n	800b9ae <_svfiprintf_r+0x7e>
 800b996:	465b      	mov	r3, fp
 800b998:	4622      	mov	r2, r4
 800b99a:	4629      	mov	r1, r5
 800b99c:	4638      	mov	r0, r7
 800b99e:	f7ff ff6b 	bl	800b878 <__ssputs_r>
 800b9a2:	3001      	adds	r0, #1
 800b9a4:	f000 80a7 	beq.w	800baf6 <_svfiprintf_r+0x1c6>
 800b9a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9aa:	445a      	add	r2, fp
 800b9ac:	9209      	str	r2, [sp, #36]	@ 0x24
 800b9ae:	f89a 3000 	ldrb.w	r3, [sl]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	f000 809f 	beq.w	800baf6 <_svfiprintf_r+0x1c6>
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b9be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9c2:	f10a 0a01 	add.w	sl, sl, #1
 800b9c6:	9304      	str	r3, [sp, #16]
 800b9c8:	9307      	str	r3, [sp, #28]
 800b9ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b9ce:	931a      	str	r3, [sp, #104]	@ 0x68
 800b9d0:	4654      	mov	r4, sl
 800b9d2:	2205      	movs	r2, #5
 800b9d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9d8:	484e      	ldr	r0, [pc, #312]	@ (800bb14 <_svfiprintf_r+0x1e4>)
 800b9da:	f7f4 fc21 	bl	8000220 <memchr>
 800b9de:	9a04      	ldr	r2, [sp, #16]
 800b9e0:	b9d8      	cbnz	r0, 800ba1a <_svfiprintf_r+0xea>
 800b9e2:	06d0      	lsls	r0, r2, #27
 800b9e4:	bf44      	itt	mi
 800b9e6:	2320      	movmi	r3, #32
 800b9e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9ec:	0711      	lsls	r1, r2, #28
 800b9ee:	bf44      	itt	mi
 800b9f0:	232b      	movmi	r3, #43	@ 0x2b
 800b9f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9f6:	f89a 3000 	ldrb.w	r3, [sl]
 800b9fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9fc:	d015      	beq.n	800ba2a <_svfiprintf_r+0xfa>
 800b9fe:	9a07      	ldr	r2, [sp, #28]
 800ba00:	4654      	mov	r4, sl
 800ba02:	2000      	movs	r0, #0
 800ba04:	f04f 0c0a 	mov.w	ip, #10
 800ba08:	4621      	mov	r1, r4
 800ba0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba0e:	3b30      	subs	r3, #48	@ 0x30
 800ba10:	2b09      	cmp	r3, #9
 800ba12:	d94b      	bls.n	800baac <_svfiprintf_r+0x17c>
 800ba14:	b1b0      	cbz	r0, 800ba44 <_svfiprintf_r+0x114>
 800ba16:	9207      	str	r2, [sp, #28]
 800ba18:	e014      	b.n	800ba44 <_svfiprintf_r+0x114>
 800ba1a:	eba0 0308 	sub.w	r3, r0, r8
 800ba1e:	fa09 f303 	lsl.w	r3, r9, r3
 800ba22:	4313      	orrs	r3, r2
 800ba24:	9304      	str	r3, [sp, #16]
 800ba26:	46a2      	mov	sl, r4
 800ba28:	e7d2      	b.n	800b9d0 <_svfiprintf_r+0xa0>
 800ba2a:	9b03      	ldr	r3, [sp, #12]
 800ba2c:	1d19      	adds	r1, r3, #4
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	9103      	str	r1, [sp, #12]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	bfbb      	ittet	lt
 800ba36:	425b      	neglt	r3, r3
 800ba38:	f042 0202 	orrlt.w	r2, r2, #2
 800ba3c:	9307      	strge	r3, [sp, #28]
 800ba3e:	9307      	strlt	r3, [sp, #28]
 800ba40:	bfb8      	it	lt
 800ba42:	9204      	strlt	r2, [sp, #16]
 800ba44:	7823      	ldrb	r3, [r4, #0]
 800ba46:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba48:	d10a      	bne.n	800ba60 <_svfiprintf_r+0x130>
 800ba4a:	7863      	ldrb	r3, [r4, #1]
 800ba4c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba4e:	d132      	bne.n	800bab6 <_svfiprintf_r+0x186>
 800ba50:	9b03      	ldr	r3, [sp, #12]
 800ba52:	1d1a      	adds	r2, r3, #4
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	9203      	str	r2, [sp, #12]
 800ba58:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba5c:	3402      	adds	r4, #2
 800ba5e:	9305      	str	r3, [sp, #20]
 800ba60:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bb24 <_svfiprintf_r+0x1f4>
 800ba64:	7821      	ldrb	r1, [r4, #0]
 800ba66:	2203      	movs	r2, #3
 800ba68:	4650      	mov	r0, sl
 800ba6a:	f7f4 fbd9 	bl	8000220 <memchr>
 800ba6e:	b138      	cbz	r0, 800ba80 <_svfiprintf_r+0x150>
 800ba70:	9b04      	ldr	r3, [sp, #16]
 800ba72:	eba0 000a 	sub.w	r0, r0, sl
 800ba76:	2240      	movs	r2, #64	@ 0x40
 800ba78:	4082      	lsls	r2, r0
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	3401      	adds	r4, #1
 800ba7e:	9304      	str	r3, [sp, #16]
 800ba80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba84:	4824      	ldr	r0, [pc, #144]	@ (800bb18 <_svfiprintf_r+0x1e8>)
 800ba86:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba8a:	2206      	movs	r2, #6
 800ba8c:	f7f4 fbc8 	bl	8000220 <memchr>
 800ba90:	2800      	cmp	r0, #0
 800ba92:	d036      	beq.n	800bb02 <_svfiprintf_r+0x1d2>
 800ba94:	4b21      	ldr	r3, [pc, #132]	@ (800bb1c <_svfiprintf_r+0x1ec>)
 800ba96:	bb1b      	cbnz	r3, 800bae0 <_svfiprintf_r+0x1b0>
 800ba98:	9b03      	ldr	r3, [sp, #12]
 800ba9a:	3307      	adds	r3, #7
 800ba9c:	f023 0307 	bic.w	r3, r3, #7
 800baa0:	3308      	adds	r3, #8
 800baa2:	9303      	str	r3, [sp, #12]
 800baa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baa6:	4433      	add	r3, r6
 800baa8:	9309      	str	r3, [sp, #36]	@ 0x24
 800baaa:	e76a      	b.n	800b982 <_svfiprintf_r+0x52>
 800baac:	fb0c 3202 	mla	r2, ip, r2, r3
 800bab0:	460c      	mov	r4, r1
 800bab2:	2001      	movs	r0, #1
 800bab4:	e7a8      	b.n	800ba08 <_svfiprintf_r+0xd8>
 800bab6:	2300      	movs	r3, #0
 800bab8:	3401      	adds	r4, #1
 800baba:	9305      	str	r3, [sp, #20]
 800babc:	4619      	mov	r1, r3
 800babe:	f04f 0c0a 	mov.w	ip, #10
 800bac2:	4620      	mov	r0, r4
 800bac4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bac8:	3a30      	subs	r2, #48	@ 0x30
 800baca:	2a09      	cmp	r2, #9
 800bacc:	d903      	bls.n	800bad6 <_svfiprintf_r+0x1a6>
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d0c6      	beq.n	800ba60 <_svfiprintf_r+0x130>
 800bad2:	9105      	str	r1, [sp, #20]
 800bad4:	e7c4      	b.n	800ba60 <_svfiprintf_r+0x130>
 800bad6:	fb0c 2101 	mla	r1, ip, r1, r2
 800bada:	4604      	mov	r4, r0
 800badc:	2301      	movs	r3, #1
 800bade:	e7f0      	b.n	800bac2 <_svfiprintf_r+0x192>
 800bae0:	ab03      	add	r3, sp, #12
 800bae2:	9300      	str	r3, [sp, #0]
 800bae4:	462a      	mov	r2, r5
 800bae6:	4b0e      	ldr	r3, [pc, #56]	@ (800bb20 <_svfiprintf_r+0x1f0>)
 800bae8:	a904      	add	r1, sp, #16
 800baea:	4638      	mov	r0, r7
 800baec:	f3af 8000 	nop.w
 800baf0:	1c42      	adds	r2, r0, #1
 800baf2:	4606      	mov	r6, r0
 800baf4:	d1d6      	bne.n	800baa4 <_svfiprintf_r+0x174>
 800baf6:	89ab      	ldrh	r3, [r5, #12]
 800baf8:	065b      	lsls	r3, r3, #25
 800bafa:	f53f af2d 	bmi.w	800b958 <_svfiprintf_r+0x28>
 800bafe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb00:	e72c      	b.n	800b95c <_svfiprintf_r+0x2c>
 800bb02:	ab03      	add	r3, sp, #12
 800bb04:	9300      	str	r3, [sp, #0]
 800bb06:	462a      	mov	r2, r5
 800bb08:	4b05      	ldr	r3, [pc, #20]	@ (800bb20 <_svfiprintf_r+0x1f0>)
 800bb0a:	a904      	add	r1, sp, #16
 800bb0c:	4638      	mov	r0, r7
 800bb0e:	f000 f879 	bl	800bc04 <_printf_i>
 800bb12:	e7ed      	b.n	800baf0 <_svfiprintf_r+0x1c0>
 800bb14:	0800d5e8 	.word	0x0800d5e8
 800bb18:	0800d5f2 	.word	0x0800d5f2
 800bb1c:	00000000 	.word	0x00000000
 800bb20:	0800b879 	.word	0x0800b879
 800bb24:	0800d5ee 	.word	0x0800d5ee

0800bb28 <_printf_common>:
 800bb28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb2c:	4616      	mov	r6, r2
 800bb2e:	4698      	mov	r8, r3
 800bb30:	688a      	ldr	r2, [r1, #8]
 800bb32:	690b      	ldr	r3, [r1, #16]
 800bb34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	bfb8      	it	lt
 800bb3c:	4613      	movlt	r3, r2
 800bb3e:	6033      	str	r3, [r6, #0]
 800bb40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bb44:	4607      	mov	r7, r0
 800bb46:	460c      	mov	r4, r1
 800bb48:	b10a      	cbz	r2, 800bb4e <_printf_common+0x26>
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	6033      	str	r3, [r6, #0]
 800bb4e:	6823      	ldr	r3, [r4, #0]
 800bb50:	0699      	lsls	r1, r3, #26
 800bb52:	bf42      	ittt	mi
 800bb54:	6833      	ldrmi	r3, [r6, #0]
 800bb56:	3302      	addmi	r3, #2
 800bb58:	6033      	strmi	r3, [r6, #0]
 800bb5a:	6825      	ldr	r5, [r4, #0]
 800bb5c:	f015 0506 	ands.w	r5, r5, #6
 800bb60:	d106      	bne.n	800bb70 <_printf_common+0x48>
 800bb62:	f104 0a19 	add.w	sl, r4, #25
 800bb66:	68e3      	ldr	r3, [r4, #12]
 800bb68:	6832      	ldr	r2, [r6, #0]
 800bb6a:	1a9b      	subs	r3, r3, r2
 800bb6c:	42ab      	cmp	r3, r5
 800bb6e:	dc26      	bgt.n	800bbbe <_printf_common+0x96>
 800bb70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bb74:	6822      	ldr	r2, [r4, #0]
 800bb76:	3b00      	subs	r3, #0
 800bb78:	bf18      	it	ne
 800bb7a:	2301      	movne	r3, #1
 800bb7c:	0692      	lsls	r2, r2, #26
 800bb7e:	d42b      	bmi.n	800bbd8 <_printf_common+0xb0>
 800bb80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bb84:	4641      	mov	r1, r8
 800bb86:	4638      	mov	r0, r7
 800bb88:	47c8      	blx	r9
 800bb8a:	3001      	adds	r0, #1
 800bb8c:	d01e      	beq.n	800bbcc <_printf_common+0xa4>
 800bb8e:	6823      	ldr	r3, [r4, #0]
 800bb90:	6922      	ldr	r2, [r4, #16]
 800bb92:	f003 0306 	and.w	r3, r3, #6
 800bb96:	2b04      	cmp	r3, #4
 800bb98:	bf02      	ittt	eq
 800bb9a:	68e5      	ldreq	r5, [r4, #12]
 800bb9c:	6833      	ldreq	r3, [r6, #0]
 800bb9e:	1aed      	subeq	r5, r5, r3
 800bba0:	68a3      	ldr	r3, [r4, #8]
 800bba2:	bf0c      	ite	eq
 800bba4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bba8:	2500      	movne	r5, #0
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	bfc4      	itt	gt
 800bbae:	1a9b      	subgt	r3, r3, r2
 800bbb0:	18ed      	addgt	r5, r5, r3
 800bbb2:	2600      	movs	r6, #0
 800bbb4:	341a      	adds	r4, #26
 800bbb6:	42b5      	cmp	r5, r6
 800bbb8:	d11a      	bne.n	800bbf0 <_printf_common+0xc8>
 800bbba:	2000      	movs	r0, #0
 800bbbc:	e008      	b.n	800bbd0 <_printf_common+0xa8>
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	4652      	mov	r2, sl
 800bbc2:	4641      	mov	r1, r8
 800bbc4:	4638      	mov	r0, r7
 800bbc6:	47c8      	blx	r9
 800bbc8:	3001      	adds	r0, #1
 800bbca:	d103      	bne.n	800bbd4 <_printf_common+0xac>
 800bbcc:	f04f 30ff 	mov.w	r0, #4294967295
 800bbd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbd4:	3501      	adds	r5, #1
 800bbd6:	e7c6      	b.n	800bb66 <_printf_common+0x3e>
 800bbd8:	18e1      	adds	r1, r4, r3
 800bbda:	1c5a      	adds	r2, r3, #1
 800bbdc:	2030      	movs	r0, #48	@ 0x30
 800bbde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bbe2:	4422      	add	r2, r4
 800bbe4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bbe8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bbec:	3302      	adds	r3, #2
 800bbee:	e7c7      	b.n	800bb80 <_printf_common+0x58>
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	4622      	mov	r2, r4
 800bbf4:	4641      	mov	r1, r8
 800bbf6:	4638      	mov	r0, r7
 800bbf8:	47c8      	blx	r9
 800bbfa:	3001      	adds	r0, #1
 800bbfc:	d0e6      	beq.n	800bbcc <_printf_common+0xa4>
 800bbfe:	3601      	adds	r6, #1
 800bc00:	e7d9      	b.n	800bbb6 <_printf_common+0x8e>
	...

0800bc04 <_printf_i>:
 800bc04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc08:	7e0f      	ldrb	r7, [r1, #24]
 800bc0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bc0c:	2f78      	cmp	r7, #120	@ 0x78
 800bc0e:	4691      	mov	r9, r2
 800bc10:	4680      	mov	r8, r0
 800bc12:	460c      	mov	r4, r1
 800bc14:	469a      	mov	sl, r3
 800bc16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bc1a:	d807      	bhi.n	800bc2c <_printf_i+0x28>
 800bc1c:	2f62      	cmp	r7, #98	@ 0x62
 800bc1e:	d80a      	bhi.n	800bc36 <_printf_i+0x32>
 800bc20:	2f00      	cmp	r7, #0
 800bc22:	f000 80d2 	beq.w	800bdca <_printf_i+0x1c6>
 800bc26:	2f58      	cmp	r7, #88	@ 0x58
 800bc28:	f000 80b9 	beq.w	800bd9e <_printf_i+0x19a>
 800bc2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bc30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bc34:	e03a      	b.n	800bcac <_printf_i+0xa8>
 800bc36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bc3a:	2b15      	cmp	r3, #21
 800bc3c:	d8f6      	bhi.n	800bc2c <_printf_i+0x28>
 800bc3e:	a101      	add	r1, pc, #4	@ (adr r1, 800bc44 <_printf_i+0x40>)
 800bc40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bc44:	0800bc9d 	.word	0x0800bc9d
 800bc48:	0800bcb1 	.word	0x0800bcb1
 800bc4c:	0800bc2d 	.word	0x0800bc2d
 800bc50:	0800bc2d 	.word	0x0800bc2d
 800bc54:	0800bc2d 	.word	0x0800bc2d
 800bc58:	0800bc2d 	.word	0x0800bc2d
 800bc5c:	0800bcb1 	.word	0x0800bcb1
 800bc60:	0800bc2d 	.word	0x0800bc2d
 800bc64:	0800bc2d 	.word	0x0800bc2d
 800bc68:	0800bc2d 	.word	0x0800bc2d
 800bc6c:	0800bc2d 	.word	0x0800bc2d
 800bc70:	0800bdb1 	.word	0x0800bdb1
 800bc74:	0800bcdb 	.word	0x0800bcdb
 800bc78:	0800bd6b 	.word	0x0800bd6b
 800bc7c:	0800bc2d 	.word	0x0800bc2d
 800bc80:	0800bc2d 	.word	0x0800bc2d
 800bc84:	0800bdd3 	.word	0x0800bdd3
 800bc88:	0800bc2d 	.word	0x0800bc2d
 800bc8c:	0800bcdb 	.word	0x0800bcdb
 800bc90:	0800bc2d 	.word	0x0800bc2d
 800bc94:	0800bc2d 	.word	0x0800bc2d
 800bc98:	0800bd73 	.word	0x0800bd73
 800bc9c:	6833      	ldr	r3, [r6, #0]
 800bc9e:	1d1a      	adds	r2, r3, #4
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	6032      	str	r2, [r6, #0]
 800bca4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bca8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bcac:	2301      	movs	r3, #1
 800bcae:	e09d      	b.n	800bdec <_printf_i+0x1e8>
 800bcb0:	6833      	ldr	r3, [r6, #0]
 800bcb2:	6820      	ldr	r0, [r4, #0]
 800bcb4:	1d19      	adds	r1, r3, #4
 800bcb6:	6031      	str	r1, [r6, #0]
 800bcb8:	0606      	lsls	r6, r0, #24
 800bcba:	d501      	bpl.n	800bcc0 <_printf_i+0xbc>
 800bcbc:	681d      	ldr	r5, [r3, #0]
 800bcbe:	e003      	b.n	800bcc8 <_printf_i+0xc4>
 800bcc0:	0645      	lsls	r5, r0, #25
 800bcc2:	d5fb      	bpl.n	800bcbc <_printf_i+0xb8>
 800bcc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bcc8:	2d00      	cmp	r5, #0
 800bcca:	da03      	bge.n	800bcd4 <_printf_i+0xd0>
 800bccc:	232d      	movs	r3, #45	@ 0x2d
 800bcce:	426d      	negs	r5, r5
 800bcd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bcd4:	4859      	ldr	r0, [pc, #356]	@ (800be3c <_printf_i+0x238>)
 800bcd6:	230a      	movs	r3, #10
 800bcd8:	e011      	b.n	800bcfe <_printf_i+0xfa>
 800bcda:	6821      	ldr	r1, [r4, #0]
 800bcdc:	6833      	ldr	r3, [r6, #0]
 800bcde:	0608      	lsls	r0, r1, #24
 800bce0:	f853 5b04 	ldr.w	r5, [r3], #4
 800bce4:	d402      	bmi.n	800bcec <_printf_i+0xe8>
 800bce6:	0649      	lsls	r1, r1, #25
 800bce8:	bf48      	it	mi
 800bcea:	b2ad      	uxthmi	r5, r5
 800bcec:	2f6f      	cmp	r7, #111	@ 0x6f
 800bcee:	4853      	ldr	r0, [pc, #332]	@ (800be3c <_printf_i+0x238>)
 800bcf0:	6033      	str	r3, [r6, #0]
 800bcf2:	bf14      	ite	ne
 800bcf4:	230a      	movne	r3, #10
 800bcf6:	2308      	moveq	r3, #8
 800bcf8:	2100      	movs	r1, #0
 800bcfa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bcfe:	6866      	ldr	r6, [r4, #4]
 800bd00:	60a6      	str	r6, [r4, #8]
 800bd02:	2e00      	cmp	r6, #0
 800bd04:	bfa2      	ittt	ge
 800bd06:	6821      	ldrge	r1, [r4, #0]
 800bd08:	f021 0104 	bicge.w	r1, r1, #4
 800bd0c:	6021      	strge	r1, [r4, #0]
 800bd0e:	b90d      	cbnz	r5, 800bd14 <_printf_i+0x110>
 800bd10:	2e00      	cmp	r6, #0
 800bd12:	d04b      	beq.n	800bdac <_printf_i+0x1a8>
 800bd14:	4616      	mov	r6, r2
 800bd16:	fbb5 f1f3 	udiv	r1, r5, r3
 800bd1a:	fb03 5711 	mls	r7, r3, r1, r5
 800bd1e:	5dc7      	ldrb	r7, [r0, r7]
 800bd20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bd24:	462f      	mov	r7, r5
 800bd26:	42bb      	cmp	r3, r7
 800bd28:	460d      	mov	r5, r1
 800bd2a:	d9f4      	bls.n	800bd16 <_printf_i+0x112>
 800bd2c:	2b08      	cmp	r3, #8
 800bd2e:	d10b      	bne.n	800bd48 <_printf_i+0x144>
 800bd30:	6823      	ldr	r3, [r4, #0]
 800bd32:	07df      	lsls	r7, r3, #31
 800bd34:	d508      	bpl.n	800bd48 <_printf_i+0x144>
 800bd36:	6923      	ldr	r3, [r4, #16]
 800bd38:	6861      	ldr	r1, [r4, #4]
 800bd3a:	4299      	cmp	r1, r3
 800bd3c:	bfde      	ittt	le
 800bd3e:	2330      	movle	r3, #48	@ 0x30
 800bd40:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bd44:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bd48:	1b92      	subs	r2, r2, r6
 800bd4a:	6122      	str	r2, [r4, #16]
 800bd4c:	f8cd a000 	str.w	sl, [sp]
 800bd50:	464b      	mov	r3, r9
 800bd52:	aa03      	add	r2, sp, #12
 800bd54:	4621      	mov	r1, r4
 800bd56:	4640      	mov	r0, r8
 800bd58:	f7ff fee6 	bl	800bb28 <_printf_common>
 800bd5c:	3001      	adds	r0, #1
 800bd5e:	d14a      	bne.n	800bdf6 <_printf_i+0x1f2>
 800bd60:	f04f 30ff 	mov.w	r0, #4294967295
 800bd64:	b004      	add	sp, #16
 800bd66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd6a:	6823      	ldr	r3, [r4, #0]
 800bd6c:	f043 0320 	orr.w	r3, r3, #32
 800bd70:	6023      	str	r3, [r4, #0]
 800bd72:	4833      	ldr	r0, [pc, #204]	@ (800be40 <_printf_i+0x23c>)
 800bd74:	2778      	movs	r7, #120	@ 0x78
 800bd76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bd7a:	6823      	ldr	r3, [r4, #0]
 800bd7c:	6831      	ldr	r1, [r6, #0]
 800bd7e:	061f      	lsls	r7, r3, #24
 800bd80:	f851 5b04 	ldr.w	r5, [r1], #4
 800bd84:	d402      	bmi.n	800bd8c <_printf_i+0x188>
 800bd86:	065f      	lsls	r7, r3, #25
 800bd88:	bf48      	it	mi
 800bd8a:	b2ad      	uxthmi	r5, r5
 800bd8c:	6031      	str	r1, [r6, #0]
 800bd8e:	07d9      	lsls	r1, r3, #31
 800bd90:	bf44      	itt	mi
 800bd92:	f043 0320 	orrmi.w	r3, r3, #32
 800bd96:	6023      	strmi	r3, [r4, #0]
 800bd98:	b11d      	cbz	r5, 800bda2 <_printf_i+0x19e>
 800bd9a:	2310      	movs	r3, #16
 800bd9c:	e7ac      	b.n	800bcf8 <_printf_i+0xf4>
 800bd9e:	4827      	ldr	r0, [pc, #156]	@ (800be3c <_printf_i+0x238>)
 800bda0:	e7e9      	b.n	800bd76 <_printf_i+0x172>
 800bda2:	6823      	ldr	r3, [r4, #0]
 800bda4:	f023 0320 	bic.w	r3, r3, #32
 800bda8:	6023      	str	r3, [r4, #0]
 800bdaa:	e7f6      	b.n	800bd9a <_printf_i+0x196>
 800bdac:	4616      	mov	r6, r2
 800bdae:	e7bd      	b.n	800bd2c <_printf_i+0x128>
 800bdb0:	6833      	ldr	r3, [r6, #0]
 800bdb2:	6825      	ldr	r5, [r4, #0]
 800bdb4:	6961      	ldr	r1, [r4, #20]
 800bdb6:	1d18      	adds	r0, r3, #4
 800bdb8:	6030      	str	r0, [r6, #0]
 800bdba:	062e      	lsls	r6, r5, #24
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	d501      	bpl.n	800bdc4 <_printf_i+0x1c0>
 800bdc0:	6019      	str	r1, [r3, #0]
 800bdc2:	e002      	b.n	800bdca <_printf_i+0x1c6>
 800bdc4:	0668      	lsls	r0, r5, #25
 800bdc6:	d5fb      	bpl.n	800bdc0 <_printf_i+0x1bc>
 800bdc8:	8019      	strh	r1, [r3, #0]
 800bdca:	2300      	movs	r3, #0
 800bdcc:	6123      	str	r3, [r4, #16]
 800bdce:	4616      	mov	r6, r2
 800bdd0:	e7bc      	b.n	800bd4c <_printf_i+0x148>
 800bdd2:	6833      	ldr	r3, [r6, #0]
 800bdd4:	1d1a      	adds	r2, r3, #4
 800bdd6:	6032      	str	r2, [r6, #0]
 800bdd8:	681e      	ldr	r6, [r3, #0]
 800bdda:	6862      	ldr	r2, [r4, #4]
 800bddc:	2100      	movs	r1, #0
 800bdde:	4630      	mov	r0, r6
 800bde0:	f7f4 fa1e 	bl	8000220 <memchr>
 800bde4:	b108      	cbz	r0, 800bdea <_printf_i+0x1e6>
 800bde6:	1b80      	subs	r0, r0, r6
 800bde8:	6060      	str	r0, [r4, #4]
 800bdea:	6863      	ldr	r3, [r4, #4]
 800bdec:	6123      	str	r3, [r4, #16]
 800bdee:	2300      	movs	r3, #0
 800bdf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bdf4:	e7aa      	b.n	800bd4c <_printf_i+0x148>
 800bdf6:	6923      	ldr	r3, [r4, #16]
 800bdf8:	4632      	mov	r2, r6
 800bdfa:	4649      	mov	r1, r9
 800bdfc:	4640      	mov	r0, r8
 800bdfe:	47d0      	blx	sl
 800be00:	3001      	adds	r0, #1
 800be02:	d0ad      	beq.n	800bd60 <_printf_i+0x15c>
 800be04:	6823      	ldr	r3, [r4, #0]
 800be06:	079b      	lsls	r3, r3, #30
 800be08:	d413      	bmi.n	800be32 <_printf_i+0x22e>
 800be0a:	68e0      	ldr	r0, [r4, #12]
 800be0c:	9b03      	ldr	r3, [sp, #12]
 800be0e:	4298      	cmp	r0, r3
 800be10:	bfb8      	it	lt
 800be12:	4618      	movlt	r0, r3
 800be14:	e7a6      	b.n	800bd64 <_printf_i+0x160>
 800be16:	2301      	movs	r3, #1
 800be18:	4632      	mov	r2, r6
 800be1a:	4649      	mov	r1, r9
 800be1c:	4640      	mov	r0, r8
 800be1e:	47d0      	blx	sl
 800be20:	3001      	adds	r0, #1
 800be22:	d09d      	beq.n	800bd60 <_printf_i+0x15c>
 800be24:	3501      	adds	r5, #1
 800be26:	68e3      	ldr	r3, [r4, #12]
 800be28:	9903      	ldr	r1, [sp, #12]
 800be2a:	1a5b      	subs	r3, r3, r1
 800be2c:	42ab      	cmp	r3, r5
 800be2e:	dcf2      	bgt.n	800be16 <_printf_i+0x212>
 800be30:	e7eb      	b.n	800be0a <_printf_i+0x206>
 800be32:	2500      	movs	r5, #0
 800be34:	f104 0619 	add.w	r6, r4, #25
 800be38:	e7f5      	b.n	800be26 <_printf_i+0x222>
 800be3a:	bf00      	nop
 800be3c:	0800d5f9 	.word	0x0800d5f9
 800be40:	0800d60a 	.word	0x0800d60a

0800be44 <memmove>:
 800be44:	4288      	cmp	r0, r1
 800be46:	b510      	push	{r4, lr}
 800be48:	eb01 0402 	add.w	r4, r1, r2
 800be4c:	d902      	bls.n	800be54 <memmove+0x10>
 800be4e:	4284      	cmp	r4, r0
 800be50:	4623      	mov	r3, r4
 800be52:	d807      	bhi.n	800be64 <memmove+0x20>
 800be54:	1e43      	subs	r3, r0, #1
 800be56:	42a1      	cmp	r1, r4
 800be58:	d008      	beq.n	800be6c <memmove+0x28>
 800be5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be62:	e7f8      	b.n	800be56 <memmove+0x12>
 800be64:	4402      	add	r2, r0
 800be66:	4601      	mov	r1, r0
 800be68:	428a      	cmp	r2, r1
 800be6a:	d100      	bne.n	800be6e <memmove+0x2a>
 800be6c:	bd10      	pop	{r4, pc}
 800be6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be76:	e7f7      	b.n	800be68 <memmove+0x24>

0800be78 <_realloc_r>:
 800be78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be7c:	4680      	mov	r8, r0
 800be7e:	4615      	mov	r5, r2
 800be80:	460c      	mov	r4, r1
 800be82:	b921      	cbnz	r1, 800be8e <_realloc_r+0x16>
 800be84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be88:	4611      	mov	r1, r2
 800be8a:	f7ff bb4f 	b.w	800b52c <_malloc_r>
 800be8e:	b92a      	cbnz	r2, 800be9c <_realloc_r+0x24>
 800be90:	f7ff fca8 	bl	800b7e4 <_free_r>
 800be94:	2400      	movs	r4, #0
 800be96:	4620      	mov	r0, r4
 800be98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be9c:	f000 f81a 	bl	800bed4 <_malloc_usable_size_r>
 800bea0:	4285      	cmp	r5, r0
 800bea2:	4606      	mov	r6, r0
 800bea4:	d802      	bhi.n	800beac <_realloc_r+0x34>
 800bea6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800beaa:	d8f4      	bhi.n	800be96 <_realloc_r+0x1e>
 800beac:	4629      	mov	r1, r5
 800beae:	4640      	mov	r0, r8
 800beb0:	f7ff fb3c 	bl	800b52c <_malloc_r>
 800beb4:	4607      	mov	r7, r0
 800beb6:	2800      	cmp	r0, #0
 800beb8:	d0ec      	beq.n	800be94 <_realloc_r+0x1c>
 800beba:	42b5      	cmp	r5, r6
 800bebc:	462a      	mov	r2, r5
 800bebe:	4621      	mov	r1, r4
 800bec0:	bf28      	it	cs
 800bec2:	4632      	movcs	r2, r6
 800bec4:	f7ff fc80 	bl	800b7c8 <memcpy>
 800bec8:	4621      	mov	r1, r4
 800beca:	4640      	mov	r0, r8
 800becc:	f7ff fc8a 	bl	800b7e4 <_free_r>
 800bed0:	463c      	mov	r4, r7
 800bed2:	e7e0      	b.n	800be96 <_realloc_r+0x1e>

0800bed4 <_malloc_usable_size_r>:
 800bed4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bed8:	1f18      	subs	r0, r3, #4
 800beda:	2b00      	cmp	r3, #0
 800bedc:	bfbc      	itt	lt
 800bede:	580b      	ldrlt	r3, [r1, r0]
 800bee0:	18c0      	addlt	r0, r0, r3
 800bee2:	4770      	bx	lr

0800bee4 <pow>:
 800bee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bee6:	ed2d 8b02 	vpush	{d8}
 800beea:	eeb0 8a40 	vmov.f32	s16, s0
 800beee:	eef0 8a60 	vmov.f32	s17, s1
 800bef2:	ec55 4b11 	vmov	r4, r5, d1
 800bef6:	f000 f873 	bl	800bfe0 <__ieee754_pow>
 800befa:	4622      	mov	r2, r4
 800befc:	462b      	mov	r3, r5
 800befe:	4620      	mov	r0, r4
 800bf00:	4629      	mov	r1, r5
 800bf02:	ec57 6b10 	vmov	r6, r7, d0
 800bf06:	f7f4 fe31 	bl	8000b6c <__aeabi_dcmpun>
 800bf0a:	2800      	cmp	r0, #0
 800bf0c:	d13b      	bne.n	800bf86 <pow+0xa2>
 800bf0e:	ec51 0b18 	vmov	r0, r1, d8
 800bf12:	2200      	movs	r2, #0
 800bf14:	2300      	movs	r3, #0
 800bf16:	f7f4 fdf7 	bl	8000b08 <__aeabi_dcmpeq>
 800bf1a:	b1b8      	cbz	r0, 800bf4c <pow+0x68>
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	2300      	movs	r3, #0
 800bf20:	4620      	mov	r0, r4
 800bf22:	4629      	mov	r1, r5
 800bf24:	f7f4 fdf0 	bl	8000b08 <__aeabi_dcmpeq>
 800bf28:	2800      	cmp	r0, #0
 800bf2a:	d146      	bne.n	800bfba <pow+0xd6>
 800bf2c:	ec45 4b10 	vmov	d0, r4, r5
 800bf30:	f000 f848 	bl	800bfc4 <finite>
 800bf34:	b338      	cbz	r0, 800bf86 <pow+0xa2>
 800bf36:	2200      	movs	r2, #0
 800bf38:	2300      	movs	r3, #0
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	4629      	mov	r1, r5
 800bf3e:	f7f4 fded 	bl	8000b1c <__aeabi_dcmplt>
 800bf42:	b300      	cbz	r0, 800bf86 <pow+0xa2>
 800bf44:	f7ff fc14 	bl	800b770 <__errno>
 800bf48:	2322      	movs	r3, #34	@ 0x22
 800bf4a:	e01b      	b.n	800bf84 <pow+0xa0>
 800bf4c:	ec47 6b10 	vmov	d0, r6, r7
 800bf50:	f000 f838 	bl	800bfc4 <finite>
 800bf54:	b9e0      	cbnz	r0, 800bf90 <pow+0xac>
 800bf56:	eeb0 0a48 	vmov.f32	s0, s16
 800bf5a:	eef0 0a68 	vmov.f32	s1, s17
 800bf5e:	f000 f831 	bl	800bfc4 <finite>
 800bf62:	b1a8      	cbz	r0, 800bf90 <pow+0xac>
 800bf64:	ec45 4b10 	vmov	d0, r4, r5
 800bf68:	f000 f82c 	bl	800bfc4 <finite>
 800bf6c:	b180      	cbz	r0, 800bf90 <pow+0xac>
 800bf6e:	4632      	mov	r2, r6
 800bf70:	463b      	mov	r3, r7
 800bf72:	4630      	mov	r0, r6
 800bf74:	4639      	mov	r1, r7
 800bf76:	f7f4 fdf9 	bl	8000b6c <__aeabi_dcmpun>
 800bf7a:	2800      	cmp	r0, #0
 800bf7c:	d0e2      	beq.n	800bf44 <pow+0x60>
 800bf7e:	f7ff fbf7 	bl	800b770 <__errno>
 800bf82:	2321      	movs	r3, #33	@ 0x21
 800bf84:	6003      	str	r3, [r0, #0]
 800bf86:	ecbd 8b02 	vpop	{d8}
 800bf8a:	ec47 6b10 	vmov	d0, r6, r7
 800bf8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf90:	2200      	movs	r2, #0
 800bf92:	2300      	movs	r3, #0
 800bf94:	4630      	mov	r0, r6
 800bf96:	4639      	mov	r1, r7
 800bf98:	f7f4 fdb6 	bl	8000b08 <__aeabi_dcmpeq>
 800bf9c:	2800      	cmp	r0, #0
 800bf9e:	d0f2      	beq.n	800bf86 <pow+0xa2>
 800bfa0:	eeb0 0a48 	vmov.f32	s0, s16
 800bfa4:	eef0 0a68 	vmov.f32	s1, s17
 800bfa8:	f000 f80c 	bl	800bfc4 <finite>
 800bfac:	2800      	cmp	r0, #0
 800bfae:	d0ea      	beq.n	800bf86 <pow+0xa2>
 800bfb0:	ec45 4b10 	vmov	d0, r4, r5
 800bfb4:	f000 f806 	bl	800bfc4 <finite>
 800bfb8:	e7c3      	b.n	800bf42 <pow+0x5e>
 800bfba:	4f01      	ldr	r7, [pc, #4]	@ (800bfc0 <pow+0xdc>)
 800bfbc:	2600      	movs	r6, #0
 800bfbe:	e7e2      	b.n	800bf86 <pow+0xa2>
 800bfc0:	3ff00000 	.word	0x3ff00000

0800bfc4 <finite>:
 800bfc4:	b082      	sub	sp, #8
 800bfc6:	ed8d 0b00 	vstr	d0, [sp]
 800bfca:	9801      	ldr	r0, [sp, #4]
 800bfcc:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800bfd0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800bfd4:	0fc0      	lsrs	r0, r0, #31
 800bfd6:	b002      	add	sp, #8
 800bfd8:	4770      	bx	lr
 800bfda:	0000      	movs	r0, r0
 800bfdc:	0000      	movs	r0, r0
	...

0800bfe0 <__ieee754_pow>:
 800bfe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfe4:	b091      	sub	sp, #68	@ 0x44
 800bfe6:	ed8d 1b00 	vstr	d1, [sp]
 800bfea:	e9dd 1900 	ldrd	r1, r9, [sp]
 800bfee:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800bff2:	ea5a 0001 	orrs.w	r0, sl, r1
 800bff6:	ec57 6b10 	vmov	r6, r7, d0
 800bffa:	d113      	bne.n	800c024 <__ieee754_pow+0x44>
 800bffc:	19b3      	adds	r3, r6, r6
 800bffe:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800c002:	4152      	adcs	r2, r2
 800c004:	4298      	cmp	r0, r3
 800c006:	4b98      	ldr	r3, [pc, #608]	@ (800c268 <__ieee754_pow+0x288>)
 800c008:	4193      	sbcs	r3, r2
 800c00a:	f080 84ea 	bcs.w	800c9e2 <__ieee754_pow+0xa02>
 800c00e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c012:	4630      	mov	r0, r6
 800c014:	4639      	mov	r1, r7
 800c016:	f7f4 f959 	bl	80002cc <__adddf3>
 800c01a:	ec41 0b10 	vmov	d0, r0, r1
 800c01e:	b011      	add	sp, #68	@ 0x44
 800c020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c024:	4a91      	ldr	r2, [pc, #580]	@ (800c26c <__ieee754_pow+0x28c>)
 800c026:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c02a:	4590      	cmp	r8, r2
 800c02c:	463d      	mov	r5, r7
 800c02e:	4633      	mov	r3, r6
 800c030:	d806      	bhi.n	800c040 <__ieee754_pow+0x60>
 800c032:	d101      	bne.n	800c038 <__ieee754_pow+0x58>
 800c034:	2e00      	cmp	r6, #0
 800c036:	d1ea      	bne.n	800c00e <__ieee754_pow+0x2e>
 800c038:	4592      	cmp	sl, r2
 800c03a:	d801      	bhi.n	800c040 <__ieee754_pow+0x60>
 800c03c:	d10e      	bne.n	800c05c <__ieee754_pow+0x7c>
 800c03e:	b169      	cbz	r1, 800c05c <__ieee754_pow+0x7c>
 800c040:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800c044:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800c048:	431d      	orrs	r5, r3
 800c04a:	d1e0      	bne.n	800c00e <__ieee754_pow+0x2e>
 800c04c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c050:	18db      	adds	r3, r3, r3
 800c052:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800c056:	4152      	adcs	r2, r2
 800c058:	429d      	cmp	r5, r3
 800c05a:	e7d4      	b.n	800c006 <__ieee754_pow+0x26>
 800c05c:	2d00      	cmp	r5, #0
 800c05e:	46c3      	mov	fp, r8
 800c060:	da3a      	bge.n	800c0d8 <__ieee754_pow+0xf8>
 800c062:	4a83      	ldr	r2, [pc, #524]	@ (800c270 <__ieee754_pow+0x290>)
 800c064:	4592      	cmp	sl, r2
 800c066:	d84d      	bhi.n	800c104 <__ieee754_pow+0x124>
 800c068:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800c06c:	4592      	cmp	sl, r2
 800c06e:	f240 84c7 	bls.w	800ca00 <__ieee754_pow+0xa20>
 800c072:	ea4f 522a 	mov.w	r2, sl, asr #20
 800c076:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800c07a:	2a14      	cmp	r2, #20
 800c07c:	dd0f      	ble.n	800c09e <__ieee754_pow+0xbe>
 800c07e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800c082:	fa21 f402 	lsr.w	r4, r1, r2
 800c086:	fa04 f202 	lsl.w	r2, r4, r2
 800c08a:	428a      	cmp	r2, r1
 800c08c:	f040 84b8 	bne.w	800ca00 <__ieee754_pow+0xa20>
 800c090:	f004 0401 	and.w	r4, r4, #1
 800c094:	f1c4 0402 	rsb	r4, r4, #2
 800c098:	2900      	cmp	r1, #0
 800c09a:	d158      	bne.n	800c14e <__ieee754_pow+0x16e>
 800c09c:	e00e      	b.n	800c0bc <__ieee754_pow+0xdc>
 800c09e:	2900      	cmp	r1, #0
 800c0a0:	d154      	bne.n	800c14c <__ieee754_pow+0x16c>
 800c0a2:	f1c2 0214 	rsb	r2, r2, #20
 800c0a6:	fa4a f402 	asr.w	r4, sl, r2
 800c0aa:	fa04 f202 	lsl.w	r2, r4, r2
 800c0ae:	4552      	cmp	r2, sl
 800c0b0:	f040 84a3 	bne.w	800c9fa <__ieee754_pow+0xa1a>
 800c0b4:	f004 0401 	and.w	r4, r4, #1
 800c0b8:	f1c4 0402 	rsb	r4, r4, #2
 800c0bc:	4a6d      	ldr	r2, [pc, #436]	@ (800c274 <__ieee754_pow+0x294>)
 800c0be:	4592      	cmp	sl, r2
 800c0c0:	d12e      	bne.n	800c120 <__ieee754_pow+0x140>
 800c0c2:	f1b9 0f00 	cmp.w	r9, #0
 800c0c6:	f280 8494 	bge.w	800c9f2 <__ieee754_pow+0xa12>
 800c0ca:	496a      	ldr	r1, [pc, #424]	@ (800c274 <__ieee754_pow+0x294>)
 800c0cc:	4632      	mov	r2, r6
 800c0ce:	463b      	mov	r3, r7
 800c0d0:	2000      	movs	r0, #0
 800c0d2:	f7f4 fbdb 	bl	800088c <__aeabi_ddiv>
 800c0d6:	e7a0      	b.n	800c01a <__ieee754_pow+0x3a>
 800c0d8:	2400      	movs	r4, #0
 800c0da:	bbc1      	cbnz	r1, 800c14e <__ieee754_pow+0x16e>
 800c0dc:	4a63      	ldr	r2, [pc, #396]	@ (800c26c <__ieee754_pow+0x28c>)
 800c0de:	4592      	cmp	sl, r2
 800c0e0:	d1ec      	bne.n	800c0bc <__ieee754_pow+0xdc>
 800c0e2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800c0e6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800c0ea:	431a      	orrs	r2, r3
 800c0ec:	f000 8479 	beq.w	800c9e2 <__ieee754_pow+0xa02>
 800c0f0:	4b61      	ldr	r3, [pc, #388]	@ (800c278 <__ieee754_pow+0x298>)
 800c0f2:	4598      	cmp	r8, r3
 800c0f4:	d908      	bls.n	800c108 <__ieee754_pow+0x128>
 800c0f6:	f1b9 0f00 	cmp.w	r9, #0
 800c0fa:	f2c0 8476 	blt.w	800c9ea <__ieee754_pow+0xa0a>
 800c0fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c102:	e78a      	b.n	800c01a <__ieee754_pow+0x3a>
 800c104:	2402      	movs	r4, #2
 800c106:	e7e8      	b.n	800c0da <__ieee754_pow+0xfa>
 800c108:	f1b9 0f00 	cmp.w	r9, #0
 800c10c:	f04f 0000 	mov.w	r0, #0
 800c110:	f04f 0100 	mov.w	r1, #0
 800c114:	da81      	bge.n	800c01a <__ieee754_pow+0x3a>
 800c116:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c11a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800c11e:	e77c      	b.n	800c01a <__ieee754_pow+0x3a>
 800c120:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800c124:	d106      	bne.n	800c134 <__ieee754_pow+0x154>
 800c126:	4632      	mov	r2, r6
 800c128:	463b      	mov	r3, r7
 800c12a:	4630      	mov	r0, r6
 800c12c:	4639      	mov	r1, r7
 800c12e:	f7f4 fa83 	bl	8000638 <__aeabi_dmul>
 800c132:	e772      	b.n	800c01a <__ieee754_pow+0x3a>
 800c134:	4a51      	ldr	r2, [pc, #324]	@ (800c27c <__ieee754_pow+0x29c>)
 800c136:	4591      	cmp	r9, r2
 800c138:	d109      	bne.n	800c14e <__ieee754_pow+0x16e>
 800c13a:	2d00      	cmp	r5, #0
 800c13c:	db07      	blt.n	800c14e <__ieee754_pow+0x16e>
 800c13e:	ec47 6b10 	vmov	d0, r6, r7
 800c142:	b011      	add	sp, #68	@ 0x44
 800c144:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c148:	f000 bd52 	b.w	800cbf0 <__ieee754_sqrt>
 800c14c:	2400      	movs	r4, #0
 800c14e:	ec47 6b10 	vmov	d0, r6, r7
 800c152:	9302      	str	r3, [sp, #8]
 800c154:	f000 fc88 	bl	800ca68 <fabs>
 800c158:	9b02      	ldr	r3, [sp, #8]
 800c15a:	ec51 0b10 	vmov	r0, r1, d0
 800c15e:	bb53      	cbnz	r3, 800c1b6 <__ieee754_pow+0x1d6>
 800c160:	4b44      	ldr	r3, [pc, #272]	@ (800c274 <__ieee754_pow+0x294>)
 800c162:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800c166:	429a      	cmp	r2, r3
 800c168:	d002      	beq.n	800c170 <__ieee754_pow+0x190>
 800c16a:	f1b8 0f00 	cmp.w	r8, #0
 800c16e:	d122      	bne.n	800c1b6 <__ieee754_pow+0x1d6>
 800c170:	f1b9 0f00 	cmp.w	r9, #0
 800c174:	da05      	bge.n	800c182 <__ieee754_pow+0x1a2>
 800c176:	4602      	mov	r2, r0
 800c178:	460b      	mov	r3, r1
 800c17a:	2000      	movs	r0, #0
 800c17c:	493d      	ldr	r1, [pc, #244]	@ (800c274 <__ieee754_pow+0x294>)
 800c17e:	f7f4 fb85 	bl	800088c <__aeabi_ddiv>
 800c182:	2d00      	cmp	r5, #0
 800c184:	f6bf af49 	bge.w	800c01a <__ieee754_pow+0x3a>
 800c188:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800c18c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800c190:	ea58 0804 	orrs.w	r8, r8, r4
 800c194:	d108      	bne.n	800c1a8 <__ieee754_pow+0x1c8>
 800c196:	4602      	mov	r2, r0
 800c198:	460b      	mov	r3, r1
 800c19a:	4610      	mov	r0, r2
 800c19c:	4619      	mov	r1, r3
 800c19e:	f7f4 f893 	bl	80002c8 <__aeabi_dsub>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	460b      	mov	r3, r1
 800c1a6:	e794      	b.n	800c0d2 <__ieee754_pow+0xf2>
 800c1a8:	2c01      	cmp	r4, #1
 800c1aa:	f47f af36 	bne.w	800c01a <__ieee754_pow+0x3a>
 800c1ae:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c1b2:	4619      	mov	r1, r3
 800c1b4:	e731      	b.n	800c01a <__ieee754_pow+0x3a>
 800c1b6:	0feb      	lsrs	r3, r5, #31
 800c1b8:	3b01      	subs	r3, #1
 800c1ba:	ea53 0204 	orrs.w	r2, r3, r4
 800c1be:	d102      	bne.n	800c1c6 <__ieee754_pow+0x1e6>
 800c1c0:	4632      	mov	r2, r6
 800c1c2:	463b      	mov	r3, r7
 800c1c4:	e7e9      	b.n	800c19a <__ieee754_pow+0x1ba>
 800c1c6:	3c01      	subs	r4, #1
 800c1c8:	431c      	orrs	r4, r3
 800c1ca:	d016      	beq.n	800c1fa <__ieee754_pow+0x21a>
 800c1cc:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800c258 <__ieee754_pow+0x278>
 800c1d0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800c1d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c1d8:	f240 8112 	bls.w	800c400 <__ieee754_pow+0x420>
 800c1dc:	4b28      	ldr	r3, [pc, #160]	@ (800c280 <__ieee754_pow+0x2a0>)
 800c1de:	459a      	cmp	sl, r3
 800c1e0:	4b25      	ldr	r3, [pc, #148]	@ (800c278 <__ieee754_pow+0x298>)
 800c1e2:	d916      	bls.n	800c212 <__ieee754_pow+0x232>
 800c1e4:	4598      	cmp	r8, r3
 800c1e6:	d80b      	bhi.n	800c200 <__ieee754_pow+0x220>
 800c1e8:	f1b9 0f00 	cmp.w	r9, #0
 800c1ec:	da0b      	bge.n	800c206 <__ieee754_pow+0x226>
 800c1ee:	2000      	movs	r0, #0
 800c1f0:	b011      	add	sp, #68	@ 0x44
 800c1f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1f6:	f000 bcf3 	b.w	800cbe0 <__math_oflow>
 800c1fa:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800c260 <__ieee754_pow+0x280>
 800c1fe:	e7e7      	b.n	800c1d0 <__ieee754_pow+0x1f0>
 800c200:	f1b9 0f00 	cmp.w	r9, #0
 800c204:	dcf3      	bgt.n	800c1ee <__ieee754_pow+0x20e>
 800c206:	2000      	movs	r0, #0
 800c208:	b011      	add	sp, #68	@ 0x44
 800c20a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c20e:	f000 bcdf 	b.w	800cbd0 <__math_uflow>
 800c212:	4598      	cmp	r8, r3
 800c214:	d20c      	bcs.n	800c230 <__ieee754_pow+0x250>
 800c216:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c21a:	2200      	movs	r2, #0
 800c21c:	2300      	movs	r3, #0
 800c21e:	f7f4 fc7d 	bl	8000b1c <__aeabi_dcmplt>
 800c222:	3800      	subs	r0, #0
 800c224:	bf18      	it	ne
 800c226:	2001      	movne	r0, #1
 800c228:	f1b9 0f00 	cmp.w	r9, #0
 800c22c:	daec      	bge.n	800c208 <__ieee754_pow+0x228>
 800c22e:	e7df      	b.n	800c1f0 <__ieee754_pow+0x210>
 800c230:	4b10      	ldr	r3, [pc, #64]	@ (800c274 <__ieee754_pow+0x294>)
 800c232:	4598      	cmp	r8, r3
 800c234:	f04f 0200 	mov.w	r2, #0
 800c238:	d924      	bls.n	800c284 <__ieee754_pow+0x2a4>
 800c23a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c23e:	2300      	movs	r3, #0
 800c240:	f7f4 fc6c 	bl	8000b1c <__aeabi_dcmplt>
 800c244:	3800      	subs	r0, #0
 800c246:	bf18      	it	ne
 800c248:	2001      	movne	r0, #1
 800c24a:	f1b9 0f00 	cmp.w	r9, #0
 800c24e:	dccf      	bgt.n	800c1f0 <__ieee754_pow+0x210>
 800c250:	e7da      	b.n	800c208 <__ieee754_pow+0x228>
 800c252:	bf00      	nop
 800c254:	f3af 8000 	nop.w
 800c258:	00000000 	.word	0x00000000
 800c25c:	3ff00000 	.word	0x3ff00000
 800c260:	00000000 	.word	0x00000000
 800c264:	bff00000 	.word	0xbff00000
 800c268:	fff00000 	.word	0xfff00000
 800c26c:	7ff00000 	.word	0x7ff00000
 800c270:	433fffff 	.word	0x433fffff
 800c274:	3ff00000 	.word	0x3ff00000
 800c278:	3fefffff 	.word	0x3fefffff
 800c27c:	3fe00000 	.word	0x3fe00000
 800c280:	43f00000 	.word	0x43f00000
 800c284:	4b5a      	ldr	r3, [pc, #360]	@ (800c3f0 <__ieee754_pow+0x410>)
 800c286:	f7f4 f81f 	bl	80002c8 <__aeabi_dsub>
 800c28a:	a351      	add	r3, pc, #324	@ (adr r3, 800c3d0 <__ieee754_pow+0x3f0>)
 800c28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c290:	4604      	mov	r4, r0
 800c292:	460d      	mov	r5, r1
 800c294:	f7f4 f9d0 	bl	8000638 <__aeabi_dmul>
 800c298:	a34f      	add	r3, pc, #316	@ (adr r3, 800c3d8 <__ieee754_pow+0x3f8>)
 800c29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29e:	4606      	mov	r6, r0
 800c2a0:	460f      	mov	r7, r1
 800c2a2:	4620      	mov	r0, r4
 800c2a4:	4629      	mov	r1, r5
 800c2a6:	f7f4 f9c7 	bl	8000638 <__aeabi_dmul>
 800c2aa:	4b52      	ldr	r3, [pc, #328]	@ (800c3f4 <__ieee754_pow+0x414>)
 800c2ac:	4682      	mov	sl, r0
 800c2ae:	468b      	mov	fp, r1
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	4620      	mov	r0, r4
 800c2b4:	4629      	mov	r1, r5
 800c2b6:	f7f4 f9bf 	bl	8000638 <__aeabi_dmul>
 800c2ba:	4602      	mov	r2, r0
 800c2bc:	460b      	mov	r3, r1
 800c2be:	a148      	add	r1, pc, #288	@ (adr r1, 800c3e0 <__ieee754_pow+0x400>)
 800c2c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2c4:	f7f4 f800 	bl	80002c8 <__aeabi_dsub>
 800c2c8:	4622      	mov	r2, r4
 800c2ca:	462b      	mov	r3, r5
 800c2cc:	f7f4 f9b4 	bl	8000638 <__aeabi_dmul>
 800c2d0:	4602      	mov	r2, r0
 800c2d2:	460b      	mov	r3, r1
 800c2d4:	2000      	movs	r0, #0
 800c2d6:	4948      	ldr	r1, [pc, #288]	@ (800c3f8 <__ieee754_pow+0x418>)
 800c2d8:	f7f3 fff6 	bl	80002c8 <__aeabi_dsub>
 800c2dc:	4622      	mov	r2, r4
 800c2de:	4680      	mov	r8, r0
 800c2e0:	4689      	mov	r9, r1
 800c2e2:	462b      	mov	r3, r5
 800c2e4:	4620      	mov	r0, r4
 800c2e6:	4629      	mov	r1, r5
 800c2e8:	f7f4 f9a6 	bl	8000638 <__aeabi_dmul>
 800c2ec:	4602      	mov	r2, r0
 800c2ee:	460b      	mov	r3, r1
 800c2f0:	4640      	mov	r0, r8
 800c2f2:	4649      	mov	r1, r9
 800c2f4:	f7f4 f9a0 	bl	8000638 <__aeabi_dmul>
 800c2f8:	a33b      	add	r3, pc, #236	@ (adr r3, 800c3e8 <__ieee754_pow+0x408>)
 800c2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2fe:	f7f4 f99b 	bl	8000638 <__aeabi_dmul>
 800c302:	4602      	mov	r2, r0
 800c304:	460b      	mov	r3, r1
 800c306:	4650      	mov	r0, sl
 800c308:	4659      	mov	r1, fp
 800c30a:	f7f3 ffdd 	bl	80002c8 <__aeabi_dsub>
 800c30e:	4602      	mov	r2, r0
 800c310:	460b      	mov	r3, r1
 800c312:	4680      	mov	r8, r0
 800c314:	4689      	mov	r9, r1
 800c316:	4630      	mov	r0, r6
 800c318:	4639      	mov	r1, r7
 800c31a:	f7f3 ffd7 	bl	80002cc <__adddf3>
 800c31e:	2400      	movs	r4, #0
 800c320:	4632      	mov	r2, r6
 800c322:	463b      	mov	r3, r7
 800c324:	4620      	mov	r0, r4
 800c326:	460d      	mov	r5, r1
 800c328:	f7f3 ffce 	bl	80002c8 <__aeabi_dsub>
 800c32c:	4602      	mov	r2, r0
 800c32e:	460b      	mov	r3, r1
 800c330:	4640      	mov	r0, r8
 800c332:	4649      	mov	r1, r9
 800c334:	f7f3 ffc8 	bl	80002c8 <__aeabi_dsub>
 800c338:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c33c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c340:	2300      	movs	r3, #0
 800c342:	9304      	str	r3, [sp, #16]
 800c344:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800c348:	4606      	mov	r6, r0
 800c34a:	460f      	mov	r7, r1
 800c34c:	4652      	mov	r2, sl
 800c34e:	465b      	mov	r3, fp
 800c350:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c354:	f7f3 ffb8 	bl	80002c8 <__aeabi_dsub>
 800c358:	4622      	mov	r2, r4
 800c35a:	462b      	mov	r3, r5
 800c35c:	f7f4 f96c 	bl	8000638 <__aeabi_dmul>
 800c360:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c364:	4680      	mov	r8, r0
 800c366:	4689      	mov	r9, r1
 800c368:	4630      	mov	r0, r6
 800c36a:	4639      	mov	r1, r7
 800c36c:	f7f4 f964 	bl	8000638 <__aeabi_dmul>
 800c370:	4602      	mov	r2, r0
 800c372:	460b      	mov	r3, r1
 800c374:	4640      	mov	r0, r8
 800c376:	4649      	mov	r1, r9
 800c378:	f7f3 ffa8 	bl	80002cc <__adddf3>
 800c37c:	4652      	mov	r2, sl
 800c37e:	465b      	mov	r3, fp
 800c380:	4606      	mov	r6, r0
 800c382:	460f      	mov	r7, r1
 800c384:	4620      	mov	r0, r4
 800c386:	4629      	mov	r1, r5
 800c388:	f7f4 f956 	bl	8000638 <__aeabi_dmul>
 800c38c:	460b      	mov	r3, r1
 800c38e:	4602      	mov	r2, r0
 800c390:	4680      	mov	r8, r0
 800c392:	4689      	mov	r9, r1
 800c394:	4630      	mov	r0, r6
 800c396:	4639      	mov	r1, r7
 800c398:	f7f3 ff98 	bl	80002cc <__adddf3>
 800c39c:	4b17      	ldr	r3, [pc, #92]	@ (800c3fc <__ieee754_pow+0x41c>)
 800c39e:	4299      	cmp	r1, r3
 800c3a0:	4604      	mov	r4, r0
 800c3a2:	460d      	mov	r5, r1
 800c3a4:	468a      	mov	sl, r1
 800c3a6:	468b      	mov	fp, r1
 800c3a8:	f340 82ef 	ble.w	800c98a <__ieee754_pow+0x9aa>
 800c3ac:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800c3b0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800c3b4:	4303      	orrs	r3, r0
 800c3b6:	f000 81e8 	beq.w	800c78a <__ieee754_pow+0x7aa>
 800c3ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	f7f4 fbab 	bl	8000b1c <__aeabi_dcmplt>
 800c3c6:	3800      	subs	r0, #0
 800c3c8:	bf18      	it	ne
 800c3ca:	2001      	movne	r0, #1
 800c3cc:	e710      	b.n	800c1f0 <__ieee754_pow+0x210>
 800c3ce:	bf00      	nop
 800c3d0:	60000000 	.word	0x60000000
 800c3d4:	3ff71547 	.word	0x3ff71547
 800c3d8:	f85ddf44 	.word	0xf85ddf44
 800c3dc:	3e54ae0b 	.word	0x3e54ae0b
 800c3e0:	55555555 	.word	0x55555555
 800c3e4:	3fd55555 	.word	0x3fd55555
 800c3e8:	652b82fe 	.word	0x652b82fe
 800c3ec:	3ff71547 	.word	0x3ff71547
 800c3f0:	3ff00000 	.word	0x3ff00000
 800c3f4:	3fd00000 	.word	0x3fd00000
 800c3f8:	3fe00000 	.word	0x3fe00000
 800c3fc:	408fffff 	.word	0x408fffff
 800c400:	4bd5      	ldr	r3, [pc, #852]	@ (800c758 <__ieee754_pow+0x778>)
 800c402:	402b      	ands	r3, r5
 800c404:	2200      	movs	r2, #0
 800c406:	b92b      	cbnz	r3, 800c414 <__ieee754_pow+0x434>
 800c408:	4bd4      	ldr	r3, [pc, #848]	@ (800c75c <__ieee754_pow+0x77c>)
 800c40a:	f7f4 f915 	bl	8000638 <__aeabi_dmul>
 800c40e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800c412:	468b      	mov	fp, r1
 800c414:	ea4f 532b 	mov.w	r3, fp, asr #20
 800c418:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800c41c:	4413      	add	r3, r2
 800c41e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c420:	4bcf      	ldr	r3, [pc, #828]	@ (800c760 <__ieee754_pow+0x780>)
 800c422:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800c426:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800c42a:	459b      	cmp	fp, r3
 800c42c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c430:	dd08      	ble.n	800c444 <__ieee754_pow+0x464>
 800c432:	4bcc      	ldr	r3, [pc, #816]	@ (800c764 <__ieee754_pow+0x784>)
 800c434:	459b      	cmp	fp, r3
 800c436:	f340 81a5 	ble.w	800c784 <__ieee754_pow+0x7a4>
 800c43a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c43c:	3301      	adds	r3, #1
 800c43e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c440:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800c444:	f04f 0a00 	mov.w	sl, #0
 800c448:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800c44c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c44e:	4bc6      	ldr	r3, [pc, #792]	@ (800c768 <__ieee754_pow+0x788>)
 800c450:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c454:	ed93 7b00 	vldr	d7, [r3]
 800c458:	4629      	mov	r1, r5
 800c45a:	ec53 2b17 	vmov	r2, r3, d7
 800c45e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c462:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c466:	f7f3 ff2f 	bl	80002c8 <__aeabi_dsub>
 800c46a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c46e:	4606      	mov	r6, r0
 800c470:	460f      	mov	r7, r1
 800c472:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c476:	f7f3 ff29 	bl	80002cc <__adddf3>
 800c47a:	4602      	mov	r2, r0
 800c47c:	460b      	mov	r3, r1
 800c47e:	2000      	movs	r0, #0
 800c480:	49ba      	ldr	r1, [pc, #744]	@ (800c76c <__ieee754_pow+0x78c>)
 800c482:	f7f4 fa03 	bl	800088c <__aeabi_ddiv>
 800c486:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800c48a:	4602      	mov	r2, r0
 800c48c:	460b      	mov	r3, r1
 800c48e:	4630      	mov	r0, r6
 800c490:	4639      	mov	r1, r7
 800c492:	f7f4 f8d1 	bl	8000638 <__aeabi_dmul>
 800c496:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c49a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800c49e:	106d      	asrs	r5, r5, #1
 800c4a0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800c4a4:	f04f 0b00 	mov.w	fp, #0
 800c4a8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800c4ac:	4661      	mov	r1, ip
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800c4b4:	4658      	mov	r0, fp
 800c4b6:	46e1      	mov	r9, ip
 800c4b8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800c4bc:	4614      	mov	r4, r2
 800c4be:	461d      	mov	r5, r3
 800c4c0:	f7f4 f8ba 	bl	8000638 <__aeabi_dmul>
 800c4c4:	4602      	mov	r2, r0
 800c4c6:	460b      	mov	r3, r1
 800c4c8:	4630      	mov	r0, r6
 800c4ca:	4639      	mov	r1, r7
 800c4cc:	f7f3 fefc 	bl	80002c8 <__aeabi_dsub>
 800c4d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c4d4:	4606      	mov	r6, r0
 800c4d6:	460f      	mov	r7, r1
 800c4d8:	4620      	mov	r0, r4
 800c4da:	4629      	mov	r1, r5
 800c4dc:	f7f3 fef4 	bl	80002c8 <__aeabi_dsub>
 800c4e0:	4602      	mov	r2, r0
 800c4e2:	460b      	mov	r3, r1
 800c4e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c4e8:	f7f3 feee 	bl	80002c8 <__aeabi_dsub>
 800c4ec:	465a      	mov	r2, fp
 800c4ee:	464b      	mov	r3, r9
 800c4f0:	f7f4 f8a2 	bl	8000638 <__aeabi_dmul>
 800c4f4:	4602      	mov	r2, r0
 800c4f6:	460b      	mov	r3, r1
 800c4f8:	4630      	mov	r0, r6
 800c4fa:	4639      	mov	r1, r7
 800c4fc:	f7f3 fee4 	bl	80002c8 <__aeabi_dsub>
 800c500:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c504:	f7f4 f898 	bl	8000638 <__aeabi_dmul>
 800c508:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c50c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c510:	4610      	mov	r0, r2
 800c512:	4619      	mov	r1, r3
 800c514:	f7f4 f890 	bl	8000638 <__aeabi_dmul>
 800c518:	a37d      	add	r3, pc, #500	@ (adr r3, 800c710 <__ieee754_pow+0x730>)
 800c51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51e:	4604      	mov	r4, r0
 800c520:	460d      	mov	r5, r1
 800c522:	f7f4 f889 	bl	8000638 <__aeabi_dmul>
 800c526:	a37c      	add	r3, pc, #496	@ (adr r3, 800c718 <__ieee754_pow+0x738>)
 800c528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c52c:	f7f3 fece 	bl	80002cc <__adddf3>
 800c530:	4622      	mov	r2, r4
 800c532:	462b      	mov	r3, r5
 800c534:	f7f4 f880 	bl	8000638 <__aeabi_dmul>
 800c538:	a379      	add	r3, pc, #484	@ (adr r3, 800c720 <__ieee754_pow+0x740>)
 800c53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c53e:	f7f3 fec5 	bl	80002cc <__adddf3>
 800c542:	4622      	mov	r2, r4
 800c544:	462b      	mov	r3, r5
 800c546:	f7f4 f877 	bl	8000638 <__aeabi_dmul>
 800c54a:	a377      	add	r3, pc, #476	@ (adr r3, 800c728 <__ieee754_pow+0x748>)
 800c54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c550:	f7f3 febc 	bl	80002cc <__adddf3>
 800c554:	4622      	mov	r2, r4
 800c556:	462b      	mov	r3, r5
 800c558:	f7f4 f86e 	bl	8000638 <__aeabi_dmul>
 800c55c:	a374      	add	r3, pc, #464	@ (adr r3, 800c730 <__ieee754_pow+0x750>)
 800c55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c562:	f7f3 feb3 	bl	80002cc <__adddf3>
 800c566:	4622      	mov	r2, r4
 800c568:	462b      	mov	r3, r5
 800c56a:	f7f4 f865 	bl	8000638 <__aeabi_dmul>
 800c56e:	a372      	add	r3, pc, #456	@ (adr r3, 800c738 <__ieee754_pow+0x758>)
 800c570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c574:	f7f3 feaa 	bl	80002cc <__adddf3>
 800c578:	4622      	mov	r2, r4
 800c57a:	4606      	mov	r6, r0
 800c57c:	460f      	mov	r7, r1
 800c57e:	462b      	mov	r3, r5
 800c580:	4620      	mov	r0, r4
 800c582:	4629      	mov	r1, r5
 800c584:	f7f4 f858 	bl	8000638 <__aeabi_dmul>
 800c588:	4602      	mov	r2, r0
 800c58a:	460b      	mov	r3, r1
 800c58c:	4630      	mov	r0, r6
 800c58e:	4639      	mov	r1, r7
 800c590:	f7f4 f852 	bl	8000638 <__aeabi_dmul>
 800c594:	465a      	mov	r2, fp
 800c596:	4604      	mov	r4, r0
 800c598:	460d      	mov	r5, r1
 800c59a:	464b      	mov	r3, r9
 800c59c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c5a0:	f7f3 fe94 	bl	80002cc <__adddf3>
 800c5a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c5a8:	f7f4 f846 	bl	8000638 <__aeabi_dmul>
 800c5ac:	4622      	mov	r2, r4
 800c5ae:	462b      	mov	r3, r5
 800c5b0:	f7f3 fe8c 	bl	80002cc <__adddf3>
 800c5b4:	465a      	mov	r2, fp
 800c5b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c5ba:	464b      	mov	r3, r9
 800c5bc:	4658      	mov	r0, fp
 800c5be:	4649      	mov	r1, r9
 800c5c0:	f7f4 f83a 	bl	8000638 <__aeabi_dmul>
 800c5c4:	4b6a      	ldr	r3, [pc, #424]	@ (800c770 <__ieee754_pow+0x790>)
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	4606      	mov	r6, r0
 800c5ca:	460f      	mov	r7, r1
 800c5cc:	f7f3 fe7e 	bl	80002cc <__adddf3>
 800c5d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c5d4:	f7f3 fe7a 	bl	80002cc <__adddf3>
 800c5d8:	46d8      	mov	r8, fp
 800c5da:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800c5de:	460d      	mov	r5, r1
 800c5e0:	465a      	mov	r2, fp
 800c5e2:	460b      	mov	r3, r1
 800c5e4:	4640      	mov	r0, r8
 800c5e6:	4649      	mov	r1, r9
 800c5e8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800c5ec:	f7f4 f824 	bl	8000638 <__aeabi_dmul>
 800c5f0:	465c      	mov	r4, fp
 800c5f2:	4680      	mov	r8, r0
 800c5f4:	4689      	mov	r9, r1
 800c5f6:	4b5e      	ldr	r3, [pc, #376]	@ (800c770 <__ieee754_pow+0x790>)
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	4620      	mov	r0, r4
 800c5fc:	4629      	mov	r1, r5
 800c5fe:	f7f3 fe63 	bl	80002c8 <__aeabi_dsub>
 800c602:	4632      	mov	r2, r6
 800c604:	463b      	mov	r3, r7
 800c606:	f7f3 fe5f 	bl	80002c8 <__aeabi_dsub>
 800c60a:	4602      	mov	r2, r0
 800c60c:	460b      	mov	r3, r1
 800c60e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c612:	f7f3 fe59 	bl	80002c8 <__aeabi_dsub>
 800c616:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c61a:	f7f4 f80d 	bl	8000638 <__aeabi_dmul>
 800c61e:	4622      	mov	r2, r4
 800c620:	4606      	mov	r6, r0
 800c622:	460f      	mov	r7, r1
 800c624:	462b      	mov	r3, r5
 800c626:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c62a:	f7f4 f805 	bl	8000638 <__aeabi_dmul>
 800c62e:	4602      	mov	r2, r0
 800c630:	460b      	mov	r3, r1
 800c632:	4630      	mov	r0, r6
 800c634:	4639      	mov	r1, r7
 800c636:	f7f3 fe49 	bl	80002cc <__adddf3>
 800c63a:	4606      	mov	r6, r0
 800c63c:	460f      	mov	r7, r1
 800c63e:	4602      	mov	r2, r0
 800c640:	460b      	mov	r3, r1
 800c642:	4640      	mov	r0, r8
 800c644:	4649      	mov	r1, r9
 800c646:	f7f3 fe41 	bl	80002cc <__adddf3>
 800c64a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800c64e:	a33c      	add	r3, pc, #240	@ (adr r3, 800c740 <__ieee754_pow+0x760>)
 800c650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c654:	4658      	mov	r0, fp
 800c656:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800c65a:	460d      	mov	r5, r1
 800c65c:	f7f3 ffec 	bl	8000638 <__aeabi_dmul>
 800c660:	465c      	mov	r4, fp
 800c662:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c666:	4642      	mov	r2, r8
 800c668:	464b      	mov	r3, r9
 800c66a:	4620      	mov	r0, r4
 800c66c:	4629      	mov	r1, r5
 800c66e:	f7f3 fe2b 	bl	80002c8 <__aeabi_dsub>
 800c672:	4602      	mov	r2, r0
 800c674:	460b      	mov	r3, r1
 800c676:	4630      	mov	r0, r6
 800c678:	4639      	mov	r1, r7
 800c67a:	f7f3 fe25 	bl	80002c8 <__aeabi_dsub>
 800c67e:	a332      	add	r3, pc, #200	@ (adr r3, 800c748 <__ieee754_pow+0x768>)
 800c680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c684:	f7f3 ffd8 	bl	8000638 <__aeabi_dmul>
 800c688:	a331      	add	r3, pc, #196	@ (adr r3, 800c750 <__ieee754_pow+0x770>)
 800c68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c68e:	4606      	mov	r6, r0
 800c690:	460f      	mov	r7, r1
 800c692:	4620      	mov	r0, r4
 800c694:	4629      	mov	r1, r5
 800c696:	f7f3 ffcf 	bl	8000638 <__aeabi_dmul>
 800c69a:	4602      	mov	r2, r0
 800c69c:	460b      	mov	r3, r1
 800c69e:	4630      	mov	r0, r6
 800c6a0:	4639      	mov	r1, r7
 800c6a2:	f7f3 fe13 	bl	80002cc <__adddf3>
 800c6a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c6a8:	4b32      	ldr	r3, [pc, #200]	@ (800c774 <__ieee754_pow+0x794>)
 800c6aa:	4413      	add	r3, r2
 800c6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b0:	f7f3 fe0c 	bl	80002cc <__adddf3>
 800c6b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c6b8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c6ba:	f7f3 ff53 	bl	8000564 <__aeabi_i2d>
 800c6be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c6c0:	4b2d      	ldr	r3, [pc, #180]	@ (800c778 <__ieee754_pow+0x798>)
 800c6c2:	4413      	add	r3, r2
 800c6c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c6c8:	4606      	mov	r6, r0
 800c6ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c6ce:	460f      	mov	r7, r1
 800c6d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c6d4:	f7f3 fdfa 	bl	80002cc <__adddf3>
 800c6d8:	4642      	mov	r2, r8
 800c6da:	464b      	mov	r3, r9
 800c6dc:	f7f3 fdf6 	bl	80002cc <__adddf3>
 800c6e0:	4632      	mov	r2, r6
 800c6e2:	463b      	mov	r3, r7
 800c6e4:	f7f3 fdf2 	bl	80002cc <__adddf3>
 800c6e8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800c6ec:	4632      	mov	r2, r6
 800c6ee:	463b      	mov	r3, r7
 800c6f0:	4658      	mov	r0, fp
 800c6f2:	460d      	mov	r5, r1
 800c6f4:	f7f3 fde8 	bl	80002c8 <__aeabi_dsub>
 800c6f8:	4642      	mov	r2, r8
 800c6fa:	464b      	mov	r3, r9
 800c6fc:	f7f3 fde4 	bl	80002c8 <__aeabi_dsub>
 800c700:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c704:	f7f3 fde0 	bl	80002c8 <__aeabi_dsub>
 800c708:	465c      	mov	r4, fp
 800c70a:	4602      	mov	r2, r0
 800c70c:	e036      	b.n	800c77c <__ieee754_pow+0x79c>
 800c70e:	bf00      	nop
 800c710:	4a454eef 	.word	0x4a454eef
 800c714:	3fca7e28 	.word	0x3fca7e28
 800c718:	93c9db65 	.word	0x93c9db65
 800c71c:	3fcd864a 	.word	0x3fcd864a
 800c720:	a91d4101 	.word	0xa91d4101
 800c724:	3fd17460 	.word	0x3fd17460
 800c728:	518f264d 	.word	0x518f264d
 800c72c:	3fd55555 	.word	0x3fd55555
 800c730:	db6fabff 	.word	0xdb6fabff
 800c734:	3fdb6db6 	.word	0x3fdb6db6
 800c738:	33333303 	.word	0x33333303
 800c73c:	3fe33333 	.word	0x3fe33333
 800c740:	e0000000 	.word	0xe0000000
 800c744:	3feec709 	.word	0x3feec709
 800c748:	dc3a03fd 	.word	0xdc3a03fd
 800c74c:	3feec709 	.word	0x3feec709
 800c750:	145b01f5 	.word	0x145b01f5
 800c754:	be3e2fe0 	.word	0xbe3e2fe0
 800c758:	7ff00000 	.word	0x7ff00000
 800c75c:	43400000 	.word	0x43400000
 800c760:	0003988e 	.word	0x0003988e
 800c764:	000bb679 	.word	0x000bb679
 800c768:	0800d640 	.word	0x0800d640
 800c76c:	3ff00000 	.word	0x3ff00000
 800c770:	40080000 	.word	0x40080000
 800c774:	0800d620 	.word	0x0800d620
 800c778:	0800d630 	.word	0x0800d630
 800c77c:	460b      	mov	r3, r1
 800c77e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c782:	e5d7      	b.n	800c334 <__ieee754_pow+0x354>
 800c784:	f04f 0a01 	mov.w	sl, #1
 800c788:	e65e      	b.n	800c448 <__ieee754_pow+0x468>
 800c78a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800ca5c <__ieee754_pow+0xa7c>)
 800c78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c790:	4630      	mov	r0, r6
 800c792:	4639      	mov	r1, r7
 800c794:	f7f3 fd9a 	bl	80002cc <__adddf3>
 800c798:	4642      	mov	r2, r8
 800c79a:	e9cd 0100 	strd	r0, r1, [sp]
 800c79e:	464b      	mov	r3, r9
 800c7a0:	4620      	mov	r0, r4
 800c7a2:	4629      	mov	r1, r5
 800c7a4:	f7f3 fd90 	bl	80002c8 <__aeabi_dsub>
 800c7a8:	4602      	mov	r2, r0
 800c7aa:	460b      	mov	r3, r1
 800c7ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c7b0:	f7f4 f9d2 	bl	8000b58 <__aeabi_dcmpgt>
 800c7b4:	2800      	cmp	r0, #0
 800c7b6:	f47f ae00 	bne.w	800c3ba <__ieee754_pow+0x3da>
 800c7ba:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800c7be:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c7c2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800c7c6:	fa43 fa0a 	asr.w	sl, r3, sl
 800c7ca:	44da      	add	sl, fp
 800c7cc:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c7d0:	489d      	ldr	r0, [pc, #628]	@ (800ca48 <__ieee754_pow+0xa68>)
 800c7d2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800c7d6:	4108      	asrs	r0, r1
 800c7d8:	ea00 030a 	and.w	r3, r0, sl
 800c7dc:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c7e0:	f1c1 0114 	rsb	r1, r1, #20
 800c7e4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800c7e8:	fa4a fa01 	asr.w	sl, sl, r1
 800c7ec:	f1bb 0f00 	cmp.w	fp, #0
 800c7f0:	4640      	mov	r0, r8
 800c7f2:	4649      	mov	r1, r9
 800c7f4:	f04f 0200 	mov.w	r2, #0
 800c7f8:	bfb8      	it	lt
 800c7fa:	f1ca 0a00 	rsblt	sl, sl, #0
 800c7fe:	f7f3 fd63 	bl	80002c8 <__aeabi_dsub>
 800c802:	4680      	mov	r8, r0
 800c804:	4689      	mov	r9, r1
 800c806:	4632      	mov	r2, r6
 800c808:	463b      	mov	r3, r7
 800c80a:	4640      	mov	r0, r8
 800c80c:	4649      	mov	r1, r9
 800c80e:	f7f3 fd5d 	bl	80002cc <__adddf3>
 800c812:	2400      	movs	r4, #0
 800c814:	a37c      	add	r3, pc, #496	@ (adr r3, 800ca08 <__ieee754_pow+0xa28>)
 800c816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c81a:	4620      	mov	r0, r4
 800c81c:	460d      	mov	r5, r1
 800c81e:	f7f3 ff0b 	bl	8000638 <__aeabi_dmul>
 800c822:	4642      	mov	r2, r8
 800c824:	e9cd 0100 	strd	r0, r1, [sp]
 800c828:	464b      	mov	r3, r9
 800c82a:	4620      	mov	r0, r4
 800c82c:	4629      	mov	r1, r5
 800c82e:	f7f3 fd4b 	bl	80002c8 <__aeabi_dsub>
 800c832:	4602      	mov	r2, r0
 800c834:	460b      	mov	r3, r1
 800c836:	4630      	mov	r0, r6
 800c838:	4639      	mov	r1, r7
 800c83a:	f7f3 fd45 	bl	80002c8 <__aeabi_dsub>
 800c83e:	a374      	add	r3, pc, #464	@ (adr r3, 800ca10 <__ieee754_pow+0xa30>)
 800c840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c844:	f7f3 fef8 	bl	8000638 <__aeabi_dmul>
 800c848:	a373      	add	r3, pc, #460	@ (adr r3, 800ca18 <__ieee754_pow+0xa38>)
 800c84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c84e:	4680      	mov	r8, r0
 800c850:	4689      	mov	r9, r1
 800c852:	4620      	mov	r0, r4
 800c854:	4629      	mov	r1, r5
 800c856:	f7f3 feef 	bl	8000638 <__aeabi_dmul>
 800c85a:	4602      	mov	r2, r0
 800c85c:	460b      	mov	r3, r1
 800c85e:	4640      	mov	r0, r8
 800c860:	4649      	mov	r1, r9
 800c862:	f7f3 fd33 	bl	80002cc <__adddf3>
 800c866:	4604      	mov	r4, r0
 800c868:	460d      	mov	r5, r1
 800c86a:	4602      	mov	r2, r0
 800c86c:	460b      	mov	r3, r1
 800c86e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c872:	f7f3 fd2b 	bl	80002cc <__adddf3>
 800c876:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c87a:	4680      	mov	r8, r0
 800c87c:	4689      	mov	r9, r1
 800c87e:	f7f3 fd23 	bl	80002c8 <__aeabi_dsub>
 800c882:	4602      	mov	r2, r0
 800c884:	460b      	mov	r3, r1
 800c886:	4620      	mov	r0, r4
 800c888:	4629      	mov	r1, r5
 800c88a:	f7f3 fd1d 	bl	80002c8 <__aeabi_dsub>
 800c88e:	4642      	mov	r2, r8
 800c890:	4606      	mov	r6, r0
 800c892:	460f      	mov	r7, r1
 800c894:	464b      	mov	r3, r9
 800c896:	4640      	mov	r0, r8
 800c898:	4649      	mov	r1, r9
 800c89a:	f7f3 fecd 	bl	8000638 <__aeabi_dmul>
 800c89e:	a360      	add	r3, pc, #384	@ (adr r3, 800ca20 <__ieee754_pow+0xa40>)
 800c8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a4:	4604      	mov	r4, r0
 800c8a6:	460d      	mov	r5, r1
 800c8a8:	f7f3 fec6 	bl	8000638 <__aeabi_dmul>
 800c8ac:	a35e      	add	r3, pc, #376	@ (adr r3, 800ca28 <__ieee754_pow+0xa48>)
 800c8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b2:	f7f3 fd09 	bl	80002c8 <__aeabi_dsub>
 800c8b6:	4622      	mov	r2, r4
 800c8b8:	462b      	mov	r3, r5
 800c8ba:	f7f3 febd 	bl	8000638 <__aeabi_dmul>
 800c8be:	a35c      	add	r3, pc, #368	@ (adr r3, 800ca30 <__ieee754_pow+0xa50>)
 800c8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c4:	f7f3 fd02 	bl	80002cc <__adddf3>
 800c8c8:	4622      	mov	r2, r4
 800c8ca:	462b      	mov	r3, r5
 800c8cc:	f7f3 feb4 	bl	8000638 <__aeabi_dmul>
 800c8d0:	a359      	add	r3, pc, #356	@ (adr r3, 800ca38 <__ieee754_pow+0xa58>)
 800c8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d6:	f7f3 fcf7 	bl	80002c8 <__aeabi_dsub>
 800c8da:	4622      	mov	r2, r4
 800c8dc:	462b      	mov	r3, r5
 800c8de:	f7f3 feab 	bl	8000638 <__aeabi_dmul>
 800c8e2:	a357      	add	r3, pc, #348	@ (adr r3, 800ca40 <__ieee754_pow+0xa60>)
 800c8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e8:	f7f3 fcf0 	bl	80002cc <__adddf3>
 800c8ec:	4622      	mov	r2, r4
 800c8ee:	462b      	mov	r3, r5
 800c8f0:	f7f3 fea2 	bl	8000638 <__aeabi_dmul>
 800c8f4:	4602      	mov	r2, r0
 800c8f6:	460b      	mov	r3, r1
 800c8f8:	4640      	mov	r0, r8
 800c8fa:	4649      	mov	r1, r9
 800c8fc:	f7f3 fce4 	bl	80002c8 <__aeabi_dsub>
 800c900:	4604      	mov	r4, r0
 800c902:	460d      	mov	r5, r1
 800c904:	4602      	mov	r2, r0
 800c906:	460b      	mov	r3, r1
 800c908:	4640      	mov	r0, r8
 800c90a:	4649      	mov	r1, r9
 800c90c:	f7f3 fe94 	bl	8000638 <__aeabi_dmul>
 800c910:	2200      	movs	r2, #0
 800c912:	e9cd 0100 	strd	r0, r1, [sp]
 800c916:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c91a:	4620      	mov	r0, r4
 800c91c:	4629      	mov	r1, r5
 800c91e:	f7f3 fcd3 	bl	80002c8 <__aeabi_dsub>
 800c922:	4602      	mov	r2, r0
 800c924:	460b      	mov	r3, r1
 800c926:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c92a:	f7f3 ffaf 	bl	800088c <__aeabi_ddiv>
 800c92e:	4632      	mov	r2, r6
 800c930:	4604      	mov	r4, r0
 800c932:	460d      	mov	r5, r1
 800c934:	463b      	mov	r3, r7
 800c936:	4640      	mov	r0, r8
 800c938:	4649      	mov	r1, r9
 800c93a:	f7f3 fe7d 	bl	8000638 <__aeabi_dmul>
 800c93e:	4632      	mov	r2, r6
 800c940:	463b      	mov	r3, r7
 800c942:	f7f3 fcc3 	bl	80002cc <__adddf3>
 800c946:	4602      	mov	r2, r0
 800c948:	460b      	mov	r3, r1
 800c94a:	4620      	mov	r0, r4
 800c94c:	4629      	mov	r1, r5
 800c94e:	f7f3 fcbb 	bl	80002c8 <__aeabi_dsub>
 800c952:	4642      	mov	r2, r8
 800c954:	464b      	mov	r3, r9
 800c956:	f7f3 fcb7 	bl	80002c8 <__aeabi_dsub>
 800c95a:	460b      	mov	r3, r1
 800c95c:	4602      	mov	r2, r0
 800c95e:	493b      	ldr	r1, [pc, #236]	@ (800ca4c <__ieee754_pow+0xa6c>)
 800c960:	2000      	movs	r0, #0
 800c962:	f7f3 fcb1 	bl	80002c8 <__aeabi_dsub>
 800c966:	ec41 0b10 	vmov	d0, r0, r1
 800c96a:	ee10 3a90 	vmov	r3, s1
 800c96e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c972:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c976:	da30      	bge.n	800c9da <__ieee754_pow+0x9fa>
 800c978:	4650      	mov	r0, sl
 800c97a:	f000 f87d 	bl	800ca78 <scalbn>
 800c97e:	ec51 0b10 	vmov	r0, r1, d0
 800c982:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c986:	f7ff bbd2 	b.w	800c12e <__ieee754_pow+0x14e>
 800c98a:	4c31      	ldr	r4, [pc, #196]	@ (800ca50 <__ieee754_pow+0xa70>)
 800c98c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c990:	42a3      	cmp	r3, r4
 800c992:	d91a      	bls.n	800c9ca <__ieee754_pow+0x9ea>
 800c994:	4b2f      	ldr	r3, [pc, #188]	@ (800ca54 <__ieee754_pow+0xa74>)
 800c996:	440b      	add	r3, r1
 800c998:	4303      	orrs	r3, r0
 800c99a:	d009      	beq.n	800c9b0 <__ieee754_pow+0x9d0>
 800c99c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	f7f4 f8ba 	bl	8000b1c <__aeabi_dcmplt>
 800c9a8:	3800      	subs	r0, #0
 800c9aa:	bf18      	it	ne
 800c9ac:	2001      	movne	r0, #1
 800c9ae:	e42b      	b.n	800c208 <__ieee754_pow+0x228>
 800c9b0:	4642      	mov	r2, r8
 800c9b2:	464b      	mov	r3, r9
 800c9b4:	f7f3 fc88 	bl	80002c8 <__aeabi_dsub>
 800c9b8:	4632      	mov	r2, r6
 800c9ba:	463b      	mov	r3, r7
 800c9bc:	f7f4 f8c2 	bl	8000b44 <__aeabi_dcmpge>
 800c9c0:	2800      	cmp	r0, #0
 800c9c2:	d1eb      	bne.n	800c99c <__ieee754_pow+0x9bc>
 800c9c4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800ca64 <__ieee754_pow+0xa84>
 800c9c8:	e6f7      	b.n	800c7ba <__ieee754_pow+0x7da>
 800c9ca:	469a      	mov	sl, r3
 800c9cc:	4b22      	ldr	r3, [pc, #136]	@ (800ca58 <__ieee754_pow+0xa78>)
 800c9ce:	459a      	cmp	sl, r3
 800c9d0:	f63f aef3 	bhi.w	800c7ba <__ieee754_pow+0x7da>
 800c9d4:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c9d8:	e715      	b.n	800c806 <__ieee754_pow+0x826>
 800c9da:	ec51 0b10 	vmov	r0, r1, d0
 800c9de:	4619      	mov	r1, r3
 800c9e0:	e7cf      	b.n	800c982 <__ieee754_pow+0x9a2>
 800c9e2:	491a      	ldr	r1, [pc, #104]	@ (800ca4c <__ieee754_pow+0xa6c>)
 800c9e4:	2000      	movs	r0, #0
 800c9e6:	f7ff bb18 	b.w	800c01a <__ieee754_pow+0x3a>
 800c9ea:	2000      	movs	r0, #0
 800c9ec:	2100      	movs	r1, #0
 800c9ee:	f7ff bb14 	b.w	800c01a <__ieee754_pow+0x3a>
 800c9f2:	4630      	mov	r0, r6
 800c9f4:	4639      	mov	r1, r7
 800c9f6:	f7ff bb10 	b.w	800c01a <__ieee754_pow+0x3a>
 800c9fa:	460c      	mov	r4, r1
 800c9fc:	f7ff bb5e 	b.w	800c0bc <__ieee754_pow+0xdc>
 800ca00:	2400      	movs	r4, #0
 800ca02:	f7ff bb49 	b.w	800c098 <__ieee754_pow+0xb8>
 800ca06:	bf00      	nop
 800ca08:	00000000 	.word	0x00000000
 800ca0c:	3fe62e43 	.word	0x3fe62e43
 800ca10:	fefa39ef 	.word	0xfefa39ef
 800ca14:	3fe62e42 	.word	0x3fe62e42
 800ca18:	0ca86c39 	.word	0x0ca86c39
 800ca1c:	be205c61 	.word	0xbe205c61
 800ca20:	72bea4d0 	.word	0x72bea4d0
 800ca24:	3e663769 	.word	0x3e663769
 800ca28:	c5d26bf1 	.word	0xc5d26bf1
 800ca2c:	3ebbbd41 	.word	0x3ebbbd41
 800ca30:	af25de2c 	.word	0xaf25de2c
 800ca34:	3f11566a 	.word	0x3f11566a
 800ca38:	16bebd93 	.word	0x16bebd93
 800ca3c:	3f66c16c 	.word	0x3f66c16c
 800ca40:	5555553e 	.word	0x5555553e
 800ca44:	3fc55555 	.word	0x3fc55555
 800ca48:	fff00000 	.word	0xfff00000
 800ca4c:	3ff00000 	.word	0x3ff00000
 800ca50:	4090cbff 	.word	0x4090cbff
 800ca54:	3f6f3400 	.word	0x3f6f3400
 800ca58:	3fe00000 	.word	0x3fe00000
 800ca5c:	652b82fe 	.word	0x652b82fe
 800ca60:	3c971547 	.word	0x3c971547
 800ca64:	4090cc00 	.word	0x4090cc00

0800ca68 <fabs>:
 800ca68:	ec51 0b10 	vmov	r0, r1, d0
 800ca6c:	4602      	mov	r2, r0
 800ca6e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ca72:	ec43 2b10 	vmov	d0, r2, r3
 800ca76:	4770      	bx	lr

0800ca78 <scalbn>:
 800ca78:	b570      	push	{r4, r5, r6, lr}
 800ca7a:	ec55 4b10 	vmov	r4, r5, d0
 800ca7e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800ca82:	4606      	mov	r6, r0
 800ca84:	462b      	mov	r3, r5
 800ca86:	b991      	cbnz	r1, 800caae <scalbn+0x36>
 800ca88:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800ca8c:	4323      	orrs	r3, r4
 800ca8e:	d03d      	beq.n	800cb0c <scalbn+0x94>
 800ca90:	4b35      	ldr	r3, [pc, #212]	@ (800cb68 <scalbn+0xf0>)
 800ca92:	4620      	mov	r0, r4
 800ca94:	4629      	mov	r1, r5
 800ca96:	2200      	movs	r2, #0
 800ca98:	f7f3 fdce 	bl	8000638 <__aeabi_dmul>
 800ca9c:	4b33      	ldr	r3, [pc, #204]	@ (800cb6c <scalbn+0xf4>)
 800ca9e:	429e      	cmp	r6, r3
 800caa0:	4604      	mov	r4, r0
 800caa2:	460d      	mov	r5, r1
 800caa4:	da0f      	bge.n	800cac6 <scalbn+0x4e>
 800caa6:	a328      	add	r3, pc, #160	@ (adr r3, 800cb48 <scalbn+0xd0>)
 800caa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caac:	e01e      	b.n	800caec <scalbn+0x74>
 800caae:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800cab2:	4291      	cmp	r1, r2
 800cab4:	d10b      	bne.n	800cace <scalbn+0x56>
 800cab6:	4622      	mov	r2, r4
 800cab8:	4620      	mov	r0, r4
 800caba:	4629      	mov	r1, r5
 800cabc:	f7f3 fc06 	bl	80002cc <__adddf3>
 800cac0:	4604      	mov	r4, r0
 800cac2:	460d      	mov	r5, r1
 800cac4:	e022      	b.n	800cb0c <scalbn+0x94>
 800cac6:	460b      	mov	r3, r1
 800cac8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800cacc:	3936      	subs	r1, #54	@ 0x36
 800cace:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800cad2:	4296      	cmp	r6, r2
 800cad4:	dd0d      	ble.n	800caf2 <scalbn+0x7a>
 800cad6:	2d00      	cmp	r5, #0
 800cad8:	a11d      	add	r1, pc, #116	@ (adr r1, 800cb50 <scalbn+0xd8>)
 800cada:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cade:	da02      	bge.n	800cae6 <scalbn+0x6e>
 800cae0:	a11d      	add	r1, pc, #116	@ (adr r1, 800cb58 <scalbn+0xe0>)
 800cae2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cae6:	a31a      	add	r3, pc, #104	@ (adr r3, 800cb50 <scalbn+0xd8>)
 800cae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caec:	f7f3 fda4 	bl	8000638 <__aeabi_dmul>
 800caf0:	e7e6      	b.n	800cac0 <scalbn+0x48>
 800caf2:	1872      	adds	r2, r6, r1
 800caf4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800caf8:	428a      	cmp	r2, r1
 800cafa:	dcec      	bgt.n	800cad6 <scalbn+0x5e>
 800cafc:	2a00      	cmp	r2, #0
 800cafe:	dd08      	ble.n	800cb12 <scalbn+0x9a>
 800cb00:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800cb04:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800cb08:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cb0c:	ec45 4b10 	vmov	d0, r4, r5
 800cb10:	bd70      	pop	{r4, r5, r6, pc}
 800cb12:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800cb16:	da08      	bge.n	800cb2a <scalbn+0xb2>
 800cb18:	2d00      	cmp	r5, #0
 800cb1a:	a10b      	add	r1, pc, #44	@ (adr r1, 800cb48 <scalbn+0xd0>)
 800cb1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb20:	dac1      	bge.n	800caa6 <scalbn+0x2e>
 800cb22:	a10f      	add	r1, pc, #60	@ (adr r1, 800cb60 <scalbn+0xe8>)
 800cb24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb28:	e7bd      	b.n	800caa6 <scalbn+0x2e>
 800cb2a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800cb2e:	3236      	adds	r2, #54	@ 0x36
 800cb30:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800cb34:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cb38:	4620      	mov	r0, r4
 800cb3a:	4b0d      	ldr	r3, [pc, #52]	@ (800cb70 <scalbn+0xf8>)
 800cb3c:	4629      	mov	r1, r5
 800cb3e:	2200      	movs	r2, #0
 800cb40:	e7d4      	b.n	800caec <scalbn+0x74>
 800cb42:	bf00      	nop
 800cb44:	f3af 8000 	nop.w
 800cb48:	c2f8f359 	.word	0xc2f8f359
 800cb4c:	01a56e1f 	.word	0x01a56e1f
 800cb50:	8800759c 	.word	0x8800759c
 800cb54:	7e37e43c 	.word	0x7e37e43c
 800cb58:	8800759c 	.word	0x8800759c
 800cb5c:	fe37e43c 	.word	0xfe37e43c
 800cb60:	c2f8f359 	.word	0xc2f8f359
 800cb64:	81a56e1f 	.word	0x81a56e1f
 800cb68:	43500000 	.word	0x43500000
 800cb6c:	ffff3cb0 	.word	0xffff3cb0
 800cb70:	3c900000 	.word	0x3c900000

0800cb74 <with_errno>:
 800cb74:	b510      	push	{r4, lr}
 800cb76:	ed2d 8b02 	vpush	{d8}
 800cb7a:	eeb0 8a40 	vmov.f32	s16, s0
 800cb7e:	eef0 8a60 	vmov.f32	s17, s1
 800cb82:	4604      	mov	r4, r0
 800cb84:	f7fe fdf4 	bl	800b770 <__errno>
 800cb88:	eeb0 0a48 	vmov.f32	s0, s16
 800cb8c:	eef0 0a68 	vmov.f32	s1, s17
 800cb90:	ecbd 8b02 	vpop	{d8}
 800cb94:	6004      	str	r4, [r0, #0]
 800cb96:	bd10      	pop	{r4, pc}

0800cb98 <xflow>:
 800cb98:	4603      	mov	r3, r0
 800cb9a:	b507      	push	{r0, r1, r2, lr}
 800cb9c:	ec51 0b10 	vmov	r0, r1, d0
 800cba0:	b183      	cbz	r3, 800cbc4 <xflow+0x2c>
 800cba2:	4602      	mov	r2, r0
 800cba4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cba8:	e9cd 2300 	strd	r2, r3, [sp]
 800cbac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cbb0:	f7f3 fd42 	bl	8000638 <__aeabi_dmul>
 800cbb4:	ec41 0b10 	vmov	d0, r0, r1
 800cbb8:	2022      	movs	r0, #34	@ 0x22
 800cbba:	b003      	add	sp, #12
 800cbbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbc0:	f7ff bfd8 	b.w	800cb74 <with_errno>
 800cbc4:	4602      	mov	r2, r0
 800cbc6:	460b      	mov	r3, r1
 800cbc8:	e7ee      	b.n	800cba8 <xflow+0x10>
 800cbca:	0000      	movs	r0, r0
 800cbcc:	0000      	movs	r0, r0
	...

0800cbd0 <__math_uflow>:
 800cbd0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cbd8 <__math_uflow+0x8>
 800cbd4:	f7ff bfe0 	b.w	800cb98 <xflow>
 800cbd8:	00000000 	.word	0x00000000
 800cbdc:	10000000 	.word	0x10000000

0800cbe0 <__math_oflow>:
 800cbe0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cbe8 <__math_oflow+0x8>
 800cbe4:	f7ff bfd8 	b.w	800cb98 <xflow>
 800cbe8:	00000000 	.word	0x00000000
 800cbec:	70000000 	.word	0x70000000

0800cbf0 <__ieee754_sqrt>:
 800cbf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbf4:	4a68      	ldr	r2, [pc, #416]	@ (800cd98 <__ieee754_sqrt+0x1a8>)
 800cbf6:	ec55 4b10 	vmov	r4, r5, d0
 800cbfa:	43aa      	bics	r2, r5
 800cbfc:	462b      	mov	r3, r5
 800cbfe:	4621      	mov	r1, r4
 800cc00:	d110      	bne.n	800cc24 <__ieee754_sqrt+0x34>
 800cc02:	4622      	mov	r2, r4
 800cc04:	4620      	mov	r0, r4
 800cc06:	4629      	mov	r1, r5
 800cc08:	f7f3 fd16 	bl	8000638 <__aeabi_dmul>
 800cc0c:	4602      	mov	r2, r0
 800cc0e:	460b      	mov	r3, r1
 800cc10:	4620      	mov	r0, r4
 800cc12:	4629      	mov	r1, r5
 800cc14:	f7f3 fb5a 	bl	80002cc <__adddf3>
 800cc18:	4604      	mov	r4, r0
 800cc1a:	460d      	mov	r5, r1
 800cc1c:	ec45 4b10 	vmov	d0, r4, r5
 800cc20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc24:	2d00      	cmp	r5, #0
 800cc26:	dc0e      	bgt.n	800cc46 <__ieee754_sqrt+0x56>
 800cc28:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800cc2c:	4322      	orrs	r2, r4
 800cc2e:	d0f5      	beq.n	800cc1c <__ieee754_sqrt+0x2c>
 800cc30:	b19d      	cbz	r5, 800cc5a <__ieee754_sqrt+0x6a>
 800cc32:	4622      	mov	r2, r4
 800cc34:	4620      	mov	r0, r4
 800cc36:	4629      	mov	r1, r5
 800cc38:	f7f3 fb46 	bl	80002c8 <__aeabi_dsub>
 800cc3c:	4602      	mov	r2, r0
 800cc3e:	460b      	mov	r3, r1
 800cc40:	f7f3 fe24 	bl	800088c <__aeabi_ddiv>
 800cc44:	e7e8      	b.n	800cc18 <__ieee754_sqrt+0x28>
 800cc46:	152a      	asrs	r2, r5, #20
 800cc48:	d115      	bne.n	800cc76 <__ieee754_sqrt+0x86>
 800cc4a:	2000      	movs	r0, #0
 800cc4c:	e009      	b.n	800cc62 <__ieee754_sqrt+0x72>
 800cc4e:	0acb      	lsrs	r3, r1, #11
 800cc50:	3a15      	subs	r2, #21
 800cc52:	0549      	lsls	r1, r1, #21
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d0fa      	beq.n	800cc4e <__ieee754_sqrt+0x5e>
 800cc58:	e7f7      	b.n	800cc4a <__ieee754_sqrt+0x5a>
 800cc5a:	462a      	mov	r2, r5
 800cc5c:	e7fa      	b.n	800cc54 <__ieee754_sqrt+0x64>
 800cc5e:	005b      	lsls	r3, r3, #1
 800cc60:	3001      	adds	r0, #1
 800cc62:	02dc      	lsls	r4, r3, #11
 800cc64:	d5fb      	bpl.n	800cc5e <__ieee754_sqrt+0x6e>
 800cc66:	1e44      	subs	r4, r0, #1
 800cc68:	1b12      	subs	r2, r2, r4
 800cc6a:	f1c0 0420 	rsb	r4, r0, #32
 800cc6e:	fa21 f404 	lsr.w	r4, r1, r4
 800cc72:	4323      	orrs	r3, r4
 800cc74:	4081      	lsls	r1, r0
 800cc76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc7a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800cc7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cc82:	07d2      	lsls	r2, r2, #31
 800cc84:	bf5c      	itt	pl
 800cc86:	005b      	lslpl	r3, r3, #1
 800cc88:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800cc8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cc90:	bf58      	it	pl
 800cc92:	0049      	lslpl	r1, r1, #1
 800cc94:	2600      	movs	r6, #0
 800cc96:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800cc9a:	106d      	asrs	r5, r5, #1
 800cc9c:	0049      	lsls	r1, r1, #1
 800cc9e:	2016      	movs	r0, #22
 800cca0:	4632      	mov	r2, r6
 800cca2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800cca6:	1917      	adds	r7, r2, r4
 800cca8:	429f      	cmp	r7, r3
 800ccaa:	bfde      	ittt	le
 800ccac:	193a      	addle	r2, r7, r4
 800ccae:	1bdb      	suble	r3, r3, r7
 800ccb0:	1936      	addle	r6, r6, r4
 800ccb2:	0fcf      	lsrs	r7, r1, #31
 800ccb4:	3801      	subs	r0, #1
 800ccb6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800ccba:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ccbe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ccc2:	d1f0      	bne.n	800cca6 <__ieee754_sqrt+0xb6>
 800ccc4:	4604      	mov	r4, r0
 800ccc6:	2720      	movs	r7, #32
 800ccc8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800cccc:	429a      	cmp	r2, r3
 800ccce:	eb00 0e0c 	add.w	lr, r0, ip
 800ccd2:	db02      	blt.n	800ccda <__ieee754_sqrt+0xea>
 800ccd4:	d113      	bne.n	800ccfe <__ieee754_sqrt+0x10e>
 800ccd6:	458e      	cmp	lr, r1
 800ccd8:	d811      	bhi.n	800ccfe <__ieee754_sqrt+0x10e>
 800ccda:	f1be 0f00 	cmp.w	lr, #0
 800ccde:	eb0e 000c 	add.w	r0, lr, ip
 800cce2:	da42      	bge.n	800cd6a <__ieee754_sqrt+0x17a>
 800cce4:	2800      	cmp	r0, #0
 800cce6:	db40      	blt.n	800cd6a <__ieee754_sqrt+0x17a>
 800cce8:	f102 0801 	add.w	r8, r2, #1
 800ccec:	1a9b      	subs	r3, r3, r2
 800ccee:	458e      	cmp	lr, r1
 800ccf0:	bf88      	it	hi
 800ccf2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ccf6:	eba1 010e 	sub.w	r1, r1, lr
 800ccfa:	4464      	add	r4, ip
 800ccfc:	4642      	mov	r2, r8
 800ccfe:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800cd02:	3f01      	subs	r7, #1
 800cd04:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800cd08:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800cd0c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800cd10:	d1dc      	bne.n	800cccc <__ieee754_sqrt+0xdc>
 800cd12:	4319      	orrs	r1, r3
 800cd14:	d01b      	beq.n	800cd4e <__ieee754_sqrt+0x15e>
 800cd16:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800cd9c <__ieee754_sqrt+0x1ac>
 800cd1a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800cda0 <__ieee754_sqrt+0x1b0>
 800cd1e:	e9da 0100 	ldrd	r0, r1, [sl]
 800cd22:	e9db 2300 	ldrd	r2, r3, [fp]
 800cd26:	f7f3 facf 	bl	80002c8 <__aeabi_dsub>
 800cd2a:	e9da 8900 	ldrd	r8, r9, [sl]
 800cd2e:	4602      	mov	r2, r0
 800cd30:	460b      	mov	r3, r1
 800cd32:	4640      	mov	r0, r8
 800cd34:	4649      	mov	r1, r9
 800cd36:	f7f3 fefb 	bl	8000b30 <__aeabi_dcmple>
 800cd3a:	b140      	cbz	r0, 800cd4e <__ieee754_sqrt+0x15e>
 800cd3c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800cd40:	e9da 0100 	ldrd	r0, r1, [sl]
 800cd44:	e9db 2300 	ldrd	r2, r3, [fp]
 800cd48:	d111      	bne.n	800cd6e <__ieee754_sqrt+0x17e>
 800cd4a:	3601      	adds	r6, #1
 800cd4c:	463c      	mov	r4, r7
 800cd4e:	1072      	asrs	r2, r6, #1
 800cd50:	0863      	lsrs	r3, r4, #1
 800cd52:	07f1      	lsls	r1, r6, #31
 800cd54:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800cd58:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800cd5c:	bf48      	it	mi
 800cd5e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800cd62:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800cd66:	4618      	mov	r0, r3
 800cd68:	e756      	b.n	800cc18 <__ieee754_sqrt+0x28>
 800cd6a:	4690      	mov	r8, r2
 800cd6c:	e7be      	b.n	800ccec <__ieee754_sqrt+0xfc>
 800cd6e:	f7f3 faad 	bl	80002cc <__adddf3>
 800cd72:	e9da 8900 	ldrd	r8, r9, [sl]
 800cd76:	4602      	mov	r2, r0
 800cd78:	460b      	mov	r3, r1
 800cd7a:	4640      	mov	r0, r8
 800cd7c:	4649      	mov	r1, r9
 800cd7e:	f7f3 fecd 	bl	8000b1c <__aeabi_dcmplt>
 800cd82:	b120      	cbz	r0, 800cd8e <__ieee754_sqrt+0x19e>
 800cd84:	1ca0      	adds	r0, r4, #2
 800cd86:	bf08      	it	eq
 800cd88:	3601      	addeq	r6, #1
 800cd8a:	3402      	adds	r4, #2
 800cd8c:	e7df      	b.n	800cd4e <__ieee754_sqrt+0x15e>
 800cd8e:	1c63      	adds	r3, r4, #1
 800cd90:	f023 0401 	bic.w	r4, r3, #1
 800cd94:	e7db      	b.n	800cd4e <__ieee754_sqrt+0x15e>
 800cd96:	bf00      	nop
 800cd98:	7ff00000 	.word	0x7ff00000
 800cd9c:	20000080 	.word	0x20000080
 800cda0:	20000078 	.word	0x20000078

0800cda4 <_init>:
 800cda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cda6:	bf00      	nop
 800cda8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdaa:	bc08      	pop	{r3}
 800cdac:	469e      	mov	lr, r3
 800cdae:	4770      	bx	lr

0800cdb0 <_fini>:
 800cdb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdb2:	bf00      	nop
 800cdb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdb6:	bc08      	pop	{r3}
 800cdb8:	469e      	mov	lr, r3
 800cdba:	4770      	bx	lr
