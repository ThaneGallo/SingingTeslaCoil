
SingingTeslaCoil.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087cc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  080089a0  080089a0  000099a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009080  08009080  0000b088  2**0
                  CONTENTS
  4 .ARM          00000008  08009080  08009080  0000a080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009088  08009088  0000b088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009088  08009088  0000a088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800908c  0800908c  0000a08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08009090  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  20000088  08009118  0000b088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  08009118  0000b3dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010989  00000000  00000000  0000b0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b2c  00000000  00000000  0001ba41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  0001e570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a3d  00000000  00000000  0001f2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000248c3  00000000  00000000  0001fd1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e23  00000000  00000000  000445e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cea4e  00000000  00000000  00058403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00126e51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004140  00000000  00000000  00126e94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0012afd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008984 	.word	0x08008984

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	08008984 	.word	0x08008984

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b96a 	b.w	8000f24 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	460c      	mov	r4, r1
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d14e      	bne.n	8000d12 <__udivmoddi4+0xaa>
 8000c74:	4694      	mov	ip, r2
 8000c76:	458c      	cmp	ip, r1
 8000c78:	4686      	mov	lr, r0
 8000c7a:	fab2 f282 	clz	r2, r2
 8000c7e:	d962      	bls.n	8000d46 <__udivmoddi4+0xde>
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0320 	rsb	r3, r2, #32
 8000c86:	4091      	lsls	r1, r2
 8000c88:	fa20 f303 	lsr.w	r3, r0, r3
 8000c8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c90:	4319      	orrs	r1, r3
 8000c92:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9a:	fa1f f68c 	uxth.w	r6, ip
 8000c9e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ca2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ca6:	fb07 1114 	mls	r1, r7, r4, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb04 f106 	mul.w	r1, r4, r6
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x64>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cbe:	f080 8112 	bcs.w	8000ee6 <__udivmoddi4+0x27e>
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	f240 810f 	bls.w	8000ee6 <__udivmoddi4+0x27e>
 8000cc8:	3c02      	subs	r4, #2
 8000cca:	4463      	add	r3, ip
 8000ccc:	1a59      	subs	r1, r3, r1
 8000cce:	fa1f f38e 	uxth.w	r3, lr
 8000cd2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cd6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb00 f606 	mul.w	r6, r0, r6
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x94>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cee:	f080 80fc 	bcs.w	8000eea <__udivmoddi4+0x282>
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	f240 80f9 	bls.w	8000eea <__udivmoddi4+0x282>
 8000cf8:	4463      	add	r3, ip
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d02:	2100      	movs	r1, #0
 8000d04:	b11d      	cbz	r5, 8000d0e <__udivmoddi4+0xa6>
 8000d06:	40d3      	lsrs	r3, r2
 8000d08:	2200      	movs	r2, #0
 8000d0a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d905      	bls.n	8000d22 <__udivmoddi4+0xba>
 8000d16:	b10d      	cbz	r5, 8000d1c <__udivmoddi4+0xb4>
 8000d18:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e7f5      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000d22:	fab3 f183 	clz	r1, r3
 8000d26:	2900      	cmp	r1, #0
 8000d28:	d146      	bne.n	8000db8 <__udivmoddi4+0x150>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d302      	bcc.n	8000d34 <__udivmoddi4+0xcc>
 8000d2e:	4290      	cmp	r0, r2
 8000d30:	f0c0 80f0 	bcc.w	8000f14 <__udivmoddi4+0x2ac>
 8000d34:	1a86      	subs	r6, r0, r2
 8000d36:	eb64 0303 	sbc.w	r3, r4, r3
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	2d00      	cmp	r5, #0
 8000d3e:	d0e6      	beq.n	8000d0e <__udivmoddi4+0xa6>
 8000d40:	e9c5 6300 	strd	r6, r3, [r5]
 8000d44:	e7e3      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	f040 8090 	bne.w	8000e6c <__udivmoddi4+0x204>
 8000d4c:	eba1 040c 	sub.w	r4, r1, ip
 8000d50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d54:	fa1f f78c 	uxth.w	r7, ip
 8000d58:	2101      	movs	r1, #1
 8000d5a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb08 4416 	mls	r4, r8, r6, r4
 8000d66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6a:	fb07 f006 	mul.w	r0, r7, r6
 8000d6e:	4298      	cmp	r0, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x11c>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x11a>
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	f200 80cd 	bhi.w	8000f1c <__udivmoddi4+0x2b4>
 8000d82:	4626      	mov	r6, r4
 8000d84:	1a1c      	subs	r4, r3, r0
 8000d86:	fa1f f38e 	uxth.w	r3, lr
 8000d8a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d8e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d96:	fb00 f707 	mul.w	r7, r0, r7
 8000d9a:	429f      	cmp	r7, r3
 8000d9c:	d908      	bls.n	8000db0 <__udivmoddi4+0x148>
 8000d9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000da2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x146>
 8000da8:	429f      	cmp	r7, r3
 8000daa:	f200 80b0 	bhi.w	8000f0e <__udivmoddi4+0x2a6>
 8000dae:	4620      	mov	r0, r4
 8000db0:	1bdb      	subs	r3, r3, r7
 8000db2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db6:	e7a5      	b.n	8000d04 <__udivmoddi4+0x9c>
 8000db8:	f1c1 0620 	rsb	r6, r1, #32
 8000dbc:	408b      	lsls	r3, r1
 8000dbe:	fa22 f706 	lsr.w	r7, r2, r6
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dc8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dcc:	ea43 030c 	orr.w	r3, r3, ip
 8000dd0:	40f4      	lsrs	r4, r6
 8000dd2:	fa00 f801 	lsl.w	r8, r0, r1
 8000dd6:	0c38      	lsrs	r0, r7, #16
 8000dd8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ddc:	fbb4 fef0 	udiv	lr, r4, r0
 8000de0:	fa1f fc87 	uxth.w	ip, r7
 8000de4:	fb00 441e 	mls	r4, r0, lr, r4
 8000de8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dec:	fb0e f90c 	mul.w	r9, lr, ip
 8000df0:	45a1      	cmp	r9, r4
 8000df2:	fa02 f201 	lsl.w	r2, r2, r1
 8000df6:	d90a      	bls.n	8000e0e <__udivmoddi4+0x1a6>
 8000df8:	193c      	adds	r4, r7, r4
 8000dfa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dfe:	f080 8084 	bcs.w	8000f0a <__udivmoddi4+0x2a2>
 8000e02:	45a1      	cmp	r9, r4
 8000e04:	f240 8081 	bls.w	8000f0a <__udivmoddi4+0x2a2>
 8000e08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e0c:	443c      	add	r4, r7
 8000e0e:	eba4 0409 	sub.w	r4, r4, r9
 8000e12:	fa1f f983 	uxth.w	r9, r3
 8000e16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e26:	45a4      	cmp	ip, r4
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x1d2>
 8000e2a:	193c      	adds	r4, r7, r4
 8000e2c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e30:	d267      	bcs.n	8000f02 <__udivmoddi4+0x29a>
 8000e32:	45a4      	cmp	ip, r4
 8000e34:	d965      	bls.n	8000f02 <__udivmoddi4+0x29a>
 8000e36:	3b02      	subs	r3, #2
 8000e38:	443c      	add	r4, r7
 8000e3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e42:	eba4 040c 	sub.w	r4, r4, ip
 8000e46:	429c      	cmp	r4, r3
 8000e48:	46ce      	mov	lr, r9
 8000e4a:	469c      	mov	ip, r3
 8000e4c:	d351      	bcc.n	8000ef2 <__udivmoddi4+0x28a>
 8000e4e:	d04e      	beq.n	8000eee <__udivmoddi4+0x286>
 8000e50:	b155      	cbz	r5, 8000e68 <__udivmoddi4+0x200>
 8000e52:	ebb8 030e 	subs.w	r3, r8, lr
 8000e56:	eb64 040c 	sbc.w	r4, r4, ip
 8000e5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e5e:	40cb      	lsrs	r3, r1
 8000e60:	431e      	orrs	r6, r3
 8000e62:	40cc      	lsrs	r4, r1
 8000e64:	e9c5 6400 	strd	r6, r4, [r5]
 8000e68:	2100      	movs	r1, #0
 8000e6a:	e750      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000e6c:	f1c2 0320 	rsb	r3, r2, #32
 8000e70:	fa20 f103 	lsr.w	r1, r0, r3
 8000e74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e78:	fa24 f303 	lsr.w	r3, r4, r3
 8000e7c:	4094      	lsls	r4, r2
 8000e7e:	430c      	orrs	r4, r1
 8000e80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e88:	fa1f f78c 	uxth.w	r7, ip
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3110 	mls	r1, r8, r0, r3
 8000e94:	0c23      	lsrs	r3, r4, #16
 8000e96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e9a:	fb00 f107 	mul.w	r1, r0, r7
 8000e9e:	4299      	cmp	r1, r3
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x24c>
 8000ea2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eaa:	d22c      	bcs.n	8000f06 <__udivmoddi4+0x29e>
 8000eac:	4299      	cmp	r1, r3
 8000eae:	d92a      	bls.n	8000f06 <__udivmoddi4+0x29e>
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	4463      	add	r3, ip
 8000eb4:	1a5b      	subs	r3, r3, r1
 8000eb6:	b2a4      	uxth	r4, r4
 8000eb8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ebc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ec0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ec4:	fb01 f307 	mul.w	r3, r1, r7
 8000ec8:	42a3      	cmp	r3, r4
 8000eca:	d908      	bls.n	8000ede <__udivmoddi4+0x276>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ed4:	d213      	bcs.n	8000efe <__udivmoddi4+0x296>
 8000ed6:	42a3      	cmp	r3, r4
 8000ed8:	d911      	bls.n	8000efe <__udivmoddi4+0x296>
 8000eda:	3902      	subs	r1, #2
 8000edc:	4464      	add	r4, ip
 8000ede:	1ae4      	subs	r4, r4, r3
 8000ee0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ee4:	e739      	b.n	8000d5a <__udivmoddi4+0xf2>
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	e6f0      	b.n	8000ccc <__udivmoddi4+0x64>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e706      	b.n	8000cfc <__udivmoddi4+0x94>
 8000eee:	45c8      	cmp	r8, r9
 8000ef0:	d2ae      	bcs.n	8000e50 <__udivmoddi4+0x1e8>
 8000ef2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ef6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000efa:	3801      	subs	r0, #1
 8000efc:	e7a8      	b.n	8000e50 <__udivmoddi4+0x1e8>
 8000efe:	4631      	mov	r1, r6
 8000f00:	e7ed      	b.n	8000ede <__udivmoddi4+0x276>
 8000f02:	4603      	mov	r3, r0
 8000f04:	e799      	b.n	8000e3a <__udivmoddi4+0x1d2>
 8000f06:	4630      	mov	r0, r6
 8000f08:	e7d4      	b.n	8000eb4 <__udivmoddi4+0x24c>
 8000f0a:	46d6      	mov	lr, sl
 8000f0c:	e77f      	b.n	8000e0e <__udivmoddi4+0x1a6>
 8000f0e:	4463      	add	r3, ip
 8000f10:	3802      	subs	r0, #2
 8000f12:	e74d      	b.n	8000db0 <__udivmoddi4+0x148>
 8000f14:	4606      	mov	r6, r0
 8000f16:	4623      	mov	r3, r4
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e70f      	b.n	8000d3c <__udivmoddi4+0xd4>
 8000f1c:	3e02      	subs	r6, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	e730      	b.n	8000d84 <__udivmoddi4+0x11c>
 8000f22:	bf00      	nop

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b08b      	sub	sp, #44	@ 0x2c
 8000f2c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2e:	f001 f8af 	bl	8002090 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f32:	f000 f83f 	bl	8000fb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f36:	f000 f909 	bl	800114c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f3a:	f000 f8dd 	bl	80010f8 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000f3e:	f003 f991 	bl	8004264 <MX_FATFS_Init>
  MX_SPI1_Init();
 8000f42:	f000 f8a3 	bl	800108c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */



  	 FIL *fp = NULL;              // for midi file operations
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
     MIDI_header_chunk hdr; // to container header info
     uint8_t res;
     MIDI_controller *ctrl = malloc(sizeof(MIDI_controller));
 8000f4a:	200c      	movs	r0, #12
 8000f4c:	f006 f8ac 	bl	80070a8 <malloc>
 8000f50:	4603      	mov	r3, r0
 8000f52:	61bb      	str	r3, [r7, #24]
     // uint8_t i = 0;

     res = f_open(fp, "name_of_music", FA_READ);
 8000f54:	2201      	movs	r2, #1
 8000f56:	4915      	ldr	r1, [pc, #84]	@ (8000fac <main+0x84>)
 8000f58:	69f8      	ldr	r0, [r7, #28]
 8000f5a:	f005 fb40 	bl	80065de <f_open>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	75fb      	strb	r3, [r7, #23]

     if (!fp)
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d105      	bne.n	8000f74 <main+0x4c>
     {
         myprintf("fp is Null");
 8000f68:	4811      	ldr	r0, [pc, #68]	@ (8000fb0 <main+0x88>)
 8000f6a:	f001 f841 	bl	8001ff0 <myprintf>
         return -1;
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	e016      	b.n	8000fa2 <main+0x7a>
     }

     hdr = parse_midi_header(fp, hdr); // grabs header info
 8000f74:	1d3c      	adds	r4, r7, #4
 8000f76:	466a      	mov	r2, sp
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f80:	e882 0003 	stmia.w	r2, {r0, r1}
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	cb0c      	ldmia	r3, {r2, r3}
 8000f88:	69f9      	ldr	r1, [r7, #28]
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	f000 fdca 	bl	8001b24 <parse_midi_header>

     ctrl->tick_per_q_note = hdr.division;
 8000f90:	8a3a      	ldrh	r2, [r7, #16]
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	809a      	strh	r2, [r3, #4]

     //BaseType_t xReturned;
     //xReturned = xTaskCreate(parseMidi, "Parse Midi", 2048, fp, Handle)


     play_one_track(fp, ctrl);
 8000f96:	69b9      	ldr	r1, [r7, #24]
 8000f98:	69f8      	ldr	r0, [r7, #28]
 8000f9a:	f000 fd23 	bl	80019e4 <play_one_track>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f9e:	bf00      	nop
 8000fa0:	e7fd      	b.n	8000f9e <main+0x76>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3724      	adds	r7, #36	@ 0x24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd90      	pop	{r4, r7, pc}
 8000faa:	bf00      	nop
 8000fac:	080089a0 	.word	0x080089a0
 8000fb0:	080089b0 	.word	0x080089b0

08000fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b094      	sub	sp, #80	@ 0x50
 8000fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fba:	f107 031c 	add.w	r3, r7, #28
 8000fbe:	2234      	movs	r2, #52	@ 0x34
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f006 f968 	bl	8007298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc8:	f107 0308 	add.w	r3, r7, #8
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd8:	2300      	movs	r3, #0
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	4b29      	ldr	r3, [pc, #164]	@ (8001084 <SystemClock_Config+0xd0>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe0:	4a28      	ldr	r2, [pc, #160]	@ (8001084 <SystemClock_Config+0xd0>)
 8000fe2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fe6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fe8:	4b26      	ldr	r3, [pc, #152]	@ (8001084 <SystemClock_Config+0xd0>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	603b      	str	r3, [r7, #0]
 8000ff8:	4b23      	ldr	r3, [pc, #140]	@ (8001088 <SystemClock_Config+0xd4>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001000:	4a21      	ldr	r2, [pc, #132]	@ (8001088 <SystemClock_Config+0xd4>)
 8001002:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	4b1f      	ldr	r3, [pc, #124]	@ (8001088 <SystemClock_Config+0xd4>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001010:	603b      	str	r3, [r7, #0]
 8001012:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001014:	2302      	movs	r3, #2
 8001016:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001018:	2301      	movs	r3, #1
 800101a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800101c:	2310      	movs	r3, #16
 800101e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001020:	2302      	movs	r3, #2
 8001022:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001024:	2300      	movs	r3, #0
 8001026:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001028:	2308      	movs	r3, #8
 800102a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 800102c:	2348      	movs	r3, #72	@ 0x48
 800102e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001030:	2302      	movs	r3, #2
 8001032:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001034:	2302      	movs	r3, #2
 8001036:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001038:	2302      	movs	r3, #2
 800103a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	4618      	mov	r0, r3
 8001042:	f001 fe13 	bl	8002c6c <HAL_RCC_OscConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800104c:	f000 f8b0 	bl	80011b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001050:	230f      	movs	r3, #15
 8001052:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001054:	2302      	movs	r3, #2
 8001056:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001058:	2380      	movs	r3, #128	@ 0x80
 800105a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800105c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001060:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001066:	f107 0308 	add.w	r3, r7, #8
 800106a:	2101      	movs	r1, #1
 800106c:	4618      	mov	r0, r3
 800106e:	f001 fb39 	bl	80026e4 <HAL_RCC_ClockConfig>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001078:	f000 f89a 	bl	80011b0 <Error_Handler>
  }
}
 800107c:	bf00      	nop
 800107e:	3750      	adds	r7, #80	@ 0x50
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40023800 	.word	0x40023800
 8001088:	40007000 	.word	0x40007000

0800108c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001090:	4b17      	ldr	r3, [pc, #92]	@ (80010f0 <MX_SPI1_Init+0x64>)
 8001092:	4a18      	ldr	r2, [pc, #96]	@ (80010f4 <MX_SPI1_Init+0x68>)
 8001094:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001096:	4b16      	ldr	r3, [pc, #88]	@ (80010f0 <MX_SPI1_Init+0x64>)
 8001098:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800109c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800109e:	4b14      	ldr	r3, [pc, #80]	@ (80010f0 <MX_SPI1_Init+0x64>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010a4:	4b12      	ldr	r3, [pc, #72]	@ (80010f0 <MX_SPI1_Init+0x64>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010aa:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <MX_SPI1_Init+0x64>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	@ (80010f0 <MX_SPI1_Init+0x64>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	@ (80010f0 <MX_SPI1_Init+0x64>)
 80010b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80010be:	4b0c      	ldr	r3, [pc, #48]	@ (80010f0 <MX_SPI1_Init+0x64>)
 80010c0:	2218      	movs	r2, #24
 80010c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010c4:	4b0a      	ldr	r3, [pc, #40]	@ (80010f0 <MX_SPI1_Init+0x64>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ca:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <MX_SPI1_Init+0x64>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010d0:	4b07      	ldr	r3, [pc, #28]	@ (80010f0 <MX_SPI1_Init+0x64>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010d6:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <MX_SPI1_Init+0x64>)
 80010d8:	220a      	movs	r2, #10
 80010da:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010dc:	4804      	ldr	r0, [pc, #16]	@ (80010f0 <MX_SPI1_Init+0x64>)
 80010de:	f002 f863 	bl	80031a8 <HAL_SPI_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010e8:	f000 f862 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	200000a4 	.word	0x200000a4
 80010f4:	40013000 	.word	0x40013000

080010f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010fc:	4b11      	ldr	r3, [pc, #68]	@ (8001144 <MX_USART2_UART_Init+0x4c>)
 80010fe:	4a12      	ldr	r2, [pc, #72]	@ (8001148 <MX_USART2_UART_Init+0x50>)
 8001100:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001102:	4b10      	ldr	r3, [pc, #64]	@ (8001144 <MX_USART2_UART_Init+0x4c>)
 8001104:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001108:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800110a:	4b0e      	ldr	r3, [pc, #56]	@ (8001144 <MX_USART2_UART_Init+0x4c>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001110:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <MX_USART2_UART_Init+0x4c>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001116:	4b0b      	ldr	r3, [pc, #44]	@ (8001144 <MX_USART2_UART_Init+0x4c>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800111c:	4b09      	ldr	r3, [pc, #36]	@ (8001144 <MX_USART2_UART_Init+0x4c>)
 800111e:	220c      	movs	r2, #12
 8001120:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001122:	4b08      	ldr	r3, [pc, #32]	@ (8001144 <MX_USART2_UART_Init+0x4c>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001128:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <MX_USART2_UART_Init+0x4c>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800112e:	4805      	ldr	r0, [pc, #20]	@ (8001144 <MX_USART2_UART_Init+0x4c>)
 8001130:	f002 fc8c 	bl	8003a4c <HAL_UART_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800113a:	f000 f839 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200000fc 	.word	0x200000fc
 8001148:	40004400 	.word	0x40004400

0800114c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	4b10      	ldr	r3, [pc, #64]	@ (80011a8 <MX_GPIO_Init+0x5c>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001168:	4a0f      	ldr	r2, [pc, #60]	@ (80011a8 <MX_GPIO_Init+0x5c>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001170:	4b0d      	ldr	r3, [pc, #52]	@ (80011a8 <MX_GPIO_Init+0x5c>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 800117c:	2200      	movs	r2, #0
 800117e:	2110      	movs	r1, #16
 8001180:	480a      	ldr	r0, [pc, #40]	@ (80011ac <MX_GPIO_Init+0x60>)
 8001182:	f001 fa95 	bl	80026b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin;
 8001186:	2310      	movs	r3, #16
 8001188:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118a:	2301      	movs	r3, #1
 800118c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CS_PIN_GPIO_Port, &GPIO_InitStruct);
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	4619      	mov	r1, r3
 800119a:	4804      	ldr	r0, [pc, #16]	@ (80011ac <MX_GPIO_Init+0x60>)
 800119c:	f001 f8f4 	bl	8002388 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011a0:	bf00      	nop
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40020000 	.word	0x40020000

080011b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b4:	b672      	cpsid	i
}
 80011b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <Error_Handler+0x8>
 80011bc:	0000      	movs	r0, r0
	...

080011c0 <midi_event_handler>:
 * @param fp FIL pointer to midi FIL
 * @param delta_time time before next event is read in ticks
 * @param event handle for event type
 * @param ctrl contains system information for controls*/
void midi_event_handler(FIL *fp, uint32_t delta_time, uint8_t event, MIDI_controller *ctrl)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	4613      	mov	r3, r2
 80011ce:	71fb      	strb	r3, [r7, #7]
    uint8_t midi_type;
    uint8_t channel;
    uint16_t ms;
    struct note note;

    midi_type = 0xF0 & event; // event name
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	f023 030f 	bic.w	r3, r3, #15
 80011d6:	77fb      	strb	r3, [r7, #31]
    channel = 0x0F & event;   // where the event gets sent *** for polyphonic music
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	f003 030f 	and.w	r3, r3, #15
 80011de:	77bb      	strb	r3, [r7, #30]

    // myprintf("Midi Type: 0x%x\n", midi_type);

    switch (midi_type)
 80011e0:	7ffb      	ldrb	r3, [r7, #31]
 80011e2:	2be0      	cmp	r3, #224	@ 0xe0
 80011e4:	f000 80e6 	beq.w	80013b4 <midi_event_handler+0x1f4>
 80011e8:	2be0      	cmp	r3, #224	@ 0xe0
 80011ea:	f300 80e9 	bgt.w	80013c0 <midi_event_handler+0x200>
 80011ee:	2bd0      	cmp	r3, #208	@ 0xd0
 80011f0:	f000 80da 	beq.w	80013a8 <midi_event_handler+0x1e8>
 80011f4:	2bd0      	cmp	r3, #208	@ 0xd0
 80011f6:	f300 80e3 	bgt.w	80013c0 <midi_event_handler+0x200>
 80011fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80011fc:	f000 80ce 	beq.w	800139c <midi_event_handler+0x1dc>
 8001200:	2bc0      	cmp	r3, #192	@ 0xc0
 8001202:	f300 80dd 	bgt.w	80013c0 <midi_event_handler+0x200>
 8001206:	2bb0      	cmp	r3, #176	@ 0xb0
 8001208:	f000 80c2 	beq.w	8001390 <midi_event_handler+0x1d0>
 800120c:	2bb0      	cmp	r3, #176	@ 0xb0
 800120e:	f300 80d7 	bgt.w	80013c0 <midi_event_handler+0x200>
 8001212:	2ba0      	cmp	r3, #160	@ 0xa0
 8001214:	f000 80b3 	beq.w	800137e <midi_event_handler+0x1be>
 8001218:	2ba0      	cmp	r3, #160	@ 0xa0
 800121a:	f300 80d1 	bgt.w	80013c0 <midi_event_handler+0x200>
 800121e:	2b80      	cmp	r3, #128	@ 0x80
 8001220:	d002      	beq.n	8001228 <midi_event_handler+0x68>
 8001222:	2b90      	cmp	r3, #144	@ 0x90
 8001224:	d057      	beq.n	80012d6 <midi_event_handler+0x116>
 8001226:	e0cb      	b.n	80013c0 <midi_event_handler+0x200>
    {
    case 0x80: // Note Off
        myprintf("Note Off @ Channel: 0x%x\n", channel);
 8001228:	7fbb      	ldrb	r3, [r7, #30]
 800122a:	4619      	mov	r1, r3
 800122c:	486e      	ldr	r0, [pc, #440]	@ (80013e8 <midi_event_handler+0x228>)
 800122e:	f000 fedf 	bl	8001ff0 <myprintf>

        f_read(fp, &note.number, 1, NULL);
 8001232:	f107 0110 	add.w	r1, r7, #16
 8001236:	2300      	movs	r3, #0
 8001238:	2201      	movs	r2, #1
 800123a:	68f8      	ldr	r0, [r7, #12]
 800123c:	f005 fb89 	bl	8006952 <f_read>
        f_read(fp, &note.velocity, 1, NULL);
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	1c59      	adds	r1, r3, #1
 8001246:	2300      	movs	r3, #0
 8001248:	2201      	movs	r2, #1
 800124a:	68f8      	ldr	r0, [r7, #12]
 800124c:	f005 fb81 	bl	8006952 <f_read>
        note.frequency = 440 * pow(2.0, (note.number - 69) / 12.0);
 8001250:	7c3b      	ldrb	r3, [r7, #16]
 8001252:	3b45      	subs	r3, #69	@ 0x45
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff f985 	bl	8000564 <__aeabi_i2d>
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	4b63      	ldr	r3, [pc, #396]	@ (80013ec <midi_event_handler+0x22c>)
 8001260:	f7ff fb14 	bl	800088c <__aeabi_ddiv>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	ec43 2b17 	vmov	d7, r2, r3
 800126c:	eeb0 1a47 	vmov.f32	s2, s14
 8001270:	eef0 1a67 	vmov.f32	s3, s15
 8001274:	ed9f 0b5a 	vldr	d0, [pc, #360]	@ 80013e0 <midi_event_handler+0x220>
 8001278:	f006 fc24 	bl	8007ac4 <pow>
 800127c:	ec51 0b10 	vmov	r0, r1, d0
 8001280:	f04f 0200 	mov.w	r2, #0
 8001284:	4b5a      	ldr	r3, [pc, #360]	@ (80013f0 <midi_event_handler+0x230>)
 8001286:	f7ff f9d7 	bl	8000638 <__aeabi_dmul>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4610      	mov	r0, r2
 8001290:	4619      	mov	r1, r3
 8001292:	f7ff fc81 	bl	8000b98 <__aeabi_d2f>
 8001296:	4603      	mov	r3, r0
 8001298:	617b      	str	r3, [r7, #20]

        ms = delta_time_to_ms(delta_time, ctrl);
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	6839      	ldr	r1, [r7, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 fe72 	bl	8001f8a <delta_time_to_ms>
 80012a6:	4603      	mov	r3, r0
 80012a8:	83bb      	strh	r3, [r7, #28]

        note.length = ms;
 80012aa:	8bbb      	ldrh	r3, [r7, #28]
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	763b      	strb	r3, [r7, #24]

        // myprintf("note velocity %x\n", note.velocity);
        myprintf("note frequency %f Hz\n", note.frequency);
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f968 	bl	8000588 <__aeabi_f2d>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	484d      	ldr	r0, [pc, #308]	@ (80013f4 <midi_event_handler+0x234>)
 80012be:	f000 fe97 	bl	8001ff0 <myprintf>
        myprintf("note timing in ms %x\n\n", ms);
 80012c2:	8bbb      	ldrh	r3, [r7, #28]
 80012c4:	4619      	mov	r1, r3
 80012c6:	484c      	ldr	r0, [pc, #304]	@ (80013f8 <midi_event_handler+0x238>)
 80012c8:	f000 fe92 	bl	8001ff0 <myprintf>

        HAL_Delay(ms);
 80012cc:	8bbb      	ldrh	r3, [r7, #28]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 ff50 	bl	8002174 <HAL_Delay>

        // skip_midi_event(fp, midi_type);
        break;
 80012d4:	e07f      	b.n	80013d6 <midi_event_handler+0x216>

    case 0x90: // Note On
        myprintf("Note On @ Channel: 0x%x\n", channel);
 80012d6:	7fbb      	ldrb	r3, [r7, #30]
 80012d8:	4619      	mov	r1, r3
 80012da:	4848      	ldr	r0, [pc, #288]	@ (80013fc <midi_event_handler+0x23c>)
 80012dc:	f000 fe88 	bl	8001ff0 <myprintf>

        ms = delta_time_to_ms(delta_time, ctrl);
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	6839      	ldr	r1, [r7, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 fe4f 	bl	8001f8a <delta_time_to_ms>
 80012ec:	4603      	mov	r3, r0
 80012ee:	83bb      	strh	r3, [r7, #28]

        f_read(fp, &note.number, 1, NULL);
 80012f0:	f107 0110 	add.w	r1, r7, #16
 80012f4:	2300      	movs	r3, #0
 80012f6:	2201      	movs	r2, #1
 80012f8:	68f8      	ldr	r0, [r7, #12]
 80012fa:	f005 fb2a 	bl	8006952 <f_read>
        f_read(fp, &note.velocity, 1, NULL);
 80012fe:	f107 0310 	add.w	r3, r7, #16
 8001302:	1c59      	adds	r1, r3, #1
 8001304:	2300      	movs	r3, #0
 8001306:	2201      	movs	r2, #1
 8001308:	68f8      	ldr	r0, [r7, #12]
 800130a:	f005 fb22 	bl	8006952 <f_read>
        note.frequency = 440 * pow(2.0, (note.number - 69) / 12.0);
 800130e:	7c3b      	ldrb	r3, [r7, #16]
 8001310:	3b45      	subs	r3, #69	@ 0x45
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff f926 	bl	8000564 <__aeabi_i2d>
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	4b33      	ldr	r3, [pc, #204]	@ (80013ec <midi_event_handler+0x22c>)
 800131e:	f7ff fab5 	bl	800088c <__aeabi_ddiv>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	ec43 2b17 	vmov	d7, r2, r3
 800132a:	eeb0 1a47 	vmov.f32	s2, s14
 800132e:	eef0 1a67 	vmov.f32	s3, s15
 8001332:	ed9f 0b2b 	vldr	d0, [pc, #172]	@ 80013e0 <midi_event_handler+0x220>
 8001336:	f006 fbc5 	bl	8007ac4 <pow>
 800133a:	ec51 0b10 	vmov	r0, r1, d0
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	4b2b      	ldr	r3, [pc, #172]	@ (80013f0 <midi_event_handler+0x230>)
 8001344:	f7ff f978 	bl	8000638 <__aeabi_dmul>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4610      	mov	r0, r2
 800134e:	4619      	mov	r1, r3
 8001350:	f7ff fc22 	bl	8000b98 <__aeabi_d2f>
 8001354:	4603      	mov	r3, r0
 8001356:	617b      	str	r3, [r7, #20]

        myprintf("note frequency %f Hz\n", note.frequency);
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f914 	bl	8000588 <__aeabi_f2d>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4823      	ldr	r0, [pc, #140]	@ (80013f4 <midi_event_handler+0x234>)
 8001366:	f000 fe43 	bl	8001ff0 <myprintf>
        myprintf("note timing in ms %x\n\n", ms);
 800136a:	8bbb      	ldrh	r3, [r7, #28]
 800136c:	4619      	mov	r1, r3
 800136e:	4822      	ldr	r0, [pc, #136]	@ (80013f8 <midi_event_handler+0x238>)
 8001370:	f000 fe3e 	bl	8001ff0 <myprintf>

        // delay before event begins = ms
        HAL_Delay(ms);
 8001374:	8bbb      	ldrh	r3, [r7, #28]
 8001376:	4618      	mov	r0, r3
 8001378:	f000 fefc 	bl	8002174 <HAL_Delay>

        // play note until note off event

        // skip_midi_event(fp, midi_type);
        break;
 800137c:	e02b      	b.n	80013d6 <midi_event_handler+0x216>

    case 0xA0: // Polyphonic Key Pressure (Aftertouch)
        myprintf("Polyphonic Key Pressure\n");
 800137e:	4820      	ldr	r0, [pc, #128]	@ (8001400 <midi_event_handler+0x240>)
 8001380:	f000 fe36 	bl	8001ff0 <myprintf>
        skip_midi_event(fp, midi_type);
 8001384:	7ffb      	ldrb	r3, [r7, #31]
 8001386:	4619      	mov	r1, r3
 8001388:	68f8      	ldr	r0, [r7, #12]
 800138a:	f000 fa69 	bl	8001860 <skip_midi_event>
        break;
 800138e:	e022      	b.n	80013d6 <midi_event_handler+0x216>

    case 0xB0: // Control Change
        skip_midi_event(fp, midi_type);
 8001390:	7ffb      	ldrb	r3, [r7, #31]
 8001392:	4619      	mov	r1, r3
 8001394:	68f8      	ldr	r0, [r7, #12]
 8001396:	f000 fa63 	bl	8001860 <skip_midi_event>
        break;
 800139a:	e01c      	b.n	80013d6 <midi_event_handler+0x216>

    case 0xC0: // Program Change
        // changes instrument type
        skip_midi_event(fp, midi_type);
 800139c:	7ffb      	ldrb	r3, [r7, #31]
 800139e:	4619      	mov	r1, r3
 80013a0:	68f8      	ldr	r0, [r7, #12]
 80013a2:	f000 fa5d 	bl	8001860 <skip_midi_event>
        break;
 80013a6:	e016      	b.n	80013d6 <midi_event_handler+0x216>

    case 0xD0: // Channel Pressure (Aftertouch)
        skip_midi_event(fp, midi_type);
 80013a8:	7ffb      	ldrb	r3, [r7, #31]
 80013aa:	4619      	mov	r1, r3
 80013ac:	68f8      	ldr	r0, [r7, #12]
 80013ae:	f000 fa57 	bl	8001860 <skip_midi_event>
        break;
 80013b2:	e010      	b.n	80013d6 <midi_event_handler+0x216>

    case 0xE0: // Pitch Bend Change

        skip_midi_event(fp, midi_type);
 80013b4:	7ffb      	ldrb	r3, [r7, #31]
 80013b6:	4619      	mov	r1, r3
 80013b8:	68f8      	ldr	r0, [r7, #12]
 80013ba:	f000 fa51 	bl	8001860 <skip_midi_event>
        break;
 80013be:	e00a      	b.n	80013d6 <midi_event_handler+0x216>

    default:
        myprintf("Unknown MIDI Type Handler: 0x%x\n", midi_type);
 80013c0:	7ffb      	ldrb	r3, [r7, #31]
 80013c2:	4619      	mov	r1, r3
 80013c4:	480f      	ldr	r0, [pc, #60]	@ (8001404 <midi_event_handler+0x244>)
 80013c6:	f000 fe13 	bl	8001ff0 <myprintf>
        skip_midi_event(fp, midi_type);
 80013ca:	7ffb      	ldrb	r3, [r7, #31]
 80013cc:	4619      	mov	r1, r3
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f000 fa46 	bl	8001860 <skip_midi_event>
        break;
 80013d4:	bf00      	nop
    }
}
 80013d6:	bf00      	nop
 80013d8:	3720      	adds	r7, #32
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	00000000 	.word	0x00000000
 80013e4:	40000000 	.word	0x40000000
 80013e8:	080089bc 	.word	0x080089bc
 80013ec:	40280000 	.word	0x40280000
 80013f0:	407b8000 	.word	0x407b8000
 80013f4:	080089d8 	.word	0x080089d8
 80013f8:	080089f0 	.word	0x080089f0
 80013fc:	08008a08 	.word	0x08008a08
 8001400:	08008a24 	.word	0x08008a24
 8001404:	08008a40 	.word	0x08008a40

08001408 <meta_event_handler>:
 * @param delta_time time before next event is read in ticks
 * @param event handle for event type
 * @param ctrl contains system information for controls
 * @return 0 on success -1 if failure*/
uint8_t meta_event_handler(FIL *fp, uint32_t delta_time, MIDI_controller *ctrl)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08c      	sub	sp, #48	@ 0x30
 800140c:	af02      	add	r7, sp, #8
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
    Delta time
    FF (signifies meta event)
    Event Code (1 byte)
    */

    meta_type = f_read(fp, &meta_type, 1, NULL);;
 8001414:	f107 011b 	add.w	r1, r7, #27
 8001418:	2300      	movs	r3, #0
 800141a:	2201      	movs	r2, #1
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	f005 fa98 	bl	8006952 <f_read>
 8001422:	4603      	mov	r3, r0
 8001424:	76fb      	strb	r3, [r7, #27]

    switch (meta_type)
 8001426:	7efb      	ldrb	r3, [r7, #27]
 8001428:	2b59      	cmp	r3, #89	@ 0x59
 800142a:	f300 80bd 	bgt.w	80015a8 <meta_event_handler+0x1a0>
 800142e:	2b00      	cmp	r3, #0
 8001430:	f2c0 81c7 	blt.w	80017c2 <meta_event_handler+0x3ba>
 8001434:	2b59      	cmp	r3, #89	@ 0x59
 8001436:	f200 81c4 	bhi.w	80017c2 <meta_event_handler+0x3ba>
 800143a:	a201      	add	r2, pc, #4	@ (adr r2, 8001440 <meta_event_handler+0x38>)
 800143c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001440:	080015b1 	.word	0x080015b1
 8001444:	080015bf 	.word	0x080015bf
 8001448:	080015cd 	.word	0x080015cd
 800144c:	080015db 	.word	0x080015db
 8001450:	0800163f 	.word	0x0800163f
 8001454:	0800164d 	.word	0x0800164d
 8001458:	0800165b 	.word	0x0800165b
 800145c:	08001669 	.word	0x08001669
 8001460:	080017c3 	.word	0x080017c3
 8001464:	080017c3 	.word	0x080017c3
 8001468:	080017c3 	.word	0x080017c3
 800146c:	080017c3 	.word	0x080017c3
 8001470:	080017c3 	.word	0x080017c3
 8001474:	080017c3 	.word	0x080017c3
 8001478:	080017c3 	.word	0x080017c3
 800147c:	080017c3 	.word	0x080017c3
 8001480:	080017c3 	.word	0x080017c3
 8001484:	080017c3 	.word	0x080017c3
 8001488:	080017c3 	.word	0x080017c3
 800148c:	080017c3 	.word	0x080017c3
 8001490:	080017c3 	.word	0x080017c3
 8001494:	080017c3 	.word	0x080017c3
 8001498:	080017c3 	.word	0x080017c3
 800149c:	080017c3 	.word	0x080017c3
 80014a0:	080017c3 	.word	0x080017c3
 80014a4:	080017c3 	.word	0x080017c3
 80014a8:	080017c3 	.word	0x080017c3
 80014ac:	080017c3 	.word	0x080017c3
 80014b0:	080017c3 	.word	0x080017c3
 80014b4:	080017c3 	.word	0x080017c3
 80014b8:	080017c3 	.word	0x080017c3
 80014bc:	080017c3 	.word	0x080017c3
 80014c0:	08001677 	.word	0x08001677
 80014c4:	080017c3 	.word	0x080017c3
 80014c8:	080017c3 	.word	0x080017c3
 80014cc:	080017c3 	.word	0x080017c3
 80014d0:	080017c3 	.word	0x080017c3
 80014d4:	080017c3 	.word	0x080017c3
 80014d8:	080017c3 	.word	0x080017c3
 80014dc:	080017c3 	.word	0x080017c3
 80014e0:	080017c3 	.word	0x080017c3
 80014e4:	080017c3 	.word	0x080017c3
 80014e8:	080017c3 	.word	0x080017c3
 80014ec:	080017c3 	.word	0x080017c3
 80014f0:	080017c3 	.word	0x080017c3
 80014f4:	080017c3 	.word	0x080017c3
 80014f8:	080017c3 	.word	0x080017c3
 80014fc:	08001685 	.word	0x08001685
 8001500:	080017c3 	.word	0x080017c3
 8001504:	080017c3 	.word	0x080017c3
 8001508:	080017c3 	.word	0x080017c3
 800150c:	080017c3 	.word	0x080017c3
 8001510:	080017c3 	.word	0x080017c3
 8001514:	080017c3 	.word	0x080017c3
 8001518:	080017c3 	.word	0x080017c3
 800151c:	080017c3 	.word	0x080017c3
 8001520:	080017c3 	.word	0x080017c3
 8001524:	080017c3 	.word	0x080017c3
 8001528:	080017c3 	.word	0x080017c3
 800152c:	080017c3 	.word	0x080017c3
 8001530:	080017c3 	.word	0x080017c3
 8001534:	080017c3 	.word	0x080017c3
 8001538:	080017c3 	.word	0x080017c3
 800153c:	080017c3 	.word	0x080017c3
 8001540:	080017c3 	.word	0x080017c3
 8001544:	080017c3 	.word	0x080017c3
 8001548:	080017c3 	.word	0x080017c3
 800154c:	080017c3 	.word	0x080017c3
 8001550:	080017c3 	.word	0x080017c3
 8001554:	080017c3 	.word	0x080017c3
 8001558:	080017c3 	.word	0x080017c3
 800155c:	080017c3 	.word	0x080017c3
 8001560:	080017c3 	.word	0x080017c3
 8001564:	080017c3 	.word	0x080017c3
 8001568:	080017c3 	.word	0x080017c3
 800156c:	080017c3 	.word	0x080017c3
 8001570:	080017c3 	.word	0x080017c3
 8001574:	080017c3 	.word	0x080017c3
 8001578:	080017c3 	.word	0x080017c3
 800157c:	080017c3 	.word	0x080017c3
 8001580:	080017c3 	.word	0x080017c3
 8001584:	0800169b 	.word	0x0800169b
 8001588:	080017c3 	.word	0x080017c3
 800158c:	080017c3 	.word	0x080017c3
 8001590:	08001717 	.word	0x08001717
 8001594:	080017c3 	.word	0x080017c3
 8001598:	080017c3 	.word	0x080017c3
 800159c:	080017c3 	.word	0x080017c3
 80015a0:	08001725 	.word	0x08001725
 80015a4:	08001781 	.word	0x08001781
 80015a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80015aa:	f000 8106 	beq.w	80017ba <meta_event_handler+0x3b2>
 80015ae:	e108      	b.n	80017c2 <meta_event_handler+0x3ba>
    {
    case 0x00:
        myprintf("Handle Sequence Number event\n");
 80015b0:	488b      	ldr	r0, [pc, #556]	@ (80017e0 <meta_event_handler+0x3d8>)
 80015b2:	f000 fd1d 	bl	8001ff0 <myprintf>
        skip_meta_event(fp);
 80015b6:	68f8      	ldr	r0, [r7, #12]
 80015b8:	f000 f93e 	bl	8001838 <skip_meta_event>

        break;
 80015bc:	e10b      	b.n	80017d6 <meta_event_handler+0x3ce>
    case 0x01:
        myprintf("Handle Text Event\n");
 80015be:	4889      	ldr	r0, [pc, #548]	@ (80017e4 <meta_event_handler+0x3dc>)
 80015c0:	f000 fd16 	bl	8001ff0 <myprintf>
        skip_meta_event(fp);
 80015c4:	68f8      	ldr	r0, [r7, #12]
 80015c6:	f000 f937 	bl	8001838 <skip_meta_event>
        break;
 80015ca:	e104      	b.n	80017d6 <meta_event_handler+0x3ce>
    case 0x02:
        myprintf("Handle Copyright Notice\n");
 80015cc:	4886      	ldr	r0, [pc, #536]	@ (80017e8 <meta_event_handler+0x3e0>)
 80015ce:	f000 fd0f 	bl	8001ff0 <myprintf>
        skip_meta_event(fp);
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	f000 f930 	bl	8001838 <skip_meta_event>
        break;
 80015d8:	e0fd      	b.n	80017d6 <meta_event_handler+0x3ce>
    case 0x03:
        myprintf("Track Name\n");
 80015da:	4884      	ldr	r0, [pc, #528]	@ (80017ec <meta_event_handler+0x3e4>)
 80015dc:	f000 fd08 	bl	8001ff0 <myprintf>
        event_len = decode_vlq(fp);
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f000 fcb5 	bl	8001f50 <decode_vlq>
 80015e6:	4603      	mov	r3, r0
 80015e8:	617b      	str	r3, [r7, #20]
        int i = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	@ 0x24

        buf = malloc(sizeof(uint8_t) * event_len);
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f005 fd59 	bl	80070a8 <malloc>
 80015f6:	4603      	mov	r3, r0
 80015f8:	623b      	str	r3, [r7, #32]
        if (!buf)
 80015fa:	6a3b      	ldr	r3, [r7, #32]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d104      	bne.n	800160a <meta_event_handler+0x202>
        {
            myprintf("Malloc Failed in track name\n");
 8001600:	487b      	ldr	r0, [pc, #492]	@ (80017f0 <meta_event_handler+0x3e8>)
 8001602:	f000 fcf5 	bl	8001ff0 <myprintf>
            return -1;
 8001606:	23ff      	movs	r3, #255	@ 0xff
 8001608:	e0e6      	b.n	80017d8 <meta_event_handler+0x3d0>
        }

        f_read(fp, buf, event_len, NULL);
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	2300      	movs	r3, #0
 800160e:	6a39      	ldr	r1, [r7, #32]
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f005 f99e 	bl	8006952 <f_read>

        // prints track name
        while (i < event_len)
 8001616:	e00a      	b.n	800162e <meta_event_handler+0x226>
        {
            myprintf("%c", buf[i]);
 8001618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161a:	6a3a      	ldr	r2, [r7, #32]
 800161c:	4413      	add	r3, r2
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	4619      	mov	r1, r3
 8001622:	4874      	ldr	r0, [pc, #464]	@ (80017f4 <meta_event_handler+0x3ec>)
 8001624:	f000 fce4 	bl	8001ff0 <myprintf>
            i++;
 8001628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162a:	3301      	adds	r3, #1
 800162c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (i < event_len)
 800162e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	429a      	cmp	r2, r3
 8001634:	d3f0      	bcc.n	8001618 <meta_event_handler+0x210>
        }

        myprintf("\n\n");
 8001636:	4870      	ldr	r0, [pc, #448]	@ (80017f8 <meta_event_handler+0x3f0>)
 8001638:	f000 fcda 	bl	8001ff0 <myprintf>

        // skip_meta_event(fp);
        break;
 800163c:	e0cb      	b.n	80017d6 <meta_event_handler+0x3ce>
    case 0x04:
        myprintf("Handle Instrument Name\n");
 800163e:	486f      	ldr	r0, [pc, #444]	@ (80017fc <meta_event_handler+0x3f4>)
 8001640:	f000 fcd6 	bl	8001ff0 <myprintf>
        skip_meta_event(fp);
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f000 f8f7 	bl	8001838 <skip_meta_event>
        break;
 800164a:	e0c4      	b.n	80017d6 <meta_event_handler+0x3ce>
    case 0x05:
        myprintf("Handle Lyric Text\n");
 800164c:	486c      	ldr	r0, [pc, #432]	@ (8001800 <meta_event_handler+0x3f8>)
 800164e:	f000 fccf 	bl	8001ff0 <myprintf>
        skip_meta_event(fp);
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f000 f8f0 	bl	8001838 <skip_meta_event>
        break;
 8001658:	e0bd      	b.n	80017d6 <meta_event_handler+0x3ce>
    case 0x06:
        myprintf("Handle Marker Text\n");
 800165a:	486a      	ldr	r0, [pc, #424]	@ (8001804 <meta_event_handler+0x3fc>)
 800165c:	f000 fcc8 	bl	8001ff0 <myprintf>
        skip_meta_event(fp);
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f000 f8e9 	bl	8001838 <skip_meta_event>
        break;
 8001666:	e0b6      	b.n	80017d6 <meta_event_handler+0x3ce>
    case 0x07:
        myprintf("Handle Cue Point\n");
 8001668:	4867      	ldr	r0, [pc, #412]	@ (8001808 <meta_event_handler+0x400>)
 800166a:	f000 fcc1 	bl	8001ff0 <myprintf>
        skip_meta_event(fp);
 800166e:	68f8      	ldr	r0, [r7, #12]
 8001670:	f000 f8e2 	bl	8001838 <skip_meta_event>
        break;
 8001674:	e0af      	b.n	80017d6 <meta_event_handler+0x3ce>
    case 0x20:
        myprintf("Handle MIDI Channel Prefix Assignment\n");
 8001676:	4865      	ldr	r0, [pc, #404]	@ (800180c <meta_event_handler+0x404>)
 8001678:	f000 fcba 	bl	8001ff0 <myprintf>
        skip_meta_event(fp);
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f000 f8db 	bl	8001838 <skip_meta_event>
        break;
 8001682:	e0a8      	b.n	80017d6 <meta_event_handler+0x3ce>
    case 0x2F:
        myprintf("Handle End of Track\n\n\n");
 8001684:	4862      	ldr	r0, [pc, #392]	@ (8001810 <meta_event_handler+0x408>)
 8001686:	f000 fcb3 	bl	8001ff0 <myprintf>
        f_read(fp, NULL, 1, NULL);; // skips final value
 800168a:	2300      	movs	r3, #0
 800168c:	2201      	movs	r2, #1
 800168e:	2100      	movs	r1, #0
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f005 f95e 	bl	8006952 <f_read>

        return 1; // success!!
 8001696:	2301      	movs	r3, #1
 8001698:	e09e      	b.n	80017d8 <meta_event_handler+0x3d0>
    case 0x51:
        myprintf("Sets Tempo\n");
 800169a:	485e      	ldr	r0, [pc, #376]	@ (8001814 <meta_event_handler+0x40c>)
 800169c:	f000 fca8 	bl	8001ff0 <myprintf>

        uint32_t num_micro = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]

        buf = malloc(sizeof(uint8_t) * 3);
 80016a4:	2003      	movs	r0, #3
 80016a6:	f005 fcff 	bl	80070a8 <malloc>
 80016aa:	4603      	mov	r3, r0
 80016ac:	623b      	str	r3, [r7, #32]
        if (!buf)
 80016ae:	6a3b      	ldr	r3, [r7, #32]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d104      	bne.n	80016be <meta_event_handler+0x2b6>
        {
            myprintf("Malloc Failed in Time Signiture");
 80016b4:	4858      	ldr	r0, [pc, #352]	@ (8001818 <meta_event_handler+0x410>)
 80016b6:	f000 fc9b 	bl	8001ff0 <myprintf>
            return -1;
 80016ba:	23ff      	movs	r3, #255	@ 0xff
 80016bc:	e08c      	b.n	80017d8 <meta_event_handler+0x3d0>
        }
        f_read(fp, &event_len, 1, NULL);
 80016be:	f107 0114 	add.w	r1, r7, #20
 80016c2:	2300      	movs	r3, #0
 80016c4:	2201      	movs	r2, #1
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	f005 f943 	bl	8006952 <f_read>
        f_read(fp, buf, 3, NULL);
 80016cc:	2300      	movs	r3, #0
 80016ce:	2203      	movs	r2, #3
 80016d0:	6a39      	ldr	r1, [r7, #32]
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f005 f93d 	bl	8006952 <f_read>
        num_micro = (buf[0] << 16) | (buf[1] << 8) | (buf[2]);
 80016d8:	6a3b      	ldr	r3, [r7, #32]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	041a      	lsls	r2, r3, #16
 80016de:	6a3b      	ldr	r3, [r7, #32]
 80016e0:	3301      	adds	r3, #1
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	4313      	orrs	r3, r2
 80016e8:	6a3a      	ldr	r2, [r7, #32]
 80016ea:	3202      	adds	r2, #2
 80016ec:	7812      	ldrb	r2, [r2, #0]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	61fb      	str	r3, [r7, #28]
        myprintf("Microseconds per quarter note: %d\n", num_micro);
 80016f2:	69f9      	ldr	r1, [r7, #28]
 80016f4:	4849      	ldr	r0, [pc, #292]	@ (800181c <meta_event_handler+0x414>)
 80016f6:	f000 fc7b 	bl	8001ff0 <myprintf>

        ctrl->tempo = 60000000 / num_micro; // tempo in bpm
 80016fa:	4a49      	ldr	r2, [pc, #292]	@ (8001820 <meta_event_handler+0x418>)
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001702:	b2da      	uxtb	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	719a      	strb	r2, [r3, #6]

        myprintf("tempo in BPM: %d\n", ctrl->tempo);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	799b      	ldrb	r3, [r3, #6]
 800170c:	4619      	mov	r1, r3
 800170e:	4845      	ldr	r0, [pc, #276]	@ (8001824 <meta_event_handler+0x41c>)
 8001710:	f000 fc6e 	bl	8001ff0 <myprintf>

        // skip_meta_event(fp);
        break;
 8001714:	e05f      	b.n	80017d6 <meta_event_handler+0x3ce>
    case 0x54:
        myprintf("Handle SMPTE Offset\n");
 8001716:	4844      	ldr	r0, [pc, #272]	@ (8001828 <meta_event_handler+0x420>)
 8001718:	f000 fc6a 	bl	8001ff0 <myprintf>
        skip_meta_event(fp);
 800171c:	68f8      	ldr	r0, [r7, #12]
 800171e:	f000 f88b 	bl	8001838 <skip_meta_event>
        break;
 8001722:	e058      	b.n	80017d6 <meta_event_handler+0x3ce>
    case 0x58: // time signiture

        f_read(fp, &event_len, 1, NULL);; // gets length byte (always 0x04)
 8001724:	f107 0114 	add.w	r1, r7, #20
 8001728:	2300      	movs	r3, #0
 800172a:	2201      	movs	r2, #1
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f005 f910 	bl	8006952 <f_read>

        buf = malloc(sizeof(uint8_t) * 4);
 8001732:	2004      	movs	r0, #4
 8001734:	f005 fcb8 	bl	80070a8 <malloc>
 8001738:	4603      	mov	r3, r0
 800173a:	623b      	str	r3, [r7, #32]
        if (!buf)
 800173c:	6a3b      	ldr	r3, [r7, #32]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d104      	bne.n	800174c <meta_event_handler+0x344>
        {
            myprintf("Malloc Failed in Time Signiture");
 8001742:	4835      	ldr	r0, [pc, #212]	@ (8001818 <meta_event_handler+0x410>)
 8001744:	f000 fc54 	bl	8001ff0 <myprintf>
            return -1;
 8001748:	23ff      	movs	r3, #255	@ 0xff
 800174a:	e045      	b.n	80017d8 <meta_event_handler+0x3d0>
        denominator
        metrinome clicks
        32nd notes per quarter
        */

        f_read(fp,buf,4,NULL);
 800174c:	2300      	movs	r3, #0
 800174e:	2204      	movs	r2, #4
 8001750:	6a39      	ldr	r1, [r7, #32]
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	f005 f8fd 	bl	8006952 <f_read>

        myprintf("Time signiture: \n num:%x\n denom:%x\n clocks per beat:%x\n 32nds per quarter:%x\n\n", buf[0], buf[1], buf[2], buf[3]);
 8001758:	6a3b      	ldr	r3, [r7, #32]
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	4619      	mov	r1, r3
 800175e:	6a3b      	ldr	r3, [r7, #32]
 8001760:	3301      	adds	r3, #1
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	461a      	mov	r2, r3
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	3302      	adds	r3, #2
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	6a3b      	ldr	r3, [r7, #32]
 8001770:	3303      	adds	r3, #3
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	4603      	mov	r3, r0
 8001778:	482c      	ldr	r0, [pc, #176]	@ (800182c <meta_event_handler+0x424>)
 800177a:	f000 fc39 	bl	8001ff0 <myprintf>

        break;
 800177e:	e02a      	b.n	80017d6 <meta_event_handler+0x3ce>
    case 0x59:
        myprintf("Handle Key Signature\n");
 8001780:	482b      	ldr	r0, [pc, #172]	@ (8001830 <meta_event_handler+0x428>)
 8001782:	f000 fc35 	bl	8001ff0 <myprintf>
        uint8_t tone;
        uint8_t key_sig;

        f_lseek(fp, 1); // shifts past length byte 0x02
 8001786:	2101      	movs	r1, #1
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f005 fa21 	bl	8006bd0 <f_lseek>

        f_read(fp, &key_sig, 1, NULL);; // number of sharps or flats
 800178e:	f107 0112 	add.w	r1, r7, #18
 8001792:	2300      	movs	r3, #0
 8001794:	2201      	movs	r2, #1
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f005 f8db 	bl	8006952 <f_read>
        f_read(fp, &tone, 1, NULL);;    // major(1) / minor(0)
 800179c:	f107 0113 	add.w	r1, r7, #19
 80017a0:	2300      	movs	r3, #0
 80017a2:	2201      	movs	r2, #1
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	f005 f8d4 	bl	8006952 <f_read>

        find_key(key_sig, tone, ctrl);
 80017aa:	7cbb      	ldrb	r3, [r7, #18]
 80017ac:	b25b      	sxtb	r3, r3
 80017ae:	7cf9      	ldrb	r1, [r7, #19]
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f8c2 	bl	800193c <find_key>

        break;
 80017b8:	e00d      	b.n	80017d6 <meta_event_handler+0x3ce>
        //     return -1;
        // }

        // fread(buf, 1, event_len, fp);

        skip_meta_event(fp);
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f000 f83c 	bl	8001838 <skip_meta_event>
        break;
 80017c0:	e009      	b.n	80017d6 <meta_event_handler+0x3ce>
    default:
        myprintf("Unknown event type: 0x%02X\n", meta_type);
 80017c2:	7efb      	ldrb	r3, [r7, #27]
 80017c4:	4619      	mov	r1, r3
 80017c6:	481b      	ldr	r0, [pc, #108]	@ (8001834 <meta_event_handler+0x42c>)
 80017c8:	f000 fc12 	bl	8001ff0 <myprintf>
        skip_meta_event(fp);
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f000 f833 	bl	8001838 <skip_meta_event>
        return -1;
 80017d2:	23ff      	movs	r3, #255	@ 0xff
 80017d4:	e000      	b.n	80017d8 <meta_event_handler+0x3d0>
    }

    return 0;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3728      	adds	r7, #40	@ 0x28
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	08008a64 	.word	0x08008a64
 80017e4:	08008a84 	.word	0x08008a84
 80017e8:	08008a98 	.word	0x08008a98
 80017ec:	08008ab4 	.word	0x08008ab4
 80017f0:	08008ac0 	.word	0x08008ac0
 80017f4:	08008ae0 	.word	0x08008ae0
 80017f8:	08008ae4 	.word	0x08008ae4
 80017fc:	08008ae8 	.word	0x08008ae8
 8001800:	08008b00 	.word	0x08008b00
 8001804:	08008b14 	.word	0x08008b14
 8001808:	08008b28 	.word	0x08008b28
 800180c:	08008b3c 	.word	0x08008b3c
 8001810:	08008b64 	.word	0x08008b64
 8001814:	08008b7c 	.word	0x08008b7c
 8001818:	08008b88 	.word	0x08008b88
 800181c:	08008ba8 	.word	0x08008ba8
 8001820:	03938700 	.word	0x03938700
 8001824:	08008bcc 	.word	0x08008bcc
 8001828:	08008be0 	.word	0x08008be0
 800182c:	08008bf8 	.word	0x08008bf8
 8001830:	08008c48 	.word	0x08008c48
 8001834:	08008c60 	.word	0x08008c60

08001838 <skip_meta_event>:
 *  @brief skips meta events
 * @param fp FIL pointe to midi FIL
 * @return 0 on sucess -1 on failure
 * */
uint8_t skip_meta_event(FIL *fp)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]

    uint32_t event_len;
    uint8_t err;

    event_len = decode_vlq(fp);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f000 fb85 	bl	8001f50 <decode_vlq>
 8001846:	60f8      	str	r0, [r7, #12]

    err = f_lseek(fp, event_len);
 8001848:	68f9      	ldr	r1, [r7, #12]
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f005 f9c0 	bl	8006bd0 <f_lseek>
 8001850:	4603      	mov	r3, r0
 8001852:	72fb      	strb	r3, [r7, #11]
    {
        myprintf("f_lseek in skip event failed");
        return -1;
    }

    return 0;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <skip_midi_event>:
 * @param fp FIL pointe to midi FIL
 * @param type 8-bit handle of midi type
 * @return 0 on sucess -1 on failure
 * */
uint8_t skip_midi_event(FIL *fp, uint8_t type)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	70fb      	strb	r3, [r7, #3]

    switch (type)
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	2be0      	cmp	r3, #224	@ 0xe0
 8001870:	d046      	beq.n	8001900 <skip_midi_event+0xa0>
 8001872:	2be0      	cmp	r3, #224	@ 0xe0
 8001874:	dc4c      	bgt.n	8001910 <skip_midi_event+0xb0>
 8001876:	2bd0      	cmp	r3, #208	@ 0xd0
 8001878:	d03a      	beq.n	80018f0 <skip_midi_event+0x90>
 800187a:	2bd0      	cmp	r3, #208	@ 0xd0
 800187c:	dc48      	bgt.n	8001910 <skip_midi_event+0xb0>
 800187e:	2bc0      	cmp	r3, #192	@ 0xc0
 8001880:	d02e      	beq.n	80018e0 <skip_midi_event+0x80>
 8001882:	2bc0      	cmp	r3, #192	@ 0xc0
 8001884:	dc44      	bgt.n	8001910 <skip_midi_event+0xb0>
 8001886:	2bb0      	cmp	r3, #176	@ 0xb0
 8001888:	d022      	beq.n	80018d0 <skip_midi_event+0x70>
 800188a:	2bb0      	cmp	r3, #176	@ 0xb0
 800188c:	dc40      	bgt.n	8001910 <skip_midi_event+0xb0>
 800188e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001890:	d016      	beq.n	80018c0 <skip_midi_event+0x60>
 8001892:	2ba0      	cmp	r3, #160	@ 0xa0
 8001894:	dc3c      	bgt.n	8001910 <skip_midi_event+0xb0>
 8001896:	2b80      	cmp	r3, #128	@ 0x80
 8001898:	d002      	beq.n	80018a0 <skip_midi_event+0x40>
 800189a:	2b90      	cmp	r3, #144	@ 0x90
 800189c:	d008      	beq.n	80018b0 <skip_midi_event+0x50>
 800189e:	e037      	b.n	8001910 <skip_midi_event+0xb0>
    {

    case 0x80: // Note Off
        myprintf("Skip Note Off\n");
 80018a0:	481f      	ldr	r0, [pc, #124]	@ (8001920 <skip_midi_event+0xc0>)
 80018a2:	f000 fba5 	bl	8001ff0 <myprintf>
        f_lseek(fp, 2);
 80018a6:	2102      	movs	r1, #2
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f005 f991 	bl	8006bd0 <f_lseek>
        break;
 80018ae:	e031      	b.n	8001914 <skip_midi_event+0xb4>

    case 0x90: // Note On
        myprintf("Skip Note On\n");
 80018b0:	481c      	ldr	r0, [pc, #112]	@ (8001924 <skip_midi_event+0xc4>)
 80018b2:	f000 fb9d 	bl	8001ff0 <myprintf>
        f_lseek(fp, 2);
 80018b6:	2102      	movs	r1, #2
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f005 f989 	bl	8006bd0 <f_lseek>
        break;
 80018be:	e029      	b.n	8001914 <skip_midi_event+0xb4>

    case 0xA0: // Polyphonic Key Pressure (Aftertouch)
        myprintf("Skip Polyphonic Key Pressure\n");
 80018c0:	4819      	ldr	r0, [pc, #100]	@ (8001928 <skip_midi_event+0xc8>)
 80018c2:	f000 fb95 	bl	8001ff0 <myprintf>
        f_lseek(fp, 2);
 80018c6:	2102      	movs	r1, #2
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f005 f981 	bl	8006bd0 <f_lseek>
        break;
 80018ce:	e021      	b.n	8001914 <skip_midi_event+0xb4>

    case 0xB0: // Control Change
        myprintf("Skip Control Change\n");
 80018d0:	4816      	ldr	r0, [pc, #88]	@ (800192c <skip_midi_event+0xcc>)
 80018d2:	f000 fb8d 	bl	8001ff0 <myprintf>
        f_lseek(fp, 2);
 80018d6:	2102      	movs	r1, #2
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f005 f979 	bl	8006bd0 <f_lseek>
        break;
 80018de:	e019      	b.n	8001914 <skip_midi_event+0xb4>

    case 0xC0: // Program Change // 1 byte
        myprintf("Skip Program Change\n");
 80018e0:	4813      	ldr	r0, [pc, #76]	@ (8001930 <skip_midi_event+0xd0>)
 80018e2:	f000 fb85 	bl	8001ff0 <myprintf>
        f_lseek(fp, 1);
 80018e6:	2101      	movs	r1, #1
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f005 f971 	bl	8006bd0 <f_lseek>
        break;
 80018ee:	e011      	b.n	8001914 <skip_midi_event+0xb4>

    case 0xD0: // Channel Pressure (Aftertouch) // 1 byte
        myprintf("Skip Channel Pressure\n");
 80018f0:	4810      	ldr	r0, [pc, #64]	@ (8001934 <skip_midi_event+0xd4>)
 80018f2:	f000 fb7d 	bl	8001ff0 <myprintf>
        f_lseek(fp, 1);
 80018f6:	2101      	movs	r1, #1
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f005 f969 	bl	8006bd0 <f_lseek>
        break;
 80018fe:	e009      	b.n	8001914 <skip_midi_event+0xb4>

    case 0xE0: // Pitch Bend Change
        myprintf("Skip Pitch Bend Change\n");
 8001900:	480d      	ldr	r0, [pc, #52]	@ (8001938 <skip_midi_event+0xd8>)
 8001902:	f000 fb75 	bl	8001ff0 <myprintf>
        f_lseek(fp, 2);
 8001906:	2102      	movs	r1, #2
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f005 f961 	bl	8006bd0 <f_lseek>
        break;
 800190e:	e001      	b.n	8001914 <skip_midi_event+0xb4>

    default:
        abort();
 8001910:	f005 fbc3 	bl	800709a <abort>
        myprintf("Skip Unknown MIDI Type: 0x%x\n", type);
        f_lseek(fp, 2);
        break;
    }

    return 0;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	08008c7c 	.word	0x08008c7c
 8001924:	08008c8c 	.word	0x08008c8c
 8001928:	08008c9c 	.word	0x08008c9c
 800192c:	08008cbc 	.word	0x08008cbc
 8001930:	08008cd4 	.word	0x08008cd4
 8001934:	08008cec 	.word	0x08008cec
 8001938:	08008d04 	.word	0x08008d04

0800193c <find_key>:
 * @param tone meow
 * @param controller pointer to control structure
 * @return 0 on sucess -1 on failure
 * */
uint8_t find_key(int8_t key, uint8_t tone, MIDI_controller *controller)
{
 800193c:	b590      	push	{r4, r7, lr}
 800193e:	b08b      	sub	sp, #44	@ 0x2c
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	603a      	str	r2, [r7, #0]
 8001946:	71fb      	strb	r3, [r7, #7]
 8001948:	460b      	mov	r3, r1
 800194a:	71bb      	strb	r3, [r7, #6]

    uint8_t major_keys[15] = {
 800194c:	4b21      	ldr	r3, [pc, #132]	@ (80019d4 <find_key+0x98>)
 800194e:	f107 0418 	add.w	r4, r7, #24
 8001952:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001954:	c407      	stmia	r4!, {r0, r1, r2}
 8001956:	8023      	strh	r3, [r4, #0]
 8001958:	3402      	adds	r4, #2
 800195a:	0c1b      	lsrs	r3, r3, #16
 800195c:	7023      	strb	r3, [r4, #0]
        B_MAJOR,       // 0x0C
        F_SHARP_MAJOR, // 0x0D
        C_SHARP_MAJOR  // 0x0E
    };

    uint8_t minor_keys[15] = {
 800195e:	4b1e      	ldr	r3, [pc, #120]	@ (80019d8 <find_key+0x9c>)
 8001960:	f107 0408 	add.w	r4, r7, #8
 8001964:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001966:	c407      	stmia	r4!, {r0, r1, r2}
 8001968:	8023      	strh	r3, [r4, #0]
 800196a:	3402      	adds	r4, #2
 800196c:	0c1b      	lsrs	r3, r3, #16
 800196e:	7023      	strb	r3, [r4, #0]
        D_SHARP_MINOR, // D♯ Minor: 6 sharps
        A_SHARP_MINOR  // A♯ Minor: 7 sharps
    };

    // minor
    if (tone == 0x00)
 8001970:	79bb      	ldrb	r3, [r7, #6]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10f      	bne.n	8001996 <find_key+0x5a>
    {
        controller->key_sig = minor_keys[(sizeof(minor_keys) / 2) + key];
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	3307      	adds	r3, #7
 800197c:	3328      	adds	r3, #40	@ 0x28
 800197e:	443b      	add	r3, r7
 8001980:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	709a      	strb	r2, [r3, #2]
        myprintf("Key Signiture: 0x%x\n", controller->key_sig);
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	789b      	ldrb	r3, [r3, #2]
 800198c:	4619      	mov	r1, r3
 800198e:	4813      	ldr	r0, [pc, #76]	@ (80019dc <find_key+0xa0>)
 8001990:	f000 fb2e 	bl	8001ff0 <myprintf>
 8001994:	e019      	b.n	80019ca <find_key+0x8e>
    }
    // major
    else if (tone == 0x01)
 8001996:	79bb      	ldrb	r3, [r7, #6]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d10f      	bne.n	80019bc <find_key+0x80>
    {
        controller->key_sig = major_keys[(sizeof(minor_keys) / 2) + key];
 800199c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a0:	3307      	adds	r3, #7
 80019a2:	3328      	adds	r3, #40	@ 0x28
 80019a4:	443b      	add	r3, r7
 80019a6:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	709a      	strb	r2, [r3, #2]
        myprintf("Key Signiture: 0x%x\n", controller->key_sig);
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	789b      	ldrb	r3, [r3, #2]
 80019b2:	4619      	mov	r1, r3
 80019b4:	4809      	ldr	r0, [pc, #36]	@ (80019dc <find_key+0xa0>)
 80019b6:	f000 fb1b 	bl	8001ff0 <myprintf>
 80019ba:	e006      	b.n	80019ca <find_key+0x8e>
    }

    else
    {
        myprintf("invalid tone: 0x%x\n", tone);
 80019bc:	79bb      	ldrb	r3, [r7, #6]
 80019be:	4619      	mov	r1, r3
 80019c0:	4807      	ldr	r0, [pc, #28]	@ (80019e0 <find_key+0xa4>)
 80019c2:	f000 fb15 	bl	8001ff0 <myprintf>
        return -1;
 80019c6:	23ff      	movs	r3, #255	@ 0xff
 80019c8:	e000      	b.n	80019cc <find_key+0x90>
    }

    return 0;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	372c      	adds	r7, #44	@ 0x2c
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd90      	pop	{r4, r7, pc}
 80019d4:	08008d48 	.word	0x08008d48
 80019d8:	08008d58 	.word	0x08008d58
 80019dc:	08008d1c 	.word	0x08008d1c
 80019e0:	08008d34 	.word	0x08008d34

080019e4 <play_one_track>:
 * @param fp FIL pointer to music
 * @param controller pointer to control structure
 * @return returns 0 on sucess other on failure
 * */
uint8_t play_one_track(FIL *fp, MIDI_controller *ctrl)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b088      	sub	sp, #32
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
    uint8_t end;

    uint8_t event_type;
    uint32_t delta_time;

    buf = (uint8_t *)malloc(sizeof(uint8_t) * 8);
 80019ee:	2008      	movs	r0, #8
 80019f0:	f005 fb5a 	bl	80070a8 <malloc>
 80019f4:	4603      	mov	r3, r0
 80019f6:	61bb      	str	r3, [r7, #24]
    if (!buf)
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d104      	bne.n	8001a08 <play_one_track+0x24>
    {
        myprintf("Buffer in parse_midi is null\n");
 80019fe:	4842      	ldr	r0, [pc, #264]	@ (8001b08 <play_one_track+0x124>)
 8001a00:	f000 faf6 	bl	8001ff0 <myprintf>
        return -1;
 8001a04:	23ff      	movs	r3, #255	@ 0xff
 8001a06:	e07b      	b.n	8001b00 <play_one_track+0x11c>
    }

    f_read(fp,buf,8,NULL);
 8001a08:	2300      	movs	r3, #0
 8001a0a:	2208      	movs	r2, #8
 8001a0c:	69b9      	ldr	r1, [r7, #24]
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f004 ff9f 	bl	8006952 <f_read>

    trk_hdr = (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	061a      	lsls	r2, r3, #24
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	041b      	lsls	r3, r3, #16
 8001a22:	431a      	orrs	r2, r3
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	3302      	adds	r3, #2
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	021b      	lsls	r3, r3, #8
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	3203      	adds	r2, #3
 8001a32:	7812      	ldrb	r2, [r2, #0]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	617b      	str	r3, [r7, #20]
    if (trk_hdr != 0x4D54726B)
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	4a34      	ldr	r2, [pc, #208]	@ (8001b0c <play_one_track+0x128>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d005      	beq.n	8001a4c <play_one_track+0x68>
    { // verifies the track start is valid
        myprintf("Invalid track header recieved: %x\n", trk_hdr);
 8001a40:	6979      	ldr	r1, [r7, #20]
 8001a42:	4833      	ldr	r0, [pc, #204]	@ (8001b10 <play_one_track+0x12c>)
 8001a44:	f000 fad4 	bl	8001ff0 <myprintf>
        return -1;
 8001a48:	23ff      	movs	r3, #255	@ 0xff
 8001a4a:	e059      	b.n	8001b00 <play_one_track+0x11c>
    }

    trk_len = (buf[4] << 24) | (buf[5] << 16) | (buf[6] << 8) | buf[7]; //  track length
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	3304      	adds	r3, #4
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	061a      	lsls	r2, r3, #24
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	3305      	adds	r3, #5
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	041b      	lsls	r3, r3, #16
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	3306      	adds	r3, #6
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	021b      	lsls	r3, r3, #8
 8001a66:	4313      	orrs	r3, r2
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	3207      	adds	r2, #7
 8001a6c:	7812      	ldrb	r2, [r2, #0]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]

    free(buf);
 8001a72:	69b8      	ldr	r0, [r7, #24]
 8001a74:	f005 fb20 	bl	80070b8 <free>

    buf = (uint8_t *)malloc(sizeof(uint8_t) * trk_len);
 8001a78:	6938      	ldr	r0, [r7, #16]
 8001a7a:	f005 fb15 	bl	80070a8 <malloc>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	61bb      	str	r3, [r7, #24]
    if (!buf)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d104      	bne.n	8001a92 <play_one_track+0xae>
    {
        myprintf("Buffer in parse_midi is null");
 8001a88:	4822      	ldr	r0, [pc, #136]	@ (8001b14 <play_one_track+0x130>)
 8001a8a:	f000 fab1 	bl	8001ff0 <myprintf>
        return -1;
 8001a8e:	23ff      	movs	r3, #255	@ 0xff
 8001a90:	e036      	b.n	8001b00 <play_one_track+0x11c>
    }

    // for debug
    myprintf("Track header: %x\n", trk_hdr);
 8001a92:	6979      	ldr	r1, [r7, #20]
 8001a94:	4820      	ldr	r0, [pc, #128]	@ (8001b18 <play_one_track+0x134>)
 8001a96:	f000 faab 	bl	8001ff0 <myprintf>
    myprintf("Track length: %x\n", trk_len);
 8001a9a:	6939      	ldr	r1, [r7, #16]
 8001a9c:	481f      	ldr	r0, [pc, #124]	@ (8001b1c <play_one_track+0x138>)
 8001a9e:	f000 faa7 	bl	8001ff0 <myprintf>

    do
    {

        delta_time = decode_vlq(fp);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 fa54 	bl	8001f50 <decode_vlq>
 8001aa8:	60f8      	str	r0, [r7, #12]

        f_read(fp, &event_type, 1, NULL);;
 8001aaa:	f107 010b 	add.w	r1, r7, #11
 8001aae:	2300      	movs	r3, #0
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f004 ff4d 	bl	8006952 <f_read>

        if (event_type == 0xFF)
 8001ab8:	7afb      	ldrb	r3, [r7, #11]
 8001aba:	2bff      	cmp	r3, #255	@ 0xff
 8001abc:	d107      	bne.n	8001ace <play_one_track+0xea>
        {
            end = meta_event_handler(fp, delta_time, ctrl);
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	68f9      	ldr	r1, [r7, #12]
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff fca0 	bl	8001408 <meta_event_handler>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	77fb      	strb	r3, [r7, #31]
 8001acc:	e011      	b.n	8001af2 <play_one_track+0x10e>
        }
        else if ((event_type >= 0xF0) && (event_type != 0xFF))
 8001ace:	7afb      	ldrb	r3, [r7, #11]
 8001ad0:	2bef      	cmp	r3, #239	@ 0xef
 8001ad2:	d908      	bls.n	8001ae6 <play_one_track+0x102>
 8001ad4:	7afb      	ldrb	r3, [r7, #11]
 8001ad6:	2bff      	cmp	r3, #255	@ 0xff
 8001ad8:	d005      	beq.n	8001ae6 <play_one_track+0x102>
        {
            myprintf("sysex event called: 0x%x\n", event_type);
 8001ada:	7afb      	ldrb	r3, [r7, #11]
 8001adc:	4619      	mov	r1, r3
 8001ade:	4810      	ldr	r0, [pc, #64]	@ (8001b20 <play_one_track+0x13c>)
 8001ae0:	f000 fa86 	bl	8001ff0 <myprintf>
 8001ae4:	e005      	b.n	8001af2 <play_one_track+0x10e>
            // skip_meta_event(fp);
            // sysex_event_handler(fp, delta_time);
        }
        else
        {
            midi_event_handler(fp, delta_time, event_type, ctrl);
 8001ae6:	7afa      	ldrb	r2, [r7, #11]
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	68f9      	ldr	r1, [r7, #12]
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff fb67 	bl	80011c0 <midi_event_handler>
        }

    } while (end != 1);
 8001af2:	7ffb      	ldrb	r3, [r7, #31]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d1d4      	bne.n	8001aa2 <play_one_track+0xbe>

    free(buf);
 8001af8:	69b8      	ldr	r0, [r7, #24]
 8001afa:	f005 fadd 	bl	80070b8 <free>

    return 0;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3720      	adds	r7, #32
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	08008dd4 	.word	0x08008dd4
 8001b0c:	4d54726b 	.word	0x4d54726b
 8001b10:	08008d88 	.word	0x08008d88
 8001b14:	08008df4 	.word	0x08008df4
 8001b18:	08008e14 	.word	0x08008e14
 8001b1c:	08008e28 	.word	0x08008e28
 8001b20:	08008e3c 	.word	0x08008e3c

08001b24 <parse_midi_header>:
 * @param fp FIL pointer to music
 * @param hdr pointer to header structure
 * @return returns 0 on sucess other on failure
 * */
MIDI_header_chunk parse_midi_header(FIL *fp, MIDI_header_chunk hdr)
{
 8001b24:	b082      	sub	sp, #8
 8001b26:	b590      	push	{r4, r7, lr}
 8001b28:	b085      	sub	sp, #20
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	6039      	str	r1, [r7, #0]
 8001b30:	f107 0120 	add.w	r1, r7, #32
 8001b34:	e881 000c 	stmia.w	r1, {r2, r3}

    uint8_t *buf;

    buf = (uint8_t *)malloc(14);
 8001b38:	200e      	movs	r0, #14
 8001b3a:	f005 fab5 	bl	80070a8 <malloc>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	60fb      	str	r3, [r7, #12]
    if (!buf)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d102      	bne.n	8001b4e <parse_midi_header+0x2a>
    {
        myprintf("Buffer in parse_midi is null");
 8001b48:	484e      	ldr	r0, [pc, #312]	@ (8001c84 <parse_midi_header+0x160>)
 8001b4a:	f000 fa51 	bl	8001ff0 <myprintf>
    }

    f_read(fp,buf,14,NULL);
 8001b4e:	2300      	movs	r3, #0
 8001b50:	220e      	movs	r2, #14
 8001b52:	68f9      	ldr	r1, [r7, #12]
 8001b54:	6838      	ldr	r0, [r7, #0]
 8001b56:	f004 fefc 	bl	8006952 <f_read>

    // all big endian
    hdr.MThd = (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	061a      	lsls	r2, r3, #24
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	3301      	adds	r3, #1
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	041b      	lsls	r3, r3, #16
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	3302      	adds	r3, #2
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	021b      	lsls	r3, r3, #8
 8001b72:	4313      	orrs	r3, r2
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	3203      	adds	r2, #3
 8001b78:	7812      	ldrb	r2, [r2, #0]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	623b      	str	r3, [r7, #32]
    if (hdr.MThd != 0x4D546864)
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	4a41      	ldr	r2, [pc, #260]	@ (8001c88 <parse_midi_header+0x164>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d004      	beq.n	8001b90 <parse_midi_header+0x6c>
    {                                                           // string of MThd
        myprintf("Unexpected Header - Recieved: %c\n", hdr.MThd); // return characters for easy read
 8001b86:	6a3b      	ldr	r3, [r7, #32]
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4840      	ldr	r0, [pc, #256]	@ (8001c8c <parse_midi_header+0x168>)
 8001b8c:	f000 fa30 	bl	8001ff0 <myprintf>
    }

    hdr.hdr_len = (buf[4] << 24) | (buf[5] << 16) | (buf[6] << 8) | buf[7];
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	3304      	adds	r3, #4
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	061a      	lsls	r2, r3, #24
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	3305      	adds	r3, #5
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	041b      	lsls	r3, r3, #16
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	3306      	adds	r3, #6
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	021b      	lsls	r3, r3, #8
 8001baa:	4313      	orrs	r3, r2
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	3207      	adds	r2, #7
 8001bb0:	7812      	ldrb	r2, [r2, #0]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (hdr.hdr_len != 0x0006)
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb8:	2b06      	cmp	r3, #6
 8001bba:	d004      	beq.n	8001bc6 <parse_midi_header+0xa2>
    { // always 6 bytes
        myprintf("Unexpected Header Length - Recieved: %u\n", hdr.hdr_len);
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4833      	ldr	r0, [pc, #204]	@ (8001c90 <parse_midi_header+0x16c>)
 8001bc2:	f000 fa15 	bl	8001ff0 <myprintf>
    }

    hdr.format = (buf[8] << 8) | buf[9];
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	3308      	adds	r3, #8
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	021b      	lsls	r3, r3, #8
 8001bce:	b21a      	sxth	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	3309      	adds	r3, #9
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	b21b      	sxth	r3, r3
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	b21b      	sxth	r3, r3
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	853b      	strh	r3, [r7, #40]	@ 0x28
    if (hdr.format != 0x00 && hdr.format != 0x01 && hdr.format != 0x02)
 8001be0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00a      	beq.n	8001bfc <parse_midi_header+0xd8>
 8001be6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d007      	beq.n	8001bfc <parse_midi_header+0xd8>
 8001bec:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d004      	beq.n	8001bfc <parse_midi_header+0xd8>
    {
        myprintf("Unexpected Header Format - Recieved: %u\n", hdr.format);
 8001bf2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4827      	ldr	r0, [pc, #156]	@ (8001c94 <parse_midi_header+0x170>)
 8001bf8:	f000 f9fa 	bl	8001ff0 <myprintf>
    }

    hdr.num_tracks = (buf[10] << 8) | buf[11];
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	330a      	adds	r3, #10
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	021b      	lsls	r3, r3, #8
 8001c04:	b21a      	sxth	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	330b      	adds	r3, #11
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	b21b      	sxth	r3, r3
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	b21b      	sxth	r3, r3
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	857b      	strh	r3, [r7, #42]	@ 0x2a
    hdr.division = (buf[12] << 8) | buf[13];
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	330c      	adds	r3, #12
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	021b      	lsls	r3, r3, #8
 8001c1e:	b21a      	sxth	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	330d      	adds	r3, #13
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	b21b      	sxth	r3, r3
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	b21b      	sxth	r3, r3
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    // to check all header info
    myprintf("Header string is: %x\n", hdr.MThd);
 8001c30:	6a3b      	ldr	r3, [r7, #32]
 8001c32:	4619      	mov	r1, r3
 8001c34:	4818      	ldr	r0, [pc, #96]	@ (8001c98 <parse_midi_header+0x174>)
 8001c36:	f000 f9db 	bl	8001ff0 <myprintf>
    myprintf("Length is: %x\n", hdr.hdr_len);
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4817      	ldr	r0, [pc, #92]	@ (8001c9c <parse_midi_header+0x178>)
 8001c40:	f000 f9d6 	bl	8001ff0 <myprintf>
    myprintf("Format is:%x \n", hdr.format);
 8001c44:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001c46:	4619      	mov	r1, r3
 8001c48:	4815      	ldr	r0, [pc, #84]	@ (8001ca0 <parse_midi_header+0x17c>)
 8001c4a:	f000 f9d1 	bl	8001ff0 <myprintf>
    myprintf("Number of tracks is: %x\n", hdr.num_tracks);
 8001c4e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001c50:	4619      	mov	r1, r3
 8001c52:	4814      	ldr	r0, [pc, #80]	@ (8001ca4 <parse_midi_header+0x180>)
 8001c54:	f000 f9cc 	bl	8001ff0 <myprintf>
    myprintf("Division is: %x\n", hdr.division);
 8001c58:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4812      	ldr	r0, [pc, #72]	@ (8001ca8 <parse_midi_header+0x184>)
 8001c5e:	f000 f9c7 	bl	8001ff0 <myprintf>

    free(buf);
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f005 fa28 	bl	80070b8 <free>

    return hdr;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	461c      	mov	r4, r3
 8001c6c:	f107 0320 	add.w	r3, r7, #32
 8001c70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001c80:	b002      	add	sp, #8
 8001c82:	4770      	bx	lr
 8001c84:	08008df4 	.word	0x08008df4
 8001c88:	4d546864 	.word	0x4d546864
 8001c8c:	08008e58 	.word	0x08008e58
 8001c90:	08008e7c 	.word	0x08008e7c
 8001c94:	08008ea8 	.word	0x08008ea8
 8001c98:	08008ed4 	.word	0x08008ed4
 8001c9c:	08008eec 	.word	0x08008eec
 8001ca0:	08008efc 	.word	0x08008efc
 8001ca4:	08008f0c 	.word	0x08008f0c
 8001ca8:	08008f28 	.word	0x08008f28

08001cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	607b      	str	r3, [r7, #4]
 8001cb6:	4b10      	ldr	r3, [pc, #64]	@ (8001cf8 <HAL_MspInit+0x4c>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cba:	4a0f      	ldr	r2, [pc, #60]	@ (8001cf8 <HAL_MspInit+0x4c>)
 8001cbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf8 <HAL_MspInit+0x4c>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	603b      	str	r3, [r7, #0]
 8001cd2:	4b09      	ldr	r3, [pc, #36]	@ (8001cf8 <HAL_MspInit+0x4c>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd6:	4a08      	ldr	r2, [pc, #32]	@ (8001cf8 <HAL_MspInit+0x4c>)
 8001cd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cde:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <HAL_MspInit+0x4c>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ce6:	603b      	str	r3, [r7, #0]
 8001ce8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40023800 	.word	0x40023800

08001cfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08a      	sub	sp, #40	@ 0x28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a19      	ldr	r2, [pc, #100]	@ (8001d80 <HAL_SPI_MspInit+0x84>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d12b      	bne.n	8001d76 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	4b18      	ldr	r3, [pc, #96]	@ (8001d84 <HAL_SPI_MspInit+0x88>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d26:	4a17      	ldr	r2, [pc, #92]	@ (8001d84 <HAL_SPI_MspInit+0x88>)
 8001d28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d2e:	4b15      	ldr	r3, [pc, #84]	@ (8001d84 <HAL_SPI_MspInit+0x88>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	4b11      	ldr	r3, [pc, #68]	@ (8001d84 <HAL_SPI_MspInit+0x88>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d42:	4a10      	ldr	r2, [pc, #64]	@ (8001d84 <HAL_SPI_MspInit+0x88>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d84 <HAL_SPI_MspInit+0x88>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d56:	23e0      	movs	r3, #224	@ 0xe0
 8001d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d62:	2303      	movs	r3, #3
 8001d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d66:	2305      	movs	r3, #5
 8001d68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6a:	f107 0314 	add.w	r3, r7, #20
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4805      	ldr	r0, [pc, #20]	@ (8001d88 <HAL_SPI_MspInit+0x8c>)
 8001d72:	f000 fb09 	bl	8002388 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001d76:	bf00      	nop
 8001d78:	3728      	adds	r7, #40	@ 0x28
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40013000 	.word	0x40013000
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40020000 	.word	0x40020000

08001d8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	@ 0x28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a19      	ldr	r2, [pc, #100]	@ (8001e10 <HAL_UART_MspInit+0x84>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d12b      	bne.n	8001e06 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	4b18      	ldr	r3, [pc, #96]	@ (8001e14 <HAL_UART_MspInit+0x88>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db6:	4a17      	ldr	r2, [pc, #92]	@ (8001e14 <HAL_UART_MspInit+0x88>)
 8001db8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dbe:	4b15      	ldr	r3, [pc, #84]	@ (8001e14 <HAL_UART_MspInit+0x88>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	4b11      	ldr	r3, [pc, #68]	@ (8001e14 <HAL_UART_MspInit+0x88>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd2:	4a10      	ldr	r2, [pc, #64]	@ (8001e14 <HAL_UART_MspInit+0x88>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dda:	4b0e      	ldr	r3, [pc, #56]	@ (8001e14 <HAL_UART_MspInit+0x88>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001de6:	230c      	movs	r3, #12
 8001de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dea:	2302      	movs	r3, #2
 8001dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df2:	2303      	movs	r3, #3
 8001df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001df6:	2307      	movs	r3, #7
 8001df8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfa:	f107 0314 	add.w	r3, r7, #20
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4805      	ldr	r0, [pc, #20]	@ (8001e18 <HAL_UART_MspInit+0x8c>)
 8001e02:	f000 fac1 	bl	8002388 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001e06:	bf00      	nop
 8001e08:	3728      	adds	r7, #40	@ 0x28
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40004400 	.word	0x40004400
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40020000 	.word	0x40020000

08001e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <NMI_Handler+0x4>

08001e24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e28:	bf00      	nop
 8001e2a:	e7fd      	b.n	8001e28 <HardFault_Handler+0x4>

08001e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e30:	bf00      	nop
 8001e32:	e7fd      	b.n	8001e30 <MemManage_Handler+0x4>

08001e34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e38:	bf00      	nop
 8001e3a:	e7fd      	b.n	8001e38 <BusFault_Handler+0x4>

08001e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e40:	bf00      	nop
 8001e42:	e7fd      	b.n	8001e40 <UsageFault_Handler+0x4>

08001e44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e72:	f000 f95f 	bl	8002134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0
  return 1;
 8001e7e:	2301      	movs	r3, #1
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <_kill>:

int _kill(int pid, int sig)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
 8001e92:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e94:	f005 fa5c 	bl	8007350 <__errno>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2216      	movs	r2, #22
 8001e9c:	601a      	str	r2, [r3, #0]
  return -1;
 8001e9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <_exit>:

void _exit (int status)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001eb2:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ffe7 	bl	8001e8a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ebc:	bf00      	nop
 8001ebe:	e7fd      	b.n	8001ebc <_exit+0x12>

08001ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ec8:	4a14      	ldr	r2, [pc, #80]	@ (8001f1c <_sbrk+0x5c>)
 8001eca:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <_sbrk+0x60>)
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ed4:	4b13      	ldr	r3, [pc, #76]	@ (8001f24 <_sbrk+0x64>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d102      	bne.n	8001ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001edc:	4b11      	ldr	r3, [pc, #68]	@ (8001f24 <_sbrk+0x64>)
 8001ede:	4a12      	ldr	r2, [pc, #72]	@ (8001f28 <_sbrk+0x68>)
 8001ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ee2:	4b10      	ldr	r3, [pc, #64]	@ (8001f24 <_sbrk+0x64>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4413      	add	r3, r2
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d207      	bcs.n	8001f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ef0:	f005 fa2e 	bl	8007350 <__errno>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	220c      	movs	r2, #12
 8001ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001efa:	f04f 33ff 	mov.w	r3, #4294967295
 8001efe:	e009      	b.n	8001f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f00:	4b08      	ldr	r3, [pc, #32]	@ (8001f24 <_sbrk+0x64>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f06:	4b07      	ldr	r3, [pc, #28]	@ (8001f24 <_sbrk+0x64>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	4a05      	ldr	r2, [pc, #20]	@ (8001f24 <_sbrk+0x64>)
 8001f10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f12:	68fb      	ldr	r3, [r7, #12]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20020000 	.word	0x20020000
 8001f20:	00000400 	.word	0x00000400
 8001f24:	20000144 	.word	0x20000144
 8001f28:	200003e0 	.word	0x200003e0

08001f2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f30:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <SystemInit+0x20>)
 8001f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f36:	4a05      	ldr	r2, [pc, #20]	@ (8001f4c <SystemInit+0x20>)
 8001f38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <decode_vlq>:
/**
 *  @brief Processes variable length quantity (VLQ) values from a file pointer 
 * @param fp File pointer to midi file
 * @param vlq_value decoded vlq value*/
uint32_t decode_vlq(FIL *fp)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
     * each byte containing 7 bits of data and an 8th bit(MSB) as a continuation flag. 
     * if the bit is 1 the number continues into the next byte
     * if the bit is 0 the number does not continue
     *  */
    uint8_t byte;
    uint32_t vlq_value = 0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60fb      	str	r3, [r7, #12]

    do
    {
        f_read(fp, &byte, 1, NULL);
 8001f5c:	f107 010b 	add.w	r1, r7, #11
 8001f60:	2300      	movs	r3, #0
 8001f62:	2201      	movs	r2, #1
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f004 fcf4 	bl	8006952 <f_read>
        vlq_value = (vlq_value << 7) | (byte & 0x7F); // ignores msb for read byte and shifts over 7
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	01da      	lsls	r2, r3, #7
 8001f6e:	7afb      	ldrb	r3, [r7, #11]
 8001f70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f74:	4313      	orrs	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]
    } while (byte & 0x80);
 8001f78:	7afb      	ldrb	r3, [r7, #11]
 8001f7a:	b25b      	sxtb	r3, r3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	dbed      	blt.n	8001f5c <decode_vlq+0xc>

    return vlq_value;
 8001f80:	68fb      	ldr	r3, [r7, #12]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <delta_time_to_ms>:
/**
 *  @brief takes the delta time value for the given event and converts it to ms
 * @param delta_time delta time in ticks of event 
 * @param ctrl pointer to system timing info*/
uint16_t delta_time_to_ms(uint8_t delta_time, MIDI_controller *ctrl)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b085      	sub	sp, #20
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	4603      	mov	r3, r0
 8001f92:	6039      	str	r1, [r7, #0]
 8001f94:	71fb      	strb	r3, [r7, #7]
    float ms = 0;
 8001f96:	f04f 0300 	mov.w	r3, #0
 8001f9a:	60fb      	str	r3, [r7, #12]
    // printf("delta time: %d\n", delta_time);
    // printf("tick per q note: %d\n", ctrl->tick_per_q_note);
    // printf("tempo: %d\n", ctrl->tempo);

    // needs to be a float to do the division or else returns 0
    ms = ((float)delta_time / ctrl->tick_per_q_note) * (60000 / ctrl->tempo);
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	ee07 3a90 	vmov	s15, r3
 8001fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	889b      	ldrh	r3, [r3, #4]
 8001faa:	ee07 3a90 	vmov	s15, r3
 8001fae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	799b      	ldrb	r3, [r3, #6]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8001fc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8001fc4:	ee07 3a90 	vmov	s15, r3
 8001fc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fd0:	edc7 7a03 	vstr	s15, [r7, #12]

    return ms;
 8001fd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fdc:	ee17 3a90 	vmov	r3, s15
 8001fe0:	b29b      	uxth	r3, r3
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
	...

08001ff0 <myprintf>:

void myprintf(const char *fmt, ...) {
 8001ff0:	b40f      	push	{r0, r1, r2, r3}
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8001ff8:	f107 0314 	add.w	r3, r7, #20
 8001ffc:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002006:	480b      	ldr	r0, [pc, #44]	@ (8002034 <myprintf+0x44>)
 8002008:	f005 f938 	bl	800727c <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 800200c:	4809      	ldr	r0, [pc, #36]	@ (8002034 <myprintf+0x44>)
 800200e:	f7fe f8ff 	bl	8000210 <strlen>
 8002012:	4603      	mov	r3, r0
 8002014:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	b29a      	uxth	r2, r3
 800201a:	f04f 33ff 	mov.w	r3, #4294967295
 800201e:	4905      	ldr	r1, [pc, #20]	@ (8002034 <myprintf+0x44>)
 8002020:	4805      	ldr	r0, [pc, #20]	@ (8002038 <myprintf+0x48>)
 8002022:	f001 fd63 	bl	8003aec <HAL_UART_Transmit>

}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002030:	b004      	add	sp, #16
 8002032:	4770      	bx	lr
 8002034:	20000148 	.word	0x20000148
 8002038:	200000fc 	.word	0x200000fc

0800203c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800203c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002074 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002040:	f7ff ff74 	bl	8001f2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002044:	480c      	ldr	r0, [pc, #48]	@ (8002078 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002046:	490d      	ldr	r1, [pc, #52]	@ (800207c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002048:	4a0d      	ldr	r2, [pc, #52]	@ (8002080 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800204a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800204c:	e002      	b.n	8002054 <LoopCopyDataInit>

0800204e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800204e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002052:	3304      	adds	r3, #4

08002054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002058:	d3f9      	bcc.n	800204e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800205a:	4a0a      	ldr	r2, [pc, #40]	@ (8002084 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800205c:	4c0a      	ldr	r4, [pc, #40]	@ (8002088 <LoopFillZerobss+0x22>)
  movs r3, #0
 800205e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002060:	e001      	b.n	8002066 <LoopFillZerobss>

08002062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002064:	3204      	adds	r2, #4

08002066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002068:	d3fb      	bcc.n	8002062 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800206a:	f005 f977 	bl	800735c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800206e:	f7fe ff5b 	bl	8000f28 <main>
  bx  lr    
 8002072:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002074:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800207c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002080:	08009090 	.word	0x08009090
  ldr r2, =_sbss
 8002084:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002088:	200003dc 	.word	0x200003dc

0800208c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800208c:	e7fe      	b.n	800208c <ADC_IRQHandler>
	...

08002090 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002094:	4b0e      	ldr	r3, [pc, #56]	@ (80020d0 <HAL_Init+0x40>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a0d      	ldr	r2, [pc, #52]	@ (80020d0 <HAL_Init+0x40>)
 800209a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800209e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020a0:	4b0b      	ldr	r3, [pc, #44]	@ (80020d0 <HAL_Init+0x40>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a0a      	ldr	r2, [pc, #40]	@ (80020d0 <HAL_Init+0x40>)
 80020a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020ac:	4b08      	ldr	r3, [pc, #32]	@ (80020d0 <HAL_Init+0x40>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a07      	ldr	r2, [pc, #28]	@ (80020d0 <HAL_Init+0x40>)
 80020b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020b8:	2003      	movs	r0, #3
 80020ba:	f000 f931 	bl	8002320 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020be:	200f      	movs	r0, #15
 80020c0:	f000 f808 	bl	80020d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020c4:	f7ff fdf2 	bl	8001cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40023c00 	.word	0x40023c00

080020d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020dc:	4b12      	ldr	r3, [pc, #72]	@ (8002128 <HAL_InitTick+0x54>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	4b12      	ldr	r3, [pc, #72]	@ (800212c <HAL_InitTick+0x58>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	4619      	mov	r1, r3
 80020e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 f93b 	bl	800236e <HAL_SYSTICK_Config>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e00e      	b.n	8002120 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b0f      	cmp	r3, #15
 8002106:	d80a      	bhi.n	800211e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002108:	2200      	movs	r2, #0
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	f04f 30ff 	mov.w	r0, #4294967295
 8002110:	f000 f911 	bl	8002336 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002114:	4a06      	ldr	r2, [pc, #24]	@ (8002130 <HAL_InitTick+0x5c>)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	e000      	b.n	8002120 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
}
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20000000 	.word	0x20000000
 800212c:	20000008 	.word	0x20000008
 8002130:	20000004 	.word	0x20000004

08002134 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002138:	4b06      	ldr	r3, [pc, #24]	@ (8002154 <HAL_IncTick+0x20>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	461a      	mov	r2, r3
 800213e:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <HAL_IncTick+0x24>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4413      	add	r3, r2
 8002144:	4a04      	ldr	r2, [pc, #16]	@ (8002158 <HAL_IncTick+0x24>)
 8002146:	6013      	str	r3, [r2, #0]
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	20000008 	.word	0x20000008
 8002158:	20000248 	.word	0x20000248

0800215c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return uwTick;
 8002160:	4b03      	ldr	r3, [pc, #12]	@ (8002170 <HAL_GetTick+0x14>)
 8002162:	681b      	ldr	r3, [r3, #0]
}
 8002164:	4618      	mov	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	20000248 	.word	0x20000248

08002174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800217c:	f7ff ffee 	bl	800215c <HAL_GetTick>
 8002180:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218c:	d005      	beq.n	800219a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800218e:	4b0a      	ldr	r3, [pc, #40]	@ (80021b8 <HAL_Delay+0x44>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4413      	add	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800219a:	bf00      	nop
 800219c:	f7ff ffde 	bl	800215c <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d8f7      	bhi.n	800219c <HAL_Delay+0x28>
  {
  }
}
 80021ac:	bf00      	nop
 80021ae:	bf00      	nop
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000008 	.word	0x20000008

080021bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002200 <__NVIC_SetPriorityGrouping+0x44>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021d8:	4013      	ands	r3, r2
 80021da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ee:	4a04      	ldr	r2, [pc, #16]	@ (8002200 <__NVIC_SetPriorityGrouping+0x44>)
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	60d3      	str	r3, [r2, #12]
}
 80021f4:	bf00      	nop
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002208:	4b04      	ldr	r3, [pc, #16]	@ (800221c <__NVIC_GetPriorityGrouping+0x18>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	0a1b      	lsrs	r3, r3, #8
 800220e:	f003 0307 	and.w	r3, r3, #7
}
 8002212:	4618      	mov	r0, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	6039      	str	r1, [r7, #0]
 800222a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800222c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002230:	2b00      	cmp	r3, #0
 8002232:	db0a      	blt.n	800224a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	b2da      	uxtb	r2, r3
 8002238:	490c      	ldr	r1, [pc, #48]	@ (800226c <__NVIC_SetPriority+0x4c>)
 800223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223e:	0112      	lsls	r2, r2, #4
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	440b      	add	r3, r1
 8002244:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002248:	e00a      	b.n	8002260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4908      	ldr	r1, [pc, #32]	@ (8002270 <__NVIC_SetPriority+0x50>)
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	3b04      	subs	r3, #4
 8002258:	0112      	lsls	r2, r2, #4
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	440b      	add	r3, r1
 800225e:	761a      	strb	r2, [r3, #24]
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	e000e100 	.word	0xe000e100
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002274:	b480      	push	{r7}
 8002276:	b089      	sub	sp, #36	@ 0x24
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f1c3 0307 	rsb	r3, r3, #7
 800228e:	2b04      	cmp	r3, #4
 8002290:	bf28      	it	cs
 8002292:	2304      	movcs	r3, #4
 8002294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3304      	adds	r3, #4
 800229a:	2b06      	cmp	r3, #6
 800229c:	d902      	bls.n	80022a4 <NVIC_EncodePriority+0x30>
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3b03      	subs	r3, #3
 80022a2:	e000      	b.n	80022a6 <NVIC_EncodePriority+0x32>
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43da      	mvns	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	401a      	ands	r2, r3
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022bc:	f04f 31ff 	mov.w	r1, #4294967295
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	fa01 f303 	lsl.w	r3, r1, r3
 80022c6:	43d9      	mvns	r1, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022cc:	4313      	orrs	r3, r2
         );
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3724      	adds	r7, #36	@ 0x24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
	...

080022dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022ec:	d301      	bcc.n	80022f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ee:	2301      	movs	r3, #1
 80022f0:	e00f      	b.n	8002312 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022f2:	4a0a      	ldr	r2, [pc, #40]	@ (800231c <SysTick_Config+0x40>)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022fa:	210f      	movs	r1, #15
 80022fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002300:	f7ff ff8e 	bl	8002220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002304:	4b05      	ldr	r3, [pc, #20]	@ (800231c <SysTick_Config+0x40>)
 8002306:	2200      	movs	r2, #0
 8002308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800230a:	4b04      	ldr	r3, [pc, #16]	@ (800231c <SysTick_Config+0x40>)
 800230c:	2207      	movs	r2, #7
 800230e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	e000e010 	.word	0xe000e010

08002320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff ff47 	bl	80021bc <__NVIC_SetPriorityGrouping>
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002336:	b580      	push	{r7, lr}
 8002338:	b086      	sub	sp, #24
 800233a:	af00      	add	r7, sp, #0
 800233c:	4603      	mov	r3, r0
 800233e:	60b9      	str	r1, [r7, #8]
 8002340:	607a      	str	r2, [r7, #4]
 8002342:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002348:	f7ff ff5c 	bl	8002204 <__NVIC_GetPriorityGrouping>
 800234c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	68b9      	ldr	r1, [r7, #8]
 8002352:	6978      	ldr	r0, [r7, #20]
 8002354:	f7ff ff8e 	bl	8002274 <NVIC_EncodePriority>
 8002358:	4602      	mov	r2, r0
 800235a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800235e:	4611      	mov	r1, r2
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ff5d 	bl	8002220 <__NVIC_SetPriority>
}
 8002366:	bf00      	nop
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7ff ffb0 	bl	80022dc <SysTick_Config>
 800237c:	4603      	mov	r3, r0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002388:	b480      	push	{r7}
 800238a:	b089      	sub	sp, #36	@ 0x24
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800239a:	2300      	movs	r3, #0
 800239c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
 80023a2:	e165      	b.n	8002670 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023a4:	2201      	movs	r2, #1
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	4013      	ands	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	429a      	cmp	r2, r3
 80023be:	f040 8154 	bne.w	800266a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d005      	beq.n	80023da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d130      	bne.n	800243c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	2203      	movs	r2, #3
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43db      	mvns	r3, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4013      	ands	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4313      	orrs	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002410:	2201      	movs	r2, #1
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	091b      	lsrs	r3, r3, #4
 8002426:	f003 0201 	and.w	r2, r3, #1
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 0303 	and.w	r3, r3, #3
 8002444:	2b03      	cmp	r3, #3
 8002446:	d017      	beq.n	8002478 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	2203      	movs	r2, #3
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4013      	ands	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d123      	bne.n	80024cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	08da      	lsrs	r2, r3, #3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3208      	adds	r2, #8
 800248c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002490:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	220f      	movs	r2, #15
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	08da      	lsrs	r2, r3, #3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3208      	adds	r2, #8
 80024c6:	69b9      	ldr	r1, [r7, #24]
 80024c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	2203      	movs	r2, #3
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 0203 	and.w	r2, r3, #3
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 80ae 	beq.w	800266a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	4b5d      	ldr	r3, [pc, #372]	@ (8002688 <HAL_GPIO_Init+0x300>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002516:	4a5c      	ldr	r2, [pc, #368]	@ (8002688 <HAL_GPIO_Init+0x300>)
 8002518:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800251c:	6453      	str	r3, [r2, #68]	@ 0x44
 800251e:	4b5a      	ldr	r3, [pc, #360]	@ (8002688 <HAL_GPIO_Init+0x300>)
 8002520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002522:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800252a:	4a58      	ldr	r2, [pc, #352]	@ (800268c <HAL_GPIO_Init+0x304>)
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	089b      	lsrs	r3, r3, #2
 8002530:	3302      	adds	r3, #2
 8002532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	220f      	movs	r2, #15
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43db      	mvns	r3, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4013      	ands	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a4f      	ldr	r2, [pc, #316]	@ (8002690 <HAL_GPIO_Init+0x308>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d025      	beq.n	80025a2 <HAL_GPIO_Init+0x21a>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a4e      	ldr	r2, [pc, #312]	@ (8002694 <HAL_GPIO_Init+0x30c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d01f      	beq.n	800259e <HAL_GPIO_Init+0x216>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a4d      	ldr	r2, [pc, #308]	@ (8002698 <HAL_GPIO_Init+0x310>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d019      	beq.n	800259a <HAL_GPIO_Init+0x212>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a4c      	ldr	r2, [pc, #304]	@ (800269c <HAL_GPIO_Init+0x314>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d013      	beq.n	8002596 <HAL_GPIO_Init+0x20e>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a4b      	ldr	r2, [pc, #300]	@ (80026a0 <HAL_GPIO_Init+0x318>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d00d      	beq.n	8002592 <HAL_GPIO_Init+0x20a>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a4a      	ldr	r2, [pc, #296]	@ (80026a4 <HAL_GPIO_Init+0x31c>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d007      	beq.n	800258e <HAL_GPIO_Init+0x206>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a49      	ldr	r2, [pc, #292]	@ (80026a8 <HAL_GPIO_Init+0x320>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d101      	bne.n	800258a <HAL_GPIO_Init+0x202>
 8002586:	2306      	movs	r3, #6
 8002588:	e00c      	b.n	80025a4 <HAL_GPIO_Init+0x21c>
 800258a:	2307      	movs	r3, #7
 800258c:	e00a      	b.n	80025a4 <HAL_GPIO_Init+0x21c>
 800258e:	2305      	movs	r3, #5
 8002590:	e008      	b.n	80025a4 <HAL_GPIO_Init+0x21c>
 8002592:	2304      	movs	r3, #4
 8002594:	e006      	b.n	80025a4 <HAL_GPIO_Init+0x21c>
 8002596:	2303      	movs	r3, #3
 8002598:	e004      	b.n	80025a4 <HAL_GPIO_Init+0x21c>
 800259a:	2302      	movs	r3, #2
 800259c:	e002      	b.n	80025a4 <HAL_GPIO_Init+0x21c>
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <HAL_GPIO_Init+0x21c>
 80025a2:	2300      	movs	r3, #0
 80025a4:	69fa      	ldr	r2, [r7, #28]
 80025a6:	f002 0203 	and.w	r2, r2, #3
 80025aa:	0092      	lsls	r2, r2, #2
 80025ac:	4093      	lsls	r3, r2
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025b4:	4935      	ldr	r1, [pc, #212]	@ (800268c <HAL_GPIO_Init+0x304>)
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	089b      	lsrs	r3, r3, #2
 80025ba:	3302      	adds	r3, #2
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025c2:	4b3a      	ldr	r3, [pc, #232]	@ (80026ac <HAL_GPIO_Init+0x324>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	43db      	mvns	r3, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4013      	ands	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025e6:	4a31      	ldr	r2, [pc, #196]	@ (80026ac <HAL_GPIO_Init+0x324>)
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025ec:	4b2f      	ldr	r3, [pc, #188]	@ (80026ac <HAL_GPIO_Init+0x324>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	4313      	orrs	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002610:	4a26      	ldr	r2, [pc, #152]	@ (80026ac <HAL_GPIO_Init+0x324>)
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002616:	4b25      	ldr	r3, [pc, #148]	@ (80026ac <HAL_GPIO_Init+0x324>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	43db      	mvns	r3, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4013      	ands	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	4313      	orrs	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800263a:	4a1c      	ldr	r2, [pc, #112]	@ (80026ac <HAL_GPIO_Init+0x324>)
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002640:	4b1a      	ldr	r3, [pc, #104]	@ (80026ac <HAL_GPIO_Init+0x324>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	43db      	mvns	r3, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4013      	ands	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4313      	orrs	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002664:	4a11      	ldr	r2, [pc, #68]	@ (80026ac <HAL_GPIO_Init+0x324>)
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3301      	adds	r3, #1
 800266e:	61fb      	str	r3, [r7, #28]
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	2b0f      	cmp	r3, #15
 8002674:	f67f ae96 	bls.w	80023a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002678:	bf00      	nop
 800267a:	bf00      	nop
 800267c:	3724      	adds	r7, #36	@ 0x24
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	40023800 	.word	0x40023800
 800268c:	40013800 	.word	0x40013800
 8002690:	40020000 	.word	0x40020000
 8002694:	40020400 	.word	0x40020400
 8002698:	40020800 	.word	0x40020800
 800269c:	40020c00 	.word	0x40020c00
 80026a0:	40021000 	.word	0x40021000
 80026a4:	40021400 	.word	0x40021400
 80026a8:	40021800 	.word	0x40021800
 80026ac:	40013c00 	.word	0x40013c00

080026b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	807b      	strh	r3, [r7, #2]
 80026bc:	4613      	mov	r3, r2
 80026be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026c0:	787b      	ldrb	r3, [r7, #1]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026c6:	887a      	ldrh	r2, [r7, #2]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026cc:	e003      	b.n	80026d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026ce:	887b      	ldrh	r3, [r7, #2]
 80026d0:	041a      	lsls	r2, r3, #16
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	619a      	str	r2, [r3, #24]
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
	...

080026e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0cc      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026f8:	4b68      	ldr	r3, [pc, #416]	@ (800289c <HAL_RCC_ClockConfig+0x1b8>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 030f 	and.w	r3, r3, #15
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d90c      	bls.n	8002720 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002706:	4b65      	ldr	r3, [pc, #404]	@ (800289c <HAL_RCC_ClockConfig+0x1b8>)
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270e:	4b63      	ldr	r3, [pc, #396]	@ (800289c <HAL_RCC_ClockConfig+0x1b8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d001      	beq.n	8002720 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e0b8      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d020      	beq.n	800276e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	d005      	beq.n	8002744 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002738:	4b59      	ldr	r3, [pc, #356]	@ (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	4a58      	ldr	r2, [pc, #352]	@ (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 800273e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002742:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	2b00      	cmp	r3, #0
 800274e:	d005      	beq.n	800275c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002750:	4b53      	ldr	r3, [pc, #332]	@ (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	4a52      	ldr	r2, [pc, #328]	@ (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002756:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800275a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800275c:	4b50      	ldr	r3, [pc, #320]	@ (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	494d      	ldr	r1, [pc, #308]	@ (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	4313      	orrs	r3, r2
 800276c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d044      	beq.n	8002804 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d107      	bne.n	8002792 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002782:	4b47      	ldr	r3, [pc, #284]	@ (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d119      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e07f      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b02      	cmp	r3, #2
 8002798:	d003      	beq.n	80027a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800279e:	2b03      	cmp	r3, #3
 80027a0:	d107      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a2:	4b3f      	ldr	r3, [pc, #252]	@ (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d109      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e06f      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b2:	4b3b      	ldr	r3, [pc, #236]	@ (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e067      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027c2:	4b37      	ldr	r3, [pc, #220]	@ (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f023 0203 	bic.w	r2, r3, #3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	4934      	ldr	r1, [pc, #208]	@ (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027d4:	f7ff fcc2 	bl	800215c <HAL_GetTick>
 80027d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027da:	e00a      	b.n	80027f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027dc:	f7ff fcbe 	bl	800215c <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e04f      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f2:	4b2b      	ldr	r3, [pc, #172]	@ (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 020c 	and.w	r2, r3, #12
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	429a      	cmp	r2, r3
 8002802:	d1eb      	bne.n	80027dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002804:	4b25      	ldr	r3, [pc, #148]	@ (800289c <HAL_RCC_ClockConfig+0x1b8>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 030f 	and.w	r3, r3, #15
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d20c      	bcs.n	800282c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002812:	4b22      	ldr	r3, [pc, #136]	@ (800289c <HAL_RCC_ClockConfig+0x1b8>)
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800281a:	4b20      	ldr	r3, [pc, #128]	@ (800289c <HAL_RCC_ClockConfig+0x1b8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d001      	beq.n	800282c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e032      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d008      	beq.n	800284a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002838:	4b19      	ldr	r3, [pc, #100]	@ (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	4916      	ldr	r1, [pc, #88]	@ (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	4313      	orrs	r3, r2
 8002848:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d009      	beq.n	800286a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002856:	4b12      	ldr	r3, [pc, #72]	@ (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	490e      	ldr	r1, [pc, #56]	@ (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	4313      	orrs	r3, r2
 8002868:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800286a:	f000 f855 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 800286e:	4602      	mov	r2, r0
 8002870:	4b0b      	ldr	r3, [pc, #44]	@ (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	490a      	ldr	r1, [pc, #40]	@ (80028a4 <HAL_RCC_ClockConfig+0x1c0>)
 800287c:	5ccb      	ldrb	r3, [r1, r3]
 800287e:	fa22 f303 	lsr.w	r3, r2, r3
 8002882:	4a09      	ldr	r2, [pc, #36]	@ (80028a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002886:	4b09      	ldr	r3, [pc, #36]	@ (80028ac <HAL_RCC_ClockConfig+0x1c8>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff fc22 	bl	80020d4 <HAL_InitTick>

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40023c00 	.word	0x40023c00
 80028a0:	40023800 	.word	0x40023800
 80028a4:	08008f80 	.word	0x08008f80
 80028a8:	20000000 	.word	0x20000000
 80028ac:	20000004 	.word	0x20000004

080028b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028b4:	4b03      	ldr	r3, [pc, #12]	@ (80028c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80028b6:	681b      	ldr	r3, [r3, #0]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	20000000 	.word	0x20000000

080028c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028cc:	f7ff fff0 	bl	80028b0 <HAL_RCC_GetHCLKFreq>
 80028d0:	4602      	mov	r2, r0
 80028d2:	4b05      	ldr	r3, [pc, #20]	@ (80028e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	0a9b      	lsrs	r3, r3, #10
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	4903      	ldr	r1, [pc, #12]	@ (80028ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80028de:	5ccb      	ldrb	r3, [r1, r3]
 80028e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40023800 	.word	0x40023800
 80028ec:	08008f90 	.word	0x08008f90

080028f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028f4:	f7ff ffdc 	bl	80028b0 <HAL_RCC_GetHCLKFreq>
 80028f8:	4602      	mov	r2, r0
 80028fa:	4b05      	ldr	r3, [pc, #20]	@ (8002910 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	0b5b      	lsrs	r3, r3, #13
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	4903      	ldr	r1, [pc, #12]	@ (8002914 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002906:	5ccb      	ldrb	r3, [r1, r3]
 8002908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800290c:	4618      	mov	r0, r3
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40023800 	.word	0x40023800
 8002914:	08008f90 	.word	0x08008f90

08002918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800291c:	b0a6      	sub	sp, #152	@ 0x98
 800291e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002920:	2300      	movs	r3, #0
 8002922:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002926:	2300      	movs	r3, #0
 8002928:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800292c:	2300      	movs	r3, #0
 800292e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002932:	2300      	movs	r3, #0
 8002934:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002938:	2300      	movs	r3, #0
 800293a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800293e:	4bc8      	ldr	r3, [pc, #800]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x348>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	2b0c      	cmp	r3, #12
 8002948:	f200 817e 	bhi.w	8002c48 <HAL_RCC_GetSysClockFreq+0x330>
 800294c:	a201      	add	r2, pc, #4	@ (adr r2, 8002954 <HAL_RCC_GetSysClockFreq+0x3c>)
 800294e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002952:	bf00      	nop
 8002954:	08002989 	.word	0x08002989
 8002958:	08002c49 	.word	0x08002c49
 800295c:	08002c49 	.word	0x08002c49
 8002960:	08002c49 	.word	0x08002c49
 8002964:	08002991 	.word	0x08002991
 8002968:	08002c49 	.word	0x08002c49
 800296c:	08002c49 	.word	0x08002c49
 8002970:	08002c49 	.word	0x08002c49
 8002974:	08002999 	.word	0x08002999
 8002978:	08002c49 	.word	0x08002c49
 800297c:	08002c49 	.word	0x08002c49
 8002980:	08002c49 	.word	0x08002c49
 8002984:	08002b03 	.word	0x08002b03
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002988:	4bb6      	ldr	r3, [pc, #728]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0x34c>)
 800298a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800298e:	e15f      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002990:	4bb5      	ldr	r3, [pc, #724]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x350>)
 8002992:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002996:	e15b      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002998:	4bb1      	ldr	r3, [pc, #708]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x348>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029a4:	4bae      	ldr	r3, [pc, #696]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x348>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d031      	beq.n	8002a14 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029b0:	4bab      	ldr	r3, [pc, #684]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x348>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	099b      	lsrs	r3, r3, #6
 80029b6:	2200      	movs	r2, #0
 80029b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80029bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80029c4:	2300      	movs	r3, #0
 80029c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80029c8:	4ba7      	ldr	r3, [pc, #668]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x350>)
 80029ca:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80029ce:	462a      	mov	r2, r5
 80029d0:	fb03 f202 	mul.w	r2, r3, r2
 80029d4:	2300      	movs	r3, #0
 80029d6:	4621      	mov	r1, r4
 80029d8:	fb01 f303 	mul.w	r3, r1, r3
 80029dc:	4413      	add	r3, r2
 80029de:	4aa2      	ldr	r2, [pc, #648]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x350>)
 80029e0:	4621      	mov	r1, r4
 80029e2:	fba1 1202 	umull	r1, r2, r1, r2
 80029e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80029e8:	460a      	mov	r2, r1
 80029ea:	67ba      	str	r2, [r7, #120]	@ 0x78
 80029ec:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80029ee:	4413      	add	r3, r2
 80029f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80029f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029f6:	2200      	movs	r2, #0
 80029f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80029fa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80029fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a00:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002a04:	f7fe f918 	bl	8000c38 <__aeabi_uldivmod>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002a12:	e064      	b.n	8002ade <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a14:	4b92      	ldr	r3, [pc, #584]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	099b      	lsrs	r3, r3, #6
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a1e:	657a      	str	r2, [r7, #84]	@ 0x54
 8002a20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a28:	2300      	movs	r3, #0
 8002a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a2c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002a30:	4622      	mov	r2, r4
 8002a32:	462b      	mov	r3, r5
 8002a34:	f04f 0000 	mov.w	r0, #0
 8002a38:	f04f 0100 	mov.w	r1, #0
 8002a3c:	0159      	lsls	r1, r3, #5
 8002a3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a42:	0150      	lsls	r0, r2, #5
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	4621      	mov	r1, r4
 8002a4a:	1a51      	subs	r1, r2, r1
 8002a4c:	6139      	str	r1, [r7, #16]
 8002a4e:	4629      	mov	r1, r5
 8002a50:	eb63 0301 	sbc.w	r3, r3, r1
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a62:	4659      	mov	r1, fp
 8002a64:	018b      	lsls	r3, r1, #6
 8002a66:	4651      	mov	r1, sl
 8002a68:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a6c:	4651      	mov	r1, sl
 8002a6e:	018a      	lsls	r2, r1, #6
 8002a70:	4651      	mov	r1, sl
 8002a72:	ebb2 0801 	subs.w	r8, r2, r1
 8002a76:	4659      	mov	r1, fp
 8002a78:	eb63 0901 	sbc.w	r9, r3, r1
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a88:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a8c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a90:	4690      	mov	r8, r2
 8002a92:	4699      	mov	r9, r3
 8002a94:	4623      	mov	r3, r4
 8002a96:	eb18 0303 	adds.w	r3, r8, r3
 8002a9a:	60bb      	str	r3, [r7, #8]
 8002a9c:	462b      	mov	r3, r5
 8002a9e:	eb49 0303 	adc.w	r3, r9, r3
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	f04f 0300 	mov.w	r3, #0
 8002aac:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ab0:	4629      	mov	r1, r5
 8002ab2:	028b      	lsls	r3, r1, #10
 8002ab4:	4621      	mov	r1, r4
 8002ab6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002aba:	4621      	mov	r1, r4
 8002abc:	028a      	lsls	r2, r1, #10
 8002abe:	4610      	mov	r0, r2
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002aca:	647a      	str	r2, [r7, #68]	@ 0x44
 8002acc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002ad0:	f7fe f8b2 	bl	8000c38 <__aeabi_uldivmod>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4613      	mov	r3, r2
 8002ada:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ade:	4b60      	ldr	r3, [pc, #384]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	0c1b      	lsrs	r3, r3, #16
 8002ae4:	f003 0303 	and.w	r3, r3, #3
 8002ae8:	3301      	adds	r3, #1
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8002af0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002af4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002b00:	e0a6      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b02:	4b57      	ldr	r3, [pc, #348]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b0e:	4b54      	ldr	r3, [pc, #336]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d02a      	beq.n	8002b70 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b1a:	4b51      	ldr	r3, [pc, #324]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	099b      	lsrs	r3, r3, #6
 8002b20:	2200      	movs	r2, #0
 8002b22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b24:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b28:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	4b4e      	ldr	r3, [pc, #312]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x350>)
 8002b30:	fb03 f201 	mul.w	r2, r3, r1
 8002b34:	2300      	movs	r3, #0
 8002b36:	fb00 f303 	mul.w	r3, r0, r3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	4a4a      	ldr	r2, [pc, #296]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x350>)
 8002b3e:	fba0 1202 	umull	r1, r2, r0, r2
 8002b42:	677a      	str	r2, [r7, #116]	@ 0x74
 8002b44:	460a      	mov	r2, r1
 8002b46:	673a      	str	r2, [r7, #112]	@ 0x70
 8002b48:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002b4a:	4413      	add	r3, r2
 8002b4c:	677b      	str	r3, [r7, #116]	@ 0x74
 8002b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b52:	2200      	movs	r2, #0
 8002b54:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b56:	637a      	str	r2, [r7, #52]	@ 0x34
 8002b58:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002b5c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002b60:	f7fe f86a 	bl	8000c38 <__aeabi_uldivmod>
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	4613      	mov	r3, r2
 8002b6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002b6e:	e05b      	b.n	8002c28 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b70:	4b3b      	ldr	r3, [pc, #236]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	099b      	lsrs	r3, r3, #6
 8002b76:	2200      	movs	r2, #0
 8002b78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b82:	623b      	str	r3, [r7, #32]
 8002b84:	2300      	movs	r3, #0
 8002b86:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b8c:	4642      	mov	r2, r8
 8002b8e:	464b      	mov	r3, r9
 8002b90:	f04f 0000 	mov.w	r0, #0
 8002b94:	f04f 0100 	mov.w	r1, #0
 8002b98:	0159      	lsls	r1, r3, #5
 8002b9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b9e:	0150      	lsls	r0, r2, #5
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	4641      	mov	r1, r8
 8002ba6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002baa:	4649      	mov	r1, r9
 8002bac:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	f04f 0300 	mov.w	r3, #0
 8002bb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002bbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002bc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002bc4:	ebb2 040a 	subs.w	r4, r2, sl
 8002bc8:	eb63 050b 	sbc.w	r5, r3, fp
 8002bcc:	f04f 0200 	mov.w	r2, #0
 8002bd0:	f04f 0300 	mov.w	r3, #0
 8002bd4:	00eb      	lsls	r3, r5, #3
 8002bd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bda:	00e2      	lsls	r2, r4, #3
 8002bdc:	4614      	mov	r4, r2
 8002bde:	461d      	mov	r5, r3
 8002be0:	4643      	mov	r3, r8
 8002be2:	18e3      	adds	r3, r4, r3
 8002be4:	603b      	str	r3, [r7, #0]
 8002be6:	464b      	mov	r3, r9
 8002be8:	eb45 0303 	adc.w	r3, r5, r3
 8002bec:	607b      	str	r3, [r7, #4]
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	f04f 0300 	mov.w	r3, #0
 8002bf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bfa:	4629      	mov	r1, r5
 8002bfc:	028b      	lsls	r3, r1, #10
 8002bfe:	4621      	mov	r1, r4
 8002c00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c04:	4621      	mov	r1, r4
 8002c06:	028a      	lsls	r2, r1, #10
 8002c08:	4610      	mov	r0, r2
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c10:	2200      	movs	r2, #0
 8002c12:	61bb      	str	r3, [r7, #24]
 8002c14:	61fa      	str	r2, [r7, #28]
 8002c16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c1a:	f7fe f80d 	bl	8000c38 <__aeabi_uldivmod>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	4613      	mov	r3, r2
 8002c24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002c28:	4b0d      	ldr	r3, [pc, #52]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	0f1b      	lsrs	r3, r3, #28
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002c36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002c3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002c46:	e003      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c48:	4b06      	ldr	r3, [pc, #24]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002c4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002c4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c50:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3798      	adds	r7, #152	@ 0x98
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c5e:	bf00      	nop
 8002c60:	40023800 	.word	0x40023800
 8002c64:	00f42400 	.word	0x00f42400
 8002c68:	017d7840 	.word	0x017d7840

08002c6c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e28d      	b.n	800319a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 8083 	beq.w	8002d92 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c8c:	4b94      	ldr	r3, [pc, #592]	@ (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 030c 	and.w	r3, r3, #12
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d019      	beq.n	8002ccc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c98:	4b91      	ldr	r3, [pc, #580]	@ (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d106      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ca4:	4b8e      	ldr	r3, [pc, #568]	@ (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cb0:	d00c      	beq.n	8002ccc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cb2:	4b8b      	ldr	r3, [pc, #556]	@ (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002cba:	2b0c      	cmp	r3, #12
 8002cbc:	d112      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cbe:	4b88      	ldr	r3, [pc, #544]	@ (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cca:	d10b      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ccc:	4b84      	ldr	r3, [pc, #528]	@ (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d05b      	beq.n	8002d90 <HAL_RCC_OscConfig+0x124>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d157      	bne.n	8002d90 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e25a      	b.n	800319a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cec:	d106      	bne.n	8002cfc <HAL_RCC_OscConfig+0x90>
 8002cee:	4b7c      	ldr	r3, [pc, #496]	@ (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a7b      	ldr	r2, [pc, #492]	@ (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002cf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	e01d      	b.n	8002d38 <HAL_RCC_OscConfig+0xcc>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d04:	d10c      	bne.n	8002d20 <HAL_RCC_OscConfig+0xb4>
 8002d06:	4b76      	ldr	r3, [pc, #472]	@ (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a75      	ldr	r2, [pc, #468]	@ (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002d0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	4b73      	ldr	r3, [pc, #460]	@ (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a72      	ldr	r2, [pc, #456]	@ (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d1c:	6013      	str	r3, [r2, #0]
 8002d1e:	e00b      	b.n	8002d38 <HAL_RCC_OscConfig+0xcc>
 8002d20:	4b6f      	ldr	r3, [pc, #444]	@ (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a6e      	ldr	r2, [pc, #440]	@ (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002d26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	4b6c      	ldr	r3, [pc, #432]	@ (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a6b      	ldr	r2, [pc, #428]	@ (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002d32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d013      	beq.n	8002d68 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d40:	f7ff fa0c 	bl	800215c <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d48:	f7ff fa08 	bl	800215c <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b64      	cmp	r3, #100	@ 0x64
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e21f      	b.n	800319a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5a:	4b61      	ldr	r3, [pc, #388]	@ (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCC_OscConfig+0xdc>
 8002d66:	e014      	b.n	8002d92 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d68:	f7ff f9f8 	bl	800215c <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d70:	f7ff f9f4 	bl	800215c <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b64      	cmp	r3, #100	@ 0x64
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e20b      	b.n	800319a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d82:	4b57      	ldr	r3, [pc, #348]	@ (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0x104>
 8002d8e:	e000      	b.n	8002d92 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d06f      	beq.n	8002e7e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002d9e:	4b50      	ldr	r3, [pc, #320]	@ (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 030c 	and.w	r3, r3, #12
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d017      	beq.n	8002dda <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002daa:	4b4d      	ldr	r3, [pc, #308]	@ (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 030c 	and.w	r3, r3, #12
        || \
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d105      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002db6:	4b4a      	ldr	r3, [pc, #296]	@ (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00b      	beq.n	8002dda <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dc2:	4b47      	ldr	r3, [pc, #284]	@ (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002dca:	2b0c      	cmp	r3, #12
 8002dcc:	d11c      	bne.n	8002e08 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dce:	4b44      	ldr	r3, [pc, #272]	@ (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d116      	bne.n	8002e08 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dda:	4b41      	ldr	r3, [pc, #260]	@ (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d005      	beq.n	8002df2 <HAL_RCC_OscConfig+0x186>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d001      	beq.n	8002df2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e1d3      	b.n	800319a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	4937      	ldr	r1, [pc, #220]	@ (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e06:	e03a      	b.n	8002e7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d020      	beq.n	8002e52 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e10:	4b34      	ldr	r3, [pc, #208]	@ (8002ee4 <HAL_RCC_OscConfig+0x278>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e16:	f7ff f9a1 	bl	800215c <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e1e:	f7ff f99d 	bl	800215c <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e1b4      	b.n	800319a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e30:	4b2b      	ldr	r3, [pc, #172]	@ (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0f0      	beq.n	8002e1e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3c:	4b28      	ldr	r3, [pc, #160]	@ (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	4925      	ldr	r1, [pc, #148]	@ (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	600b      	str	r3, [r1, #0]
 8002e50:	e015      	b.n	8002e7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e52:	4b24      	ldr	r3, [pc, #144]	@ (8002ee4 <HAL_RCC_OscConfig+0x278>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e58:	f7ff f980 	bl	800215c <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e60:	f7ff f97c 	bl	800215c <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e193      	b.n	800319a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e72:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d036      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d016      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e92:	4b15      	ldr	r3, [pc, #84]	@ (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e98:	f7ff f960 	bl	800215c <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ea0:	f7ff f95c 	bl	800215c <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e173      	b.n	800319a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f0      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x234>
 8002ebe:	e01b      	b.n	8002ef8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ec0:	4b09      	ldr	r3, [pc, #36]	@ (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec6:	f7ff f949 	bl	800215c <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ecc:	e00e      	b.n	8002eec <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ece:	f7ff f945 	bl	800215c <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d907      	bls.n	8002eec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e15c      	b.n	800319a <HAL_RCC_OscConfig+0x52e>
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	42470000 	.word	0x42470000
 8002ee8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eec:	4b8a      	ldr	r3, [pc, #552]	@ (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8002eee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1ea      	bne.n	8002ece <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 8097 	beq.w	8003034 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f06:	2300      	movs	r3, #0
 8002f08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f0a:	4b83      	ldr	r3, [pc, #524]	@ (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10f      	bne.n	8002f36 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	60bb      	str	r3, [r7, #8]
 8002f1a:	4b7f      	ldr	r3, [pc, #508]	@ (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1e:	4a7e      	ldr	r2, [pc, #504]	@ (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8002f20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f24:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f26:	4b7c      	ldr	r3, [pc, #496]	@ (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f2e:	60bb      	str	r3, [r7, #8]
 8002f30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f32:	2301      	movs	r3, #1
 8002f34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f36:	4b79      	ldr	r3, [pc, #484]	@ (800311c <HAL_RCC_OscConfig+0x4b0>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d118      	bne.n	8002f74 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f42:	4b76      	ldr	r3, [pc, #472]	@ (800311c <HAL_RCC_OscConfig+0x4b0>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a75      	ldr	r2, [pc, #468]	@ (800311c <HAL_RCC_OscConfig+0x4b0>)
 8002f48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f4e:	f7ff f905 	bl	800215c <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f56:	f7ff f901 	bl	800215c <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e118      	b.n	800319a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f68:	4b6c      	ldr	r3, [pc, #432]	@ (800311c <HAL_RCC_OscConfig+0x4b0>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0f0      	beq.n	8002f56 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d106      	bne.n	8002f8a <HAL_RCC_OscConfig+0x31e>
 8002f7c:	4b66      	ldr	r3, [pc, #408]	@ (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8002f7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f80:	4a65      	ldr	r2, [pc, #404]	@ (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8002f82:	f043 0301 	orr.w	r3, r3, #1
 8002f86:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f88:	e01c      	b.n	8002fc4 <HAL_RCC_OscConfig+0x358>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b05      	cmp	r3, #5
 8002f90:	d10c      	bne.n	8002fac <HAL_RCC_OscConfig+0x340>
 8002f92:	4b61      	ldr	r3, [pc, #388]	@ (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8002f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f96:	4a60      	ldr	r2, [pc, #384]	@ (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8002f98:	f043 0304 	orr.w	r3, r3, #4
 8002f9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f9e:	4b5e      	ldr	r3, [pc, #376]	@ (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa2:	4a5d      	ldr	r2, [pc, #372]	@ (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002faa:	e00b      	b.n	8002fc4 <HAL_RCC_OscConfig+0x358>
 8002fac:	4b5a      	ldr	r3, [pc, #360]	@ (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8002fae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb0:	4a59      	ldr	r2, [pc, #356]	@ (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8002fb2:	f023 0301 	bic.w	r3, r3, #1
 8002fb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fb8:	4b57      	ldr	r3, [pc, #348]	@ (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8002fba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fbc:	4a56      	ldr	r2, [pc, #344]	@ (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8002fbe:	f023 0304 	bic.w	r3, r3, #4
 8002fc2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d015      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fcc:	f7ff f8c6 	bl	800215c <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd2:	e00a      	b.n	8002fea <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd4:	f7ff f8c2 	bl	800215c <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e0d7      	b.n	800319a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fea:	4b4b      	ldr	r3, [pc, #300]	@ (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8002fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0ee      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x368>
 8002ff6:	e014      	b.n	8003022 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff8:	f7ff f8b0 	bl	800215c <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ffe:	e00a      	b.n	8003016 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003000:	f7ff f8ac 	bl	800215c <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800300e:	4293      	cmp	r3, r2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e0c1      	b.n	800319a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003016:	4b40      	ldr	r3, [pc, #256]	@ (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8003018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1ee      	bne.n	8003000 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003022:	7dfb      	ldrb	r3, [r7, #23]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d105      	bne.n	8003034 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003028:	4b3b      	ldr	r3, [pc, #236]	@ (8003118 <HAL_RCC_OscConfig+0x4ac>)
 800302a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302c:	4a3a      	ldr	r2, [pc, #232]	@ (8003118 <HAL_RCC_OscConfig+0x4ac>)
 800302e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003032:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 80ad 	beq.w	8003198 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800303e:	4b36      	ldr	r3, [pc, #216]	@ (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 030c 	and.w	r3, r3, #12
 8003046:	2b08      	cmp	r3, #8
 8003048:	d060      	beq.n	800310c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	2b02      	cmp	r3, #2
 8003050:	d145      	bne.n	80030de <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003052:	4b33      	ldr	r3, [pc, #204]	@ (8003120 <HAL_RCC_OscConfig+0x4b4>)
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003058:	f7ff f880 	bl	800215c <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003060:	f7ff f87c 	bl	800215c <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e093      	b.n	800319a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003072:	4b29      	ldr	r3, [pc, #164]	@ (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f0      	bne.n	8003060 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69da      	ldr	r2, [r3, #28]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308c:	019b      	lsls	r3, r3, #6
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003094:	085b      	lsrs	r3, r3, #1
 8003096:	3b01      	subs	r3, #1
 8003098:	041b      	lsls	r3, r3, #16
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a0:	061b      	lsls	r3, r3, #24
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a8:	071b      	lsls	r3, r3, #28
 80030aa:	491b      	ldr	r1, [pc, #108]	@ (8003118 <HAL_RCC_OscConfig+0x4ac>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003120 <HAL_RCC_OscConfig+0x4b4>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b6:	f7ff f851 	bl	800215c <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030be:	f7ff f84d 	bl	800215c <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e064      	b.n	800319a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d0:	4b11      	ldr	r3, [pc, #68]	@ (8003118 <HAL_RCC_OscConfig+0x4ac>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0f0      	beq.n	80030be <HAL_RCC_OscConfig+0x452>
 80030dc:	e05c      	b.n	8003198 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030de:	4b10      	ldr	r3, [pc, #64]	@ (8003120 <HAL_RCC_OscConfig+0x4b4>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e4:	f7ff f83a 	bl	800215c <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ec:	f7ff f836 	bl	800215c <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e04d      	b.n	800319a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fe:	4b06      	ldr	r3, [pc, #24]	@ (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f0      	bne.n	80030ec <HAL_RCC_OscConfig+0x480>
 800310a:	e045      	b.n	8003198 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d107      	bne.n	8003124 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e040      	b.n	800319a <HAL_RCC_OscConfig+0x52e>
 8003118:	40023800 	.word	0x40023800
 800311c:	40007000 	.word	0x40007000
 8003120:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003124:	4b1f      	ldr	r3, [pc, #124]	@ (80031a4 <HAL_RCC_OscConfig+0x538>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d030      	beq.n	8003194 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800313c:	429a      	cmp	r2, r3
 800313e:	d129      	bne.n	8003194 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314a:	429a      	cmp	r2, r3
 800314c:	d122      	bne.n	8003194 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003154:	4013      	ands	r3, r2
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800315a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800315c:	4293      	cmp	r3, r2
 800315e:	d119      	bne.n	8003194 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800316a:	085b      	lsrs	r3, r3, #1
 800316c:	3b01      	subs	r3, #1
 800316e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003170:	429a      	cmp	r2, r3
 8003172:	d10f      	bne.n	8003194 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003180:	429a      	cmp	r2, r3
 8003182:	d107      	bne.n	8003194 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003190:	429a      	cmp	r2, r3
 8003192:	d001      	beq.n	8003198 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e000      	b.n	800319a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40023800 	.word	0x40023800

080031a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e07b      	b.n	80032b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d108      	bne.n	80031d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031ca:	d009      	beq.n	80031e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	61da      	str	r2, [r3, #28]
 80031d2:	e005      	b.n	80031e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d106      	bne.n	8003200 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7fe fd7e 	bl	8001cfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2202      	movs	r2, #2
 8003204:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003216:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003228:	431a      	orrs	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003264:	ea42 0103 	orr.w	r1, r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800326c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	0c1b      	lsrs	r3, r3, #16
 800327e:	f003 0104 	and.w	r1, r3, #4
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003286:	f003 0210 	and.w	r2, r3, #16
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	69da      	ldr	r2, [r3, #28]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b088      	sub	sp, #32
 80032be:	af00      	add	r7, sp, #0
 80032c0:	60f8      	str	r0, [r7, #12]
 80032c2:	60b9      	str	r1, [r7, #8]
 80032c4:	603b      	str	r3, [r7, #0]
 80032c6:	4613      	mov	r3, r2
 80032c8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032ca:	f7fe ff47 	bl	800215c <HAL_GetTick>
 80032ce:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80032d0:	88fb      	ldrh	r3, [r7, #6]
 80032d2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d001      	beq.n	80032e4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80032e0:	2302      	movs	r3, #2
 80032e2:	e12a      	b.n	800353a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <HAL_SPI_Transmit+0x36>
 80032ea:	88fb      	ldrh	r3, [r7, #6]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e122      	b.n	800353a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d101      	bne.n	8003302 <HAL_SPI_Transmit+0x48>
 80032fe:	2302      	movs	r3, #2
 8003300:	e11b      	b.n	800353a <HAL_SPI_Transmit+0x280>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2203      	movs	r2, #3
 800330e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	88fa      	ldrh	r2, [r7, #6]
 8003322:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	88fa      	ldrh	r2, [r7, #6]
 8003328:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003350:	d10f      	bne.n	8003372 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003360:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003370:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800337c:	2b40      	cmp	r3, #64	@ 0x40
 800337e:	d007      	beq.n	8003390 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800338e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003398:	d152      	bne.n	8003440 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d002      	beq.n	80033a8 <HAL_SPI_Transmit+0xee>
 80033a2:	8b7b      	ldrh	r3, [r7, #26]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d145      	bne.n	8003434 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ac:	881a      	ldrh	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b8:	1c9a      	adds	r2, r3, #2
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	3b01      	subs	r3, #1
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80033cc:	e032      	b.n	8003434 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d112      	bne.n	8003402 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e0:	881a      	ldrh	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ec:	1c9a      	adds	r2, r3, #2
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003400:	e018      	b.n	8003434 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003402:	f7fe feab 	bl	800215c <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	429a      	cmp	r2, r3
 8003410:	d803      	bhi.n	800341a <HAL_SPI_Transmit+0x160>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003418:	d102      	bne.n	8003420 <HAL_SPI_Transmit+0x166>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d109      	bne.n	8003434 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e082      	b.n	800353a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003438:	b29b      	uxth	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1c7      	bne.n	80033ce <HAL_SPI_Transmit+0x114>
 800343e:	e053      	b.n	80034e8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d002      	beq.n	800344e <HAL_SPI_Transmit+0x194>
 8003448:	8b7b      	ldrh	r3, [r7, #26]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d147      	bne.n	80034de <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	330c      	adds	r3, #12
 8003458:	7812      	ldrb	r2, [r2, #0]
 800345a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003460:	1c5a      	adds	r2, r3, #1
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800346a:	b29b      	uxth	r3, r3
 800346c:	3b01      	subs	r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003474:	e033      	b.n	80034de <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b02      	cmp	r3, #2
 8003482:	d113      	bne.n	80034ac <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	330c      	adds	r3, #12
 800348e:	7812      	ldrb	r2, [r2, #0]
 8003490:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	3b01      	subs	r3, #1
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80034aa:	e018      	b.n	80034de <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034ac:	f7fe fe56 	bl	800215c <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d803      	bhi.n	80034c4 <HAL_SPI_Transmit+0x20a>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c2:	d102      	bne.n	80034ca <HAL_SPI_Transmit+0x210>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d109      	bne.n	80034de <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e02d      	b.n	800353a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1c6      	bne.n	8003476 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034e8:	69fa      	ldr	r2, [r7, #28]
 80034ea:	6839      	ldr	r1, [r7, #0]
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 fa59 	bl	80039a4 <SPI_EndRxTxTransaction>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d002      	beq.n	80034fe <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2220      	movs	r2, #32
 80034fc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10a      	bne.n	800351c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003506:	2300      	movs	r3, #0
 8003508:	617b      	str	r3, [r7, #20]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e000      	b.n	800353a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003538:	2300      	movs	r3, #0
  }
}
 800353a:	4618      	mov	r0, r3
 800353c:	3720      	adds	r7, #32
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b08a      	sub	sp, #40	@ 0x28
 8003546:	af00      	add	r7, sp, #0
 8003548:	60f8      	str	r0, [r7, #12]
 800354a:	60b9      	str	r1, [r7, #8]
 800354c:	607a      	str	r2, [r7, #4]
 800354e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003550:	2301      	movs	r3, #1
 8003552:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003554:	f7fe fe02 	bl	800215c <HAL_GetTick>
 8003558:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003560:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003568:	887b      	ldrh	r3, [r7, #2]
 800356a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800356c:	7ffb      	ldrb	r3, [r7, #31]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d00c      	beq.n	800358c <HAL_SPI_TransmitReceive+0x4a>
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003578:	d106      	bne.n	8003588 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d102      	bne.n	8003588 <HAL_SPI_TransmitReceive+0x46>
 8003582:	7ffb      	ldrb	r3, [r7, #31]
 8003584:	2b04      	cmp	r3, #4
 8003586:	d001      	beq.n	800358c <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003588:	2302      	movs	r3, #2
 800358a:	e17f      	b.n	800388c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d005      	beq.n	800359e <HAL_SPI_TransmitReceive+0x5c>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d002      	beq.n	800359e <HAL_SPI_TransmitReceive+0x5c>
 8003598:	887b      	ldrh	r3, [r7, #2]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e174      	b.n	800388c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d101      	bne.n	80035b0 <HAL_SPI_TransmitReceive+0x6e>
 80035ac:	2302      	movs	r3, #2
 80035ae:	e16d      	b.n	800388c <HAL_SPI_TransmitReceive+0x34a>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d003      	beq.n	80035cc <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2205      	movs	r2, #5
 80035c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	887a      	ldrh	r2, [r7, #2]
 80035dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	887a      	ldrh	r2, [r7, #2]
 80035e2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	887a      	ldrh	r2, [r7, #2]
 80035ee:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	887a      	ldrh	r2, [r7, #2]
 80035f4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800360c:	2b40      	cmp	r3, #64	@ 0x40
 800360e:	d007      	beq.n	8003620 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800361e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003628:	d17e      	bne.n	8003728 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d002      	beq.n	8003638 <HAL_SPI_TransmitReceive+0xf6>
 8003632:	8afb      	ldrh	r3, [r7, #22]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d16c      	bne.n	8003712 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363c:	881a      	ldrh	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003648:	1c9a      	adds	r2, r3, #2
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003652:	b29b      	uxth	r3, r3
 8003654:	3b01      	subs	r3, #1
 8003656:	b29a      	uxth	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800365c:	e059      	b.n	8003712 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b02      	cmp	r3, #2
 800366a:	d11b      	bne.n	80036a4 <HAL_SPI_TransmitReceive+0x162>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003670:	b29b      	uxth	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d016      	beq.n	80036a4 <HAL_SPI_TransmitReceive+0x162>
 8003676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003678:	2b01      	cmp	r3, #1
 800367a:	d113      	bne.n	80036a4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003680:	881a      	ldrh	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368c:	1c9a      	adds	r2, r3, #2
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d119      	bne.n	80036e6 <HAL_SPI_TransmitReceive+0x1a4>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d014      	beq.n	80036e6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c6:	b292      	uxth	r2, r2
 80036c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ce:	1c9a      	adds	r2, r3, #2
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036d8:	b29b      	uxth	r3, r3
 80036da:	3b01      	subs	r3, #1
 80036dc:	b29a      	uxth	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036e2:	2301      	movs	r3, #1
 80036e4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80036e6:	f7fe fd39 	bl	800215c <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d80d      	bhi.n	8003712 <HAL_SPI_TransmitReceive+0x1d0>
 80036f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fc:	d009      	beq.n	8003712 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e0bc      	b.n	800388c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003716:	b29b      	uxth	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1a0      	bne.n	800365e <HAL_SPI_TransmitReceive+0x11c>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003720:	b29b      	uxth	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d19b      	bne.n	800365e <HAL_SPI_TransmitReceive+0x11c>
 8003726:	e082      	b.n	800382e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d002      	beq.n	8003736 <HAL_SPI_TransmitReceive+0x1f4>
 8003730:	8afb      	ldrh	r3, [r7, #22]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d171      	bne.n	800381a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	330c      	adds	r3, #12
 8003740:	7812      	ldrb	r2, [r2, #0]
 8003742:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003748:	1c5a      	adds	r2, r3, #1
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800375c:	e05d      	b.n	800381a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b02      	cmp	r3, #2
 800376a:	d11c      	bne.n	80037a6 <HAL_SPI_TransmitReceive+0x264>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003770:	b29b      	uxth	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d017      	beq.n	80037a6 <HAL_SPI_TransmitReceive+0x264>
 8003776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003778:	2b01      	cmp	r3, #1
 800377a:	d114      	bne.n	80037a6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	330c      	adds	r3, #12
 8003786:	7812      	ldrb	r2, [r2, #0]
 8003788:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378e:	1c5a      	adds	r2, r3, #1
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003798:	b29b      	uxth	r3, r3
 800379a:	3b01      	subs	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d119      	bne.n	80037e8 <HAL_SPI_TransmitReceive+0x2a6>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d014      	beq.n	80037e8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037da:	b29b      	uxth	r3, r3
 80037dc:	3b01      	subs	r3, #1
 80037de:	b29a      	uxth	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037e4:	2301      	movs	r3, #1
 80037e6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80037e8:	f7fe fcb8 	bl	800215c <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d803      	bhi.n	8003800 <HAL_SPI_TransmitReceive+0x2be>
 80037f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fe:	d102      	bne.n	8003806 <HAL_SPI_TransmitReceive+0x2c4>
 8003800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003802:	2b00      	cmp	r3, #0
 8003804:	d109      	bne.n	800381a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e038      	b.n	800388c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800381e:	b29b      	uxth	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	d19c      	bne.n	800375e <HAL_SPI_TransmitReceive+0x21c>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003828:	b29b      	uxth	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d197      	bne.n	800375e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800382e:	6a3a      	ldr	r2, [r7, #32]
 8003830:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f000 f8b6 	bl	80039a4 <SPI_EndRxTxTransaction>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d008      	beq.n	8003850 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2220      	movs	r2, #32
 8003842:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e01d      	b.n	800388c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10a      	bne.n	800386e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003858:	2300      	movs	r3, #0
 800385a:	613b      	str	r3, [r7, #16]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	613b      	str	r3, [r7, #16]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	613b      	str	r3, [r7, #16]
 800386c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e000      	b.n	800388c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800388a:	2300      	movs	r3, #0
  }
}
 800388c:	4618      	mov	r0, r3
 800388e:	3728      	adds	r7, #40	@ 0x28
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b088      	sub	sp, #32
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	603b      	str	r3, [r7, #0]
 80038a0:	4613      	mov	r3, r2
 80038a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80038a4:	f7fe fc5a 	bl	800215c <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ac:	1a9b      	subs	r3, r3, r2
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	4413      	add	r3, r2
 80038b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80038b4:	f7fe fc52 	bl	800215c <HAL_GetTick>
 80038b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80038ba:	4b39      	ldr	r3, [pc, #228]	@ (80039a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	015b      	lsls	r3, r3, #5
 80038c0:	0d1b      	lsrs	r3, r3, #20
 80038c2:	69fa      	ldr	r2, [r7, #28]
 80038c4:	fb02 f303 	mul.w	r3, r2, r3
 80038c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038ca:	e054      	b.n	8003976 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d2:	d050      	beq.n	8003976 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038d4:	f7fe fc42 	bl	800215c <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	69fa      	ldr	r2, [r7, #28]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d902      	bls.n	80038ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d13d      	bne.n	8003966 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80038f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003902:	d111      	bne.n	8003928 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800390c:	d004      	beq.n	8003918 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003916:	d107      	bne.n	8003928 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003926:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800392c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003930:	d10f      	bne.n	8003952 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003950:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e017      	b.n	8003996 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	3b01      	subs	r3, #1
 8003974:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	4013      	ands	r3, r2
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	429a      	cmp	r2, r3
 8003984:	bf0c      	ite	eq
 8003986:	2301      	moveq	r3, #1
 8003988:	2300      	movne	r3, #0
 800398a:	b2db      	uxtb	r3, r3
 800398c:	461a      	mov	r2, r3
 800398e:	79fb      	ldrb	r3, [r7, #7]
 8003990:	429a      	cmp	r2, r3
 8003992:	d19b      	bne.n	80038cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3720      	adds	r7, #32
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	20000000 	.word	0x20000000

080039a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b088      	sub	sp, #32
 80039a8:	af02      	add	r7, sp, #8
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	2201      	movs	r2, #1
 80039b8:	2102      	movs	r1, #2
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f7ff ff6a 	bl	8003894 <SPI_WaitFlagStateUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d007      	beq.n	80039d6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ca:	f043 0220 	orr.w	r2, r3, #32
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e032      	b.n	8003a3c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80039d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003a44 <SPI_EndRxTxTransaction+0xa0>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a1b      	ldr	r2, [pc, #108]	@ (8003a48 <SPI_EndRxTxTransaction+0xa4>)
 80039dc:	fba2 2303 	umull	r2, r3, r2, r3
 80039e0:	0d5b      	lsrs	r3, r3, #21
 80039e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80039e6:	fb02 f303 	mul.w	r3, r2, r3
 80039ea:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039f4:	d112      	bne.n	8003a1c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2200      	movs	r2, #0
 80039fe:	2180      	movs	r1, #128	@ 0x80
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f7ff ff47 	bl	8003894 <SPI_WaitFlagStateUntilTimeout>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d016      	beq.n	8003a3a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a10:	f043 0220 	orr.w	r2, r3, #32
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e00f      	b.n	8003a3c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00a      	beq.n	8003a38 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	3b01      	subs	r3, #1
 8003a26:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a32:	2b80      	cmp	r3, #128	@ 0x80
 8003a34:	d0f2      	beq.n	8003a1c <SPI_EndRxTxTransaction+0x78>
 8003a36:	e000      	b.n	8003a3a <SPI_EndRxTxTransaction+0x96>
        break;
 8003a38:	bf00      	nop
  }

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	20000000 	.word	0x20000000
 8003a48:	165e9f81 	.word	0x165e9f81

08003a4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e042      	b.n	8003ae4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d106      	bne.n	8003a78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7fe f98a 	bl	8001d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2224      	movs	r2, #36	@ 0x24
 8003a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68da      	ldr	r2, [r3, #12]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 f973 	bl	8003d7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	691a      	ldr	r2, [r3, #16]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003aa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695a      	ldr	r2, [r3, #20]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ab4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ac4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b08a      	sub	sp, #40	@ 0x28
 8003af0:	af02      	add	r7, sp, #8
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	603b      	str	r3, [r7, #0]
 8003af8:	4613      	mov	r3, r2
 8003afa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b20      	cmp	r3, #32
 8003b0a:	d175      	bne.n	8003bf8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d002      	beq.n	8003b18 <HAL_UART_Transmit+0x2c>
 8003b12:	88fb      	ldrh	r3, [r7, #6]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e06e      	b.n	8003bfa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2221      	movs	r2, #33	@ 0x21
 8003b26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b2a:	f7fe fb17 	bl	800215c <HAL_GetTick>
 8003b2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	88fa      	ldrh	r2, [r7, #6]
 8003b34:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	88fa      	ldrh	r2, [r7, #6]
 8003b3a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b44:	d108      	bne.n	8003b58 <HAL_UART_Transmit+0x6c>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d104      	bne.n	8003b58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	61bb      	str	r3, [r7, #24]
 8003b56:	e003      	b.n	8003b60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b60:	e02e      	b.n	8003bc0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	2180      	movs	r1, #128	@ 0x80
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 f848 	bl	8003c02 <UART_WaitOnFlagUntilTimeout>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d005      	beq.n	8003b84 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e03a      	b.n	8003bfa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10b      	bne.n	8003ba2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	881b      	ldrh	r3, [r3, #0]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	3302      	adds	r3, #2
 8003b9e:	61bb      	str	r3, [r7, #24]
 8003ba0:	e007      	b.n	8003bb2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	781a      	ldrb	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1cb      	bne.n	8003b62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	2140      	movs	r1, #64	@ 0x40
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 f814 	bl	8003c02 <UART_WaitOnFlagUntilTimeout>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d005      	beq.n	8003bec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e006      	b.n	8003bfa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	e000      	b.n	8003bfa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003bf8:	2302      	movs	r3, #2
  }
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3720      	adds	r7, #32
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b086      	sub	sp, #24
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	603b      	str	r3, [r7, #0]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c12:	e03b      	b.n	8003c8c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c1a:	d037      	beq.n	8003c8c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c1c:	f7fe fa9e 	bl	800215c <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	6a3a      	ldr	r2, [r7, #32]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d302      	bcc.n	8003c32 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e03a      	b.n	8003cac <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d023      	beq.n	8003c8c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	2b80      	cmp	r3, #128	@ 0x80
 8003c48:	d020      	beq.n	8003c8c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	2b40      	cmp	r3, #64	@ 0x40
 8003c4e:	d01d      	beq.n	8003c8c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0308 	and.w	r3, r3, #8
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d116      	bne.n	8003c8c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003c5e:	2300      	movs	r3, #0
 8003c60:	617b      	str	r3, [r7, #20]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	617b      	str	r3, [r7, #20]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	617b      	str	r3, [r7, #20]
 8003c72:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 f81d 	bl	8003cb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2208      	movs	r2, #8
 8003c7e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e00f      	b.n	8003cac <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	4013      	ands	r3, r2
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	bf0c      	ite	eq
 8003c9c:	2301      	moveq	r3, #1
 8003c9e:	2300      	movne	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	79fb      	ldrb	r3, [r7, #7]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d0b4      	beq.n	8003c14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3718      	adds	r7, #24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b095      	sub	sp, #84	@ 0x54
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	330c      	adds	r3, #12
 8003cc2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cc6:	e853 3f00 	ldrex	r3, [r3]
 8003cca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	330c      	adds	r3, #12
 8003cda:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cdc:	643a      	str	r2, [r7, #64]	@ 0x40
 8003cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ce2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ce4:	e841 2300 	strex	r3, r2, [r1]
 8003ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1e5      	bne.n	8003cbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3314      	adds	r3, #20
 8003cf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	e853 3f00 	ldrex	r3, [r3]
 8003cfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	f023 0301 	bic.w	r3, r3, #1
 8003d06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	3314      	adds	r3, #20
 8003d0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d10:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d18:	e841 2300 	strex	r3, r2, [r1]
 8003d1c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1e5      	bne.n	8003cf0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d119      	bne.n	8003d60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	330c      	adds	r3, #12
 8003d32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	e853 3f00 	ldrex	r3, [r3]
 8003d3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f023 0310 	bic.w	r3, r3, #16
 8003d42:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	330c      	adds	r3, #12
 8003d4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d4c:	61ba      	str	r2, [r7, #24]
 8003d4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d50:	6979      	ldr	r1, [r7, #20]
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	e841 2300 	strex	r3, r2, [r1]
 8003d58:	613b      	str	r3, [r7, #16]
   return(result);
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1e5      	bne.n	8003d2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d6e:	bf00      	nop
 8003d70:	3754      	adds	r7, #84	@ 0x54
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
	...

08003d7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d80:	b0c0      	sub	sp, #256	@ 0x100
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d98:	68d9      	ldr	r1, [r3, #12]
 8003d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	ea40 0301 	orr.w	r3, r0, r1
 8003da4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	431a      	orrs	r2, r3
 8003db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003dd4:	f021 010c 	bic.w	r1, r1, #12
 8003dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003de2:	430b      	orrs	r3, r1
 8003de4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df6:	6999      	ldr	r1, [r3, #24]
 8003df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	ea40 0301 	orr.w	r3, r0, r1
 8003e02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	4b8f      	ldr	r3, [pc, #572]	@ (8004048 <UART_SetConfig+0x2cc>)
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d005      	beq.n	8003e1c <UART_SetConfig+0xa0>
 8003e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	4b8d      	ldr	r3, [pc, #564]	@ (800404c <UART_SetConfig+0x2d0>)
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d104      	bne.n	8003e26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e1c:	f7fe fd68 	bl	80028f0 <HAL_RCC_GetPCLK2Freq>
 8003e20:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003e24:	e003      	b.n	8003e2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e26:	f7fe fd4f 	bl	80028c8 <HAL_RCC_GetPCLK1Freq>
 8003e2a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e38:	f040 810c 	bne.w	8004054 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e40:	2200      	movs	r2, #0
 8003e42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e46:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e4e:	4622      	mov	r2, r4
 8003e50:	462b      	mov	r3, r5
 8003e52:	1891      	adds	r1, r2, r2
 8003e54:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e56:	415b      	adcs	r3, r3
 8003e58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e5e:	4621      	mov	r1, r4
 8003e60:	eb12 0801 	adds.w	r8, r2, r1
 8003e64:	4629      	mov	r1, r5
 8003e66:	eb43 0901 	adc.w	r9, r3, r1
 8003e6a:	f04f 0200 	mov.w	r2, #0
 8003e6e:	f04f 0300 	mov.w	r3, #0
 8003e72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e7e:	4690      	mov	r8, r2
 8003e80:	4699      	mov	r9, r3
 8003e82:	4623      	mov	r3, r4
 8003e84:	eb18 0303 	adds.w	r3, r8, r3
 8003e88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e8c:	462b      	mov	r3, r5
 8003e8e:	eb49 0303 	adc.w	r3, r9, r3
 8003e92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ea2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003ea6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003eaa:	460b      	mov	r3, r1
 8003eac:	18db      	adds	r3, r3, r3
 8003eae:	653b      	str	r3, [r7, #80]	@ 0x50
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	eb42 0303 	adc.w	r3, r2, r3
 8003eb6:	657b      	str	r3, [r7, #84]	@ 0x54
 8003eb8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003ebc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003ec0:	f7fc feba 	bl	8000c38 <__aeabi_uldivmod>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	4b61      	ldr	r3, [pc, #388]	@ (8004050 <UART_SetConfig+0x2d4>)
 8003eca:	fba3 2302 	umull	r2, r3, r3, r2
 8003ece:	095b      	lsrs	r3, r3, #5
 8003ed0:	011c      	lsls	r4, r3, #4
 8003ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003edc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ee0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ee4:	4642      	mov	r2, r8
 8003ee6:	464b      	mov	r3, r9
 8003ee8:	1891      	adds	r1, r2, r2
 8003eea:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003eec:	415b      	adcs	r3, r3
 8003eee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ef0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ef4:	4641      	mov	r1, r8
 8003ef6:	eb12 0a01 	adds.w	sl, r2, r1
 8003efa:	4649      	mov	r1, r9
 8003efc:	eb43 0b01 	adc.w	fp, r3, r1
 8003f00:	f04f 0200 	mov.w	r2, #0
 8003f04:	f04f 0300 	mov.w	r3, #0
 8003f08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f14:	4692      	mov	sl, r2
 8003f16:	469b      	mov	fp, r3
 8003f18:	4643      	mov	r3, r8
 8003f1a:	eb1a 0303 	adds.w	r3, sl, r3
 8003f1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f22:	464b      	mov	r3, r9
 8003f24:	eb4b 0303 	adc.w	r3, fp, r3
 8003f28:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f38:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f40:	460b      	mov	r3, r1
 8003f42:	18db      	adds	r3, r3, r3
 8003f44:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f46:	4613      	mov	r3, r2
 8003f48:	eb42 0303 	adc.w	r3, r2, r3
 8003f4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f56:	f7fc fe6f 	bl	8000c38 <__aeabi_uldivmod>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	4611      	mov	r1, r2
 8003f60:	4b3b      	ldr	r3, [pc, #236]	@ (8004050 <UART_SetConfig+0x2d4>)
 8003f62:	fba3 2301 	umull	r2, r3, r3, r1
 8003f66:	095b      	lsrs	r3, r3, #5
 8003f68:	2264      	movs	r2, #100	@ 0x64
 8003f6a:	fb02 f303 	mul.w	r3, r2, r3
 8003f6e:	1acb      	subs	r3, r1, r3
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003f76:	4b36      	ldr	r3, [pc, #216]	@ (8004050 <UART_SetConfig+0x2d4>)
 8003f78:	fba3 2302 	umull	r2, r3, r3, r2
 8003f7c:	095b      	lsrs	r3, r3, #5
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f84:	441c      	add	r4, r3
 8003f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f90:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f98:	4642      	mov	r2, r8
 8003f9a:	464b      	mov	r3, r9
 8003f9c:	1891      	adds	r1, r2, r2
 8003f9e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003fa0:	415b      	adcs	r3, r3
 8003fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fa4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003fa8:	4641      	mov	r1, r8
 8003faa:	1851      	adds	r1, r2, r1
 8003fac:	6339      	str	r1, [r7, #48]	@ 0x30
 8003fae:	4649      	mov	r1, r9
 8003fb0:	414b      	adcs	r3, r1
 8003fb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003fc0:	4659      	mov	r1, fp
 8003fc2:	00cb      	lsls	r3, r1, #3
 8003fc4:	4651      	mov	r1, sl
 8003fc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fca:	4651      	mov	r1, sl
 8003fcc:	00ca      	lsls	r2, r1, #3
 8003fce:	4610      	mov	r0, r2
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	4642      	mov	r2, r8
 8003fd6:	189b      	adds	r3, r3, r2
 8003fd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fdc:	464b      	mov	r3, r9
 8003fde:	460a      	mov	r2, r1
 8003fe0:	eb42 0303 	adc.w	r3, r2, r3
 8003fe4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ff4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003ff8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	18db      	adds	r3, r3, r3
 8004000:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004002:	4613      	mov	r3, r2
 8004004:	eb42 0303 	adc.w	r3, r2, r3
 8004008:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800400a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800400e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004012:	f7fc fe11 	bl	8000c38 <__aeabi_uldivmod>
 8004016:	4602      	mov	r2, r0
 8004018:	460b      	mov	r3, r1
 800401a:	4b0d      	ldr	r3, [pc, #52]	@ (8004050 <UART_SetConfig+0x2d4>)
 800401c:	fba3 1302 	umull	r1, r3, r3, r2
 8004020:	095b      	lsrs	r3, r3, #5
 8004022:	2164      	movs	r1, #100	@ 0x64
 8004024:	fb01 f303 	mul.w	r3, r1, r3
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	3332      	adds	r3, #50	@ 0x32
 800402e:	4a08      	ldr	r2, [pc, #32]	@ (8004050 <UART_SetConfig+0x2d4>)
 8004030:	fba2 2303 	umull	r2, r3, r2, r3
 8004034:	095b      	lsrs	r3, r3, #5
 8004036:	f003 0207 	and.w	r2, r3, #7
 800403a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4422      	add	r2, r4
 8004042:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004044:	e106      	b.n	8004254 <UART_SetConfig+0x4d8>
 8004046:	bf00      	nop
 8004048:	40011000 	.word	0x40011000
 800404c:	40011400 	.word	0x40011400
 8004050:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004054:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004058:	2200      	movs	r2, #0
 800405a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800405e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004062:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004066:	4642      	mov	r2, r8
 8004068:	464b      	mov	r3, r9
 800406a:	1891      	adds	r1, r2, r2
 800406c:	6239      	str	r1, [r7, #32]
 800406e:	415b      	adcs	r3, r3
 8004070:	627b      	str	r3, [r7, #36]	@ 0x24
 8004072:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004076:	4641      	mov	r1, r8
 8004078:	1854      	adds	r4, r2, r1
 800407a:	4649      	mov	r1, r9
 800407c:	eb43 0501 	adc.w	r5, r3, r1
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	f04f 0300 	mov.w	r3, #0
 8004088:	00eb      	lsls	r3, r5, #3
 800408a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800408e:	00e2      	lsls	r2, r4, #3
 8004090:	4614      	mov	r4, r2
 8004092:	461d      	mov	r5, r3
 8004094:	4643      	mov	r3, r8
 8004096:	18e3      	adds	r3, r4, r3
 8004098:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800409c:	464b      	mov	r3, r9
 800409e:	eb45 0303 	adc.w	r3, r5, r3
 80040a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80040b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80040b6:	f04f 0200 	mov.w	r2, #0
 80040ba:	f04f 0300 	mov.w	r3, #0
 80040be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80040c2:	4629      	mov	r1, r5
 80040c4:	008b      	lsls	r3, r1, #2
 80040c6:	4621      	mov	r1, r4
 80040c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040cc:	4621      	mov	r1, r4
 80040ce:	008a      	lsls	r2, r1, #2
 80040d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80040d4:	f7fc fdb0 	bl	8000c38 <__aeabi_uldivmod>
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	4b60      	ldr	r3, [pc, #384]	@ (8004260 <UART_SetConfig+0x4e4>)
 80040de:	fba3 2302 	umull	r2, r3, r3, r2
 80040e2:	095b      	lsrs	r3, r3, #5
 80040e4:	011c      	lsls	r4, r3, #4
 80040e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040ea:	2200      	movs	r2, #0
 80040ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80040f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80040f8:	4642      	mov	r2, r8
 80040fa:	464b      	mov	r3, r9
 80040fc:	1891      	adds	r1, r2, r2
 80040fe:	61b9      	str	r1, [r7, #24]
 8004100:	415b      	adcs	r3, r3
 8004102:	61fb      	str	r3, [r7, #28]
 8004104:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004108:	4641      	mov	r1, r8
 800410a:	1851      	adds	r1, r2, r1
 800410c:	6139      	str	r1, [r7, #16]
 800410e:	4649      	mov	r1, r9
 8004110:	414b      	adcs	r3, r1
 8004112:	617b      	str	r3, [r7, #20]
 8004114:	f04f 0200 	mov.w	r2, #0
 8004118:	f04f 0300 	mov.w	r3, #0
 800411c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004120:	4659      	mov	r1, fp
 8004122:	00cb      	lsls	r3, r1, #3
 8004124:	4651      	mov	r1, sl
 8004126:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800412a:	4651      	mov	r1, sl
 800412c:	00ca      	lsls	r2, r1, #3
 800412e:	4610      	mov	r0, r2
 8004130:	4619      	mov	r1, r3
 8004132:	4603      	mov	r3, r0
 8004134:	4642      	mov	r2, r8
 8004136:	189b      	adds	r3, r3, r2
 8004138:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800413c:	464b      	mov	r3, r9
 800413e:	460a      	mov	r2, r1
 8004140:	eb42 0303 	adc.w	r3, r2, r3
 8004144:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004152:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004154:	f04f 0200 	mov.w	r2, #0
 8004158:	f04f 0300 	mov.w	r3, #0
 800415c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004160:	4649      	mov	r1, r9
 8004162:	008b      	lsls	r3, r1, #2
 8004164:	4641      	mov	r1, r8
 8004166:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800416a:	4641      	mov	r1, r8
 800416c:	008a      	lsls	r2, r1, #2
 800416e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004172:	f7fc fd61 	bl	8000c38 <__aeabi_uldivmod>
 8004176:	4602      	mov	r2, r0
 8004178:	460b      	mov	r3, r1
 800417a:	4611      	mov	r1, r2
 800417c:	4b38      	ldr	r3, [pc, #224]	@ (8004260 <UART_SetConfig+0x4e4>)
 800417e:	fba3 2301 	umull	r2, r3, r3, r1
 8004182:	095b      	lsrs	r3, r3, #5
 8004184:	2264      	movs	r2, #100	@ 0x64
 8004186:	fb02 f303 	mul.w	r3, r2, r3
 800418a:	1acb      	subs	r3, r1, r3
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	3332      	adds	r3, #50	@ 0x32
 8004190:	4a33      	ldr	r2, [pc, #204]	@ (8004260 <UART_SetConfig+0x4e4>)
 8004192:	fba2 2303 	umull	r2, r3, r2, r3
 8004196:	095b      	lsrs	r3, r3, #5
 8004198:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800419c:	441c      	add	r4, r3
 800419e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041a2:	2200      	movs	r2, #0
 80041a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80041a6:	677a      	str	r2, [r7, #116]	@ 0x74
 80041a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80041ac:	4642      	mov	r2, r8
 80041ae:	464b      	mov	r3, r9
 80041b0:	1891      	adds	r1, r2, r2
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	415b      	adcs	r3, r3
 80041b6:	60fb      	str	r3, [r7, #12]
 80041b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041bc:	4641      	mov	r1, r8
 80041be:	1851      	adds	r1, r2, r1
 80041c0:	6039      	str	r1, [r7, #0]
 80041c2:	4649      	mov	r1, r9
 80041c4:	414b      	adcs	r3, r1
 80041c6:	607b      	str	r3, [r7, #4]
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	f04f 0300 	mov.w	r3, #0
 80041d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041d4:	4659      	mov	r1, fp
 80041d6:	00cb      	lsls	r3, r1, #3
 80041d8:	4651      	mov	r1, sl
 80041da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041de:	4651      	mov	r1, sl
 80041e0:	00ca      	lsls	r2, r1, #3
 80041e2:	4610      	mov	r0, r2
 80041e4:	4619      	mov	r1, r3
 80041e6:	4603      	mov	r3, r0
 80041e8:	4642      	mov	r2, r8
 80041ea:	189b      	adds	r3, r3, r2
 80041ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041ee:	464b      	mov	r3, r9
 80041f0:	460a      	mov	r2, r1
 80041f2:	eb42 0303 	adc.w	r3, r2, r3
 80041f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	663b      	str	r3, [r7, #96]	@ 0x60
 8004202:	667a      	str	r2, [r7, #100]	@ 0x64
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	f04f 0300 	mov.w	r3, #0
 800420c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004210:	4649      	mov	r1, r9
 8004212:	008b      	lsls	r3, r1, #2
 8004214:	4641      	mov	r1, r8
 8004216:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800421a:	4641      	mov	r1, r8
 800421c:	008a      	lsls	r2, r1, #2
 800421e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004222:	f7fc fd09 	bl	8000c38 <__aeabi_uldivmod>
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	4b0d      	ldr	r3, [pc, #52]	@ (8004260 <UART_SetConfig+0x4e4>)
 800422c:	fba3 1302 	umull	r1, r3, r3, r2
 8004230:	095b      	lsrs	r3, r3, #5
 8004232:	2164      	movs	r1, #100	@ 0x64
 8004234:	fb01 f303 	mul.w	r3, r1, r3
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	011b      	lsls	r3, r3, #4
 800423c:	3332      	adds	r3, #50	@ 0x32
 800423e:	4a08      	ldr	r2, [pc, #32]	@ (8004260 <UART_SetConfig+0x4e4>)
 8004240:	fba2 2303 	umull	r2, r3, r2, r3
 8004244:	095b      	lsrs	r3, r3, #5
 8004246:	f003 020f 	and.w	r2, r3, #15
 800424a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4422      	add	r2, r4
 8004252:	609a      	str	r2, [r3, #8]
}
 8004254:	bf00      	nop
 8004256:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800425a:	46bd      	mov	sp, r7
 800425c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004260:	51eb851f 	.word	0x51eb851f

08004264 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004268:	4904      	ldr	r1, [pc, #16]	@ (800427c <MX_FATFS_Init+0x18>)
 800426a:	4805      	ldr	r0, [pc, #20]	@ (8004280 <MX_FATFS_Init+0x1c>)
 800426c:	f002 ff06 	bl	800707c <FATFS_LinkDriver>
 8004270:	4603      	mov	r3, r0
 8004272:	461a      	mov	r2, r3
 8004274:	4b03      	ldr	r3, [pc, #12]	@ (8004284 <MX_FATFS_Init+0x20>)
 8004276:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004278:	bf00      	nop
 800427a:	bd80      	pop	{r7, pc}
 800427c:	20000250 	.word	0x20000250
 8004280:	2000000c 	.word	0x2000000c
 8004284:	2000024c 	.word	0x2000024c

08004288 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800428c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800428e:	4618      	mov	r0, r3
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	4603      	mov	r3, r0
 80042a0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINEStat = STA_NOINIT;
 80042a2:	79fb      	ldrb	r3, [r7, #7]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 f9d3 	bl	8004650 <USER_SPI_initialize>
 80042aa:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	4603      	mov	r3, r0
 80042bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 80042be:	79fb      	ldrb	r3, [r7, #7]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f000 fab1 	bl	8004828 <USER_SPI_status>
 80042c6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60b9      	str	r1, [r7, #8]
 80042d8:	607a      	str	r2, [r7, #4]
 80042da:	603b      	str	r3, [r7, #0]
 80042dc:	4603      	mov	r3, r0
 80042de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 80042e0:	7bf8      	ldrb	r0, [r7, #15]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	68b9      	ldr	r1, [r7, #8]
 80042e8:	f000 fab4 	bl	8004854 <USER_SPI_read>
 80042ec:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b084      	sub	sp, #16
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	603b      	str	r3, [r7, #0]
 8004302:	4603      	mov	r3, r0
 8004304:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8004306:	7bf8      	ldrb	r0, [r7, #15]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	68b9      	ldr	r1, [r7, #8]
 800430e:	f000 fb07 	bl	8004920 <USER_SPI_write>
 8004312:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	4603      	mov	r3, r0
 8004324:	603a      	str	r2, [r7, #0]
 8004326:	71fb      	strb	r3, [r7, #7]
 8004328:	460b      	mov	r3, r1
 800432a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 800432c:	79b9      	ldrb	r1, [r7, #6]
 800432e:	79fb      	ldrb	r3, [r7, #7]
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fb70 	bl	8004a18 <USER_SPI_ioctl>
 8004338:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
	...

08004344 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800434c:	f7fd ff06 	bl	800215c <HAL_GetTick>
 8004350:	4603      	mov	r3, r0
 8004352:	4a04      	ldr	r2, [pc, #16]	@ (8004364 <SPI_Timer_On+0x20>)
 8004354:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8004356:	4a04      	ldr	r2, [pc, #16]	@ (8004368 <SPI_Timer_On+0x24>)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6013      	str	r3, [r2, #0]
}
 800435c:	bf00      	nop
 800435e:	3708      	adds	r7, #8
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	20000258 	.word	0x20000258
 8004368:	2000025c 	.word	0x2000025c

0800436c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8004370:	f7fd fef4 	bl	800215c <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	4b06      	ldr	r3, [pc, #24]	@ (8004390 <SPI_Timer_Status+0x24>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	1ad2      	subs	r2, r2, r3
 800437c:	4b05      	ldr	r3, [pc, #20]	@ (8004394 <SPI_Timer_Status+0x28>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	429a      	cmp	r2, r3
 8004382:	bf34      	ite	cc
 8004384:	2301      	movcc	r3, #1
 8004386:	2300      	movcs	r3, #0
 8004388:	b2db      	uxtb	r3, r3
}
 800438a:	4618      	mov	r0, r3
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	20000258 	.word	0x20000258
 8004394:	2000025c 	.word	0x2000025c

08004398 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af02      	add	r7, sp, #8
 800439e:	4603      	mov	r3, r0
 80043a0:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80043a2:	f107 020f 	add.w	r2, r7, #15
 80043a6:	1df9      	adds	r1, r7, #7
 80043a8:	2332      	movs	r3, #50	@ 0x32
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	2301      	movs	r3, #1
 80043ae:	4804      	ldr	r0, [pc, #16]	@ (80043c0 <xchg_spi+0x28>)
 80043b0:	f7ff f8c7 	bl	8003542 <HAL_SPI_TransmitReceive>
    return rxDat;
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	200000a4 	.word	0x200000a4

080043c4 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80043c4:	b590      	push	{r4, r7, lr}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80043ce:	2300      	movs	r3, #0
 80043d0:	60fb      	str	r3, [r7, #12]
 80043d2:	e00a      	b.n	80043ea <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	18d4      	adds	r4, r2, r3
 80043da:	20ff      	movs	r0, #255	@ 0xff
 80043dc:	f7ff ffdc 	bl	8004398 <xchg_spi>
 80043e0:	4603      	mov	r3, r0
 80043e2:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	3301      	adds	r3, #1
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d3f0      	bcc.n	80043d4 <rcvr_spi_multi+0x10>
	}
}
 80043f2:	bf00      	nop
 80043f4:	bf00      	nop
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd90      	pop	{r4, r7, pc}

080043fc <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	b29a      	uxth	r2, r3
 800440a:	f04f 33ff 	mov.w	r3, #4294967295
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	4803      	ldr	r0, [pc, #12]	@ (8004420 <xmit_spi_multi+0x24>)
 8004412:	f7fe ff52 	bl	80032ba <HAL_SPI_Transmit>
}
 8004416:	bf00      	nop
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	200000a4 	.word	0x200000a4

08004424 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800442c:	f7fd fe96 	bl	800215c <HAL_GetTick>
 8004430:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8004436:	20ff      	movs	r0, #255	@ 0xff
 8004438:	f7ff ffae 	bl	8004398 <xchg_spi>
 800443c:	4603      	mov	r3, r0
 800443e:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8004440:	7bfb      	ldrb	r3, [r7, #15]
 8004442:	2bff      	cmp	r3, #255	@ 0xff
 8004444:	d007      	beq.n	8004456 <wait_ready+0x32>
 8004446:	f7fd fe89 	bl	800215c <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	429a      	cmp	r2, r3
 8004454:	d8ef      	bhi.n	8004436 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8004456:	7bfb      	ldrb	r3, [r7, #15]
 8004458:	2bff      	cmp	r3, #255	@ 0xff
 800445a:	bf0c      	ite	eq
 800445c:	2301      	moveq	r3, #1
 800445e:	2300      	movne	r3, #0
 8004460:	b2db      	uxtb	r3, r3
}
 8004462:	4618      	mov	r0, r3
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
	...

0800446c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8004470:	2201      	movs	r2, #1
 8004472:	2110      	movs	r1, #16
 8004474:	4803      	ldr	r0, [pc, #12]	@ (8004484 <despiselect+0x18>)
 8004476:	f7fe f91b 	bl	80026b0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800447a:	20ff      	movs	r0, #255	@ 0xff
 800447c:	f7ff ff8c 	bl	8004398 <xchg_spi>

}
 8004480:	bf00      	nop
 8004482:	bd80      	pop	{r7, pc}
 8004484:	40020000 	.word	0x40020000

08004488 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800448c:	2200      	movs	r2, #0
 800448e:	2110      	movs	r1, #16
 8004490:	4809      	ldr	r0, [pc, #36]	@ (80044b8 <spiselect+0x30>)
 8004492:	f7fe f90d 	bl	80026b0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8004496:	20ff      	movs	r0, #255	@ 0xff
 8004498:	f7ff ff7e 	bl	8004398 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800449c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80044a0:	f7ff ffc0 	bl	8004424 <wait_ready>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <spiselect+0x26>
 80044aa:	2301      	movs	r3, #1
 80044ac:	e002      	b.n	80044b4 <spiselect+0x2c>

	despiselect();
 80044ae:	f7ff ffdd 	bl	800446c <despiselect>
	return 0;	/* Timeout */
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	40020000 	.word	0x40020000

080044bc <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80044c6:	20c8      	movs	r0, #200	@ 0xc8
 80044c8:	f7ff ff3c 	bl	8004344 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80044cc:	20ff      	movs	r0, #255	@ 0xff
 80044ce:	f7ff ff63 	bl	8004398 <xchg_spi>
 80044d2:	4603      	mov	r3, r0
 80044d4:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80044d6:	7bfb      	ldrb	r3, [r7, #15]
 80044d8:	2bff      	cmp	r3, #255	@ 0xff
 80044da:	d104      	bne.n	80044e6 <rcvr_datablock+0x2a>
 80044dc:	f7ff ff46 	bl	800436c <SPI_Timer_Status>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f2      	bne.n	80044cc <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80044e6:	7bfb      	ldrb	r3, [r7, #15]
 80044e8:	2bfe      	cmp	r3, #254	@ 0xfe
 80044ea:	d001      	beq.n	80044f0 <rcvr_datablock+0x34>
 80044ec:	2300      	movs	r3, #0
 80044ee:	e00a      	b.n	8004506 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80044f0:	6839      	ldr	r1, [r7, #0]
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7ff ff66 	bl	80043c4 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80044f8:	20ff      	movs	r0, #255	@ 0xff
 80044fa:	f7ff ff4d 	bl	8004398 <xchg_spi>
 80044fe:	20ff      	movs	r0, #255	@ 0xff
 8004500:	f7ff ff4a 	bl	8004398 <xchg_spi>

	return 1;						/* Function succeeded */
 8004504:	2301      	movs	r3, #1
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b084      	sub	sp, #16
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
 8004516:	460b      	mov	r3, r1
 8004518:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800451a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800451e:	f7ff ff81 	bl	8004424 <wait_ready>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <xmit_datablock+0x1e>
 8004528:	2300      	movs	r3, #0
 800452a:	e01e      	b.n	800456a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800452c:	78fb      	ldrb	r3, [r7, #3]
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff ff32 	bl	8004398 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8004534:	78fb      	ldrb	r3, [r7, #3]
 8004536:	2bfd      	cmp	r3, #253	@ 0xfd
 8004538:	d016      	beq.n	8004568 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800453a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7ff ff5c 	bl	80043fc <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8004544:	20ff      	movs	r0, #255	@ 0xff
 8004546:	f7ff ff27 	bl	8004398 <xchg_spi>
 800454a:	20ff      	movs	r0, #255	@ 0xff
 800454c:	f7ff ff24 	bl	8004398 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8004550:	20ff      	movs	r0, #255	@ 0xff
 8004552:	f7ff ff21 	bl	8004398 <xchg_spi>
 8004556:	4603      	mov	r3, r0
 8004558:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800455a:	7bfb      	ldrb	r3, [r7, #15]
 800455c:	f003 031f 	and.w	r3, r3, #31
 8004560:	2b05      	cmp	r3, #5
 8004562:	d001      	beq.n	8004568 <xmit_datablock+0x5a>
 8004564:	2300      	movs	r3, #0
 8004566:	e000      	b.n	800456a <xmit_datablock+0x5c>
	}
	return 1;
 8004568:	2301      	movs	r3, #1
}
 800456a:	4618      	mov	r0, r3
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b084      	sub	sp, #16
 8004576:	af00      	add	r7, sp, #0
 8004578:	4603      	mov	r3, r0
 800457a:	6039      	str	r1, [r7, #0]
 800457c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800457e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004582:	2b00      	cmp	r3, #0
 8004584:	da0e      	bge.n	80045a4 <send_cmd+0x32>
		cmd &= 0x7F;
 8004586:	79fb      	ldrb	r3, [r7, #7]
 8004588:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800458c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800458e:	2100      	movs	r1, #0
 8004590:	2037      	movs	r0, #55	@ 0x37
 8004592:	f7ff ffee 	bl	8004572 <send_cmd>
 8004596:	4603      	mov	r3, r0
 8004598:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800459a:	7bbb      	ldrb	r3, [r7, #14]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d901      	bls.n	80045a4 <send_cmd+0x32>
 80045a0:	7bbb      	ldrb	r3, [r7, #14]
 80045a2:	e051      	b.n	8004648 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80045a4:	79fb      	ldrb	r3, [r7, #7]
 80045a6:	2b0c      	cmp	r3, #12
 80045a8:	d008      	beq.n	80045bc <send_cmd+0x4a>
		despiselect();
 80045aa:	f7ff ff5f 	bl	800446c <despiselect>
		if (!spiselect()) return 0xFF;
 80045ae:	f7ff ff6b 	bl	8004488 <spiselect>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <send_cmd+0x4a>
 80045b8:	23ff      	movs	r3, #255	@ 0xff
 80045ba:	e045      	b.n	8004648 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80045bc:	79fb      	ldrb	r3, [r7, #7]
 80045be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff fee7 	bl	8004398 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	0e1b      	lsrs	r3, r3, #24
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7ff fee1 	bl	8004398 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	0c1b      	lsrs	r3, r3, #16
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	4618      	mov	r0, r3
 80045de:	f7ff fedb 	bl	8004398 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	0a1b      	lsrs	r3, r3, #8
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff fed5 	bl	8004398 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff fed0 	bl	8004398 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80045f8:	2301      	movs	r3, #1
 80045fa:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80045fc:	79fb      	ldrb	r3, [r7, #7]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <send_cmd+0x94>
 8004602:	2395      	movs	r3, #149	@ 0x95
 8004604:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8004606:	79fb      	ldrb	r3, [r7, #7]
 8004608:	2b08      	cmp	r3, #8
 800460a:	d101      	bne.n	8004610 <send_cmd+0x9e>
 800460c:	2387      	movs	r3, #135	@ 0x87
 800460e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8004610:	7bfb      	ldrb	r3, [r7, #15]
 8004612:	4618      	mov	r0, r3
 8004614:	f7ff fec0 	bl	8004398 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8004618:	79fb      	ldrb	r3, [r7, #7]
 800461a:	2b0c      	cmp	r3, #12
 800461c:	d102      	bne.n	8004624 <send_cmd+0xb2>
 800461e:	20ff      	movs	r0, #255	@ 0xff
 8004620:	f7ff feba 	bl	8004398 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8004624:	230a      	movs	r3, #10
 8004626:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8004628:	20ff      	movs	r0, #255	@ 0xff
 800462a:	f7ff feb5 	bl	8004398 <xchg_spi>
 800462e:	4603      	mov	r3, r0
 8004630:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8004632:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004636:	2b00      	cmp	r3, #0
 8004638:	da05      	bge.n	8004646 <send_cmd+0xd4>
 800463a:	7bfb      	ldrb	r3, [r7, #15]
 800463c:	3b01      	subs	r3, #1
 800463e:	73fb      	strb	r3, [r7, #15]
 8004640:	7bfb      	ldrb	r3, [r7, #15]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1f0      	bne.n	8004628 <send_cmd+0xb6>

	return res;							/* Return received response */
 8004646:	7bbb      	ldrb	r3, [r7, #14]
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004650:	b590      	push	{r4, r7, lr}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	4603      	mov	r3, r0
 8004658:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800465a:	79fb      	ldrb	r3, [r7, #7]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <USER_SPI_initialize+0x14>
 8004660:	2301      	movs	r3, #1
 8004662:	e0d6      	b.n	8004812 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8004664:	4b6d      	ldr	r3, [pc, #436]	@ (800481c <USER_SPI_initialize+0x1cc>)
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	b2db      	uxtb	r3, r3
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <USER_SPI_initialize+0x2a>
 8004672:	4b6a      	ldr	r3, [pc, #424]	@ (800481c <USER_SPI_initialize+0x1cc>)
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	b2db      	uxtb	r3, r3
 8004678:	e0cb      	b.n	8004812 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800467a:	4b69      	ldr	r3, [pc, #420]	@ (8004820 <USER_SPI_initialize+0x1d0>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8004684:	4b66      	ldr	r3, [pc, #408]	@ (8004820 <USER_SPI_initialize+0x1d0>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800468c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800468e:	230a      	movs	r3, #10
 8004690:	73fb      	strb	r3, [r7, #15]
 8004692:	e005      	b.n	80046a0 <USER_SPI_initialize+0x50>
 8004694:	20ff      	movs	r0, #255	@ 0xff
 8004696:	f7ff fe7f 	bl	8004398 <xchg_spi>
 800469a:	7bfb      	ldrb	r3, [r7, #15]
 800469c:	3b01      	subs	r3, #1
 800469e:	73fb      	strb	r3, [r7, #15]
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1f6      	bne.n	8004694 <USER_SPI_initialize+0x44>

	ty = 0;
 80046a6:	2300      	movs	r3, #0
 80046a8:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80046aa:	2100      	movs	r1, #0
 80046ac:	2000      	movs	r0, #0
 80046ae:	f7ff ff60 	bl	8004572 <send_cmd>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	f040 808b 	bne.w	80047d0 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80046ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80046be:	f7ff fe41 	bl	8004344 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80046c2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80046c6:	2008      	movs	r0, #8
 80046c8:	f7ff ff53 	bl	8004572 <send_cmd>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d151      	bne.n	8004776 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80046d2:	2300      	movs	r3, #0
 80046d4:	73fb      	strb	r3, [r7, #15]
 80046d6:	e00d      	b.n	80046f4 <USER_SPI_initialize+0xa4>
 80046d8:	7bfc      	ldrb	r4, [r7, #15]
 80046da:	20ff      	movs	r0, #255	@ 0xff
 80046dc:	f7ff fe5c 	bl	8004398 <xchg_spi>
 80046e0:	4603      	mov	r3, r0
 80046e2:	461a      	mov	r2, r3
 80046e4:	f104 0310 	add.w	r3, r4, #16
 80046e8:	443b      	add	r3, r7
 80046ea:	f803 2c08 	strb.w	r2, [r3, #-8]
 80046ee:	7bfb      	ldrb	r3, [r7, #15]
 80046f0:	3301      	adds	r3, #1
 80046f2:	73fb      	strb	r3, [r7, #15]
 80046f4:	7bfb      	ldrb	r3, [r7, #15]
 80046f6:	2b03      	cmp	r3, #3
 80046f8:	d9ee      	bls.n	80046d8 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80046fa:	7abb      	ldrb	r3, [r7, #10]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d167      	bne.n	80047d0 <USER_SPI_initialize+0x180>
 8004700:	7afb      	ldrb	r3, [r7, #11]
 8004702:	2baa      	cmp	r3, #170	@ 0xaa
 8004704:	d164      	bne.n	80047d0 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8004706:	bf00      	nop
 8004708:	f7ff fe30 	bl	800436c <SPI_Timer_Status>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d007      	beq.n	8004722 <USER_SPI_initialize+0xd2>
 8004712:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004716:	20a9      	movs	r0, #169	@ 0xa9
 8004718:	f7ff ff2b 	bl	8004572 <send_cmd>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f2      	bne.n	8004708 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8004722:	f7ff fe23 	bl	800436c <SPI_Timer_Status>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d051      	beq.n	80047d0 <USER_SPI_initialize+0x180>
 800472c:	2100      	movs	r1, #0
 800472e:	203a      	movs	r0, #58	@ 0x3a
 8004730:	f7ff ff1f 	bl	8004572 <send_cmd>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d14a      	bne.n	80047d0 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800473a:	2300      	movs	r3, #0
 800473c:	73fb      	strb	r3, [r7, #15]
 800473e:	e00d      	b.n	800475c <USER_SPI_initialize+0x10c>
 8004740:	7bfc      	ldrb	r4, [r7, #15]
 8004742:	20ff      	movs	r0, #255	@ 0xff
 8004744:	f7ff fe28 	bl	8004398 <xchg_spi>
 8004748:	4603      	mov	r3, r0
 800474a:	461a      	mov	r2, r3
 800474c:	f104 0310 	add.w	r3, r4, #16
 8004750:	443b      	add	r3, r7
 8004752:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004756:	7bfb      	ldrb	r3, [r7, #15]
 8004758:	3301      	adds	r3, #1
 800475a:	73fb      	strb	r3, [r7, #15]
 800475c:	7bfb      	ldrb	r3, [r7, #15]
 800475e:	2b03      	cmp	r3, #3
 8004760:	d9ee      	bls.n	8004740 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8004762:	7a3b      	ldrb	r3, [r7, #8]
 8004764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <USER_SPI_initialize+0x120>
 800476c:	230c      	movs	r3, #12
 800476e:	e000      	b.n	8004772 <USER_SPI_initialize+0x122>
 8004770:	2304      	movs	r3, #4
 8004772:	737b      	strb	r3, [r7, #13]
 8004774:	e02c      	b.n	80047d0 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8004776:	2100      	movs	r1, #0
 8004778:	20a9      	movs	r0, #169	@ 0xa9
 800477a:	f7ff fefa 	bl	8004572 <send_cmd>
 800477e:	4603      	mov	r3, r0
 8004780:	2b01      	cmp	r3, #1
 8004782:	d804      	bhi.n	800478e <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8004784:	2302      	movs	r3, #2
 8004786:	737b      	strb	r3, [r7, #13]
 8004788:	23a9      	movs	r3, #169	@ 0xa9
 800478a:	73bb      	strb	r3, [r7, #14]
 800478c:	e003      	b.n	8004796 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800478e:	2301      	movs	r3, #1
 8004790:	737b      	strb	r3, [r7, #13]
 8004792:	2301      	movs	r3, #1
 8004794:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8004796:	bf00      	nop
 8004798:	f7ff fde8 	bl	800436c <SPI_Timer_Status>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d007      	beq.n	80047b2 <USER_SPI_initialize+0x162>
 80047a2:	7bbb      	ldrb	r3, [r7, #14]
 80047a4:	2100      	movs	r1, #0
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7ff fee3 	bl	8004572 <send_cmd>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1f2      	bne.n	8004798 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80047b2:	f7ff fddb 	bl	800436c <SPI_Timer_Status>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d007      	beq.n	80047cc <USER_SPI_initialize+0x17c>
 80047bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80047c0:	2010      	movs	r0, #16
 80047c2:	f7ff fed6 	bl	8004572 <send_cmd>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <USER_SPI_initialize+0x180>
				ty = 0;
 80047cc:	2300      	movs	r3, #0
 80047ce:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80047d0:	4a14      	ldr	r2, [pc, #80]	@ (8004824 <USER_SPI_initialize+0x1d4>)
 80047d2:	7b7b      	ldrb	r3, [r7, #13]
 80047d4:	7013      	strb	r3, [r2, #0]
	despiselect();
 80047d6:	f7ff fe49 	bl	800446c <despiselect>

	if (ty) {			/* OK */
 80047da:	7b7b      	ldrb	r3, [r7, #13]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d012      	beq.n	8004806 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80047e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004820 <USER_SPI_initialize+0x1d0>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80047ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004820 <USER_SPI_initialize+0x1d0>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0210 	orr.w	r2, r2, #16
 80047f2:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80047f4:	4b09      	ldr	r3, [pc, #36]	@ (800481c <USER_SPI_initialize+0x1cc>)
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	f023 0301 	bic.w	r3, r3, #1
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	4b06      	ldr	r3, [pc, #24]	@ (800481c <USER_SPI_initialize+0x1cc>)
 8004802:	701a      	strb	r2, [r3, #0]
 8004804:	e002      	b.n	800480c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8004806:	4b05      	ldr	r3, [pc, #20]	@ (800481c <USER_SPI_initialize+0x1cc>)
 8004808:	2201      	movs	r2, #1
 800480a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800480c:	4b03      	ldr	r3, [pc, #12]	@ (800481c <USER_SPI_initialize+0x1cc>)
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	b2db      	uxtb	r3, r3
}
 8004812:	4618      	mov	r0, r3
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	bd90      	pop	{r4, r7, pc}
 800481a:	bf00      	nop
 800481c:	20000020 	.word	0x20000020
 8004820:	200000a4 	.word	0x200000a4
 8004824:	20000254 	.word	0x20000254

08004828 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	4603      	mov	r3, r0
 8004830:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8004832:	79fb      	ldrb	r3, [r7, #7]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <USER_SPI_status+0x14>
 8004838:	2301      	movs	r3, #1
 800483a:	e002      	b.n	8004842 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800483c:	4b04      	ldr	r3, [pc, #16]	@ (8004850 <USER_SPI_status+0x28>)
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	b2db      	uxtb	r3, r3
}
 8004842:	4618      	mov	r0, r3
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	20000020 	.word	0x20000020

08004854 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	60b9      	str	r1, [r7, #8]
 800485c:	607a      	str	r2, [r7, #4]
 800485e:	603b      	str	r3, [r7, #0]
 8004860:	4603      	mov	r3, r0
 8004862:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004864:	7bfb      	ldrb	r3, [r7, #15]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d102      	bne.n	8004870 <USER_SPI_read+0x1c>
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <USER_SPI_read+0x20>
 8004870:	2304      	movs	r3, #4
 8004872:	e04d      	b.n	8004910 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004874:	4b28      	ldr	r3, [pc, #160]	@ (8004918 <USER_SPI_read+0xc4>)
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	b2db      	uxtb	r3, r3
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <USER_SPI_read+0x32>
 8004882:	2303      	movs	r3, #3
 8004884:	e044      	b.n	8004910 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8004886:	4b25      	ldr	r3, [pc, #148]	@ (800491c <USER_SPI_read+0xc8>)
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b00      	cmp	r3, #0
 8004890:	d102      	bne.n	8004898 <USER_SPI_read+0x44>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	025b      	lsls	r3, r3, #9
 8004896:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d111      	bne.n	80048c2 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	2011      	movs	r0, #17
 80048a2:	f7ff fe66 	bl	8004572 <send_cmd>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d129      	bne.n	8004900 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80048ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80048b0:	68b8      	ldr	r0, [r7, #8]
 80048b2:	f7ff fe03 	bl	80044bc <rcvr_datablock>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d021      	beq.n	8004900 <USER_SPI_read+0xac>
			count = 0;
 80048bc:	2300      	movs	r3, #0
 80048be:	603b      	str	r3, [r7, #0]
 80048c0:	e01e      	b.n	8004900 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80048c2:	6879      	ldr	r1, [r7, #4]
 80048c4:	2012      	movs	r0, #18
 80048c6:	f7ff fe54 	bl	8004572 <send_cmd>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d117      	bne.n	8004900 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80048d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80048d4:	68b8      	ldr	r0, [r7, #8]
 80048d6:	f7ff fdf1 	bl	80044bc <rcvr_datablock>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00a      	beq.n	80048f6 <USER_SPI_read+0xa2>
				buff += 512;
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80048e6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	3b01      	subs	r3, #1
 80048ec:	603b      	str	r3, [r7, #0]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1ed      	bne.n	80048d0 <USER_SPI_read+0x7c>
 80048f4:	e000      	b.n	80048f8 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80048f6:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80048f8:	2100      	movs	r1, #0
 80048fa:	200c      	movs	r0, #12
 80048fc:	f7ff fe39 	bl	8004572 <send_cmd>
		}
	}
	despiselect();
 8004900:	f7ff fdb4 	bl	800446c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	bf14      	ite	ne
 800490a:	2301      	movne	r3, #1
 800490c:	2300      	moveq	r3, #0
 800490e:	b2db      	uxtb	r3, r3
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	20000020 	.word	0x20000020
 800491c:	20000254 	.word	0x20000254

08004920 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	60b9      	str	r1, [r7, #8]
 8004928:	607a      	str	r2, [r7, #4]
 800492a:	603b      	str	r3, [r7, #0]
 800492c:	4603      	mov	r3, r0
 800492e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004930:	7bfb      	ldrb	r3, [r7, #15]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d102      	bne.n	800493c <USER_SPI_write+0x1c>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d101      	bne.n	8004940 <USER_SPI_write+0x20>
 800493c:	2304      	movs	r3, #4
 800493e:	e063      	b.n	8004a08 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8004940:	4b33      	ldr	r3, [pc, #204]	@ (8004a10 <USER_SPI_write+0xf0>)
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	b2db      	uxtb	r3, r3
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <USER_SPI_write+0x32>
 800494e:	2303      	movs	r3, #3
 8004950:	e05a      	b.n	8004a08 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8004952:	4b2f      	ldr	r3, [pc, #188]	@ (8004a10 <USER_SPI_write+0xf0>)
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	b2db      	uxtb	r3, r3
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <USER_SPI_write+0x44>
 8004960:	2302      	movs	r3, #2
 8004962:	e051      	b.n	8004a08 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8004964:	4b2b      	ldr	r3, [pc, #172]	@ (8004a14 <USER_SPI_write+0xf4>)
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	f003 0308 	and.w	r3, r3, #8
 800496c:	2b00      	cmp	r3, #0
 800496e:	d102      	bne.n	8004976 <USER_SPI_write+0x56>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	025b      	lsls	r3, r3, #9
 8004974:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d110      	bne.n	800499e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800497c:	6879      	ldr	r1, [r7, #4]
 800497e:	2018      	movs	r0, #24
 8004980:	f7ff fdf7 	bl	8004572 <send_cmd>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d136      	bne.n	80049f8 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800498a:	21fe      	movs	r1, #254	@ 0xfe
 800498c:	68b8      	ldr	r0, [r7, #8]
 800498e:	f7ff fdbe 	bl	800450e <xmit_datablock>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d02f      	beq.n	80049f8 <USER_SPI_write+0xd8>
			count = 0;
 8004998:	2300      	movs	r3, #0
 800499a:	603b      	str	r3, [r7, #0]
 800499c:	e02c      	b.n	80049f8 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800499e:	4b1d      	ldr	r3, [pc, #116]	@ (8004a14 <USER_SPI_write+0xf4>)
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	f003 0306 	and.w	r3, r3, #6
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <USER_SPI_write+0x92>
 80049aa:	6839      	ldr	r1, [r7, #0]
 80049ac:	2097      	movs	r0, #151	@ 0x97
 80049ae:	f7ff fde0 	bl	8004572 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80049b2:	6879      	ldr	r1, [r7, #4]
 80049b4:	2019      	movs	r0, #25
 80049b6:	f7ff fddc 	bl	8004572 <send_cmd>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d11b      	bne.n	80049f8 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80049c0:	21fc      	movs	r1, #252	@ 0xfc
 80049c2:	68b8      	ldr	r0, [r7, #8]
 80049c4:	f7ff fda3 	bl	800450e <xmit_datablock>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <USER_SPI_write+0xc4>
				buff += 512;
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80049d4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	3b01      	subs	r3, #1
 80049da:	603b      	str	r3, [r7, #0]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1ee      	bne.n	80049c0 <USER_SPI_write+0xa0>
 80049e2:	e000      	b.n	80049e6 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80049e4:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80049e6:	21fd      	movs	r1, #253	@ 0xfd
 80049e8:	2000      	movs	r0, #0
 80049ea:	f7ff fd90 	bl	800450e <xmit_datablock>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <USER_SPI_write+0xd8>
 80049f4:	2301      	movs	r3, #1
 80049f6:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80049f8:	f7ff fd38 	bl	800446c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	bf14      	ite	ne
 8004a02:	2301      	movne	r3, #1
 8004a04:	2300      	moveq	r3, #0
 8004a06:	b2db      	uxtb	r3, r3
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	20000020 	.word	0x20000020
 8004a14:	20000254 	.word	0x20000254

08004a18 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08c      	sub	sp, #48	@ 0x30
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	4603      	mov	r3, r0
 8004a20:	603a      	str	r2, [r7, #0]
 8004a22:	71fb      	strb	r3, [r7, #7]
 8004a24:	460b      	mov	r3, r1
 8004a26:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8004a28:	79fb      	ldrb	r3, [r7, #7]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <USER_SPI_ioctl+0x1a>
 8004a2e:	2304      	movs	r3, #4
 8004a30:	e15a      	b.n	8004ce8 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004a32:	4baf      	ldr	r3, [pc, #700]	@ (8004cf0 <USER_SPI_ioctl+0x2d8>)
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <USER_SPI_ioctl+0x2c>
 8004a40:	2303      	movs	r3, #3
 8004a42:	e151      	b.n	8004ce8 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8004a4a:	79bb      	ldrb	r3, [r7, #6]
 8004a4c:	2b04      	cmp	r3, #4
 8004a4e:	f200 8136 	bhi.w	8004cbe <USER_SPI_ioctl+0x2a6>
 8004a52:	a201      	add	r2, pc, #4	@ (adr r2, 8004a58 <USER_SPI_ioctl+0x40>)
 8004a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a58:	08004a6d 	.word	0x08004a6d
 8004a5c:	08004a81 	.word	0x08004a81
 8004a60:	08004cbf 	.word	0x08004cbf
 8004a64:	08004b2d 	.word	0x08004b2d
 8004a68:	08004c23 	.word	0x08004c23
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8004a6c:	f7ff fd0c 	bl	8004488 <spiselect>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 8127 	beq.w	8004cc6 <USER_SPI_ioctl+0x2ae>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8004a7e:	e122      	b.n	8004cc6 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8004a80:	2100      	movs	r1, #0
 8004a82:	2009      	movs	r0, #9
 8004a84:	f7ff fd75 	bl	8004572 <send_cmd>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f040 811d 	bne.w	8004cca <USER_SPI_ioctl+0x2b2>
 8004a90:	f107 030c 	add.w	r3, r7, #12
 8004a94:	2110      	movs	r1, #16
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7ff fd10 	bl	80044bc <rcvr_datablock>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 8113 	beq.w	8004cca <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8004aa4:	7b3b      	ldrb	r3, [r7, #12]
 8004aa6:	099b      	lsrs	r3, r3, #6
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d111      	bne.n	8004ad2 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8004aae:	7d7b      	ldrb	r3, [r7, #21]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	7d3b      	ldrb	r3, [r7, #20]
 8004ab4:	021b      	lsls	r3, r3, #8
 8004ab6:	4413      	add	r3, r2
 8004ab8:	461a      	mov	r2, r3
 8004aba:	7cfb      	ldrb	r3, [r7, #19]
 8004abc:	041b      	lsls	r3, r3, #16
 8004abe:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8004ac2:	4413      	add	r3, r2
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	029a      	lsls	r2, r3, #10
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	601a      	str	r2, [r3, #0]
 8004ad0:	e028      	b.n	8004b24 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004ad2:	7c7b      	ldrb	r3, [r7, #17]
 8004ad4:	f003 030f 	and.w	r3, r3, #15
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	7dbb      	ldrb	r3, [r7, #22]
 8004adc:	09db      	lsrs	r3, r3, #7
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	4413      	add	r3, r2
 8004ae2:	b2da      	uxtb	r2, r3
 8004ae4:	7d7b      	ldrb	r3, [r7, #21]
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	f003 0306 	and.w	r3, r3, #6
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	4413      	add	r3, r2
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	3302      	adds	r3, #2
 8004af6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8004afa:	7d3b      	ldrb	r3, [r7, #20]
 8004afc:	099b      	lsrs	r3, r3, #6
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	461a      	mov	r2, r3
 8004b02:	7cfb      	ldrb	r3, [r7, #19]
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	441a      	add	r2, r3
 8004b08:	7cbb      	ldrb	r3, [r7, #18]
 8004b0a:	029b      	lsls	r3, r3, #10
 8004b0c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004b10:	4413      	add	r3, r2
 8004b12:	3301      	adds	r3, #1
 8004b14:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8004b16:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004b1a:	3b09      	subs	r3, #9
 8004b1c:	69fa      	ldr	r2, [r7, #28]
 8004b1e:	409a      	lsls	r2, r3
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8004b24:	2300      	movs	r3, #0
 8004b26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8004b2a:	e0ce      	b.n	8004cca <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8004b2c:	4b71      	ldr	r3, [pc, #452]	@ (8004cf4 <USER_SPI_ioctl+0x2dc>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	f003 0304 	and.w	r3, r3, #4
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d031      	beq.n	8004b9c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8004b38:	2100      	movs	r1, #0
 8004b3a:	208d      	movs	r0, #141	@ 0x8d
 8004b3c:	f7ff fd19 	bl	8004572 <send_cmd>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f040 80c3 	bne.w	8004cce <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8004b48:	20ff      	movs	r0, #255	@ 0xff
 8004b4a:	f7ff fc25 	bl	8004398 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8004b4e:	f107 030c 	add.w	r3, r7, #12
 8004b52:	2110      	movs	r1, #16
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7ff fcb1 	bl	80044bc <rcvr_datablock>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 80b6 	beq.w	8004cce <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8004b62:	2330      	movs	r3, #48	@ 0x30
 8004b64:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8004b68:	e007      	b.n	8004b7a <USER_SPI_ioctl+0x162>
 8004b6a:	20ff      	movs	r0, #255	@ 0xff
 8004b6c:	f7ff fc14 	bl	8004398 <xchg_spi>
 8004b70:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004b74:	3b01      	subs	r3, #1
 8004b76:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8004b7a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1f3      	bne.n	8004b6a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8004b82:	7dbb      	ldrb	r3, [r7, #22]
 8004b84:	091b      	lsrs	r3, r3, #4
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	461a      	mov	r2, r3
 8004b8a:	2310      	movs	r3, #16
 8004b8c:	fa03 f202 	lsl.w	r2, r3, r2
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8004b94:	2300      	movs	r3, #0
 8004b96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8004b9a:	e098      	b.n	8004cce <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	2009      	movs	r0, #9
 8004ba0:	f7ff fce7 	bl	8004572 <send_cmd>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f040 8091 	bne.w	8004cce <USER_SPI_ioctl+0x2b6>
 8004bac:	f107 030c 	add.w	r3, r7, #12
 8004bb0:	2110      	movs	r1, #16
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7ff fc82 	bl	80044bc <rcvr_datablock>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f000 8087 	beq.w	8004cce <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8004bc0:	4b4c      	ldr	r3, [pc, #304]	@ (8004cf4 <USER_SPI_ioctl+0x2dc>)
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d012      	beq.n	8004bf2 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8004bcc:	7dbb      	ldrb	r3, [r7, #22]
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8004bd4:	7dfa      	ldrb	r2, [r7, #23]
 8004bd6:	09d2      	lsrs	r2, r2, #7
 8004bd8:	b2d2      	uxtb	r2, r2
 8004bda:	4413      	add	r3, r2
 8004bdc:	1c5a      	adds	r2, r3, #1
 8004bde:	7e7b      	ldrb	r3, [r7, #25]
 8004be0:	099b      	lsrs	r3, r3, #6
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	3b01      	subs	r3, #1
 8004be6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bea:	461a      	mov	r2, r3
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	e013      	b.n	8004c1a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8004bf2:	7dbb      	ldrb	r3, [r7, #22]
 8004bf4:	109b      	asrs	r3, r3, #2
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	f003 031f 	and.w	r3, r3, #31
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	7dfa      	ldrb	r2, [r7, #23]
 8004c00:	00d2      	lsls	r2, r2, #3
 8004c02:	f002 0218 	and.w	r2, r2, #24
 8004c06:	7df9      	ldrb	r1, [r7, #23]
 8004c08:	0949      	lsrs	r1, r1, #5
 8004c0a:	b2c9      	uxtb	r1, r1
 8004c0c:	440a      	add	r2, r1
 8004c0e:	3201      	adds	r2, #1
 8004c10:	fb02 f303 	mul.w	r3, r2, r3
 8004c14:	461a      	mov	r2, r3
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8004c20:	e055      	b.n	8004cce <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004c22:	4b34      	ldr	r3, [pc, #208]	@ (8004cf4 <USER_SPI_ioctl+0x2dc>)
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	f003 0306 	and.w	r3, r3, #6
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d051      	beq.n	8004cd2 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004c2e:	f107 020c 	add.w	r2, r7, #12
 8004c32:	79fb      	ldrb	r3, [r7, #7]
 8004c34:	210b      	movs	r1, #11
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7ff feee 	bl	8004a18 <USER_SPI_ioctl>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d149      	bne.n	8004cd6 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004c42:	7b3b      	ldrb	r3, [r7, #12]
 8004c44:	099b      	lsrs	r3, r3, #6
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d104      	bne.n	8004c56 <USER_SPI_ioctl+0x23e>
 8004c4c:	7dbb      	ldrb	r3, [r7, #22]
 8004c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d041      	beq.n	8004cda <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	623b      	str	r3, [r7, #32]
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8004c66:	4b23      	ldr	r3, [pc, #140]	@ (8004cf4 <USER_SPI_ioctl+0x2dc>)
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	f003 0308 	and.w	r3, r3, #8
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d105      	bne.n	8004c7e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8004c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c74:	025b      	lsls	r3, r3, #9
 8004c76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7a:	025b      	lsls	r3, r3, #9
 8004c7c:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8004c7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c80:	2020      	movs	r0, #32
 8004c82:	f7ff fc76 	bl	8004572 <send_cmd>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d128      	bne.n	8004cde <USER_SPI_ioctl+0x2c6>
 8004c8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c8e:	2021      	movs	r0, #33	@ 0x21
 8004c90:	f7ff fc6f 	bl	8004572 <send_cmd>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d121      	bne.n	8004cde <USER_SPI_ioctl+0x2c6>
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	2026      	movs	r0, #38	@ 0x26
 8004c9e:	f7ff fc68 	bl	8004572 <send_cmd>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d11a      	bne.n	8004cde <USER_SPI_ioctl+0x2c6>
 8004ca8:	f247 5030 	movw	r0, #30000	@ 0x7530
 8004cac:	f7ff fbba 	bl	8004424 <wait_ready>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d013      	beq.n	8004cde <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8004cbc:	e00f      	b.n	8004cde <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8004cbe:	2304      	movs	r3, #4
 8004cc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004cc4:	e00c      	b.n	8004ce0 <USER_SPI_ioctl+0x2c8>
		break;
 8004cc6:	bf00      	nop
 8004cc8:	e00a      	b.n	8004ce0 <USER_SPI_ioctl+0x2c8>
		break;
 8004cca:	bf00      	nop
 8004ccc:	e008      	b.n	8004ce0 <USER_SPI_ioctl+0x2c8>
		break;
 8004cce:	bf00      	nop
 8004cd0:	e006      	b.n	8004ce0 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004cd2:	bf00      	nop
 8004cd4:	e004      	b.n	8004ce0 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004cd6:	bf00      	nop
 8004cd8:	e002      	b.n	8004ce0 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004cda:	bf00      	nop
 8004cdc:	e000      	b.n	8004ce0 <USER_SPI_ioctl+0x2c8>
		break;
 8004cde:	bf00      	nop
	}

	despiselect();
 8004ce0:	f7ff fbc4 	bl	800446c <despiselect>

	return res;
 8004ce4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3730      	adds	r7, #48	@ 0x30
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	20000020 	.word	0x20000020
 8004cf4:	20000254 	.word	0x20000254

08004cf8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	4603      	mov	r3, r0
 8004d00:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004d02:	79fb      	ldrb	r3, [r7, #7]
 8004d04:	4a08      	ldr	r2, [pc, #32]	@ (8004d28 <disk_status+0x30>)
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	79fa      	ldrb	r2, [r7, #7]
 8004d10:	4905      	ldr	r1, [pc, #20]	@ (8004d28 <disk_status+0x30>)
 8004d12:	440a      	add	r2, r1
 8004d14:	7a12      	ldrb	r2, [r2, #8]
 8004d16:	4610      	mov	r0, r2
 8004d18:	4798      	blx	r3
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	20000288 	.word	0x20000288

08004d2c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	4603      	mov	r3, r0
 8004d34:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004d3a:	79fb      	ldrb	r3, [r7, #7]
 8004d3c:	4a0e      	ldr	r2, [pc, #56]	@ (8004d78 <disk_initialize+0x4c>)
 8004d3e:	5cd3      	ldrb	r3, [r2, r3]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d114      	bne.n	8004d6e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004d44:	79fb      	ldrb	r3, [r7, #7]
 8004d46:	4a0c      	ldr	r2, [pc, #48]	@ (8004d78 <disk_initialize+0x4c>)
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	79fa      	ldrb	r2, [r7, #7]
 8004d52:	4909      	ldr	r1, [pc, #36]	@ (8004d78 <disk_initialize+0x4c>)
 8004d54:	440a      	add	r2, r1
 8004d56:	7a12      	ldrb	r2, [r2, #8]
 8004d58:	4610      	mov	r0, r2
 8004d5a:	4798      	blx	r3
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d103      	bne.n	8004d6e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8004d66:	79fb      	ldrb	r3, [r7, #7]
 8004d68:	4a03      	ldr	r2, [pc, #12]	@ (8004d78 <disk_initialize+0x4c>)
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8004d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	20000288 	.word	0x20000288

08004d7c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004d7c:	b590      	push	{r4, r7, lr}
 8004d7e:	b087      	sub	sp, #28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60b9      	str	r1, [r7, #8]
 8004d84:	607a      	str	r2, [r7, #4]
 8004d86:	603b      	str	r3, [r7, #0]
 8004d88:	4603      	mov	r3, r0
 8004d8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
 8004d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8004db8 <disk_read+0x3c>)
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	4413      	add	r3, r2
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	689c      	ldr	r4, [r3, #8]
 8004d98:	7bfb      	ldrb	r3, [r7, #15]
 8004d9a:	4a07      	ldr	r2, [pc, #28]	@ (8004db8 <disk_read+0x3c>)
 8004d9c:	4413      	add	r3, r2
 8004d9e:	7a18      	ldrb	r0, [r3, #8]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	68b9      	ldr	r1, [r7, #8]
 8004da6:	47a0      	blx	r4
 8004da8:	4603      	mov	r3, r0
 8004daa:	75fb      	strb	r3, [r7, #23]
  return res;
 8004dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	371c      	adds	r7, #28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd90      	pop	{r4, r7, pc}
 8004db6:	bf00      	nop
 8004db8:	20000288 	.word	0x20000288

08004dbc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004dbc:	b590      	push	{r4, r7, lr}
 8004dbe:	b087      	sub	sp, #28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60b9      	str	r1, [r7, #8]
 8004dc4:	607a      	str	r2, [r7, #4]
 8004dc6:	603b      	str	r3, [r7, #0]
 8004dc8:	4603      	mov	r3, r0
 8004dca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004dcc:	7bfb      	ldrb	r3, [r7, #15]
 8004dce:	4a0a      	ldr	r2, [pc, #40]	@ (8004df8 <disk_write+0x3c>)
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4413      	add	r3, r2
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	68dc      	ldr	r4, [r3, #12]
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
 8004dda:	4a07      	ldr	r2, [pc, #28]	@ (8004df8 <disk_write+0x3c>)
 8004ddc:	4413      	add	r3, r2
 8004dde:	7a18      	ldrb	r0, [r3, #8]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	68b9      	ldr	r1, [r7, #8]
 8004de6:	47a0      	blx	r4
 8004de8:	4603      	mov	r3, r0
 8004dea:	75fb      	strb	r3, [r7, #23]
  return res;
 8004dec:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	371c      	adds	r7, #28
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd90      	pop	{r4, r7, pc}
 8004df6:	bf00      	nop
 8004df8:	20000288 	.word	0x20000288

08004dfc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	3301      	adds	r3, #1
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004e0c:	89fb      	ldrh	r3, [r7, #14]
 8004e0e:	021b      	lsls	r3, r3, #8
 8004e10:	b21a      	sxth	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	b21b      	sxth	r3, r3
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	b21b      	sxth	r3, r3
 8004e1c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004e1e:	89fb      	ldrh	r3, [r7, #14]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3714      	adds	r7, #20
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3303      	adds	r3, #3
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	021b      	lsls	r3, r3, #8
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	3202      	adds	r2, #2
 8004e44:	7812      	ldrb	r2, [r2, #0]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	021b      	lsls	r3, r3, #8
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	3201      	adds	r2, #1
 8004e52:	7812      	ldrb	r2, [r2, #0]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	021b      	lsls	r3, r3, #8
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	7812      	ldrb	r2, [r2, #0]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]
	return rv;
 8004e64:	68fb      	ldr	r3, [r7, #12]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3714      	adds	r7, #20
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004e72:	b480      	push	{r7}
 8004e74:	b083      	sub	sp, #12
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	1c5a      	adds	r2, r3, #1
 8004e82:	607a      	str	r2, [r7, #4]
 8004e84:	887a      	ldrh	r2, [r7, #2]
 8004e86:	b2d2      	uxtb	r2, r2
 8004e88:	701a      	strb	r2, [r3, #0]
 8004e8a:	887b      	ldrh	r3, [r7, #2]
 8004e8c:	0a1b      	lsrs	r3, r3, #8
 8004e8e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	1c5a      	adds	r2, r3, #1
 8004e94:	607a      	str	r2, [r7, #4]
 8004e96:	887a      	ldrh	r2, [r7, #2]
 8004e98:	b2d2      	uxtb	r2, r2
 8004e9a:	701a      	strb	r2, [r3, #0]
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	607a      	str	r2, [r7, #4]
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	b2d2      	uxtb	r2, r2
 8004ebc:	701a      	strb	r2, [r3, #0]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	0a1b      	lsrs	r3, r3, #8
 8004ec2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	1c5a      	adds	r2, r3, #1
 8004ec8:	607a      	str	r2, [r7, #4]
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	b2d2      	uxtb	r2, r2
 8004ece:	701a      	strb	r2, [r3, #0]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	0a1b      	lsrs	r3, r3, #8
 8004ed4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	607a      	str	r2, [r7, #4]
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	b2d2      	uxtb	r2, r2
 8004ee0:	701a      	strb	r2, [r3, #0]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	0a1b      	lsrs	r3, r3, #8
 8004ee6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	1c5a      	adds	r2, r3, #1
 8004eec:	607a      	str	r2, [r7, #4]
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	b2d2      	uxtb	r2, r2
 8004ef2:	701a      	strb	r2, [r3, #0]
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00d      	beq.n	8004f36 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	1c53      	adds	r3, r2, #1
 8004f1e:	613b      	str	r3, [r7, #16]
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	1c59      	adds	r1, r3, #1
 8004f24:	6179      	str	r1, [r7, #20]
 8004f26:	7812      	ldrb	r2, [r2, #0]
 8004f28:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	607b      	str	r3, [r7, #4]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1f1      	bne.n	8004f1a <mem_cpy+0x1a>
	}
}
 8004f36:	bf00      	nop
 8004f38:	371c      	adds	r7, #28
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004f42:	b480      	push	{r7}
 8004f44:	b087      	sub	sp, #28
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	60f8      	str	r0, [r7, #12]
 8004f4a:	60b9      	str	r1, [r7, #8]
 8004f4c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	617a      	str	r2, [r7, #20]
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	b2d2      	uxtb	r2, r2
 8004f5c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	3b01      	subs	r3, #1
 8004f62:	607b      	str	r3, [r7, #4]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1f3      	bne.n	8004f52 <mem_set+0x10>
}
 8004f6a:	bf00      	nop
 8004f6c:	bf00      	nop
 8004f6e:	371c      	adds	r7, #28
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004f78:	b480      	push	{r7}
 8004f7a:	b089      	sub	sp, #36	@ 0x24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	61fb      	str	r3, [r7, #28]
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	1c5a      	adds	r2, r3, #1
 8004f94:	61fa      	str	r2, [r7, #28]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	4619      	mov	r1, r3
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	1c5a      	adds	r2, r3, #1
 8004f9e:	61ba      	str	r2, [r7, #24]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	1acb      	subs	r3, r1, r3
 8004fa4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	607b      	str	r3, [r7, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d002      	beq.n	8004fb8 <mem_cmp+0x40>
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d0eb      	beq.n	8004f90 <mem_cmp+0x18>

	return r;
 8004fb8:	697b      	ldr	r3, [r7, #20]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3724      	adds	r7, #36	@ 0x24
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004fc6:	b480      	push	{r7}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
 8004fce:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004fd0:	e002      	b.n	8004fd8 <chk_chr+0x12>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	607b      	str	r3, [r7, #4]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d005      	beq.n	8004fec <chk_chr+0x26>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d1f2      	bne.n	8004fd2 <chk_chr+0xc>
	return *str;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	781b      	ldrb	r3, [r3, #0]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005006:	2300      	movs	r3, #0
 8005008:	60bb      	str	r3, [r7, #8]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	e029      	b.n	8005064 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005010:	4a27      	ldr	r2, [pc, #156]	@ (80050b0 <chk_lock+0xb4>)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	011b      	lsls	r3, r3, #4
 8005016:	4413      	add	r3, r2
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d01d      	beq.n	800505a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800501e:	4a24      	ldr	r2, [pc, #144]	@ (80050b0 <chk_lock+0xb4>)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	011b      	lsls	r3, r3, #4
 8005024:	4413      	add	r3, r2
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	429a      	cmp	r2, r3
 800502e:	d116      	bne.n	800505e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005030:	4a1f      	ldr	r2, [pc, #124]	@ (80050b0 <chk_lock+0xb4>)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	011b      	lsls	r3, r3, #4
 8005036:	4413      	add	r3, r2
 8005038:	3304      	adds	r3, #4
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005040:	429a      	cmp	r2, r3
 8005042:	d10c      	bne.n	800505e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005044:	4a1a      	ldr	r2, [pc, #104]	@ (80050b0 <chk_lock+0xb4>)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	011b      	lsls	r3, r3, #4
 800504a:	4413      	add	r3, r2
 800504c:	3308      	adds	r3, #8
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005054:	429a      	cmp	r2, r3
 8005056:	d102      	bne.n	800505e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005058:	e007      	b.n	800506a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800505a:	2301      	movs	r3, #1
 800505c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	3301      	adds	r3, #1
 8005062:	60fb      	str	r3, [r7, #12]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d9d2      	bls.n	8005010 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2b02      	cmp	r3, #2
 800506e:	d109      	bne.n	8005084 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d102      	bne.n	800507c <chk_lock+0x80>
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b02      	cmp	r3, #2
 800507a:	d101      	bne.n	8005080 <chk_lock+0x84>
 800507c:	2300      	movs	r3, #0
 800507e:	e010      	b.n	80050a2 <chk_lock+0xa6>
 8005080:	2312      	movs	r3, #18
 8005082:	e00e      	b.n	80050a2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d108      	bne.n	800509c <chk_lock+0xa0>
 800508a:	4a09      	ldr	r2, [pc, #36]	@ (80050b0 <chk_lock+0xb4>)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	011b      	lsls	r3, r3, #4
 8005090:	4413      	add	r3, r2
 8005092:	330c      	adds	r3, #12
 8005094:	881b      	ldrh	r3, [r3, #0]
 8005096:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800509a:	d101      	bne.n	80050a0 <chk_lock+0xa4>
 800509c:	2310      	movs	r3, #16
 800509e:	e000      	b.n	80050a2 <chk_lock+0xa6>
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	20000268 	.word	0x20000268

080050b4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80050ba:	2300      	movs	r3, #0
 80050bc:	607b      	str	r3, [r7, #4]
 80050be:	e002      	b.n	80050c6 <enq_lock+0x12>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	3301      	adds	r3, #1
 80050c4:	607b      	str	r3, [r7, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d806      	bhi.n	80050da <enq_lock+0x26>
 80050cc:	4a09      	ldr	r2, [pc, #36]	@ (80050f4 <enq_lock+0x40>)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	011b      	lsls	r3, r3, #4
 80050d2:	4413      	add	r3, r2
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1f2      	bne.n	80050c0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b02      	cmp	r3, #2
 80050de:	bf14      	ite	ne
 80050e0:	2301      	movne	r3, #1
 80050e2:	2300      	moveq	r3, #0
 80050e4:	b2db      	uxtb	r3, r3
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	20000268 	.word	0x20000268

080050f8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005102:	2300      	movs	r3, #0
 8005104:	60fb      	str	r3, [r7, #12]
 8005106:	e01f      	b.n	8005148 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005108:	4a41      	ldr	r2, [pc, #260]	@ (8005210 <inc_lock+0x118>)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	011b      	lsls	r3, r3, #4
 800510e:	4413      	add	r3, r2
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	429a      	cmp	r2, r3
 8005118:	d113      	bne.n	8005142 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800511a:	4a3d      	ldr	r2, [pc, #244]	@ (8005210 <inc_lock+0x118>)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	011b      	lsls	r3, r3, #4
 8005120:	4413      	add	r3, r2
 8005122:	3304      	adds	r3, #4
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800512a:	429a      	cmp	r2, r3
 800512c:	d109      	bne.n	8005142 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800512e:	4a38      	ldr	r2, [pc, #224]	@ (8005210 <inc_lock+0x118>)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	011b      	lsls	r3, r3, #4
 8005134:	4413      	add	r3, r2
 8005136:	3308      	adds	r3, #8
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800513e:	429a      	cmp	r2, r3
 8005140:	d006      	beq.n	8005150 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	3301      	adds	r3, #1
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d9dc      	bls.n	8005108 <inc_lock+0x10>
 800514e:	e000      	b.n	8005152 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005150:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2b02      	cmp	r3, #2
 8005156:	d132      	bne.n	80051be <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005158:	2300      	movs	r3, #0
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	e002      	b.n	8005164 <inc_lock+0x6c>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	3301      	adds	r3, #1
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d806      	bhi.n	8005178 <inc_lock+0x80>
 800516a:	4a29      	ldr	r2, [pc, #164]	@ (8005210 <inc_lock+0x118>)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	011b      	lsls	r3, r3, #4
 8005170:	4413      	add	r3, r2
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1f2      	bne.n	800515e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2b02      	cmp	r3, #2
 800517c:	d101      	bne.n	8005182 <inc_lock+0x8a>
 800517e:	2300      	movs	r3, #0
 8005180:	e040      	b.n	8005204 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	4922      	ldr	r1, [pc, #136]	@ (8005210 <inc_lock+0x118>)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	011b      	lsls	r3, r3, #4
 800518c:	440b      	add	r3, r1
 800518e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689a      	ldr	r2, [r3, #8]
 8005194:	491e      	ldr	r1, [pc, #120]	@ (8005210 <inc_lock+0x118>)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	011b      	lsls	r3, r3, #4
 800519a:	440b      	add	r3, r1
 800519c:	3304      	adds	r3, #4
 800519e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	695a      	ldr	r2, [r3, #20]
 80051a4:	491a      	ldr	r1, [pc, #104]	@ (8005210 <inc_lock+0x118>)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	011b      	lsls	r3, r3, #4
 80051aa:	440b      	add	r3, r1
 80051ac:	3308      	adds	r3, #8
 80051ae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80051b0:	4a17      	ldr	r2, [pc, #92]	@ (8005210 <inc_lock+0x118>)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	011b      	lsls	r3, r3, #4
 80051b6:	4413      	add	r3, r2
 80051b8:	330c      	adds	r3, #12
 80051ba:	2200      	movs	r2, #0
 80051bc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d009      	beq.n	80051d8 <inc_lock+0xe0>
 80051c4:	4a12      	ldr	r2, [pc, #72]	@ (8005210 <inc_lock+0x118>)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	011b      	lsls	r3, r3, #4
 80051ca:	4413      	add	r3, r2
 80051cc:	330c      	adds	r3, #12
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d001      	beq.n	80051d8 <inc_lock+0xe0>
 80051d4:	2300      	movs	r3, #0
 80051d6:	e015      	b.n	8005204 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d108      	bne.n	80051f0 <inc_lock+0xf8>
 80051de:	4a0c      	ldr	r2, [pc, #48]	@ (8005210 <inc_lock+0x118>)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	4413      	add	r3, r2
 80051e6:	330c      	adds	r3, #12
 80051e8:	881b      	ldrh	r3, [r3, #0]
 80051ea:	3301      	adds	r3, #1
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	e001      	b.n	80051f4 <inc_lock+0xfc>
 80051f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80051f4:	4906      	ldr	r1, [pc, #24]	@ (8005210 <inc_lock+0x118>)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	011b      	lsls	r3, r3, #4
 80051fa:	440b      	add	r3, r1
 80051fc:	330c      	adds	r3, #12
 80051fe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	3301      	adds	r3, #1
}
 8005204:	4618      	mov	r0, r3
 8005206:	3714      	adds	r7, #20
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr
 8005210:	20000268 	.word	0x20000268

08005214 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800521c:	2300      	movs	r3, #0
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	e010      	b.n	8005244 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005222:	4a0d      	ldr	r2, [pc, #52]	@ (8005258 <clear_lock+0x44>)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	011b      	lsls	r3, r3, #4
 8005228:	4413      	add	r3, r2
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	429a      	cmp	r2, r3
 8005230:	d105      	bne.n	800523e <clear_lock+0x2a>
 8005232:	4a09      	ldr	r2, [pc, #36]	@ (8005258 <clear_lock+0x44>)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	011b      	lsls	r3, r3, #4
 8005238:	4413      	add	r3, r2
 800523a:	2200      	movs	r2, #0
 800523c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	3301      	adds	r3, #1
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d9eb      	bls.n	8005222 <clear_lock+0xe>
	}
}
 800524a:	bf00      	nop
 800524c:	bf00      	nop
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	20000268 	.word	0x20000268

0800525c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005264:	2300      	movs	r3, #0
 8005266:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	78db      	ldrb	r3, [r3, #3]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d034      	beq.n	80052da <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005274:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	7858      	ldrb	r0, [r3, #1]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005280:	2301      	movs	r3, #1
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	f7ff fd9a 	bl	8004dbc <disk_write>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <sync_window+0x38>
			res = FR_DISK_ERR;
 800528e:	2301      	movs	r3, #1
 8005290:	73fb      	strb	r3, [r7, #15]
 8005292:	e022      	b.n	80052da <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	1ad2      	subs	r2, r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d217      	bcs.n	80052da <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	789b      	ldrb	r3, [r3, #2]
 80052ae:	613b      	str	r3, [r7, #16]
 80052b0:	e010      	b.n	80052d4 <sync_window+0x78>
					wsect += fs->fsize;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	4413      	add	r3, r2
 80052ba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	7858      	ldrb	r0, [r3, #1]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80052c6:	2301      	movs	r3, #1
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	f7ff fd77 	bl	8004dbc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	3b01      	subs	r3, #1
 80052d2:	613b      	str	r3, [r7, #16]
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d8eb      	bhi.n	80052b2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80052da:	7bfb      	ldrb	r3, [r7, #15]
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3718      	adds	r7, #24
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80052ee:	2300      	movs	r3, #0
 80052f0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d01b      	beq.n	8005334 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f7ff ffad 	bl	800525c <sync_window>
 8005302:	4603      	mov	r3, r0
 8005304:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005306:	7bfb      	ldrb	r3, [r7, #15]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d113      	bne.n	8005334 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	7858      	ldrb	r0, [r3, #1]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005316:	2301      	movs	r3, #1
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	f7ff fd2f 	bl	8004d7c <disk_read>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d004      	beq.n	800532e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005324:	f04f 33ff 	mov.w	r3, #4294967295
 8005328:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800532a:	2301      	movs	r3, #1
 800532c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8005334:	7bfb      	ldrb	r3, [r7, #15]
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800533e:	b480      	push	{r7}
 8005340:	b083      	sub	sp, #12
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
 8005346:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	3b02      	subs	r3, #2
 800534c:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	3b02      	subs	r3, #2
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d301      	bcc.n	800535e <clust2sect+0x20>
 800535a:	2300      	movs	r3, #0
 800535c:	e008      	b.n	8005370 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	895b      	ldrh	r3, [r3, #10]
 8005362:	461a      	mov	r2, r3
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	fb03 f202 	mul.w	r2, r3, r2
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536e:	4413      	add	r3, r2
}
 8005370:	4618      	mov	r0, r3
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d904      	bls.n	800539c <get_fat+0x20>
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	429a      	cmp	r2, r3
 800539a:	d302      	bcc.n	80053a2 <get_fat+0x26>
		val = 1;	/* Internal error */
 800539c:	2301      	movs	r3, #1
 800539e:	617b      	str	r3, [r7, #20]
 80053a0:	e08e      	b.n	80054c0 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80053a2:	f04f 33ff 	mov.w	r3, #4294967295
 80053a6:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	2b03      	cmp	r3, #3
 80053ae:	d061      	beq.n	8005474 <get_fat+0xf8>
 80053b0:	2b03      	cmp	r3, #3
 80053b2:	dc7b      	bgt.n	80054ac <get_fat+0x130>
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d002      	beq.n	80053be <get_fat+0x42>
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d041      	beq.n	8005440 <get_fat+0xc4>
 80053bc:	e076      	b.n	80054ac <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	60fb      	str	r3, [r7, #12]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	085b      	lsrs	r3, r3, #1
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	4413      	add	r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	6a1a      	ldr	r2, [r3, #32]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	0a5b      	lsrs	r3, r3, #9
 80053d4:	4413      	add	r3, r2
 80053d6:	4619      	mov	r1, r3
 80053d8:	6938      	ldr	r0, [r7, #16]
 80053da:	f7ff ff83 	bl	80052e4 <move_window>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d166      	bne.n	80054b2 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	1c5a      	adds	r2, r3, #1
 80053e8:	60fa      	str	r2, [r7, #12]
 80053ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	4413      	add	r3, r2
 80053f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80053f6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	6a1a      	ldr	r2, [r3, #32]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	0a5b      	lsrs	r3, r3, #9
 8005400:	4413      	add	r3, r2
 8005402:	4619      	mov	r1, r3
 8005404:	6938      	ldr	r0, [r7, #16]
 8005406:	f7ff ff6d 	bl	80052e4 <move_window>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d152      	bne.n	80054b6 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	4413      	add	r3, r2
 800541a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800541e:	021b      	lsls	r3, r3, #8
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	4313      	orrs	r3, r2
 8005424:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b00      	cmp	r3, #0
 800542e:	d002      	beq.n	8005436 <get_fat+0xba>
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	091b      	lsrs	r3, r3, #4
 8005434:	e002      	b.n	800543c <get_fat+0xc0>
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800543c:	617b      	str	r3, [r7, #20]
			break;
 800543e:	e03f      	b.n	80054c0 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	6a1a      	ldr	r2, [r3, #32]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	0a1b      	lsrs	r3, r3, #8
 8005448:	4413      	add	r3, r2
 800544a:	4619      	mov	r1, r3
 800544c:	6938      	ldr	r0, [r7, #16]
 800544e:	f7ff ff49 	bl	80052e4 <move_window>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d130      	bne.n	80054ba <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	005b      	lsls	r3, r3, #1
 8005462:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8005466:	4413      	add	r3, r2
 8005468:	4618      	mov	r0, r3
 800546a:	f7ff fcc7 	bl	8004dfc <ld_word>
 800546e:	4603      	mov	r3, r0
 8005470:	617b      	str	r3, [r7, #20]
			break;
 8005472:	e025      	b.n	80054c0 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	6a1a      	ldr	r2, [r3, #32]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	09db      	lsrs	r3, r3, #7
 800547c:	4413      	add	r3, r2
 800547e:	4619      	mov	r1, r3
 8005480:	6938      	ldr	r0, [r7, #16]
 8005482:	f7ff ff2f 	bl	80052e4 <move_window>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d118      	bne.n	80054be <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800549a:	4413      	add	r3, r2
 800549c:	4618      	mov	r0, r3
 800549e:	f7ff fcc5 	bl	8004e2c <ld_dword>
 80054a2:	4603      	mov	r3, r0
 80054a4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80054a8:	617b      	str	r3, [r7, #20]
			break;
 80054aa:	e009      	b.n	80054c0 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80054ac:	2301      	movs	r3, #1
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	e006      	b.n	80054c0 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054b2:	bf00      	nop
 80054b4:	e004      	b.n	80054c0 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054b6:	bf00      	nop
 80054b8:	e002      	b.n	80054c0 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80054ba:	bf00      	nop
 80054bc:	e000      	b.n	80054c0 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80054be:	bf00      	nop
		}
	}

	return val;
 80054c0:	697b      	ldr	r3, [r7, #20]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80054ca:	b590      	push	{r4, r7, lr}
 80054cc:	b089      	sub	sp, #36	@ 0x24
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	60f8      	str	r0, [r7, #12]
 80054d2:	60b9      	str	r1, [r7, #8]
 80054d4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80054d6:	2302      	movs	r3, #2
 80054d8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	f240 80d9 	bls.w	8005694 <put_fat+0x1ca>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	f080 80d3 	bcs.w	8005694 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	2b03      	cmp	r3, #3
 80054f4:	f000 8096 	beq.w	8005624 <put_fat+0x15a>
 80054f8:	2b03      	cmp	r3, #3
 80054fa:	f300 80cb 	bgt.w	8005694 <put_fat+0x1ca>
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d002      	beq.n	8005508 <put_fat+0x3e>
 8005502:	2b02      	cmp	r3, #2
 8005504:	d06e      	beq.n	80055e4 <put_fat+0x11a>
 8005506:	e0c5      	b.n	8005694 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	61bb      	str	r3, [r7, #24]
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	085b      	lsrs	r3, r3, #1
 8005510:	69ba      	ldr	r2, [r7, #24]
 8005512:	4413      	add	r3, r2
 8005514:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6a1a      	ldr	r2, [r3, #32]
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	0a5b      	lsrs	r3, r3, #9
 800551e:	4413      	add	r3, r2
 8005520:	4619      	mov	r1, r3
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f7ff fede 	bl	80052e4 <move_window>
 8005528:	4603      	mov	r3, r0
 800552a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800552c:	7ffb      	ldrb	r3, [r7, #31]
 800552e:	2b00      	cmp	r3, #0
 8005530:	f040 80a9 	bne.w	8005686 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	1c59      	adds	r1, r3, #1
 800553e:	61b9      	str	r1, [r7, #24]
 8005540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005544:	4413      	add	r3, r2
 8005546:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00d      	beq.n	800556e <put_fat+0xa4>
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	b25b      	sxtb	r3, r3
 8005558:	f003 030f 	and.w	r3, r3, #15
 800555c:	b25a      	sxtb	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	b2db      	uxtb	r3, r3
 8005562:	011b      	lsls	r3, r3, #4
 8005564:	b25b      	sxtb	r3, r3
 8005566:	4313      	orrs	r3, r2
 8005568:	b25b      	sxtb	r3, r3
 800556a:	b2db      	uxtb	r3, r3
 800556c:	e001      	b.n	8005572 <put_fat+0xa8>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	b2db      	uxtb	r3, r3
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2201      	movs	r2, #1
 800557a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6a1a      	ldr	r2, [r3, #32]
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	0a5b      	lsrs	r3, r3, #9
 8005584:	4413      	add	r3, r2
 8005586:	4619      	mov	r1, r3
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f7ff feab 	bl	80052e4 <move_window>
 800558e:	4603      	mov	r3, r0
 8005590:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005592:	7ffb      	ldrb	r3, [r7, #31]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d178      	bne.n	800568a <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055a4:	4413      	add	r3, r2
 80055a6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <put_fat+0xf0>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	091b      	lsrs	r3, r3, #4
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	e00e      	b.n	80055d8 <put_fat+0x10e>
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	b25b      	sxtb	r3, r3
 80055c0:	f023 030f 	bic.w	r3, r3, #15
 80055c4:	b25a      	sxtb	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	0a1b      	lsrs	r3, r3, #8
 80055ca:	b25b      	sxtb	r3, r3
 80055cc:	f003 030f 	and.w	r3, r3, #15
 80055d0:	b25b      	sxtb	r3, r3
 80055d2:	4313      	orrs	r3, r2
 80055d4:	b25b      	sxtb	r3, r3
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2201      	movs	r2, #1
 80055e0:	70da      	strb	r2, [r3, #3]
			break;
 80055e2:	e057      	b.n	8005694 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6a1a      	ldr	r2, [r3, #32]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	0a1b      	lsrs	r3, r3, #8
 80055ec:	4413      	add	r3, r2
 80055ee:	4619      	mov	r1, r3
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f7ff fe77 	bl	80052e4 <move_window>
 80055f6:	4603      	mov	r3, r0
 80055f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80055fa:	7ffb      	ldrb	r3, [r7, #31]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d146      	bne.n	800568e <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800560e:	4413      	add	r3, r2
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	b292      	uxth	r2, r2
 8005614:	4611      	mov	r1, r2
 8005616:	4618      	mov	r0, r3
 8005618:	f7ff fc2b 	bl	8004e72 <st_word>
			fs->wflag = 1;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2201      	movs	r2, #1
 8005620:	70da      	strb	r2, [r3, #3]
			break;
 8005622:	e037      	b.n	8005694 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6a1a      	ldr	r2, [r3, #32]
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	09db      	lsrs	r3, r3, #7
 800562c:	4413      	add	r3, r2
 800562e:	4619      	mov	r1, r3
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f7ff fe57 	bl	80052e4 <move_window>
 8005636:	4603      	mov	r3, r0
 8005638:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800563a:	7ffb      	ldrb	r3, [r7, #31]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d128      	bne.n	8005692 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8005654:	4413      	add	r3, r2
 8005656:	4618      	mov	r0, r3
 8005658:	f7ff fbe8 	bl	8004e2c <ld_dword>
 800565c:	4603      	mov	r3, r0
 800565e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005662:	4323      	orrs	r3, r4
 8005664:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8005674:	4413      	add	r3, r2
 8005676:	6879      	ldr	r1, [r7, #4]
 8005678:	4618      	mov	r0, r3
 800567a:	f7ff fc15 	bl	8004ea8 <st_dword>
			fs->wflag = 1;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2201      	movs	r2, #1
 8005682:	70da      	strb	r2, [r3, #3]
			break;
 8005684:	e006      	b.n	8005694 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005686:	bf00      	nop
 8005688:	e004      	b.n	8005694 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800568a:	bf00      	nop
 800568c:	e002      	b.n	8005694 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800568e:	bf00      	nop
 8005690:	e000      	b.n	8005694 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005692:	bf00      	nop
		}
	}
	return res;
 8005694:	7ffb      	ldrb	r3, [r7, #31]
}
 8005696:	4618      	mov	r0, r3
 8005698:	3724      	adds	r7, #36	@ 0x24
 800569a:	46bd      	mov	sp, r7
 800569c:	bd90      	pop	{r4, r7, pc}

0800569e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b088      	sub	sp, #32
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	60f8      	str	r0, [r7, #12]
 80056a6:	60b9      	str	r1, [r7, #8]
 80056a8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80056aa:	2300      	movs	r3, #0
 80056ac:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d904      	bls.n	80056c4 <remove_chain+0x26>
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d301      	bcc.n	80056c8 <remove_chain+0x2a>
 80056c4:	2302      	movs	r3, #2
 80056c6:	e04b      	b.n	8005760 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00c      	beq.n	80056e8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80056ce:	f04f 32ff 	mov.w	r2, #4294967295
 80056d2:	6879      	ldr	r1, [r7, #4]
 80056d4:	69b8      	ldr	r0, [r7, #24]
 80056d6:	f7ff fef8 	bl	80054ca <put_fat>
 80056da:	4603      	mov	r3, r0
 80056dc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80056de:	7ffb      	ldrb	r3, [r7, #31]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <remove_chain+0x4a>
 80056e4:	7ffb      	ldrb	r3, [r7, #31]
 80056e6:	e03b      	b.n	8005760 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80056e8:	68b9      	ldr	r1, [r7, #8]
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f7ff fe46 	bl	800537c <get_fat>
 80056f0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d031      	beq.n	800575c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d101      	bne.n	8005702 <remove_chain+0x64>
 80056fe:	2302      	movs	r3, #2
 8005700:	e02e      	b.n	8005760 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005708:	d101      	bne.n	800570e <remove_chain+0x70>
 800570a:	2301      	movs	r3, #1
 800570c:	e028      	b.n	8005760 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800570e:	2200      	movs	r2, #0
 8005710:	68b9      	ldr	r1, [r7, #8]
 8005712:	69b8      	ldr	r0, [r7, #24]
 8005714:	f7ff fed9 	bl	80054ca <put_fat>
 8005718:	4603      	mov	r3, r0
 800571a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800571c:	7ffb      	ldrb	r3, [r7, #31]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <remove_chain+0x88>
 8005722:	7ffb      	ldrb	r3, [r7, #31]
 8005724:	e01c      	b.n	8005760 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	691a      	ldr	r2, [r3, #16]
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	3b02      	subs	r3, #2
 8005730:	429a      	cmp	r2, r3
 8005732:	d20b      	bcs.n	800574c <remove_chain+0xae>
			fs->free_clst++;
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	1c5a      	adds	r2, r3, #1
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	791b      	ldrb	r3, [r3, #4]
 8005742:	f043 0301 	orr.w	r3, r3, #1
 8005746:	b2da      	uxtb	r2, r3
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	429a      	cmp	r2, r3
 8005758:	d3c6      	bcc.n	80056e8 <remove_chain+0x4a>
 800575a:	e000      	b.n	800575e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800575c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3720      	adds	r7, #32
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b088      	sub	sp, #32
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10d      	bne.n	800579a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d004      	beq.n	8005794 <create_chain+0x2c>
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	429a      	cmp	r2, r3
 8005792:	d31b      	bcc.n	80057cc <create_chain+0x64>
 8005794:	2301      	movs	r3, #1
 8005796:	61bb      	str	r3, [r7, #24]
 8005798:	e018      	b.n	80057cc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800579a:	6839      	ldr	r1, [r7, #0]
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7ff fded 	bl	800537c <get_fat>
 80057a2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d801      	bhi.n	80057ae <create_chain+0x46>
 80057aa:	2301      	movs	r3, #1
 80057ac:	e070      	b.n	8005890 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b4:	d101      	bne.n	80057ba <create_chain+0x52>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	e06a      	b.n	8005890 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d201      	bcs.n	80057c8 <create_chain+0x60>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	e063      	b.n	8005890 <create_chain+0x128>
		scl = clst;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	3301      	adds	r3, #1
 80057d4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	69fa      	ldr	r2, [r7, #28]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d307      	bcc.n	80057f0 <create_chain+0x88>
				ncl = 2;
 80057e0:	2302      	movs	r3, #2
 80057e2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80057e4:	69fa      	ldr	r2, [r7, #28]
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d901      	bls.n	80057f0 <create_chain+0x88>
 80057ec:	2300      	movs	r3, #0
 80057ee:	e04f      	b.n	8005890 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80057f0:	69f9      	ldr	r1, [r7, #28]
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7ff fdc2 	bl	800537c <get_fat>
 80057f8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00e      	beq.n	800581e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2b01      	cmp	r3, #1
 8005804:	d003      	beq.n	800580e <create_chain+0xa6>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580c:	d101      	bne.n	8005812 <create_chain+0xaa>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	e03e      	b.n	8005890 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005812:	69fa      	ldr	r2, [r7, #28]
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	429a      	cmp	r2, r3
 8005818:	d1da      	bne.n	80057d0 <create_chain+0x68>
 800581a:	2300      	movs	r3, #0
 800581c:	e038      	b.n	8005890 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800581e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005820:	f04f 32ff 	mov.w	r2, #4294967295
 8005824:	69f9      	ldr	r1, [r7, #28]
 8005826:	6938      	ldr	r0, [r7, #16]
 8005828:	f7ff fe4f 	bl	80054ca <put_fat>
 800582c:	4603      	mov	r3, r0
 800582e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005830:	7dfb      	ldrb	r3, [r7, #23]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d109      	bne.n	800584a <create_chain+0xe2>
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d006      	beq.n	800584a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800583c:	69fa      	ldr	r2, [r7, #28]
 800583e:	6839      	ldr	r1, [r7, #0]
 8005840:	6938      	ldr	r0, [r7, #16]
 8005842:	f7ff fe42 	bl	80054ca <put_fat>
 8005846:	4603      	mov	r3, r0
 8005848:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800584a:	7dfb      	ldrb	r3, [r7, #23]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d116      	bne.n	800587e <create_chain+0x116>
		fs->last_clst = ncl;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	69fa      	ldr	r2, [r7, #28]
 8005854:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	691a      	ldr	r2, [r3, #16]
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	3b02      	subs	r3, #2
 8005860:	429a      	cmp	r2, r3
 8005862:	d804      	bhi.n	800586e <create_chain+0x106>
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	1e5a      	subs	r2, r3, #1
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	791b      	ldrb	r3, [r3, #4]
 8005872:	f043 0301 	orr.w	r3, r3, #1
 8005876:	b2da      	uxtb	r2, r3
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	711a      	strb	r2, [r3, #4]
 800587c:	e007      	b.n	800588e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800587e:	7dfb      	ldrb	r3, [r7, #23]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d102      	bne.n	800588a <create_chain+0x122>
 8005884:	f04f 33ff 	mov.w	r3, #4294967295
 8005888:	e000      	b.n	800588c <create_chain+0x124>
 800588a:	2301      	movs	r3, #1
 800588c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800588e:	69fb      	ldr	r3, [r7, #28]
}
 8005890:	4618      	mov	r0, r3
 8005892:	3720      	adds	r7, #32
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ac:	3304      	adds	r3, #4
 80058ae:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	0a5b      	lsrs	r3, r3, #9
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	8952      	ldrh	r2, [r2, #10]
 80058b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80058bc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	1d1a      	adds	r2, r3, #4
 80058c2:	613a      	str	r2, [r7, #16]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <clmt_clust+0x3a>
 80058ce:	2300      	movs	r3, #0
 80058d0:	e010      	b.n	80058f4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d307      	bcc.n	80058ea <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	617b      	str	r3, [r7, #20]
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	3304      	adds	r3, #4
 80058e6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80058e8:	e7e9      	b.n	80058be <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80058ea:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	4413      	add	r3, r2
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	371c      	adds	r7, #28
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005916:	d204      	bcs.n	8005922 <dir_sdi+0x22>
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	f003 031f 	and.w	r3, r3, #31
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005922:	2302      	movs	r3, #2
 8005924:	e063      	b.n	80059ee <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d106      	bne.n	8005946 <dir_sdi+0x46>
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	2b02      	cmp	r3, #2
 800593e:	d902      	bls.n	8005946 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005944:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10c      	bne.n	8005966 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	095b      	lsrs	r3, r3, #5
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	8912      	ldrh	r2, [r2, #8]
 8005954:	4293      	cmp	r3, r2
 8005956:	d301      	bcc.n	800595c <dir_sdi+0x5c>
 8005958:	2302      	movs	r3, #2
 800595a:	e048      	b.n	80059ee <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	61da      	str	r2, [r3, #28]
 8005964:	e029      	b.n	80059ba <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	895b      	ldrh	r3, [r3, #10]
 800596a:	025b      	lsls	r3, r3, #9
 800596c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800596e:	e019      	b.n	80059a4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6979      	ldr	r1, [r7, #20]
 8005974:	4618      	mov	r0, r3
 8005976:	f7ff fd01 	bl	800537c <get_fat>
 800597a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005982:	d101      	bne.n	8005988 <dir_sdi+0x88>
 8005984:	2301      	movs	r3, #1
 8005986:	e032      	b.n	80059ee <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d904      	bls.n	8005998 <dir_sdi+0x98>
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	429a      	cmp	r2, r3
 8005996:	d301      	bcc.n	800599c <dir_sdi+0x9c>
 8005998:	2302      	movs	r3, #2
 800599a:	e028      	b.n	80059ee <dir_sdi+0xee>
			ofs -= csz;
 800599c:	683a      	ldr	r2, [r7, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80059a4:	683a      	ldr	r2, [r7, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d2e1      	bcs.n	8005970 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80059ac:	6979      	ldr	r1, [r7, #20]
 80059ae:	6938      	ldr	r0, [r7, #16]
 80059b0:	f7ff fcc5 	bl	800533e <clust2sect>
 80059b4:	4602      	mov	r2, r0
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	69db      	ldr	r3, [r3, #28]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <dir_sdi+0xcc>
 80059c8:	2302      	movs	r3, #2
 80059ca:	e010      	b.n	80059ee <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	69da      	ldr	r2, [r3, #28]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	0a5b      	lsrs	r3, r3, #9
 80059d4:	441a      	add	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059e6:	441a      	add	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3718      	adds	r7, #24
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b086      	sub	sp, #24
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	3320      	adds	r3, #32
 8005a0c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <dir_next+0x28>
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a1c:	d301      	bcc.n	8005a22 <dir_next+0x2c>
 8005a1e:	2304      	movs	r3, #4
 8005a20:	e0aa      	b.n	8005b78 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f040 8098 	bne.w	8005b5e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10b      	bne.n	8005a58 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	095b      	lsrs	r3, r3, #5
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	8912      	ldrh	r2, [r2, #8]
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	f0c0 8088 	bcc.w	8005b5e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	61da      	str	r2, [r3, #28]
 8005a54:	2304      	movs	r3, #4
 8005a56:	e08f      	b.n	8005b78 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	0a5b      	lsrs	r3, r3, #9
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	8952      	ldrh	r2, [r2, #10]
 8005a60:	3a01      	subs	r2, #1
 8005a62:	4013      	ands	r3, r2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d17a      	bne.n	8005b5e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	4619      	mov	r1, r3
 8005a70:	4610      	mov	r0, r2
 8005a72:	f7ff fc83 	bl	800537c <get_fat>
 8005a76:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d801      	bhi.n	8005a82 <dir_next+0x8c>
 8005a7e:	2302      	movs	r3, #2
 8005a80:	e07a      	b.n	8005b78 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a88:	d101      	bne.n	8005a8e <dir_next+0x98>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e074      	b.n	8005b78 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d358      	bcc.n	8005b4a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d104      	bne.n	8005aa8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	61da      	str	r2, [r3, #28]
 8005aa4:	2304      	movs	r3, #4
 8005aa6:	e067      	b.n	8005b78 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	4619      	mov	r1, r3
 8005ab0:	4610      	mov	r0, r2
 8005ab2:	f7ff fe59 	bl	8005768 <create_chain>
 8005ab6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <dir_next+0xcc>
 8005abe:	2307      	movs	r3, #7
 8005ac0:	e05a      	b.n	8005b78 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d101      	bne.n	8005acc <dir_next+0xd6>
 8005ac8:	2302      	movs	r3, #2
 8005aca:	e055      	b.n	8005b78 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad2:	d101      	bne.n	8005ad8 <dir_next+0xe2>
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e04f      	b.n	8005b78 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f7ff fbbf 	bl	800525c <sync_window>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d001      	beq.n	8005ae8 <dir_next+0xf2>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e047      	b.n	8005b78 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	3330      	adds	r3, #48	@ 0x30
 8005aec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005af0:	2100      	movs	r1, #0
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7ff fa25 	bl	8004f42 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005af8:	2300      	movs	r3, #0
 8005afa:	613b      	str	r3, [r7, #16]
 8005afc:	6979      	ldr	r1, [r7, #20]
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f7ff fc1d 	bl	800533e <clust2sect>
 8005b04:	4602      	mov	r2, r0
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005b0a:	e012      	b.n	8005b32 <dir_next+0x13c>
						fs->wflag = 1;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f7ff fba2 	bl	800525c <sync_window>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d001      	beq.n	8005b22 <dir_next+0x12c>
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e02a      	b.n	8005b78 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	3301      	adds	r3, #1
 8005b26:	613b      	str	r3, [r7, #16]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2c:	1c5a      	adds	r2, r3, #1
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	895b      	ldrh	r3, [r3, #10]
 8005b36:	461a      	mov	r2, r3
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d3e6      	bcc.n	8005b0c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	1ad2      	subs	r2, r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005b50:	6979      	ldr	r1, [r7, #20]
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f7ff fbf3 	bl	800533e <clust2sect>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b70:	441a      	add	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3718      	adds	r7, #24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005b90:	2100      	movs	r1, #0
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7ff feb4 	bl	8005900 <dir_sdi>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005b9c:	7dfb      	ldrb	r3, [r7, #23]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d12b      	bne.n	8005bfa <dir_alloc+0x7a>
		n = 0;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	69db      	ldr	r3, [r3, #28]
 8005baa:	4619      	mov	r1, r3
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f7ff fb99 	bl	80052e4 <move_window>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005bb6:	7dfb      	ldrb	r3, [r7, #23]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d11d      	bne.n	8005bf8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a1b      	ldr	r3, [r3, #32]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	2be5      	cmp	r3, #229	@ 0xe5
 8005bc4:	d004      	beq.n	8005bd0 <dir_alloc+0x50>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d107      	bne.n	8005be0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	613b      	str	r3, [r7, #16]
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d102      	bne.n	8005be4 <dir_alloc+0x64>
 8005bde:	e00c      	b.n	8005bfa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005be0:	2300      	movs	r3, #0
 8005be2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005be4:	2101      	movs	r1, #1
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f7ff ff05 	bl	80059f6 <dir_next>
 8005bec:	4603      	mov	r3, r0
 8005bee:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005bf0:	7dfb      	ldrb	r3, [r7, #23]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d0d7      	beq.n	8005ba6 <dir_alloc+0x26>
 8005bf6:	e000      	b.n	8005bfa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005bf8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005bfa:	7dfb      	ldrb	r3, [r7, #23]
 8005bfc:	2b04      	cmp	r3, #4
 8005bfe:	d101      	bne.n	8005c04 <dir_alloc+0x84>
 8005c00:	2307      	movs	r3, #7
 8005c02:	75fb      	strb	r3, [r7, #23]
	return res;
 8005c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3718      	adds	r7, #24
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b084      	sub	sp, #16
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
 8005c16:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	331a      	adds	r3, #26
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7ff f8ed 	bl	8004dfc <ld_word>
 8005c22:	4603      	mov	r3, r0
 8005c24:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	2b03      	cmp	r3, #3
 8005c2c:	d109      	bne.n	8005c42 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	3314      	adds	r3, #20
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7ff f8e2 	bl	8004dfc <ld_word>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	041b      	lsls	r3, r3, #16
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005c42:	68fb      	ldr	r3, [r7, #12]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	331a      	adds	r3, #26
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	b292      	uxth	r2, r2
 8005c60:	4611      	mov	r1, r2
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7ff f905 	bl	8004e72 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	2b03      	cmp	r3, #3
 8005c6e:	d109      	bne.n	8005c84 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	f103 0214 	add.w	r2, r3, #20
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	0c1b      	lsrs	r3, r3, #16
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	4610      	mov	r0, r2
 8005c80:	f7ff f8f7 	bl	8004e72 <st_word>
	}
}
 8005c84:	bf00      	nop
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005c9a:	2100      	movs	r1, #0
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f7ff fe2f 	bl	8005900 <dir_sdi>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005ca6:	7dfb      	ldrb	r3, [r7, #23]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d001      	beq.n	8005cb0 <dir_find+0x24>
 8005cac:	7dfb      	ldrb	r3, [r7, #23]
 8005cae:	e03e      	b.n	8005d2e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	69db      	ldr	r3, [r3, #28]
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	6938      	ldr	r0, [r7, #16]
 8005cb8:	f7ff fb14 	bl	80052e4 <move_window>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005cc0:	7dfb      	ldrb	r3, [r7, #23]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d12f      	bne.n	8005d26 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005cce:	7bfb      	ldrb	r3, [r7, #15]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d102      	bne.n	8005cda <dir_find+0x4e>
 8005cd4:	2304      	movs	r3, #4
 8005cd6:	75fb      	strb	r3, [r7, #23]
 8005cd8:	e028      	b.n	8005d2c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	330b      	adds	r3, #11
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ce6:	b2da      	uxtb	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a1b      	ldr	r3, [r3, #32]
 8005cf0:	330b      	adds	r3, #11
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	f003 0308 	and.w	r3, r3, #8
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10a      	bne.n	8005d12 <dir_find+0x86>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a18      	ldr	r0, [r3, #32]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	3324      	adds	r3, #36	@ 0x24
 8005d04:	220b      	movs	r2, #11
 8005d06:	4619      	mov	r1, r3
 8005d08:	f7ff f936 	bl	8004f78 <mem_cmp>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00b      	beq.n	8005d2a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005d12:	2100      	movs	r1, #0
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f7ff fe6e 	bl	80059f6 <dir_next>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005d1e:	7dfb      	ldrb	r3, [r7, #23]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d0c5      	beq.n	8005cb0 <dir_find+0x24>
 8005d24:	e002      	b.n	8005d2c <dir_find+0xa0>
		if (res != FR_OK) break;
 8005d26:	bf00      	nop
 8005d28:	e000      	b.n	8005d2c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005d2a:	bf00      	nop

	return res;
 8005d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3718      	adds	r7, #24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b084      	sub	sp, #16
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005d44:	2101      	movs	r1, #1
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f7ff ff1a 	bl	8005b80 <dir_alloc>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d11c      	bne.n	8005d90 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	68b8      	ldr	r0, [r7, #8]
 8005d5e:	f7ff fac1 	bl	80052e4 <move_window>
 8005d62:	4603      	mov	r3, r0
 8005d64:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005d66:	7bfb      	ldrb	r3, [r7, #15]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d111      	bne.n	8005d90 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	2220      	movs	r2, #32
 8005d72:	2100      	movs	r1, #0
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7ff f8e4 	bl	8004f42 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a18      	ldr	r0, [r3, #32]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	3324      	adds	r3, #36	@ 0x24
 8005d82:	220b      	movs	r2, #11
 8005d84:	4619      	mov	r1, r3
 8005d86:	f7ff f8bb 	bl	8004f00 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
	...

08005d9c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b088      	sub	sp, #32
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	3324      	adds	r3, #36	@ 0x24
 8005db0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005db2:	220b      	movs	r2, #11
 8005db4:	2120      	movs	r1, #32
 8005db6:	68b8      	ldr	r0, [r7, #8]
 8005db8:	f7ff f8c3 	bl	8004f42 <mem_set>
	si = i = 0; ni = 8;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	613b      	str	r3, [r7, #16]
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	61fb      	str	r3, [r7, #28]
 8005dc4:	2308      	movs	r3, #8
 8005dc6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	1c5a      	adds	r2, r3, #1
 8005dcc:	61fa      	str	r2, [r7, #28]
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005dd6:	7efb      	ldrb	r3, [r7, #27]
 8005dd8:	2b20      	cmp	r3, #32
 8005dda:	d94e      	bls.n	8005e7a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005ddc:	7efb      	ldrb	r3, [r7, #27]
 8005dde:	2b2f      	cmp	r3, #47	@ 0x2f
 8005de0:	d006      	beq.n	8005df0 <create_name+0x54>
 8005de2:	7efb      	ldrb	r3, [r7, #27]
 8005de4:	2b5c      	cmp	r3, #92	@ 0x5c
 8005de6:	d110      	bne.n	8005e0a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005de8:	e002      	b.n	8005df0 <create_name+0x54>
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	3301      	adds	r3, #1
 8005dee:	61fb      	str	r3, [r7, #28]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	4413      	add	r3, r2
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	2b2f      	cmp	r3, #47	@ 0x2f
 8005dfa:	d0f6      	beq.n	8005dea <create_name+0x4e>
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	4413      	add	r3, r2
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	2b5c      	cmp	r3, #92	@ 0x5c
 8005e06:	d0f0      	beq.n	8005dea <create_name+0x4e>
			break;
 8005e08:	e038      	b.n	8005e7c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8005e0a:	7efb      	ldrb	r3, [r7, #27]
 8005e0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e0e:	d003      	beq.n	8005e18 <create_name+0x7c>
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d30c      	bcc.n	8005e32 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	2b0b      	cmp	r3, #11
 8005e1c:	d002      	beq.n	8005e24 <create_name+0x88>
 8005e1e:	7efb      	ldrb	r3, [r7, #27]
 8005e20:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e22:	d001      	beq.n	8005e28 <create_name+0x8c>
 8005e24:	2306      	movs	r3, #6
 8005e26:	e044      	b.n	8005eb2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005e28:	2308      	movs	r3, #8
 8005e2a:	613b      	str	r3, [r7, #16]
 8005e2c:	230b      	movs	r3, #11
 8005e2e:	617b      	str	r3, [r7, #20]
			continue;
 8005e30:	e022      	b.n	8005e78 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005e32:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	da04      	bge.n	8005e44 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005e3a:	7efb      	ldrb	r3, [r7, #27]
 8005e3c:	3b80      	subs	r3, #128	@ 0x80
 8005e3e:	4a1f      	ldr	r2, [pc, #124]	@ (8005ebc <create_name+0x120>)
 8005e40:	5cd3      	ldrb	r3, [r2, r3]
 8005e42:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005e44:	7efb      	ldrb	r3, [r7, #27]
 8005e46:	4619      	mov	r1, r3
 8005e48:	481d      	ldr	r0, [pc, #116]	@ (8005ec0 <create_name+0x124>)
 8005e4a:	f7ff f8bc 	bl	8004fc6 <chk_chr>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <create_name+0xbc>
 8005e54:	2306      	movs	r3, #6
 8005e56:	e02c      	b.n	8005eb2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005e58:	7efb      	ldrb	r3, [r7, #27]
 8005e5a:	2b60      	cmp	r3, #96	@ 0x60
 8005e5c:	d905      	bls.n	8005e6a <create_name+0xce>
 8005e5e:	7efb      	ldrb	r3, [r7, #27]
 8005e60:	2b7a      	cmp	r3, #122	@ 0x7a
 8005e62:	d802      	bhi.n	8005e6a <create_name+0xce>
 8005e64:	7efb      	ldrb	r3, [r7, #27]
 8005e66:	3b20      	subs	r3, #32
 8005e68:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	1c5a      	adds	r2, r3, #1
 8005e6e:	613a      	str	r2, [r7, #16]
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	4413      	add	r3, r2
 8005e74:	7efa      	ldrb	r2, [r7, #27]
 8005e76:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005e78:	e7a6      	b.n	8005dc8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005e7a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	441a      	add	r2, r3
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <create_name+0xf4>
 8005e8c:	2306      	movs	r3, #6
 8005e8e:	e010      	b.n	8005eb2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	2be5      	cmp	r3, #229	@ 0xe5
 8005e96:	d102      	bne.n	8005e9e <create_name+0x102>
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	2205      	movs	r2, #5
 8005e9c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005e9e:	7efb      	ldrb	r3, [r7, #27]
 8005ea0:	2b20      	cmp	r3, #32
 8005ea2:	d801      	bhi.n	8005ea8 <create_name+0x10c>
 8005ea4:	2204      	movs	r2, #4
 8005ea6:	e000      	b.n	8005eaa <create_name+0x10e>
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	330b      	adds	r3, #11
 8005eae:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005eb0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3720      	adds	r7, #32
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	08008f98 	.word	0x08008f98
 8005ec0:	08008f3c 	.word	0x08008f3c

08005ec4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005ed8:	e002      	b.n	8005ee0 <follow_path+0x1c>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	3301      	adds	r3, #1
 8005ede:	603b      	str	r3, [r7, #0]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	2b2f      	cmp	r3, #47	@ 0x2f
 8005ee6:	d0f8      	beq.n	8005eda <follow_path+0x16>
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	2b5c      	cmp	r3, #92	@ 0x5c
 8005eee:	d0f4      	beq.n	8005eda <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	2b1f      	cmp	r3, #31
 8005efc:	d80a      	bhi.n	8005f14 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2280      	movs	r2, #128	@ 0x80
 8005f02:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8005f06:	2100      	movs	r1, #0
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f7ff fcf9 	bl	8005900 <dir_sdi>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	75fb      	strb	r3, [r7, #23]
 8005f12:	e043      	b.n	8005f9c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005f14:	463b      	mov	r3, r7
 8005f16:	4619      	mov	r1, r3
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7ff ff3f 	bl	8005d9c <create_name>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005f22:	7dfb      	ldrb	r3, [r7, #23]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d134      	bne.n	8005f92 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7ff feaf 	bl	8005c8c <dir_find>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005f38:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005f3a:	7dfb      	ldrb	r3, [r7, #23]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00a      	beq.n	8005f56 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005f40:	7dfb      	ldrb	r3, [r7, #23]
 8005f42:	2b04      	cmp	r3, #4
 8005f44:	d127      	bne.n	8005f96 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005f46:	7afb      	ldrb	r3, [r7, #11]
 8005f48:	f003 0304 	and.w	r3, r3, #4
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d122      	bne.n	8005f96 <follow_path+0xd2>
 8005f50:	2305      	movs	r3, #5
 8005f52:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005f54:	e01f      	b.n	8005f96 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005f56:	7afb      	ldrb	r3, [r7, #11]
 8005f58:	f003 0304 	and.w	r3, r3, #4
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d11c      	bne.n	8005f9a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	799b      	ldrb	r3, [r3, #6]
 8005f64:	f003 0310 	and.w	r3, r3, #16
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d102      	bne.n	8005f72 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005f6c:	2305      	movs	r3, #5
 8005f6e:	75fb      	strb	r3, [r7, #23]
 8005f70:	e014      	b.n	8005f9c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	695b      	ldr	r3, [r3, #20]
 8005f7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f80:	4413      	add	r3, r2
 8005f82:	4619      	mov	r1, r3
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f7ff fe42 	bl	8005c0e <ld_clust>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005f90:	e7c0      	b.n	8005f14 <follow_path+0x50>
			if (res != FR_OK) break;
 8005f92:	bf00      	nop
 8005f94:	e002      	b.n	8005f9c <follow_path+0xd8>
				break;
 8005f96:	bf00      	nop
 8005f98:	e000      	b.n	8005f9c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005f9a:	bf00      	nop
			}
		}
	}

	return res;
 8005f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3718      	adds	r7, #24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b087      	sub	sp, #28
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005fae:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d031      	beq.n	8006020 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	617b      	str	r3, [r7, #20]
 8005fc2:	e002      	b.n	8005fca <get_ldnumber+0x24>
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	617b      	str	r3, [r7, #20]
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	2b20      	cmp	r3, #32
 8005fd0:	d903      	bls.n	8005fda <get_ldnumber+0x34>
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	2b3a      	cmp	r3, #58	@ 0x3a
 8005fd8:	d1f4      	bne.n	8005fc4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	2b3a      	cmp	r3, #58	@ 0x3a
 8005fe0:	d11c      	bne.n	800601c <get_ldnumber+0x76>
			tp = *path;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	1c5a      	adds	r2, r3, #1
 8005fec:	60fa      	str	r2, [r7, #12]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	3b30      	subs	r3, #48	@ 0x30
 8005ff2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2b09      	cmp	r3, #9
 8005ff8:	d80e      	bhi.n	8006018 <get_ldnumber+0x72>
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d10a      	bne.n	8006018 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d107      	bne.n	8006018 <get_ldnumber+0x72>
					vol = (int)i;
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	3301      	adds	r3, #1
 8006010:	617b      	str	r3, [r7, #20]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	e002      	b.n	8006022 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800601c:	2300      	movs	r3, #0
 800601e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006020:	693b      	ldr	r3, [r7, #16]
}
 8006022:	4618      	mov	r0, r3
 8006024:	371c      	adds	r7, #28
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
	...

08006030 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	70da      	strb	r2, [r3, #3]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f04f 32ff 	mov.w	r2, #4294967295
 8006046:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006048:	6839      	ldr	r1, [r7, #0]
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7ff f94a 	bl	80052e4 <move_window>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d001      	beq.n	800605a <check_fs+0x2a>
 8006056:	2304      	movs	r3, #4
 8006058:	e038      	b.n	80060cc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	3330      	adds	r3, #48	@ 0x30
 800605e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006062:	4618      	mov	r0, r3
 8006064:	f7fe feca 	bl	8004dfc <ld_word>
 8006068:	4603      	mov	r3, r0
 800606a:	461a      	mov	r2, r3
 800606c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006070:	429a      	cmp	r2, r3
 8006072:	d001      	beq.n	8006078 <check_fs+0x48>
 8006074:	2303      	movs	r3, #3
 8006076:	e029      	b.n	80060cc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800607e:	2be9      	cmp	r3, #233	@ 0xe9
 8006080:	d009      	beq.n	8006096 <check_fs+0x66>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006088:	2beb      	cmp	r3, #235	@ 0xeb
 800608a:	d11e      	bne.n	80060ca <check_fs+0x9a>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006092:	2b90      	cmp	r3, #144	@ 0x90
 8006094:	d119      	bne.n	80060ca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	3330      	adds	r3, #48	@ 0x30
 800609a:	3336      	adds	r3, #54	@ 0x36
 800609c:	4618      	mov	r0, r3
 800609e:	f7fe fec5 	bl	8004e2c <ld_dword>
 80060a2:	4603      	mov	r3, r0
 80060a4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80060a8:	4a0a      	ldr	r2, [pc, #40]	@ (80060d4 <check_fs+0xa4>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d101      	bne.n	80060b2 <check_fs+0x82>
 80060ae:	2300      	movs	r3, #0
 80060b0:	e00c      	b.n	80060cc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	3330      	adds	r3, #48	@ 0x30
 80060b6:	3352      	adds	r3, #82	@ 0x52
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7fe feb7 	bl	8004e2c <ld_dword>
 80060be:	4603      	mov	r3, r0
 80060c0:	4a05      	ldr	r2, [pc, #20]	@ (80060d8 <check_fs+0xa8>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d101      	bne.n	80060ca <check_fs+0x9a>
 80060c6:	2300      	movs	r3, #0
 80060c8:	e000      	b.n	80060cc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80060ca:	2302      	movs	r3, #2
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	00544146 	.word	0x00544146
 80060d8:	33544146 	.word	0x33544146

080060dc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b096      	sub	sp, #88	@ 0x58
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	4613      	mov	r3, r2
 80060e8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	2200      	movs	r2, #0
 80060ee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f7ff ff58 	bl	8005fa6 <get_ldnumber>
 80060f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80060f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	da01      	bge.n	8006102 <find_volume+0x26>
 80060fe:	230b      	movs	r3, #11
 8006100:	e22d      	b.n	800655e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006102:	4aa1      	ldr	r2, [pc, #644]	@ (8006388 <find_volume+0x2ac>)
 8006104:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800610a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800610c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <find_volume+0x3a>
 8006112:	230c      	movs	r3, #12
 8006114:	e223      	b.n	800655e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800611a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800611c:	79fb      	ldrb	r3, [r7, #7]
 800611e:	f023 0301 	bic.w	r3, r3, #1
 8006122:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d01a      	beq.n	8006162 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800612c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800612e:	785b      	ldrb	r3, [r3, #1]
 8006130:	4618      	mov	r0, r3
 8006132:	f7fe fde1 	bl	8004cf8 <disk_status>
 8006136:	4603      	mov	r3, r0
 8006138:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800613c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10c      	bne.n	8006162 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006148:	79fb      	ldrb	r3, [r7, #7]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d007      	beq.n	800615e <find_volume+0x82>
 800614e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006152:	f003 0304 	and.w	r3, r3, #4
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800615a:	230a      	movs	r3, #10
 800615c:	e1ff      	b.n	800655e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800615e:	2300      	movs	r3, #0
 8006160:	e1fd      	b.n	800655e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006164:	2200      	movs	r2, #0
 8006166:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006168:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800616a:	b2da      	uxtb	r2, r3
 800616c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800616e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006172:	785b      	ldrb	r3, [r3, #1]
 8006174:	4618      	mov	r0, r3
 8006176:	f7fe fdd9 	bl	8004d2c <disk_initialize>
 800617a:	4603      	mov	r3, r0
 800617c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006180:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006184:	f003 0301 	and.w	r3, r3, #1
 8006188:	2b00      	cmp	r3, #0
 800618a:	d001      	beq.n	8006190 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800618c:	2303      	movs	r3, #3
 800618e:	e1e6      	b.n	800655e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006190:	79fb      	ldrb	r3, [r7, #7]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d007      	beq.n	80061a6 <find_volume+0xca>
 8006196:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800619a:	f003 0304 	and.w	r3, r3, #4
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80061a2:	230a      	movs	r3, #10
 80061a4:	e1db      	b.n	800655e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80061a6:	2300      	movs	r3, #0
 80061a8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80061aa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80061ac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80061ae:	f7ff ff3f 	bl	8006030 <check_fs>
 80061b2:	4603      	mov	r3, r0
 80061b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80061b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d149      	bne.n	8006254 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80061c0:	2300      	movs	r3, #0
 80061c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80061c4:	e01e      	b.n	8006204 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80061c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80061cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061ce:	011b      	lsls	r3, r3, #4
 80061d0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80061d4:	4413      	add	r3, r2
 80061d6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80061d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061da:	3304      	adds	r3, #4
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d006      	beq.n	80061f0 <find_volume+0x114>
 80061e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e4:	3308      	adds	r3, #8
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7fe fe20 	bl	8004e2c <ld_dword>
 80061ec:	4602      	mov	r2, r0
 80061ee:	e000      	b.n	80061f2 <find_volume+0x116>
 80061f0:	2200      	movs	r2, #0
 80061f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	3358      	adds	r3, #88	@ 0x58
 80061f8:	443b      	add	r3, r7
 80061fa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80061fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006200:	3301      	adds	r3, #1
 8006202:	643b      	str	r3, [r7, #64]	@ 0x40
 8006204:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006206:	2b03      	cmp	r3, #3
 8006208:	d9dd      	bls.n	80061c6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800620a:	2300      	movs	r3, #0
 800620c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800620e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006210:	2b00      	cmp	r3, #0
 8006212:	d002      	beq.n	800621a <find_volume+0x13e>
 8006214:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006216:	3b01      	subs	r3, #1
 8006218:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800621a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	3358      	adds	r3, #88	@ 0x58
 8006220:	443b      	add	r3, r7
 8006222:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006226:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006228:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800622a:	2b00      	cmp	r3, #0
 800622c:	d005      	beq.n	800623a <find_volume+0x15e>
 800622e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006230:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006232:	f7ff fefd 	bl	8006030 <check_fs>
 8006236:	4603      	mov	r3, r0
 8006238:	e000      	b.n	800623c <find_volume+0x160>
 800623a:	2303      	movs	r3, #3
 800623c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006240:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006244:	2b01      	cmp	r3, #1
 8006246:	d905      	bls.n	8006254 <find_volume+0x178>
 8006248:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800624a:	3301      	adds	r3, #1
 800624c:	643b      	str	r3, [r7, #64]	@ 0x40
 800624e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006250:	2b03      	cmp	r3, #3
 8006252:	d9e2      	bls.n	800621a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006254:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006258:	2b04      	cmp	r3, #4
 800625a:	d101      	bne.n	8006260 <find_volume+0x184>
 800625c:	2301      	movs	r3, #1
 800625e:	e17e      	b.n	800655e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006260:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006264:	2b01      	cmp	r3, #1
 8006266:	d901      	bls.n	800626c <find_volume+0x190>
 8006268:	230d      	movs	r3, #13
 800626a:	e178      	b.n	800655e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800626c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800626e:	3330      	adds	r3, #48	@ 0x30
 8006270:	330b      	adds	r3, #11
 8006272:	4618      	mov	r0, r3
 8006274:	f7fe fdc2 	bl	8004dfc <ld_word>
 8006278:	4603      	mov	r3, r0
 800627a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800627e:	d001      	beq.n	8006284 <find_volume+0x1a8>
 8006280:	230d      	movs	r3, #13
 8006282:	e16c      	b.n	800655e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006286:	3330      	adds	r3, #48	@ 0x30
 8006288:	3316      	adds	r3, #22
 800628a:	4618      	mov	r0, r3
 800628c:	f7fe fdb6 	bl	8004dfc <ld_word>
 8006290:	4603      	mov	r3, r0
 8006292:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006294:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006296:	2b00      	cmp	r3, #0
 8006298:	d106      	bne.n	80062a8 <find_volume+0x1cc>
 800629a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800629c:	3330      	adds	r3, #48	@ 0x30
 800629e:	3324      	adds	r3, #36	@ 0x24
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7fe fdc3 	bl	8004e2c <ld_dword>
 80062a6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80062a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80062ac:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80062ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b0:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80062b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80062b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ba:	789b      	ldrb	r3, [r3, #2]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d005      	beq.n	80062cc <find_volume+0x1f0>
 80062c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c2:	789b      	ldrb	r3, [r3, #2]
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d001      	beq.n	80062cc <find_volume+0x1f0>
 80062c8:	230d      	movs	r3, #13
 80062ca:	e148      	b.n	800655e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80062cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ce:	789b      	ldrb	r3, [r3, #2]
 80062d0:	461a      	mov	r2, r3
 80062d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062d4:	fb02 f303 	mul.w	r3, r2, r3
 80062d8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80062da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062e0:	461a      	mov	r2, r3
 80062e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80062e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e8:	895b      	ldrh	r3, [r3, #10]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d008      	beq.n	8006300 <find_volume+0x224>
 80062ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f0:	895b      	ldrh	r3, [r3, #10]
 80062f2:	461a      	mov	r2, r3
 80062f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f6:	895b      	ldrh	r3, [r3, #10]
 80062f8:	3b01      	subs	r3, #1
 80062fa:	4013      	ands	r3, r2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d001      	beq.n	8006304 <find_volume+0x228>
 8006300:	230d      	movs	r3, #13
 8006302:	e12c      	b.n	800655e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006306:	3330      	adds	r3, #48	@ 0x30
 8006308:	3311      	adds	r3, #17
 800630a:	4618      	mov	r0, r3
 800630c:	f7fe fd76 	bl	8004dfc <ld_word>
 8006310:	4603      	mov	r3, r0
 8006312:	461a      	mov	r2, r3
 8006314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006316:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800631a:	891b      	ldrh	r3, [r3, #8]
 800631c:	f003 030f 	and.w	r3, r3, #15
 8006320:	b29b      	uxth	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <find_volume+0x24e>
 8006326:	230d      	movs	r3, #13
 8006328:	e119      	b.n	800655e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800632a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800632c:	3330      	adds	r3, #48	@ 0x30
 800632e:	3313      	adds	r3, #19
 8006330:	4618      	mov	r0, r3
 8006332:	f7fe fd63 	bl	8004dfc <ld_word>
 8006336:	4603      	mov	r3, r0
 8006338:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800633a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800633c:	2b00      	cmp	r3, #0
 800633e:	d106      	bne.n	800634e <find_volume+0x272>
 8006340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006342:	3330      	adds	r3, #48	@ 0x30
 8006344:	3320      	adds	r3, #32
 8006346:	4618      	mov	r0, r3
 8006348:	f7fe fd70 	bl	8004e2c <ld_dword>
 800634c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800634e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006350:	3330      	adds	r3, #48	@ 0x30
 8006352:	330e      	adds	r3, #14
 8006354:	4618      	mov	r0, r3
 8006356:	f7fe fd51 	bl	8004dfc <ld_word>
 800635a:	4603      	mov	r3, r0
 800635c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800635e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006360:	2b00      	cmp	r3, #0
 8006362:	d101      	bne.n	8006368 <find_volume+0x28c>
 8006364:	230d      	movs	r3, #13
 8006366:	e0fa      	b.n	800655e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006368:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800636a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800636c:	4413      	add	r3, r2
 800636e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006370:	8912      	ldrh	r2, [r2, #8]
 8006372:	0912      	lsrs	r2, r2, #4
 8006374:	b292      	uxth	r2, r2
 8006376:	4413      	add	r3, r2
 8006378:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800637a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800637c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800637e:	429a      	cmp	r2, r3
 8006380:	d204      	bcs.n	800638c <find_volume+0x2b0>
 8006382:	230d      	movs	r3, #13
 8006384:	e0eb      	b.n	800655e <find_volume+0x482>
 8006386:	bf00      	nop
 8006388:	20000260 	.word	0x20000260
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800638c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800638e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006394:	8952      	ldrh	r2, [r2, #10]
 8006396:	fbb3 f3f2 	udiv	r3, r3, r2
 800639a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800639c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d101      	bne.n	80063a6 <find_volume+0x2ca>
 80063a2:	230d      	movs	r3, #13
 80063a4:	e0db      	b.n	800655e <find_volume+0x482>
		fmt = FS_FAT32;
 80063a6:	2303      	movs	r3, #3
 80063a8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80063ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ae:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d802      	bhi.n	80063bc <find_volume+0x2e0>
 80063b6:	2302      	movs	r3, #2
 80063b8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80063bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063be:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d802      	bhi.n	80063cc <find_volume+0x2f0>
 80063c6:	2301      	movs	r3, #1
 80063c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80063cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ce:	1c9a      	adds	r2, r3, #2
 80063d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80063d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80063d8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80063da:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80063dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063de:	441a      	add	r2, r3
 80063e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80063e4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80063e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e8:	441a      	add	r2, r3
 80063ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ec:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 80063ee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80063f2:	2b03      	cmp	r3, #3
 80063f4:	d11e      	bne.n	8006434 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80063f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f8:	3330      	adds	r3, #48	@ 0x30
 80063fa:	332a      	adds	r3, #42	@ 0x2a
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7fe fcfd 	bl	8004dfc <ld_word>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <find_volume+0x330>
 8006408:	230d      	movs	r3, #13
 800640a:	e0a8      	b.n	800655e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800640c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800640e:	891b      	ldrh	r3, [r3, #8]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d001      	beq.n	8006418 <find_volume+0x33c>
 8006414:	230d      	movs	r3, #13
 8006416:	e0a2      	b.n	800655e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800641a:	3330      	adds	r3, #48	@ 0x30
 800641c:	332c      	adds	r3, #44	@ 0x2c
 800641e:	4618      	mov	r0, r3
 8006420:	f7fe fd04 	bl	8004e2c <ld_dword>
 8006424:	4602      	mov	r2, r0
 8006426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006428:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800642a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	647b      	str	r3, [r7, #68]	@ 0x44
 8006432:	e01f      	b.n	8006474 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006436:	891b      	ldrh	r3, [r3, #8]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <find_volume+0x364>
 800643c:	230d      	movs	r3, #13
 800643e:	e08e      	b.n	800655e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006442:	6a1a      	ldr	r2, [r3, #32]
 8006444:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006446:	441a      	add	r2, r3
 8006448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800644a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800644c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006450:	2b02      	cmp	r3, #2
 8006452:	d103      	bne.n	800645c <find_volume+0x380>
 8006454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	005b      	lsls	r3, r3, #1
 800645a:	e00a      	b.n	8006472 <find_volume+0x396>
 800645c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800645e:	695a      	ldr	r2, [r3, #20]
 8006460:	4613      	mov	r3, r2
 8006462:	005b      	lsls	r3, r3, #1
 8006464:	4413      	add	r3, r2
 8006466:	085a      	lsrs	r2, r3, #1
 8006468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	f003 0301 	and.w	r3, r3, #1
 8006470:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006472:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006476:	699a      	ldr	r2, [r3, #24]
 8006478:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800647a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800647e:	0a5b      	lsrs	r3, r3, #9
 8006480:	429a      	cmp	r2, r3
 8006482:	d201      	bcs.n	8006488 <find_volume+0x3ac>
 8006484:	230d      	movs	r3, #13
 8006486:	e06a      	b.n	800655e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800648a:	f04f 32ff 	mov.w	r2, #4294967295
 800648e:	611a      	str	r2, [r3, #16]
 8006490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006492:	691a      	ldr	r2, [r3, #16]
 8006494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006496:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800649a:	2280      	movs	r2, #128	@ 0x80
 800649c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800649e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80064a2:	2b03      	cmp	r3, #3
 80064a4:	d149      	bne.n	800653a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80064a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a8:	3330      	adds	r3, #48	@ 0x30
 80064aa:	3330      	adds	r3, #48	@ 0x30
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7fe fca5 	bl	8004dfc <ld_word>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d140      	bne.n	800653a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80064b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064ba:	3301      	adds	r3, #1
 80064bc:	4619      	mov	r1, r3
 80064be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80064c0:	f7fe ff10 	bl	80052e4 <move_window>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d137      	bne.n	800653a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80064ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064cc:	2200      	movs	r2, #0
 80064ce:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80064d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d2:	3330      	adds	r3, #48	@ 0x30
 80064d4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80064d8:	4618      	mov	r0, r3
 80064da:	f7fe fc8f 	bl	8004dfc <ld_word>
 80064de:	4603      	mov	r3, r0
 80064e0:	461a      	mov	r2, r3
 80064e2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d127      	bne.n	800653a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80064ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ec:	3330      	adds	r3, #48	@ 0x30
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7fe fc9c 	bl	8004e2c <ld_dword>
 80064f4:	4603      	mov	r3, r0
 80064f6:	4a1c      	ldr	r2, [pc, #112]	@ (8006568 <find_volume+0x48c>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d11e      	bne.n	800653a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80064fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064fe:	3330      	adds	r3, #48	@ 0x30
 8006500:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006504:	4618      	mov	r0, r3
 8006506:	f7fe fc91 	bl	8004e2c <ld_dword>
 800650a:	4603      	mov	r3, r0
 800650c:	4a17      	ldr	r2, [pc, #92]	@ (800656c <find_volume+0x490>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d113      	bne.n	800653a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006514:	3330      	adds	r3, #48	@ 0x30
 8006516:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800651a:	4618      	mov	r0, r3
 800651c:	f7fe fc86 	bl	8004e2c <ld_dword>
 8006520:	4602      	mov	r2, r0
 8006522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006524:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006528:	3330      	adds	r3, #48	@ 0x30
 800652a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800652e:	4618      	mov	r0, r3
 8006530:	f7fe fc7c 	bl	8004e2c <ld_dword>
 8006534:	4602      	mov	r2, r0
 8006536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006538:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800653a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800653c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006540:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006542:	4b0b      	ldr	r3, [pc, #44]	@ (8006570 <find_volume+0x494>)
 8006544:	881b      	ldrh	r3, [r3, #0]
 8006546:	3301      	adds	r3, #1
 8006548:	b29a      	uxth	r2, r3
 800654a:	4b09      	ldr	r3, [pc, #36]	@ (8006570 <find_volume+0x494>)
 800654c:	801a      	strh	r2, [r3, #0]
 800654e:	4b08      	ldr	r3, [pc, #32]	@ (8006570 <find_volume+0x494>)
 8006550:	881a      	ldrh	r2, [r3, #0]
 8006552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006554:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006556:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006558:	f7fe fe5c 	bl	8005214 <clear_lock>
#endif
	return FR_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3758      	adds	r7, #88	@ 0x58
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	41615252 	.word	0x41615252
 800656c:	61417272 	.word	0x61417272
 8006570:	20000264 	.word	0x20000264

08006574 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800657e:	2309      	movs	r3, #9
 8006580:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d01c      	beq.n	80065c2 <validate+0x4e>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d018      	beq.n	80065c2 <validate+0x4e>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d013      	beq.n	80065c2 <validate+0x4e>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	889a      	ldrh	r2, [r3, #4]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	88db      	ldrh	r3, [r3, #6]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d10c      	bne.n	80065c2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	785b      	ldrb	r3, [r3, #1]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f7fe fba2 	bl	8004cf8 <disk_status>
 80065b4:	4603      	mov	r3, r0
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <validate+0x4e>
			res = FR_OK;
 80065be:	2300      	movs	r3, #0
 80065c0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80065c2:	7bfb      	ldrb	r3, [r7, #15]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d102      	bne.n	80065ce <validate+0x5a>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	e000      	b.n	80065d0 <validate+0x5c>
 80065ce:	2300      	movs	r3, #0
 80065d0:	683a      	ldr	r2, [r7, #0]
 80065d2:	6013      	str	r3, [r2, #0]
	return res;
 80065d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80065de:	b580      	push	{r7, lr}
 80065e0:	b098      	sub	sp, #96	@ 0x60
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	60f8      	str	r0, [r7, #12]
 80065e6:	60b9      	str	r1, [r7, #8]
 80065e8:	4613      	mov	r3, r2
 80065ea:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <f_open+0x18>
 80065f2:	2309      	movs	r3, #9
 80065f4:	e1a9      	b.n	800694a <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80065f6:	79fb      	ldrb	r3, [r7, #7]
 80065f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80065fc:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80065fe:	79fa      	ldrb	r2, [r7, #7]
 8006600:	f107 0110 	add.w	r1, r7, #16
 8006604:	f107 0308 	add.w	r3, r7, #8
 8006608:	4618      	mov	r0, r3
 800660a:	f7ff fd67 	bl	80060dc <find_volume>
 800660e:	4603      	mov	r3, r0
 8006610:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8006614:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006618:	2b00      	cmp	r3, #0
 800661a:	f040 818d 	bne.w	8006938 <f_open+0x35a>
		dj.obj.fs = fs;
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	f107 0314 	add.w	r3, r7, #20
 8006628:	4611      	mov	r1, r2
 800662a:	4618      	mov	r0, r3
 800662c:	f7ff fc4a 	bl	8005ec4 <follow_path>
 8006630:	4603      	mov	r3, r0
 8006632:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006636:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800663a:	2b00      	cmp	r3, #0
 800663c:	d118      	bne.n	8006670 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800663e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006642:	b25b      	sxtb	r3, r3
 8006644:	2b00      	cmp	r3, #0
 8006646:	da03      	bge.n	8006650 <f_open+0x72>
				res = FR_INVALID_NAME;
 8006648:	2306      	movs	r3, #6
 800664a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800664e:	e00f      	b.n	8006670 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006650:	79fb      	ldrb	r3, [r7, #7]
 8006652:	2b01      	cmp	r3, #1
 8006654:	bf8c      	ite	hi
 8006656:	2301      	movhi	r3, #1
 8006658:	2300      	movls	r3, #0
 800665a:	b2db      	uxtb	r3, r3
 800665c:	461a      	mov	r2, r3
 800665e:	f107 0314 	add.w	r3, r7, #20
 8006662:	4611      	mov	r1, r2
 8006664:	4618      	mov	r0, r3
 8006666:	f7fe fcc9 	bl	8004ffc <chk_lock>
 800666a:	4603      	mov	r3, r0
 800666c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006670:	79fb      	ldrb	r3, [r7, #7]
 8006672:	f003 031c 	and.w	r3, r3, #28
 8006676:	2b00      	cmp	r3, #0
 8006678:	d07f      	beq.n	800677a <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800667a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800667e:	2b00      	cmp	r3, #0
 8006680:	d017      	beq.n	80066b2 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006682:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006686:	2b04      	cmp	r3, #4
 8006688:	d10e      	bne.n	80066a8 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800668a:	f7fe fd13 	bl	80050b4 <enq_lock>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d006      	beq.n	80066a2 <f_open+0xc4>
 8006694:	f107 0314 	add.w	r3, r7, #20
 8006698:	4618      	mov	r0, r3
 800669a:	f7ff fb4c 	bl	8005d36 <dir_register>
 800669e:	4603      	mov	r3, r0
 80066a0:	e000      	b.n	80066a4 <f_open+0xc6>
 80066a2:	2312      	movs	r3, #18
 80066a4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80066a8:	79fb      	ldrb	r3, [r7, #7]
 80066aa:	f043 0308 	orr.w	r3, r3, #8
 80066ae:	71fb      	strb	r3, [r7, #7]
 80066b0:	e010      	b.n	80066d4 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80066b2:	7ebb      	ldrb	r3, [r7, #26]
 80066b4:	f003 0311 	and.w	r3, r3, #17
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d003      	beq.n	80066c4 <f_open+0xe6>
					res = FR_DENIED;
 80066bc:	2307      	movs	r3, #7
 80066be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80066c2:	e007      	b.n	80066d4 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80066c4:	79fb      	ldrb	r3, [r7, #7]
 80066c6:	f003 0304 	and.w	r3, r3, #4
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d002      	beq.n	80066d4 <f_open+0xf6>
 80066ce:	2308      	movs	r3, #8
 80066d0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80066d4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d168      	bne.n	80067ae <f_open+0x1d0>
 80066dc:	79fb      	ldrb	r3, [r7, #7]
 80066de:	f003 0308 	and.w	r3, r3, #8
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d063      	beq.n	80067ae <f_open+0x1d0>
				dw = GET_FATTIME();
 80066e6:	f7fd fdcf 	bl	8004288 <get_fattime>
 80066ea:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80066ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ee:	330e      	adds	r3, #14
 80066f0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7fe fbd8 	bl	8004ea8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80066f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066fa:	3316      	adds	r3, #22
 80066fc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80066fe:	4618      	mov	r0, r3
 8006700:	f7fe fbd2 	bl	8004ea8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006706:	330b      	adds	r3, #11
 8006708:	2220      	movs	r2, #32
 800670a:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006710:	4611      	mov	r1, r2
 8006712:	4618      	mov	r0, r3
 8006714:	f7ff fa7b 	bl	8005c0e <ld_clust>
 8006718:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800671e:	2200      	movs	r2, #0
 8006720:	4618      	mov	r0, r3
 8006722:	f7ff fa93 	bl	8005c4c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006728:	331c      	adds	r3, #28
 800672a:	2100      	movs	r1, #0
 800672c:	4618      	mov	r0, r3
 800672e:	f7fe fbbb 	bl	8004ea8 <st_dword>
					fs->wflag = 1;
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	2201      	movs	r2, #1
 8006736:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006738:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800673a:	2b00      	cmp	r3, #0
 800673c:	d037      	beq.n	80067ae <f_open+0x1d0>
						dw = fs->winsect;
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006742:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006744:	f107 0314 	add.w	r3, r7, #20
 8006748:	2200      	movs	r2, #0
 800674a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800674c:	4618      	mov	r0, r3
 800674e:	f7fe ffa6 	bl	800569e <remove_chain>
 8006752:	4603      	mov	r3, r0
 8006754:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8006758:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800675c:	2b00      	cmp	r3, #0
 800675e:	d126      	bne.n	80067ae <f_open+0x1d0>
							res = move_window(fs, dw);
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006764:	4618      	mov	r0, r3
 8006766:	f7fe fdbd 	bl	80052e4 <move_window>
 800676a:	4603      	mov	r3, r0
 800676c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006774:	3a01      	subs	r2, #1
 8006776:	60da      	str	r2, [r3, #12]
 8006778:	e019      	b.n	80067ae <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800677a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800677e:	2b00      	cmp	r3, #0
 8006780:	d115      	bne.n	80067ae <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006782:	7ebb      	ldrb	r3, [r7, #26]
 8006784:	f003 0310 	and.w	r3, r3, #16
 8006788:	2b00      	cmp	r3, #0
 800678a:	d003      	beq.n	8006794 <f_open+0x1b6>
					res = FR_NO_FILE;
 800678c:	2304      	movs	r3, #4
 800678e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006792:	e00c      	b.n	80067ae <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006794:	79fb      	ldrb	r3, [r7, #7]
 8006796:	f003 0302 	and.w	r3, r3, #2
 800679a:	2b00      	cmp	r3, #0
 800679c:	d007      	beq.n	80067ae <f_open+0x1d0>
 800679e:	7ebb      	ldrb	r3, [r7, #26]
 80067a0:	f003 0301 	and.w	r3, r3, #1
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d002      	beq.n	80067ae <f_open+0x1d0>
						res = FR_DENIED;
 80067a8:	2307      	movs	r3, #7
 80067aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80067ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d126      	bne.n	8006804 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80067b6:	79fb      	ldrb	r3, [r7, #7]
 80067b8:	f003 0308 	and.w	r3, r3, #8
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d003      	beq.n	80067c8 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80067c0:	79fb      	ldrb	r3, [r7, #7]
 80067c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067c6:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80067d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80067d6:	79fb      	ldrb	r3, [r7, #7]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	bf8c      	ite	hi
 80067dc:	2301      	movhi	r3, #1
 80067de:	2300      	movls	r3, #0
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	461a      	mov	r2, r3
 80067e4:	f107 0314 	add.w	r3, r7, #20
 80067e8:	4611      	mov	r1, r2
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7fe fc84 	bl	80050f8 <inc_lock>
 80067f0:	4602      	mov	r2, r0
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d102      	bne.n	8006804 <f_open+0x226>
 80067fe:	2302      	movs	r3, #2
 8006800:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006804:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006808:	2b00      	cmp	r3, #0
 800680a:	f040 8095 	bne.w	8006938 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006812:	4611      	mov	r1, r2
 8006814:	4618      	mov	r0, r3
 8006816:	f7ff f9fa 	bl	8005c0e <ld_clust>
 800681a:	4602      	mov	r2, r0
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006822:	331c      	adds	r3, #28
 8006824:	4618      	mov	r0, r3
 8006826:	f7fe fb01 	bl	8004e2c <ld_dword>
 800682a:	4602      	mov	r2, r0
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006836:	693a      	ldr	r2, [r7, #16]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	88da      	ldrh	r2, [r3, #6]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	79fa      	ldrb	r2, [r7, #7]
 8006848:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2200      	movs	r2, #0
 8006854:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	3330      	adds	r3, #48	@ 0x30
 8006860:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006864:	2100      	movs	r1, #0
 8006866:	4618      	mov	r0, r3
 8006868:	f7fe fb6b 	bl	8004f42 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800686c:	79fb      	ldrb	r3, [r7, #7]
 800686e:	f003 0320 	and.w	r3, r3, #32
 8006872:	2b00      	cmp	r3, #0
 8006874:	d060      	beq.n	8006938 <f_open+0x35a>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d05c      	beq.n	8006938 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	68da      	ldr	r2, [r3, #12]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	895b      	ldrh	r3, [r3, #10]
 800688a:	025b      	lsls	r3, r3, #9
 800688c:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	657b      	str	r3, [r7, #84]	@ 0x54
 800689a:	e016      	b.n	80068ca <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80068a0:	4618      	mov	r0, r3
 80068a2:	f7fe fd6b 	bl	800537c <get_fat>
 80068a6:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80068a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d802      	bhi.n	80068b4 <f_open+0x2d6>
 80068ae:	2302      	movs	r3, #2
 80068b0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80068b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80068b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ba:	d102      	bne.n	80068c2 <f_open+0x2e4>
 80068bc:	2301      	movs	r3, #1
 80068be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80068c2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80068c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80068ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d103      	bne.n	80068da <f_open+0x2fc>
 80068d2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80068d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d8e0      	bhi.n	800689c <f_open+0x2be>
				}
				fp->clust = clst;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80068de:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80068e0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d127      	bne.n	8006938 <f_open+0x35a>
 80068e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d022      	beq.n	8006938 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7fe fd21 	bl	800533e <clust2sect>
 80068fc:	6478      	str	r0, [r7, #68]	@ 0x44
 80068fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006900:	2b00      	cmp	r3, #0
 8006902:	d103      	bne.n	800690c <f_open+0x32e>
						res = FR_INT_ERR;
 8006904:	2302      	movs	r3, #2
 8006906:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800690a:	e015      	b.n	8006938 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800690c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800690e:	0a5a      	lsrs	r2, r3, #9
 8006910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006912:	441a      	add	r2, r3
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	7858      	ldrb	r0, [r3, #1]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6a1a      	ldr	r2, [r3, #32]
 8006926:	2301      	movs	r3, #1
 8006928:	f7fe fa28 	bl	8004d7c <disk_read>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d002      	beq.n	8006938 <f_open+0x35a>
 8006932:	2301      	movs	r3, #1
 8006934:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006938:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800693c:	2b00      	cmp	r3, #0
 800693e:	d002      	beq.n	8006946 <f_open+0x368>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006946:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800694a:	4618      	mov	r0, r3
 800694c:	3760      	adds	r7, #96	@ 0x60
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b08e      	sub	sp, #56	@ 0x38
 8006956:	af00      	add	r7, sp, #0
 8006958:	60f8      	str	r0, [r7, #12]
 800695a:	60b9      	str	r1, [r7, #8]
 800695c:	607a      	str	r2, [r7, #4]
 800695e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	2200      	movs	r2, #0
 8006968:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f107 0214 	add.w	r2, r7, #20
 8006970:	4611      	mov	r1, r2
 8006972:	4618      	mov	r0, r3
 8006974:	f7ff fdfe 	bl	8006574 <validate>
 8006978:	4603      	mov	r3, r0
 800697a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800697e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006982:	2b00      	cmp	r3, #0
 8006984:	d107      	bne.n	8006996 <f_read+0x44>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	7d5b      	ldrb	r3, [r3, #21]
 800698a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800698e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006992:	2b00      	cmp	r3, #0
 8006994:	d002      	beq.n	800699c <f_read+0x4a>
 8006996:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800699a:	e115      	b.n	8006bc8 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	7d1b      	ldrb	r3, [r3, #20]
 80069a0:	f003 0301 	and.w	r3, r3, #1
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d101      	bne.n	80069ac <f_read+0x5a>
 80069a8:	2307      	movs	r3, #7
 80069aa:	e10d      	b.n	8006bc8 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	68da      	ldr	r2, [r3, #12]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	6a3b      	ldr	r3, [r7, #32]
 80069bc:	429a      	cmp	r2, r3
 80069be:	f240 80fe 	bls.w	8006bbe <f_read+0x26c>
 80069c2:	6a3b      	ldr	r3, [r7, #32]
 80069c4:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80069c6:	e0fa      	b.n	8006bbe <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f040 80c6 	bne.w	8006b62 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	0a5b      	lsrs	r3, r3, #9
 80069dc:	697a      	ldr	r2, [r7, #20]
 80069de:	8952      	ldrh	r2, [r2, #10]
 80069e0:	3a01      	subs	r2, #1
 80069e2:	4013      	ands	r3, r2
 80069e4:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d12f      	bne.n	8006a4c <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d103      	bne.n	80069fc <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80069fa:	e013      	b.n	8006a24 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d007      	beq.n	8006a14 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	4619      	mov	r1, r3
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f7fe ff44 	bl	8005898 <clmt_clust>
 8006a10:	6338      	str	r0, [r7, #48]	@ 0x30
 8006a12:	e007      	b.n	8006a24 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	4610      	mov	r0, r2
 8006a1e:	f7fe fcad 	bl	800537c <get_fat>
 8006a22:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d804      	bhi.n	8006a34 <f_read+0xe2>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2202      	movs	r2, #2
 8006a2e:	755a      	strb	r2, [r3, #21]
 8006a30:	2302      	movs	r3, #2
 8006a32:	e0c9      	b.n	8006bc8 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a3a:	d104      	bne.n	8006a46 <f_read+0xf4>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	755a      	strb	r2, [r3, #21]
 8006a42:	2301      	movs	r3, #1
 8006a44:	e0c0      	b.n	8006bc8 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a4a:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006a4c:	697a      	ldr	r2, [r7, #20]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	69db      	ldr	r3, [r3, #28]
 8006a52:	4619      	mov	r1, r3
 8006a54:	4610      	mov	r0, r2
 8006a56:	f7fe fc72 	bl	800533e <clust2sect>
 8006a5a:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d104      	bne.n	8006a6c <f_read+0x11a>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2202      	movs	r2, #2
 8006a66:	755a      	strb	r2, [r3, #21]
 8006a68:	2302      	movs	r3, #2
 8006a6a:	e0ad      	b.n	8006bc8 <f_read+0x276>
			sect += csect;
 8006a6c:	69ba      	ldr	r2, [r7, #24]
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	4413      	add	r3, r2
 8006a72:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	0a5b      	lsrs	r3, r3, #9
 8006a78:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d039      	beq.n	8006af4 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006a80:	69fa      	ldr	r2, [r7, #28]
 8006a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a84:	4413      	add	r3, r2
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	8952      	ldrh	r2, [r2, #10]
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d905      	bls.n	8006a9a <f_read+0x148>
					cc = fs->csize - csect;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	895b      	ldrh	r3, [r3, #10]
 8006a92:	461a      	mov	r2, r3
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	7858      	ldrb	r0, [r3, #1]
 8006a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006aa4:	f7fe f96a 	bl	8004d7c <disk_read>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d004      	beq.n	8006ab8 <f_read+0x166>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	755a      	strb	r2, [r3, #21]
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e087      	b.n	8006bc8 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	7d1b      	ldrb	r3, [r3, #20]
 8006abc:	b25b      	sxtb	r3, r3
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	da14      	bge.n	8006aec <f_read+0x19a>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6a1a      	ldr	r2, [r3, #32]
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d90d      	bls.n	8006aec <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6a1a      	ldr	r2, [r3, #32]
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	025b      	lsls	r3, r3, #9
 8006ada:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006adc:	18d0      	adds	r0, r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	3330      	adds	r3, #48	@ 0x30
 8006ae2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	f7fe fa0a 	bl	8004f00 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aee:	025b      	lsls	r3, r3, #9
 8006af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8006af2:	e050      	b.n	8006b96 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6a1b      	ldr	r3, [r3, #32]
 8006af8:	69ba      	ldr	r2, [r7, #24]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d02e      	beq.n	8006b5c <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	7d1b      	ldrb	r3, [r3, #20]
 8006b02:	b25b      	sxtb	r3, r3
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	da18      	bge.n	8006b3a <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	7858      	ldrb	r0, [r3, #1]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6a1a      	ldr	r2, [r3, #32]
 8006b16:	2301      	movs	r3, #1
 8006b18:	f7fe f950 	bl	8004dbc <disk_write>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d004      	beq.n	8006b2c <f_read+0x1da>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2201      	movs	r2, #1
 8006b26:	755a      	strb	r2, [r3, #21]
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e04d      	b.n	8006bc8 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	7d1b      	ldrb	r3, [r3, #20]
 8006b30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b34:	b2da      	uxtb	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	7858      	ldrb	r0, [r3, #1]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006b44:	2301      	movs	r3, #1
 8006b46:	69ba      	ldr	r2, [r7, #24]
 8006b48:	f7fe f918 	bl	8004d7c <disk_read>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d004      	beq.n	8006b5c <f_read+0x20a>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2201      	movs	r2, #1
 8006b56:	755a      	strb	r2, [r3, #21]
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e035      	b.n	8006bc8 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	69ba      	ldr	r2, [r7, #24]
 8006b60:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b6a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8006b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006b70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d901      	bls.n	8006b7c <f_read+0x22a>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b8a:	4413      	add	r3, r2
 8006b8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b8e:	4619      	mov	r1, r3
 8006b90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006b92:	f7fe f9b5 	bl	8004f00 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006b96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b9a:	4413      	add	r3, r2
 8006b9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	699a      	ldr	r2, [r3, #24]
 8006ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ba4:	441a      	add	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	619a      	str	r2, [r3, #24]
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb0:	441a      	add	r2, r3
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	601a      	str	r2, [r3, #0]
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f47f af01 	bne.w	80069c8 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3738      	adds	r7, #56	@ 0x38
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b090      	sub	sp, #64	@ 0x40
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f107 0208 	add.w	r2, r7, #8
 8006be0:	4611      	mov	r1, r2
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7ff fcc6 	bl	8006574 <validate>
 8006be8:	4603      	mov	r3, r0
 8006bea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8006bee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d103      	bne.n	8006bfe <f_lseek+0x2e>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	7d5b      	ldrb	r3, [r3, #21]
 8006bfa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8006bfe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d002      	beq.n	8006c0c <f_lseek+0x3c>
 8006c06:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006c0a:	e1e6      	b.n	8006fda <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 80d1 	beq.w	8006db8 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c1c:	d15a      	bne.n	8006cd4 <f_lseek+0x104>
			tbl = fp->cltbl;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c22:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8006c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c26:	1d1a      	adds	r2, r3, #4
 8006c28:	627a      	str	r2, [r7, #36]	@ 0x24
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	617b      	str	r3, [r7, #20]
 8006c2e:	2302      	movs	r3, #2
 8006c30:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8006c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d03a      	beq.n	8006cb4 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8006c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c40:	613b      	str	r3, [r7, #16]
 8006c42:	2300      	movs	r3, #0
 8006c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c48:	3302      	adds	r3, #2
 8006c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8006c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4e:	60fb      	str	r3, [r7, #12]
 8006c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c52:	3301      	adds	r3, #1
 8006c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7fe fb8e 	bl	800537c <get_fat>
 8006c60:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8006c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d804      	bhi.n	8006c72 <f_lseek+0xa2>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	755a      	strb	r2, [r3, #21]
 8006c6e:	2302      	movs	r3, #2
 8006c70:	e1b3      	b.n	8006fda <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c78:	d104      	bne.n	8006c84 <f_lseek+0xb4>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	755a      	strb	r2, [r3, #21]
 8006c80:	2301      	movs	r3, #1
 8006c82:	e1aa      	b.n	8006fda <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	3301      	adds	r3, #1
 8006c88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d0de      	beq.n	8006c4c <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8006c8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d809      	bhi.n	8006caa <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8006c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c98:	1d1a      	adds	r2, r3, #4
 8006c9a:	627a      	str	r2, [r7, #36]	@ 0x24
 8006c9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c9e:	601a      	str	r2, [r3, #0]
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca2:	1d1a      	adds	r2, r3, #4
 8006ca4:	627a      	str	r2, [r7, #36]	@ 0x24
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	695b      	ldr	r3, [r3, #20]
 8006cae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d3c4      	bcc.n	8006c3e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cba:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8006cbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d803      	bhi.n	8006ccc <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	601a      	str	r2, [r3, #0]
 8006cca:	e184      	b.n	8006fd6 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8006ccc:	2311      	movs	r3, #17
 8006cce:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8006cd2:	e180      	b.n	8006fd6 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	683a      	ldr	r2, [r7, #0]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d902      	bls.n	8006ce4 <f_lseek+0x114>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f000 8172 	beq.w	8006fd6 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f7fe fdcd 	bl	8005898 <clmt_clust>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	69db      	ldr	r3, [r3, #28]
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	4610      	mov	r0, r2
 8006d0e:	f7fe fb16 	bl	800533e <clust2sect>
 8006d12:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d104      	bne.n	8006d24 <f_lseek+0x154>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2202      	movs	r2, #2
 8006d1e:	755a      	strb	r2, [r3, #21]
 8006d20:	2302      	movs	r3, #2
 8006d22:	e15a      	b.n	8006fda <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	3b01      	subs	r3, #1
 8006d28:	0a5b      	lsrs	r3, r3, #9
 8006d2a:	68ba      	ldr	r2, [r7, #8]
 8006d2c:	8952      	ldrh	r2, [r2, #10]
 8006d2e:	3a01      	subs	r2, #1
 8006d30:	4013      	ands	r3, r2
 8006d32:	69ba      	ldr	r2, [r7, #24]
 8006d34:	4413      	add	r3, r2
 8006d36:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 8148 	beq.w	8006fd6 <f_lseek+0x406>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	69ba      	ldr	r2, [r7, #24]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	f000 8142 	beq.w	8006fd6 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	7d1b      	ldrb	r3, [r3, #20]
 8006d56:	b25b      	sxtb	r3, r3
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	da18      	bge.n	8006d8e <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	7858      	ldrb	r0, [r3, #1]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a1a      	ldr	r2, [r3, #32]
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	f7fe f826 	bl	8004dbc <disk_write>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d004      	beq.n	8006d80 <f_lseek+0x1b0>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	755a      	strb	r2, [r3, #21]
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e12c      	b.n	8006fda <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	7d1b      	ldrb	r3, [r3, #20]
 8006d84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d88:	b2da      	uxtb	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	7858      	ldrb	r0, [r3, #1]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006d98:	2301      	movs	r3, #1
 8006d9a:	69ba      	ldr	r2, [r7, #24]
 8006d9c:	f7fd ffee 	bl	8004d7c <disk_read>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d004      	beq.n	8006db0 <f_lseek+0x1e0>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	755a      	strb	r2, [r3, #21]
 8006dac:	2301      	movs	r3, #1
 8006dae:	e114      	b.n	8006fda <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	69ba      	ldr	r2, [r7, #24]
 8006db4:	621a      	str	r2, [r3, #32]
 8006db6:	e10e      	b.n	8006fd6 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	683a      	ldr	r2, [r7, #0]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d908      	bls.n	8006dd4 <f_lseek+0x204>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	7d1b      	ldrb	r3, [r3, #20]
 8006dc6:	f003 0302 	and.w	r3, r3, #2
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d102      	bne.n	8006dd4 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006de2:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f000 80a7 	beq.w	8006f3a <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	895b      	ldrh	r3, [r3, #10]
 8006df0:	025b      	lsls	r3, r3, #9
 8006df2:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8006df4:	6a3b      	ldr	r3, [r7, #32]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d01b      	beq.n	8006e32 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	1e5a      	subs	r2, r3, #1
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e04:	6a3b      	ldr	r3, [r7, #32]
 8006e06:	1e59      	subs	r1, r3, #1
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d30f      	bcc.n	8006e32 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8006e12:	6a3b      	ldr	r3, [r7, #32]
 8006e14:	1e5a      	subs	r2, r3, #1
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	425b      	negs	r3, r3
 8006e1a:	401a      	ands	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	683a      	ldr	r2, [r7, #0]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	69db      	ldr	r3, [r3, #28]
 8006e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e30:	e022      	b.n	8006e78 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8006e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d119      	bne.n	8006e72 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2100      	movs	r1, #0
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7fe fc90 	bl	8005768 <create_chain>
 8006e48:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d104      	bne.n	8006e5a <f_lseek+0x28a>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2202      	movs	r2, #2
 8006e54:	755a      	strb	r2, [r3, #21]
 8006e56:	2302      	movs	r3, #2
 8006e58:	e0bf      	b.n	8006fda <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e60:	d104      	bne.n	8006e6c <f_lseek+0x29c>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2201      	movs	r2, #1
 8006e66:	755a      	strb	r2, [r3, #21]
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e0b6      	b.n	8006fda <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e70:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e76:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8006e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d05d      	beq.n	8006f3a <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8006e7e:	e03a      	b.n	8006ef6 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8006e80:	683a      	ldr	r2, [r7, #0]
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	603b      	str	r3, [r7, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	699a      	ldr	r2, [r3, #24]
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	441a      	add	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	7d1b      	ldrb	r3, [r3, #20]
 8006e98:	f003 0302 	and.w	r3, r3, #2
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00b      	beq.n	8006eb8 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f7fe fc5f 	bl	8005768 <create_chain>
 8006eaa:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8006eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d108      	bne.n	8006ec4 <f_lseek+0x2f4>
							ofs = 0; break;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	603b      	str	r3, [r7, #0]
 8006eb6:	e022      	b.n	8006efe <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f7fe fa5d 	bl	800537c <get_fat>
 8006ec2:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eca:	d104      	bne.n	8006ed6 <f_lseek+0x306>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	755a      	strb	r2, [r3, #21]
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e081      	b.n	8006fda <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8006ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d904      	bls.n	8006ee6 <f_lseek+0x316>
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	695b      	ldr	r3, [r3, #20]
 8006ee0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d304      	bcc.n	8006ef0 <f_lseek+0x320>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2202      	movs	r2, #2
 8006eea:	755a      	strb	r2, [r3, #21]
 8006eec:	2302      	movs	r3, #2
 8006eee:	e074      	b.n	8006fda <f_lseek+0x40a>
					fp->clust = clst;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ef4:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8006ef6:	683a      	ldr	r2, [r7, #0]
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d8c0      	bhi.n	8006e80 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	699a      	ldr	r2, [r3, #24]
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	441a      	add	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d012      	beq.n	8006f3a <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7fe fa10 	bl	800533e <clust2sect>
 8006f1e:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8006f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d104      	bne.n	8006f30 <f_lseek+0x360>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2202      	movs	r2, #2
 8006f2a:	755a      	strb	r2, [r3, #21]
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	e054      	b.n	8006fda <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	0a5b      	lsrs	r3, r3, #9
 8006f34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f36:	4413      	add	r3, r2
 8006f38:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	699a      	ldr	r2, [r3, #24]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d90a      	bls.n	8006f5c <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	699a      	ldr	r2, [r3, #24]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	7d1b      	ldrb	r3, [r3, #20]
 8006f52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f56:	b2da      	uxtb	r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	699b      	ldr	r3, [r3, #24]
 8006f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d036      	beq.n	8006fd6 <f_lseek+0x406>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a1b      	ldr	r3, [r3, #32]
 8006f6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d031      	beq.n	8006fd6 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	7d1b      	ldrb	r3, [r3, #20]
 8006f76:	b25b      	sxtb	r3, r3
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	da18      	bge.n	8006fae <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	7858      	ldrb	r0, [r3, #1]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a1a      	ldr	r2, [r3, #32]
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	f7fd ff16 	bl	8004dbc <disk_write>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d004      	beq.n	8006fa0 <f_lseek+0x3d0>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	755a      	strb	r2, [r3, #21]
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e01c      	b.n	8006fda <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	7d1b      	ldrb	r3, [r3, #20]
 8006fa4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fa8:	b2da      	uxtb	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	7858      	ldrb	r0, [r3, #1]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006fb8:	2301      	movs	r3, #1
 8006fba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006fbc:	f7fd fede 	bl	8004d7c <disk_read>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d004      	beq.n	8006fd0 <f_lseek+0x400>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	755a      	strb	r2, [r3, #21]
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e004      	b.n	8006fda <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006fd4:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8006fd6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3740      	adds	r7, #64	@ 0x40
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
	...

08006fe4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	4613      	mov	r3, r2
 8006ff0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006ffa:	4b1f      	ldr	r3, [pc, #124]	@ (8007078 <FATFS_LinkDriverEx+0x94>)
 8006ffc:	7a5b      	ldrb	r3, [r3, #9]
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b00      	cmp	r3, #0
 8007002:	d131      	bne.n	8007068 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007004:	4b1c      	ldr	r3, [pc, #112]	@ (8007078 <FATFS_LinkDriverEx+0x94>)
 8007006:	7a5b      	ldrb	r3, [r3, #9]
 8007008:	b2db      	uxtb	r3, r3
 800700a:	461a      	mov	r2, r3
 800700c:	4b1a      	ldr	r3, [pc, #104]	@ (8007078 <FATFS_LinkDriverEx+0x94>)
 800700e:	2100      	movs	r1, #0
 8007010:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007012:	4b19      	ldr	r3, [pc, #100]	@ (8007078 <FATFS_LinkDriverEx+0x94>)
 8007014:	7a5b      	ldrb	r3, [r3, #9]
 8007016:	b2db      	uxtb	r3, r3
 8007018:	4a17      	ldr	r2, [pc, #92]	@ (8007078 <FATFS_LinkDriverEx+0x94>)
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	4413      	add	r3, r2
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007022:	4b15      	ldr	r3, [pc, #84]	@ (8007078 <FATFS_LinkDriverEx+0x94>)
 8007024:	7a5b      	ldrb	r3, [r3, #9]
 8007026:	b2db      	uxtb	r3, r3
 8007028:	461a      	mov	r2, r3
 800702a:	4b13      	ldr	r3, [pc, #76]	@ (8007078 <FATFS_LinkDriverEx+0x94>)
 800702c:	4413      	add	r3, r2
 800702e:	79fa      	ldrb	r2, [r7, #7]
 8007030:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007032:	4b11      	ldr	r3, [pc, #68]	@ (8007078 <FATFS_LinkDriverEx+0x94>)
 8007034:	7a5b      	ldrb	r3, [r3, #9]
 8007036:	b2db      	uxtb	r3, r3
 8007038:	1c5a      	adds	r2, r3, #1
 800703a:	b2d1      	uxtb	r1, r2
 800703c:	4a0e      	ldr	r2, [pc, #56]	@ (8007078 <FATFS_LinkDriverEx+0x94>)
 800703e:	7251      	strb	r1, [r2, #9]
 8007040:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007042:	7dbb      	ldrb	r3, [r7, #22]
 8007044:	3330      	adds	r3, #48	@ 0x30
 8007046:	b2da      	uxtb	r2, r3
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	3301      	adds	r3, #1
 8007050:	223a      	movs	r2, #58	@ 0x3a
 8007052:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	3302      	adds	r3, #2
 8007058:	222f      	movs	r2, #47	@ 0x2f
 800705a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	3303      	adds	r3, #3
 8007060:	2200      	movs	r2, #0
 8007062:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007064:	2300      	movs	r3, #0
 8007066:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007068:	7dfb      	ldrb	r3, [r7, #23]
}
 800706a:	4618      	mov	r0, r3
 800706c:	371c      	adds	r7, #28
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	20000288 	.word	0x20000288

0800707c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007086:	2200      	movs	r2, #0
 8007088:	6839      	ldr	r1, [r7, #0]
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f7ff ffaa 	bl	8006fe4 <FATFS_LinkDriverEx>
 8007090:	4603      	mov	r3, r0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3708      	adds	r7, #8
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <abort>:
 800709a:	b508      	push	{r3, lr}
 800709c:	2006      	movs	r0, #6
 800709e:	f000 f92b 	bl	80072f8 <raise>
 80070a2:	2001      	movs	r0, #1
 80070a4:	f7fa ff01 	bl	8001eaa <_exit>

080070a8 <malloc>:
 80070a8:	4b02      	ldr	r3, [pc, #8]	@ (80070b4 <malloc+0xc>)
 80070aa:	4601      	mov	r1, r0
 80070ac:	6818      	ldr	r0, [r3, #0]
 80070ae:	f000 b82d 	b.w	800710c <_malloc_r>
 80070b2:	bf00      	nop
 80070b4:	20000024 	.word	0x20000024

080070b8 <free>:
 80070b8:	4b02      	ldr	r3, [pc, #8]	@ (80070c4 <free+0xc>)
 80070ba:	4601      	mov	r1, r0
 80070bc:	6818      	ldr	r0, [r3, #0]
 80070be:	f000 b973 	b.w	80073a8 <_free_r>
 80070c2:	bf00      	nop
 80070c4:	20000024 	.word	0x20000024

080070c8 <sbrk_aligned>:
 80070c8:	b570      	push	{r4, r5, r6, lr}
 80070ca:	4e0f      	ldr	r6, [pc, #60]	@ (8007108 <sbrk_aligned+0x40>)
 80070cc:	460c      	mov	r4, r1
 80070ce:	6831      	ldr	r1, [r6, #0]
 80070d0:	4605      	mov	r5, r0
 80070d2:	b911      	cbnz	r1, 80070da <sbrk_aligned+0x12>
 80070d4:	f000 f92c 	bl	8007330 <_sbrk_r>
 80070d8:	6030      	str	r0, [r6, #0]
 80070da:	4621      	mov	r1, r4
 80070dc:	4628      	mov	r0, r5
 80070de:	f000 f927 	bl	8007330 <_sbrk_r>
 80070e2:	1c43      	adds	r3, r0, #1
 80070e4:	d103      	bne.n	80070ee <sbrk_aligned+0x26>
 80070e6:	f04f 34ff 	mov.w	r4, #4294967295
 80070ea:	4620      	mov	r0, r4
 80070ec:	bd70      	pop	{r4, r5, r6, pc}
 80070ee:	1cc4      	adds	r4, r0, #3
 80070f0:	f024 0403 	bic.w	r4, r4, #3
 80070f4:	42a0      	cmp	r0, r4
 80070f6:	d0f8      	beq.n	80070ea <sbrk_aligned+0x22>
 80070f8:	1a21      	subs	r1, r4, r0
 80070fa:	4628      	mov	r0, r5
 80070fc:	f000 f918 	bl	8007330 <_sbrk_r>
 8007100:	3001      	adds	r0, #1
 8007102:	d1f2      	bne.n	80070ea <sbrk_aligned+0x22>
 8007104:	e7ef      	b.n	80070e6 <sbrk_aligned+0x1e>
 8007106:	bf00      	nop
 8007108:	20000294 	.word	0x20000294

0800710c <_malloc_r>:
 800710c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007110:	1ccd      	adds	r5, r1, #3
 8007112:	f025 0503 	bic.w	r5, r5, #3
 8007116:	3508      	adds	r5, #8
 8007118:	2d0c      	cmp	r5, #12
 800711a:	bf38      	it	cc
 800711c:	250c      	movcc	r5, #12
 800711e:	2d00      	cmp	r5, #0
 8007120:	4606      	mov	r6, r0
 8007122:	db01      	blt.n	8007128 <_malloc_r+0x1c>
 8007124:	42a9      	cmp	r1, r5
 8007126:	d904      	bls.n	8007132 <_malloc_r+0x26>
 8007128:	230c      	movs	r3, #12
 800712a:	6033      	str	r3, [r6, #0]
 800712c:	2000      	movs	r0, #0
 800712e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007132:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007208 <_malloc_r+0xfc>
 8007136:	f000 f869 	bl	800720c <__malloc_lock>
 800713a:	f8d8 3000 	ldr.w	r3, [r8]
 800713e:	461c      	mov	r4, r3
 8007140:	bb44      	cbnz	r4, 8007194 <_malloc_r+0x88>
 8007142:	4629      	mov	r1, r5
 8007144:	4630      	mov	r0, r6
 8007146:	f7ff ffbf 	bl	80070c8 <sbrk_aligned>
 800714a:	1c43      	adds	r3, r0, #1
 800714c:	4604      	mov	r4, r0
 800714e:	d158      	bne.n	8007202 <_malloc_r+0xf6>
 8007150:	f8d8 4000 	ldr.w	r4, [r8]
 8007154:	4627      	mov	r7, r4
 8007156:	2f00      	cmp	r7, #0
 8007158:	d143      	bne.n	80071e2 <_malloc_r+0xd6>
 800715a:	2c00      	cmp	r4, #0
 800715c:	d04b      	beq.n	80071f6 <_malloc_r+0xea>
 800715e:	6823      	ldr	r3, [r4, #0]
 8007160:	4639      	mov	r1, r7
 8007162:	4630      	mov	r0, r6
 8007164:	eb04 0903 	add.w	r9, r4, r3
 8007168:	f000 f8e2 	bl	8007330 <_sbrk_r>
 800716c:	4581      	cmp	r9, r0
 800716e:	d142      	bne.n	80071f6 <_malloc_r+0xea>
 8007170:	6821      	ldr	r1, [r4, #0]
 8007172:	1a6d      	subs	r5, r5, r1
 8007174:	4629      	mov	r1, r5
 8007176:	4630      	mov	r0, r6
 8007178:	f7ff ffa6 	bl	80070c8 <sbrk_aligned>
 800717c:	3001      	adds	r0, #1
 800717e:	d03a      	beq.n	80071f6 <_malloc_r+0xea>
 8007180:	6823      	ldr	r3, [r4, #0]
 8007182:	442b      	add	r3, r5
 8007184:	6023      	str	r3, [r4, #0]
 8007186:	f8d8 3000 	ldr.w	r3, [r8]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	bb62      	cbnz	r2, 80071e8 <_malloc_r+0xdc>
 800718e:	f8c8 7000 	str.w	r7, [r8]
 8007192:	e00f      	b.n	80071b4 <_malloc_r+0xa8>
 8007194:	6822      	ldr	r2, [r4, #0]
 8007196:	1b52      	subs	r2, r2, r5
 8007198:	d420      	bmi.n	80071dc <_malloc_r+0xd0>
 800719a:	2a0b      	cmp	r2, #11
 800719c:	d917      	bls.n	80071ce <_malloc_r+0xc2>
 800719e:	1961      	adds	r1, r4, r5
 80071a0:	42a3      	cmp	r3, r4
 80071a2:	6025      	str	r5, [r4, #0]
 80071a4:	bf18      	it	ne
 80071a6:	6059      	strne	r1, [r3, #4]
 80071a8:	6863      	ldr	r3, [r4, #4]
 80071aa:	bf08      	it	eq
 80071ac:	f8c8 1000 	streq.w	r1, [r8]
 80071b0:	5162      	str	r2, [r4, r5]
 80071b2:	604b      	str	r3, [r1, #4]
 80071b4:	4630      	mov	r0, r6
 80071b6:	f000 f82f 	bl	8007218 <__malloc_unlock>
 80071ba:	f104 000b 	add.w	r0, r4, #11
 80071be:	1d23      	adds	r3, r4, #4
 80071c0:	f020 0007 	bic.w	r0, r0, #7
 80071c4:	1ac2      	subs	r2, r0, r3
 80071c6:	bf1c      	itt	ne
 80071c8:	1a1b      	subne	r3, r3, r0
 80071ca:	50a3      	strne	r3, [r4, r2]
 80071cc:	e7af      	b.n	800712e <_malloc_r+0x22>
 80071ce:	6862      	ldr	r2, [r4, #4]
 80071d0:	42a3      	cmp	r3, r4
 80071d2:	bf0c      	ite	eq
 80071d4:	f8c8 2000 	streq.w	r2, [r8]
 80071d8:	605a      	strne	r2, [r3, #4]
 80071da:	e7eb      	b.n	80071b4 <_malloc_r+0xa8>
 80071dc:	4623      	mov	r3, r4
 80071de:	6864      	ldr	r4, [r4, #4]
 80071e0:	e7ae      	b.n	8007140 <_malloc_r+0x34>
 80071e2:	463c      	mov	r4, r7
 80071e4:	687f      	ldr	r7, [r7, #4]
 80071e6:	e7b6      	b.n	8007156 <_malloc_r+0x4a>
 80071e8:	461a      	mov	r2, r3
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	42a3      	cmp	r3, r4
 80071ee:	d1fb      	bne.n	80071e8 <_malloc_r+0xdc>
 80071f0:	2300      	movs	r3, #0
 80071f2:	6053      	str	r3, [r2, #4]
 80071f4:	e7de      	b.n	80071b4 <_malloc_r+0xa8>
 80071f6:	230c      	movs	r3, #12
 80071f8:	6033      	str	r3, [r6, #0]
 80071fa:	4630      	mov	r0, r6
 80071fc:	f000 f80c 	bl	8007218 <__malloc_unlock>
 8007200:	e794      	b.n	800712c <_malloc_r+0x20>
 8007202:	6005      	str	r5, [r0, #0]
 8007204:	e7d6      	b.n	80071b4 <_malloc_r+0xa8>
 8007206:	bf00      	nop
 8007208:	20000298 	.word	0x20000298

0800720c <__malloc_lock>:
 800720c:	4801      	ldr	r0, [pc, #4]	@ (8007214 <__malloc_lock+0x8>)
 800720e:	f000 b8c9 	b.w	80073a4 <__retarget_lock_acquire_recursive>
 8007212:	bf00      	nop
 8007214:	200003d8 	.word	0x200003d8

08007218 <__malloc_unlock>:
 8007218:	4801      	ldr	r0, [pc, #4]	@ (8007220 <__malloc_unlock+0x8>)
 800721a:	f000 b8c4 	b.w	80073a6 <__retarget_lock_release_recursive>
 800721e:	bf00      	nop
 8007220:	200003d8 	.word	0x200003d8

08007224 <_vsniprintf_r>:
 8007224:	b530      	push	{r4, r5, lr}
 8007226:	4614      	mov	r4, r2
 8007228:	2c00      	cmp	r4, #0
 800722a:	b09b      	sub	sp, #108	@ 0x6c
 800722c:	4605      	mov	r5, r0
 800722e:	461a      	mov	r2, r3
 8007230:	da05      	bge.n	800723e <_vsniprintf_r+0x1a>
 8007232:	238b      	movs	r3, #139	@ 0x8b
 8007234:	6003      	str	r3, [r0, #0]
 8007236:	f04f 30ff 	mov.w	r0, #4294967295
 800723a:	b01b      	add	sp, #108	@ 0x6c
 800723c:	bd30      	pop	{r4, r5, pc}
 800723e:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007242:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007246:	bf14      	ite	ne
 8007248:	f104 33ff 	addne.w	r3, r4, #4294967295
 800724c:	4623      	moveq	r3, r4
 800724e:	9302      	str	r3, [sp, #8]
 8007250:	9305      	str	r3, [sp, #20]
 8007252:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007256:	9100      	str	r1, [sp, #0]
 8007258:	9104      	str	r1, [sp, #16]
 800725a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800725e:	4669      	mov	r1, sp
 8007260:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007262:	f000 f947 	bl	80074f4 <_svfiprintf_r>
 8007266:	1c43      	adds	r3, r0, #1
 8007268:	bfbc      	itt	lt
 800726a:	238b      	movlt	r3, #139	@ 0x8b
 800726c:	602b      	strlt	r3, [r5, #0]
 800726e:	2c00      	cmp	r4, #0
 8007270:	d0e3      	beq.n	800723a <_vsniprintf_r+0x16>
 8007272:	9b00      	ldr	r3, [sp, #0]
 8007274:	2200      	movs	r2, #0
 8007276:	701a      	strb	r2, [r3, #0]
 8007278:	e7df      	b.n	800723a <_vsniprintf_r+0x16>
	...

0800727c <vsniprintf>:
 800727c:	b507      	push	{r0, r1, r2, lr}
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	4613      	mov	r3, r2
 8007282:	460a      	mov	r2, r1
 8007284:	4601      	mov	r1, r0
 8007286:	4803      	ldr	r0, [pc, #12]	@ (8007294 <vsniprintf+0x18>)
 8007288:	6800      	ldr	r0, [r0, #0]
 800728a:	f7ff ffcb 	bl	8007224 <_vsniprintf_r>
 800728e:	b003      	add	sp, #12
 8007290:	f85d fb04 	ldr.w	pc, [sp], #4
 8007294:	20000024 	.word	0x20000024

08007298 <memset>:
 8007298:	4402      	add	r2, r0
 800729a:	4603      	mov	r3, r0
 800729c:	4293      	cmp	r3, r2
 800729e:	d100      	bne.n	80072a2 <memset+0xa>
 80072a0:	4770      	bx	lr
 80072a2:	f803 1b01 	strb.w	r1, [r3], #1
 80072a6:	e7f9      	b.n	800729c <memset+0x4>

080072a8 <_raise_r>:
 80072a8:	291f      	cmp	r1, #31
 80072aa:	b538      	push	{r3, r4, r5, lr}
 80072ac:	4605      	mov	r5, r0
 80072ae:	460c      	mov	r4, r1
 80072b0:	d904      	bls.n	80072bc <_raise_r+0x14>
 80072b2:	2316      	movs	r3, #22
 80072b4:	6003      	str	r3, [r0, #0]
 80072b6:	f04f 30ff 	mov.w	r0, #4294967295
 80072ba:	bd38      	pop	{r3, r4, r5, pc}
 80072bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80072be:	b112      	cbz	r2, 80072c6 <_raise_r+0x1e>
 80072c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80072c4:	b94b      	cbnz	r3, 80072da <_raise_r+0x32>
 80072c6:	4628      	mov	r0, r5
 80072c8:	f000 f830 	bl	800732c <_getpid_r>
 80072cc:	4622      	mov	r2, r4
 80072ce:	4601      	mov	r1, r0
 80072d0:	4628      	mov	r0, r5
 80072d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072d6:	f000 b817 	b.w	8007308 <_kill_r>
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d00a      	beq.n	80072f4 <_raise_r+0x4c>
 80072de:	1c59      	adds	r1, r3, #1
 80072e0:	d103      	bne.n	80072ea <_raise_r+0x42>
 80072e2:	2316      	movs	r3, #22
 80072e4:	6003      	str	r3, [r0, #0]
 80072e6:	2001      	movs	r0, #1
 80072e8:	e7e7      	b.n	80072ba <_raise_r+0x12>
 80072ea:	2100      	movs	r1, #0
 80072ec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80072f0:	4620      	mov	r0, r4
 80072f2:	4798      	blx	r3
 80072f4:	2000      	movs	r0, #0
 80072f6:	e7e0      	b.n	80072ba <_raise_r+0x12>

080072f8 <raise>:
 80072f8:	4b02      	ldr	r3, [pc, #8]	@ (8007304 <raise+0xc>)
 80072fa:	4601      	mov	r1, r0
 80072fc:	6818      	ldr	r0, [r3, #0]
 80072fe:	f7ff bfd3 	b.w	80072a8 <_raise_r>
 8007302:	bf00      	nop
 8007304:	20000024 	.word	0x20000024

08007308 <_kill_r>:
 8007308:	b538      	push	{r3, r4, r5, lr}
 800730a:	4d07      	ldr	r5, [pc, #28]	@ (8007328 <_kill_r+0x20>)
 800730c:	2300      	movs	r3, #0
 800730e:	4604      	mov	r4, r0
 8007310:	4608      	mov	r0, r1
 8007312:	4611      	mov	r1, r2
 8007314:	602b      	str	r3, [r5, #0]
 8007316:	f7fa fdb8 	bl	8001e8a <_kill>
 800731a:	1c43      	adds	r3, r0, #1
 800731c:	d102      	bne.n	8007324 <_kill_r+0x1c>
 800731e:	682b      	ldr	r3, [r5, #0]
 8007320:	b103      	cbz	r3, 8007324 <_kill_r+0x1c>
 8007322:	6023      	str	r3, [r4, #0]
 8007324:	bd38      	pop	{r3, r4, r5, pc}
 8007326:	bf00      	nop
 8007328:	200003d4 	.word	0x200003d4

0800732c <_getpid_r>:
 800732c:	f7fa bda5 	b.w	8001e7a <_getpid>

08007330 <_sbrk_r>:
 8007330:	b538      	push	{r3, r4, r5, lr}
 8007332:	4d06      	ldr	r5, [pc, #24]	@ (800734c <_sbrk_r+0x1c>)
 8007334:	2300      	movs	r3, #0
 8007336:	4604      	mov	r4, r0
 8007338:	4608      	mov	r0, r1
 800733a:	602b      	str	r3, [r5, #0]
 800733c:	f7fa fdc0 	bl	8001ec0 <_sbrk>
 8007340:	1c43      	adds	r3, r0, #1
 8007342:	d102      	bne.n	800734a <_sbrk_r+0x1a>
 8007344:	682b      	ldr	r3, [r5, #0]
 8007346:	b103      	cbz	r3, 800734a <_sbrk_r+0x1a>
 8007348:	6023      	str	r3, [r4, #0]
 800734a:	bd38      	pop	{r3, r4, r5, pc}
 800734c:	200003d4 	.word	0x200003d4

08007350 <__errno>:
 8007350:	4b01      	ldr	r3, [pc, #4]	@ (8007358 <__errno+0x8>)
 8007352:	6818      	ldr	r0, [r3, #0]
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop
 8007358:	20000024 	.word	0x20000024

0800735c <__libc_init_array>:
 800735c:	b570      	push	{r4, r5, r6, lr}
 800735e:	4d0d      	ldr	r5, [pc, #52]	@ (8007394 <__libc_init_array+0x38>)
 8007360:	4c0d      	ldr	r4, [pc, #52]	@ (8007398 <__libc_init_array+0x3c>)
 8007362:	1b64      	subs	r4, r4, r5
 8007364:	10a4      	asrs	r4, r4, #2
 8007366:	2600      	movs	r6, #0
 8007368:	42a6      	cmp	r6, r4
 800736a:	d109      	bne.n	8007380 <__libc_init_array+0x24>
 800736c:	4d0b      	ldr	r5, [pc, #44]	@ (800739c <__libc_init_array+0x40>)
 800736e:	4c0c      	ldr	r4, [pc, #48]	@ (80073a0 <__libc_init_array+0x44>)
 8007370:	f001 fb08 	bl	8008984 <_init>
 8007374:	1b64      	subs	r4, r4, r5
 8007376:	10a4      	asrs	r4, r4, #2
 8007378:	2600      	movs	r6, #0
 800737a:	42a6      	cmp	r6, r4
 800737c:	d105      	bne.n	800738a <__libc_init_array+0x2e>
 800737e:	bd70      	pop	{r4, r5, r6, pc}
 8007380:	f855 3b04 	ldr.w	r3, [r5], #4
 8007384:	4798      	blx	r3
 8007386:	3601      	adds	r6, #1
 8007388:	e7ee      	b.n	8007368 <__libc_init_array+0xc>
 800738a:	f855 3b04 	ldr.w	r3, [r5], #4
 800738e:	4798      	blx	r3
 8007390:	3601      	adds	r6, #1
 8007392:	e7f2      	b.n	800737a <__libc_init_array+0x1e>
 8007394:	08009088 	.word	0x08009088
 8007398:	08009088 	.word	0x08009088
 800739c:	08009088 	.word	0x08009088
 80073a0:	0800908c 	.word	0x0800908c

080073a4 <__retarget_lock_acquire_recursive>:
 80073a4:	4770      	bx	lr

080073a6 <__retarget_lock_release_recursive>:
 80073a6:	4770      	bx	lr

080073a8 <_free_r>:
 80073a8:	b538      	push	{r3, r4, r5, lr}
 80073aa:	4605      	mov	r5, r0
 80073ac:	2900      	cmp	r1, #0
 80073ae:	d041      	beq.n	8007434 <_free_r+0x8c>
 80073b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073b4:	1f0c      	subs	r4, r1, #4
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	bfb8      	it	lt
 80073ba:	18e4      	addlt	r4, r4, r3
 80073bc:	f7ff ff26 	bl	800720c <__malloc_lock>
 80073c0:	4a1d      	ldr	r2, [pc, #116]	@ (8007438 <_free_r+0x90>)
 80073c2:	6813      	ldr	r3, [r2, #0]
 80073c4:	b933      	cbnz	r3, 80073d4 <_free_r+0x2c>
 80073c6:	6063      	str	r3, [r4, #4]
 80073c8:	6014      	str	r4, [r2, #0]
 80073ca:	4628      	mov	r0, r5
 80073cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073d0:	f7ff bf22 	b.w	8007218 <__malloc_unlock>
 80073d4:	42a3      	cmp	r3, r4
 80073d6:	d908      	bls.n	80073ea <_free_r+0x42>
 80073d8:	6820      	ldr	r0, [r4, #0]
 80073da:	1821      	adds	r1, r4, r0
 80073dc:	428b      	cmp	r3, r1
 80073de:	bf01      	itttt	eq
 80073e0:	6819      	ldreq	r1, [r3, #0]
 80073e2:	685b      	ldreq	r3, [r3, #4]
 80073e4:	1809      	addeq	r1, r1, r0
 80073e6:	6021      	streq	r1, [r4, #0]
 80073e8:	e7ed      	b.n	80073c6 <_free_r+0x1e>
 80073ea:	461a      	mov	r2, r3
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	b10b      	cbz	r3, 80073f4 <_free_r+0x4c>
 80073f0:	42a3      	cmp	r3, r4
 80073f2:	d9fa      	bls.n	80073ea <_free_r+0x42>
 80073f4:	6811      	ldr	r1, [r2, #0]
 80073f6:	1850      	adds	r0, r2, r1
 80073f8:	42a0      	cmp	r0, r4
 80073fa:	d10b      	bne.n	8007414 <_free_r+0x6c>
 80073fc:	6820      	ldr	r0, [r4, #0]
 80073fe:	4401      	add	r1, r0
 8007400:	1850      	adds	r0, r2, r1
 8007402:	4283      	cmp	r3, r0
 8007404:	6011      	str	r1, [r2, #0]
 8007406:	d1e0      	bne.n	80073ca <_free_r+0x22>
 8007408:	6818      	ldr	r0, [r3, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	6053      	str	r3, [r2, #4]
 800740e:	4408      	add	r0, r1
 8007410:	6010      	str	r0, [r2, #0]
 8007412:	e7da      	b.n	80073ca <_free_r+0x22>
 8007414:	d902      	bls.n	800741c <_free_r+0x74>
 8007416:	230c      	movs	r3, #12
 8007418:	602b      	str	r3, [r5, #0]
 800741a:	e7d6      	b.n	80073ca <_free_r+0x22>
 800741c:	6820      	ldr	r0, [r4, #0]
 800741e:	1821      	adds	r1, r4, r0
 8007420:	428b      	cmp	r3, r1
 8007422:	bf04      	itt	eq
 8007424:	6819      	ldreq	r1, [r3, #0]
 8007426:	685b      	ldreq	r3, [r3, #4]
 8007428:	6063      	str	r3, [r4, #4]
 800742a:	bf04      	itt	eq
 800742c:	1809      	addeq	r1, r1, r0
 800742e:	6021      	streq	r1, [r4, #0]
 8007430:	6054      	str	r4, [r2, #4]
 8007432:	e7ca      	b.n	80073ca <_free_r+0x22>
 8007434:	bd38      	pop	{r3, r4, r5, pc}
 8007436:	bf00      	nop
 8007438:	20000298 	.word	0x20000298

0800743c <__ssputs_r>:
 800743c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007440:	688e      	ldr	r6, [r1, #8]
 8007442:	461f      	mov	r7, r3
 8007444:	42be      	cmp	r6, r7
 8007446:	680b      	ldr	r3, [r1, #0]
 8007448:	4682      	mov	sl, r0
 800744a:	460c      	mov	r4, r1
 800744c:	4690      	mov	r8, r2
 800744e:	d82d      	bhi.n	80074ac <__ssputs_r+0x70>
 8007450:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007454:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007458:	d026      	beq.n	80074a8 <__ssputs_r+0x6c>
 800745a:	6965      	ldr	r5, [r4, #20]
 800745c:	6909      	ldr	r1, [r1, #16]
 800745e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007462:	eba3 0901 	sub.w	r9, r3, r1
 8007466:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800746a:	1c7b      	adds	r3, r7, #1
 800746c:	444b      	add	r3, r9
 800746e:	106d      	asrs	r5, r5, #1
 8007470:	429d      	cmp	r5, r3
 8007472:	bf38      	it	cc
 8007474:	461d      	movcc	r5, r3
 8007476:	0553      	lsls	r3, r2, #21
 8007478:	d527      	bpl.n	80074ca <__ssputs_r+0x8e>
 800747a:	4629      	mov	r1, r5
 800747c:	f7ff fe46 	bl	800710c <_malloc_r>
 8007480:	4606      	mov	r6, r0
 8007482:	b360      	cbz	r0, 80074de <__ssputs_r+0xa2>
 8007484:	6921      	ldr	r1, [r4, #16]
 8007486:	464a      	mov	r2, r9
 8007488:	f000 fad8 	bl	8007a3c <memcpy>
 800748c:	89a3      	ldrh	r3, [r4, #12]
 800748e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007492:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007496:	81a3      	strh	r3, [r4, #12]
 8007498:	6126      	str	r6, [r4, #16]
 800749a:	6165      	str	r5, [r4, #20]
 800749c:	444e      	add	r6, r9
 800749e:	eba5 0509 	sub.w	r5, r5, r9
 80074a2:	6026      	str	r6, [r4, #0]
 80074a4:	60a5      	str	r5, [r4, #8]
 80074a6:	463e      	mov	r6, r7
 80074a8:	42be      	cmp	r6, r7
 80074aa:	d900      	bls.n	80074ae <__ssputs_r+0x72>
 80074ac:	463e      	mov	r6, r7
 80074ae:	6820      	ldr	r0, [r4, #0]
 80074b0:	4632      	mov	r2, r6
 80074b2:	4641      	mov	r1, r8
 80074b4:	f000 faa8 	bl	8007a08 <memmove>
 80074b8:	68a3      	ldr	r3, [r4, #8]
 80074ba:	1b9b      	subs	r3, r3, r6
 80074bc:	60a3      	str	r3, [r4, #8]
 80074be:	6823      	ldr	r3, [r4, #0]
 80074c0:	4433      	add	r3, r6
 80074c2:	6023      	str	r3, [r4, #0]
 80074c4:	2000      	movs	r0, #0
 80074c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074ca:	462a      	mov	r2, r5
 80074cc:	f000 fac4 	bl	8007a58 <_realloc_r>
 80074d0:	4606      	mov	r6, r0
 80074d2:	2800      	cmp	r0, #0
 80074d4:	d1e0      	bne.n	8007498 <__ssputs_r+0x5c>
 80074d6:	6921      	ldr	r1, [r4, #16]
 80074d8:	4650      	mov	r0, sl
 80074da:	f7ff ff65 	bl	80073a8 <_free_r>
 80074de:	230c      	movs	r3, #12
 80074e0:	f8ca 3000 	str.w	r3, [sl]
 80074e4:	89a3      	ldrh	r3, [r4, #12]
 80074e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074ea:	81a3      	strh	r3, [r4, #12]
 80074ec:	f04f 30ff 	mov.w	r0, #4294967295
 80074f0:	e7e9      	b.n	80074c6 <__ssputs_r+0x8a>
	...

080074f4 <_svfiprintf_r>:
 80074f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f8:	4698      	mov	r8, r3
 80074fa:	898b      	ldrh	r3, [r1, #12]
 80074fc:	061b      	lsls	r3, r3, #24
 80074fe:	b09d      	sub	sp, #116	@ 0x74
 8007500:	4607      	mov	r7, r0
 8007502:	460d      	mov	r5, r1
 8007504:	4614      	mov	r4, r2
 8007506:	d510      	bpl.n	800752a <_svfiprintf_r+0x36>
 8007508:	690b      	ldr	r3, [r1, #16]
 800750a:	b973      	cbnz	r3, 800752a <_svfiprintf_r+0x36>
 800750c:	2140      	movs	r1, #64	@ 0x40
 800750e:	f7ff fdfd 	bl	800710c <_malloc_r>
 8007512:	6028      	str	r0, [r5, #0]
 8007514:	6128      	str	r0, [r5, #16]
 8007516:	b930      	cbnz	r0, 8007526 <_svfiprintf_r+0x32>
 8007518:	230c      	movs	r3, #12
 800751a:	603b      	str	r3, [r7, #0]
 800751c:	f04f 30ff 	mov.w	r0, #4294967295
 8007520:	b01d      	add	sp, #116	@ 0x74
 8007522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007526:	2340      	movs	r3, #64	@ 0x40
 8007528:	616b      	str	r3, [r5, #20]
 800752a:	2300      	movs	r3, #0
 800752c:	9309      	str	r3, [sp, #36]	@ 0x24
 800752e:	2320      	movs	r3, #32
 8007530:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007534:	f8cd 800c 	str.w	r8, [sp, #12]
 8007538:	2330      	movs	r3, #48	@ 0x30
 800753a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80076d8 <_svfiprintf_r+0x1e4>
 800753e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007542:	f04f 0901 	mov.w	r9, #1
 8007546:	4623      	mov	r3, r4
 8007548:	469a      	mov	sl, r3
 800754a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800754e:	b10a      	cbz	r2, 8007554 <_svfiprintf_r+0x60>
 8007550:	2a25      	cmp	r2, #37	@ 0x25
 8007552:	d1f9      	bne.n	8007548 <_svfiprintf_r+0x54>
 8007554:	ebba 0b04 	subs.w	fp, sl, r4
 8007558:	d00b      	beq.n	8007572 <_svfiprintf_r+0x7e>
 800755a:	465b      	mov	r3, fp
 800755c:	4622      	mov	r2, r4
 800755e:	4629      	mov	r1, r5
 8007560:	4638      	mov	r0, r7
 8007562:	f7ff ff6b 	bl	800743c <__ssputs_r>
 8007566:	3001      	adds	r0, #1
 8007568:	f000 80a7 	beq.w	80076ba <_svfiprintf_r+0x1c6>
 800756c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800756e:	445a      	add	r2, fp
 8007570:	9209      	str	r2, [sp, #36]	@ 0x24
 8007572:	f89a 3000 	ldrb.w	r3, [sl]
 8007576:	2b00      	cmp	r3, #0
 8007578:	f000 809f 	beq.w	80076ba <_svfiprintf_r+0x1c6>
 800757c:	2300      	movs	r3, #0
 800757e:	f04f 32ff 	mov.w	r2, #4294967295
 8007582:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007586:	f10a 0a01 	add.w	sl, sl, #1
 800758a:	9304      	str	r3, [sp, #16]
 800758c:	9307      	str	r3, [sp, #28]
 800758e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007592:	931a      	str	r3, [sp, #104]	@ 0x68
 8007594:	4654      	mov	r4, sl
 8007596:	2205      	movs	r2, #5
 8007598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800759c:	484e      	ldr	r0, [pc, #312]	@ (80076d8 <_svfiprintf_r+0x1e4>)
 800759e:	f7f8 fe3f 	bl	8000220 <memchr>
 80075a2:	9a04      	ldr	r2, [sp, #16]
 80075a4:	b9d8      	cbnz	r0, 80075de <_svfiprintf_r+0xea>
 80075a6:	06d0      	lsls	r0, r2, #27
 80075a8:	bf44      	itt	mi
 80075aa:	2320      	movmi	r3, #32
 80075ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075b0:	0711      	lsls	r1, r2, #28
 80075b2:	bf44      	itt	mi
 80075b4:	232b      	movmi	r3, #43	@ 0x2b
 80075b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075ba:	f89a 3000 	ldrb.w	r3, [sl]
 80075be:	2b2a      	cmp	r3, #42	@ 0x2a
 80075c0:	d015      	beq.n	80075ee <_svfiprintf_r+0xfa>
 80075c2:	9a07      	ldr	r2, [sp, #28]
 80075c4:	4654      	mov	r4, sl
 80075c6:	2000      	movs	r0, #0
 80075c8:	f04f 0c0a 	mov.w	ip, #10
 80075cc:	4621      	mov	r1, r4
 80075ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075d2:	3b30      	subs	r3, #48	@ 0x30
 80075d4:	2b09      	cmp	r3, #9
 80075d6:	d94b      	bls.n	8007670 <_svfiprintf_r+0x17c>
 80075d8:	b1b0      	cbz	r0, 8007608 <_svfiprintf_r+0x114>
 80075da:	9207      	str	r2, [sp, #28]
 80075dc:	e014      	b.n	8007608 <_svfiprintf_r+0x114>
 80075de:	eba0 0308 	sub.w	r3, r0, r8
 80075e2:	fa09 f303 	lsl.w	r3, r9, r3
 80075e6:	4313      	orrs	r3, r2
 80075e8:	9304      	str	r3, [sp, #16]
 80075ea:	46a2      	mov	sl, r4
 80075ec:	e7d2      	b.n	8007594 <_svfiprintf_r+0xa0>
 80075ee:	9b03      	ldr	r3, [sp, #12]
 80075f0:	1d19      	adds	r1, r3, #4
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	9103      	str	r1, [sp, #12]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	bfbb      	ittet	lt
 80075fa:	425b      	neglt	r3, r3
 80075fc:	f042 0202 	orrlt.w	r2, r2, #2
 8007600:	9307      	strge	r3, [sp, #28]
 8007602:	9307      	strlt	r3, [sp, #28]
 8007604:	bfb8      	it	lt
 8007606:	9204      	strlt	r2, [sp, #16]
 8007608:	7823      	ldrb	r3, [r4, #0]
 800760a:	2b2e      	cmp	r3, #46	@ 0x2e
 800760c:	d10a      	bne.n	8007624 <_svfiprintf_r+0x130>
 800760e:	7863      	ldrb	r3, [r4, #1]
 8007610:	2b2a      	cmp	r3, #42	@ 0x2a
 8007612:	d132      	bne.n	800767a <_svfiprintf_r+0x186>
 8007614:	9b03      	ldr	r3, [sp, #12]
 8007616:	1d1a      	adds	r2, r3, #4
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	9203      	str	r2, [sp, #12]
 800761c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007620:	3402      	adds	r4, #2
 8007622:	9305      	str	r3, [sp, #20]
 8007624:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80076e8 <_svfiprintf_r+0x1f4>
 8007628:	7821      	ldrb	r1, [r4, #0]
 800762a:	2203      	movs	r2, #3
 800762c:	4650      	mov	r0, sl
 800762e:	f7f8 fdf7 	bl	8000220 <memchr>
 8007632:	b138      	cbz	r0, 8007644 <_svfiprintf_r+0x150>
 8007634:	9b04      	ldr	r3, [sp, #16]
 8007636:	eba0 000a 	sub.w	r0, r0, sl
 800763a:	2240      	movs	r2, #64	@ 0x40
 800763c:	4082      	lsls	r2, r0
 800763e:	4313      	orrs	r3, r2
 8007640:	3401      	adds	r4, #1
 8007642:	9304      	str	r3, [sp, #16]
 8007644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007648:	4824      	ldr	r0, [pc, #144]	@ (80076dc <_svfiprintf_r+0x1e8>)
 800764a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800764e:	2206      	movs	r2, #6
 8007650:	f7f8 fde6 	bl	8000220 <memchr>
 8007654:	2800      	cmp	r0, #0
 8007656:	d036      	beq.n	80076c6 <_svfiprintf_r+0x1d2>
 8007658:	4b21      	ldr	r3, [pc, #132]	@ (80076e0 <_svfiprintf_r+0x1ec>)
 800765a:	bb1b      	cbnz	r3, 80076a4 <_svfiprintf_r+0x1b0>
 800765c:	9b03      	ldr	r3, [sp, #12]
 800765e:	3307      	adds	r3, #7
 8007660:	f023 0307 	bic.w	r3, r3, #7
 8007664:	3308      	adds	r3, #8
 8007666:	9303      	str	r3, [sp, #12]
 8007668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800766a:	4433      	add	r3, r6
 800766c:	9309      	str	r3, [sp, #36]	@ 0x24
 800766e:	e76a      	b.n	8007546 <_svfiprintf_r+0x52>
 8007670:	fb0c 3202 	mla	r2, ip, r2, r3
 8007674:	460c      	mov	r4, r1
 8007676:	2001      	movs	r0, #1
 8007678:	e7a8      	b.n	80075cc <_svfiprintf_r+0xd8>
 800767a:	2300      	movs	r3, #0
 800767c:	3401      	adds	r4, #1
 800767e:	9305      	str	r3, [sp, #20]
 8007680:	4619      	mov	r1, r3
 8007682:	f04f 0c0a 	mov.w	ip, #10
 8007686:	4620      	mov	r0, r4
 8007688:	f810 2b01 	ldrb.w	r2, [r0], #1
 800768c:	3a30      	subs	r2, #48	@ 0x30
 800768e:	2a09      	cmp	r2, #9
 8007690:	d903      	bls.n	800769a <_svfiprintf_r+0x1a6>
 8007692:	2b00      	cmp	r3, #0
 8007694:	d0c6      	beq.n	8007624 <_svfiprintf_r+0x130>
 8007696:	9105      	str	r1, [sp, #20]
 8007698:	e7c4      	b.n	8007624 <_svfiprintf_r+0x130>
 800769a:	fb0c 2101 	mla	r1, ip, r1, r2
 800769e:	4604      	mov	r4, r0
 80076a0:	2301      	movs	r3, #1
 80076a2:	e7f0      	b.n	8007686 <_svfiprintf_r+0x192>
 80076a4:	ab03      	add	r3, sp, #12
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	462a      	mov	r2, r5
 80076aa:	4b0e      	ldr	r3, [pc, #56]	@ (80076e4 <_svfiprintf_r+0x1f0>)
 80076ac:	a904      	add	r1, sp, #16
 80076ae:	4638      	mov	r0, r7
 80076b0:	f3af 8000 	nop.w
 80076b4:	1c42      	adds	r2, r0, #1
 80076b6:	4606      	mov	r6, r0
 80076b8:	d1d6      	bne.n	8007668 <_svfiprintf_r+0x174>
 80076ba:	89ab      	ldrh	r3, [r5, #12]
 80076bc:	065b      	lsls	r3, r3, #25
 80076be:	f53f af2d 	bmi.w	800751c <_svfiprintf_r+0x28>
 80076c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076c4:	e72c      	b.n	8007520 <_svfiprintf_r+0x2c>
 80076c6:	ab03      	add	r3, sp, #12
 80076c8:	9300      	str	r3, [sp, #0]
 80076ca:	462a      	mov	r2, r5
 80076cc:	4b05      	ldr	r3, [pc, #20]	@ (80076e4 <_svfiprintf_r+0x1f0>)
 80076ce:	a904      	add	r1, sp, #16
 80076d0:	4638      	mov	r0, r7
 80076d2:	f000 f879 	bl	80077c8 <_printf_i>
 80076d6:	e7ed      	b.n	80076b4 <_svfiprintf_r+0x1c0>
 80076d8:	08009018 	.word	0x08009018
 80076dc:	08009022 	.word	0x08009022
 80076e0:	00000000 	.word	0x00000000
 80076e4:	0800743d 	.word	0x0800743d
 80076e8:	0800901e 	.word	0x0800901e

080076ec <_printf_common>:
 80076ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076f0:	4616      	mov	r6, r2
 80076f2:	4698      	mov	r8, r3
 80076f4:	688a      	ldr	r2, [r1, #8]
 80076f6:	690b      	ldr	r3, [r1, #16]
 80076f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80076fc:	4293      	cmp	r3, r2
 80076fe:	bfb8      	it	lt
 8007700:	4613      	movlt	r3, r2
 8007702:	6033      	str	r3, [r6, #0]
 8007704:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007708:	4607      	mov	r7, r0
 800770a:	460c      	mov	r4, r1
 800770c:	b10a      	cbz	r2, 8007712 <_printf_common+0x26>
 800770e:	3301      	adds	r3, #1
 8007710:	6033      	str	r3, [r6, #0]
 8007712:	6823      	ldr	r3, [r4, #0]
 8007714:	0699      	lsls	r1, r3, #26
 8007716:	bf42      	ittt	mi
 8007718:	6833      	ldrmi	r3, [r6, #0]
 800771a:	3302      	addmi	r3, #2
 800771c:	6033      	strmi	r3, [r6, #0]
 800771e:	6825      	ldr	r5, [r4, #0]
 8007720:	f015 0506 	ands.w	r5, r5, #6
 8007724:	d106      	bne.n	8007734 <_printf_common+0x48>
 8007726:	f104 0a19 	add.w	sl, r4, #25
 800772a:	68e3      	ldr	r3, [r4, #12]
 800772c:	6832      	ldr	r2, [r6, #0]
 800772e:	1a9b      	subs	r3, r3, r2
 8007730:	42ab      	cmp	r3, r5
 8007732:	dc26      	bgt.n	8007782 <_printf_common+0x96>
 8007734:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007738:	6822      	ldr	r2, [r4, #0]
 800773a:	3b00      	subs	r3, #0
 800773c:	bf18      	it	ne
 800773e:	2301      	movne	r3, #1
 8007740:	0692      	lsls	r2, r2, #26
 8007742:	d42b      	bmi.n	800779c <_printf_common+0xb0>
 8007744:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007748:	4641      	mov	r1, r8
 800774a:	4638      	mov	r0, r7
 800774c:	47c8      	blx	r9
 800774e:	3001      	adds	r0, #1
 8007750:	d01e      	beq.n	8007790 <_printf_common+0xa4>
 8007752:	6823      	ldr	r3, [r4, #0]
 8007754:	6922      	ldr	r2, [r4, #16]
 8007756:	f003 0306 	and.w	r3, r3, #6
 800775a:	2b04      	cmp	r3, #4
 800775c:	bf02      	ittt	eq
 800775e:	68e5      	ldreq	r5, [r4, #12]
 8007760:	6833      	ldreq	r3, [r6, #0]
 8007762:	1aed      	subeq	r5, r5, r3
 8007764:	68a3      	ldr	r3, [r4, #8]
 8007766:	bf0c      	ite	eq
 8007768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800776c:	2500      	movne	r5, #0
 800776e:	4293      	cmp	r3, r2
 8007770:	bfc4      	itt	gt
 8007772:	1a9b      	subgt	r3, r3, r2
 8007774:	18ed      	addgt	r5, r5, r3
 8007776:	2600      	movs	r6, #0
 8007778:	341a      	adds	r4, #26
 800777a:	42b5      	cmp	r5, r6
 800777c:	d11a      	bne.n	80077b4 <_printf_common+0xc8>
 800777e:	2000      	movs	r0, #0
 8007780:	e008      	b.n	8007794 <_printf_common+0xa8>
 8007782:	2301      	movs	r3, #1
 8007784:	4652      	mov	r2, sl
 8007786:	4641      	mov	r1, r8
 8007788:	4638      	mov	r0, r7
 800778a:	47c8      	blx	r9
 800778c:	3001      	adds	r0, #1
 800778e:	d103      	bne.n	8007798 <_printf_common+0xac>
 8007790:	f04f 30ff 	mov.w	r0, #4294967295
 8007794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007798:	3501      	adds	r5, #1
 800779a:	e7c6      	b.n	800772a <_printf_common+0x3e>
 800779c:	18e1      	adds	r1, r4, r3
 800779e:	1c5a      	adds	r2, r3, #1
 80077a0:	2030      	movs	r0, #48	@ 0x30
 80077a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80077a6:	4422      	add	r2, r4
 80077a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80077ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80077b0:	3302      	adds	r3, #2
 80077b2:	e7c7      	b.n	8007744 <_printf_common+0x58>
 80077b4:	2301      	movs	r3, #1
 80077b6:	4622      	mov	r2, r4
 80077b8:	4641      	mov	r1, r8
 80077ba:	4638      	mov	r0, r7
 80077bc:	47c8      	blx	r9
 80077be:	3001      	adds	r0, #1
 80077c0:	d0e6      	beq.n	8007790 <_printf_common+0xa4>
 80077c2:	3601      	adds	r6, #1
 80077c4:	e7d9      	b.n	800777a <_printf_common+0x8e>
	...

080077c8 <_printf_i>:
 80077c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077cc:	7e0f      	ldrb	r7, [r1, #24]
 80077ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80077d0:	2f78      	cmp	r7, #120	@ 0x78
 80077d2:	4691      	mov	r9, r2
 80077d4:	4680      	mov	r8, r0
 80077d6:	460c      	mov	r4, r1
 80077d8:	469a      	mov	sl, r3
 80077da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80077de:	d807      	bhi.n	80077f0 <_printf_i+0x28>
 80077e0:	2f62      	cmp	r7, #98	@ 0x62
 80077e2:	d80a      	bhi.n	80077fa <_printf_i+0x32>
 80077e4:	2f00      	cmp	r7, #0
 80077e6:	f000 80d2 	beq.w	800798e <_printf_i+0x1c6>
 80077ea:	2f58      	cmp	r7, #88	@ 0x58
 80077ec:	f000 80b9 	beq.w	8007962 <_printf_i+0x19a>
 80077f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80077f8:	e03a      	b.n	8007870 <_printf_i+0xa8>
 80077fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80077fe:	2b15      	cmp	r3, #21
 8007800:	d8f6      	bhi.n	80077f0 <_printf_i+0x28>
 8007802:	a101      	add	r1, pc, #4	@ (adr r1, 8007808 <_printf_i+0x40>)
 8007804:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007808:	08007861 	.word	0x08007861
 800780c:	08007875 	.word	0x08007875
 8007810:	080077f1 	.word	0x080077f1
 8007814:	080077f1 	.word	0x080077f1
 8007818:	080077f1 	.word	0x080077f1
 800781c:	080077f1 	.word	0x080077f1
 8007820:	08007875 	.word	0x08007875
 8007824:	080077f1 	.word	0x080077f1
 8007828:	080077f1 	.word	0x080077f1
 800782c:	080077f1 	.word	0x080077f1
 8007830:	080077f1 	.word	0x080077f1
 8007834:	08007975 	.word	0x08007975
 8007838:	0800789f 	.word	0x0800789f
 800783c:	0800792f 	.word	0x0800792f
 8007840:	080077f1 	.word	0x080077f1
 8007844:	080077f1 	.word	0x080077f1
 8007848:	08007997 	.word	0x08007997
 800784c:	080077f1 	.word	0x080077f1
 8007850:	0800789f 	.word	0x0800789f
 8007854:	080077f1 	.word	0x080077f1
 8007858:	080077f1 	.word	0x080077f1
 800785c:	08007937 	.word	0x08007937
 8007860:	6833      	ldr	r3, [r6, #0]
 8007862:	1d1a      	adds	r2, r3, #4
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	6032      	str	r2, [r6, #0]
 8007868:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800786c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007870:	2301      	movs	r3, #1
 8007872:	e09d      	b.n	80079b0 <_printf_i+0x1e8>
 8007874:	6833      	ldr	r3, [r6, #0]
 8007876:	6820      	ldr	r0, [r4, #0]
 8007878:	1d19      	adds	r1, r3, #4
 800787a:	6031      	str	r1, [r6, #0]
 800787c:	0606      	lsls	r6, r0, #24
 800787e:	d501      	bpl.n	8007884 <_printf_i+0xbc>
 8007880:	681d      	ldr	r5, [r3, #0]
 8007882:	e003      	b.n	800788c <_printf_i+0xc4>
 8007884:	0645      	lsls	r5, r0, #25
 8007886:	d5fb      	bpl.n	8007880 <_printf_i+0xb8>
 8007888:	f9b3 5000 	ldrsh.w	r5, [r3]
 800788c:	2d00      	cmp	r5, #0
 800788e:	da03      	bge.n	8007898 <_printf_i+0xd0>
 8007890:	232d      	movs	r3, #45	@ 0x2d
 8007892:	426d      	negs	r5, r5
 8007894:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007898:	4859      	ldr	r0, [pc, #356]	@ (8007a00 <_printf_i+0x238>)
 800789a:	230a      	movs	r3, #10
 800789c:	e011      	b.n	80078c2 <_printf_i+0xfa>
 800789e:	6821      	ldr	r1, [r4, #0]
 80078a0:	6833      	ldr	r3, [r6, #0]
 80078a2:	0608      	lsls	r0, r1, #24
 80078a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80078a8:	d402      	bmi.n	80078b0 <_printf_i+0xe8>
 80078aa:	0649      	lsls	r1, r1, #25
 80078ac:	bf48      	it	mi
 80078ae:	b2ad      	uxthmi	r5, r5
 80078b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80078b2:	4853      	ldr	r0, [pc, #332]	@ (8007a00 <_printf_i+0x238>)
 80078b4:	6033      	str	r3, [r6, #0]
 80078b6:	bf14      	ite	ne
 80078b8:	230a      	movne	r3, #10
 80078ba:	2308      	moveq	r3, #8
 80078bc:	2100      	movs	r1, #0
 80078be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80078c2:	6866      	ldr	r6, [r4, #4]
 80078c4:	60a6      	str	r6, [r4, #8]
 80078c6:	2e00      	cmp	r6, #0
 80078c8:	bfa2      	ittt	ge
 80078ca:	6821      	ldrge	r1, [r4, #0]
 80078cc:	f021 0104 	bicge.w	r1, r1, #4
 80078d0:	6021      	strge	r1, [r4, #0]
 80078d2:	b90d      	cbnz	r5, 80078d8 <_printf_i+0x110>
 80078d4:	2e00      	cmp	r6, #0
 80078d6:	d04b      	beq.n	8007970 <_printf_i+0x1a8>
 80078d8:	4616      	mov	r6, r2
 80078da:	fbb5 f1f3 	udiv	r1, r5, r3
 80078de:	fb03 5711 	mls	r7, r3, r1, r5
 80078e2:	5dc7      	ldrb	r7, [r0, r7]
 80078e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80078e8:	462f      	mov	r7, r5
 80078ea:	42bb      	cmp	r3, r7
 80078ec:	460d      	mov	r5, r1
 80078ee:	d9f4      	bls.n	80078da <_printf_i+0x112>
 80078f0:	2b08      	cmp	r3, #8
 80078f2:	d10b      	bne.n	800790c <_printf_i+0x144>
 80078f4:	6823      	ldr	r3, [r4, #0]
 80078f6:	07df      	lsls	r7, r3, #31
 80078f8:	d508      	bpl.n	800790c <_printf_i+0x144>
 80078fa:	6923      	ldr	r3, [r4, #16]
 80078fc:	6861      	ldr	r1, [r4, #4]
 80078fe:	4299      	cmp	r1, r3
 8007900:	bfde      	ittt	le
 8007902:	2330      	movle	r3, #48	@ 0x30
 8007904:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007908:	f106 36ff 	addle.w	r6, r6, #4294967295
 800790c:	1b92      	subs	r2, r2, r6
 800790e:	6122      	str	r2, [r4, #16]
 8007910:	f8cd a000 	str.w	sl, [sp]
 8007914:	464b      	mov	r3, r9
 8007916:	aa03      	add	r2, sp, #12
 8007918:	4621      	mov	r1, r4
 800791a:	4640      	mov	r0, r8
 800791c:	f7ff fee6 	bl	80076ec <_printf_common>
 8007920:	3001      	adds	r0, #1
 8007922:	d14a      	bne.n	80079ba <_printf_i+0x1f2>
 8007924:	f04f 30ff 	mov.w	r0, #4294967295
 8007928:	b004      	add	sp, #16
 800792a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800792e:	6823      	ldr	r3, [r4, #0]
 8007930:	f043 0320 	orr.w	r3, r3, #32
 8007934:	6023      	str	r3, [r4, #0]
 8007936:	4833      	ldr	r0, [pc, #204]	@ (8007a04 <_printf_i+0x23c>)
 8007938:	2778      	movs	r7, #120	@ 0x78
 800793a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800793e:	6823      	ldr	r3, [r4, #0]
 8007940:	6831      	ldr	r1, [r6, #0]
 8007942:	061f      	lsls	r7, r3, #24
 8007944:	f851 5b04 	ldr.w	r5, [r1], #4
 8007948:	d402      	bmi.n	8007950 <_printf_i+0x188>
 800794a:	065f      	lsls	r7, r3, #25
 800794c:	bf48      	it	mi
 800794e:	b2ad      	uxthmi	r5, r5
 8007950:	6031      	str	r1, [r6, #0]
 8007952:	07d9      	lsls	r1, r3, #31
 8007954:	bf44      	itt	mi
 8007956:	f043 0320 	orrmi.w	r3, r3, #32
 800795a:	6023      	strmi	r3, [r4, #0]
 800795c:	b11d      	cbz	r5, 8007966 <_printf_i+0x19e>
 800795e:	2310      	movs	r3, #16
 8007960:	e7ac      	b.n	80078bc <_printf_i+0xf4>
 8007962:	4827      	ldr	r0, [pc, #156]	@ (8007a00 <_printf_i+0x238>)
 8007964:	e7e9      	b.n	800793a <_printf_i+0x172>
 8007966:	6823      	ldr	r3, [r4, #0]
 8007968:	f023 0320 	bic.w	r3, r3, #32
 800796c:	6023      	str	r3, [r4, #0]
 800796e:	e7f6      	b.n	800795e <_printf_i+0x196>
 8007970:	4616      	mov	r6, r2
 8007972:	e7bd      	b.n	80078f0 <_printf_i+0x128>
 8007974:	6833      	ldr	r3, [r6, #0]
 8007976:	6825      	ldr	r5, [r4, #0]
 8007978:	6961      	ldr	r1, [r4, #20]
 800797a:	1d18      	adds	r0, r3, #4
 800797c:	6030      	str	r0, [r6, #0]
 800797e:	062e      	lsls	r6, r5, #24
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	d501      	bpl.n	8007988 <_printf_i+0x1c0>
 8007984:	6019      	str	r1, [r3, #0]
 8007986:	e002      	b.n	800798e <_printf_i+0x1c6>
 8007988:	0668      	lsls	r0, r5, #25
 800798a:	d5fb      	bpl.n	8007984 <_printf_i+0x1bc>
 800798c:	8019      	strh	r1, [r3, #0]
 800798e:	2300      	movs	r3, #0
 8007990:	6123      	str	r3, [r4, #16]
 8007992:	4616      	mov	r6, r2
 8007994:	e7bc      	b.n	8007910 <_printf_i+0x148>
 8007996:	6833      	ldr	r3, [r6, #0]
 8007998:	1d1a      	adds	r2, r3, #4
 800799a:	6032      	str	r2, [r6, #0]
 800799c:	681e      	ldr	r6, [r3, #0]
 800799e:	6862      	ldr	r2, [r4, #4]
 80079a0:	2100      	movs	r1, #0
 80079a2:	4630      	mov	r0, r6
 80079a4:	f7f8 fc3c 	bl	8000220 <memchr>
 80079a8:	b108      	cbz	r0, 80079ae <_printf_i+0x1e6>
 80079aa:	1b80      	subs	r0, r0, r6
 80079ac:	6060      	str	r0, [r4, #4]
 80079ae:	6863      	ldr	r3, [r4, #4]
 80079b0:	6123      	str	r3, [r4, #16]
 80079b2:	2300      	movs	r3, #0
 80079b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079b8:	e7aa      	b.n	8007910 <_printf_i+0x148>
 80079ba:	6923      	ldr	r3, [r4, #16]
 80079bc:	4632      	mov	r2, r6
 80079be:	4649      	mov	r1, r9
 80079c0:	4640      	mov	r0, r8
 80079c2:	47d0      	blx	sl
 80079c4:	3001      	adds	r0, #1
 80079c6:	d0ad      	beq.n	8007924 <_printf_i+0x15c>
 80079c8:	6823      	ldr	r3, [r4, #0]
 80079ca:	079b      	lsls	r3, r3, #30
 80079cc:	d413      	bmi.n	80079f6 <_printf_i+0x22e>
 80079ce:	68e0      	ldr	r0, [r4, #12]
 80079d0:	9b03      	ldr	r3, [sp, #12]
 80079d2:	4298      	cmp	r0, r3
 80079d4:	bfb8      	it	lt
 80079d6:	4618      	movlt	r0, r3
 80079d8:	e7a6      	b.n	8007928 <_printf_i+0x160>
 80079da:	2301      	movs	r3, #1
 80079dc:	4632      	mov	r2, r6
 80079de:	4649      	mov	r1, r9
 80079e0:	4640      	mov	r0, r8
 80079e2:	47d0      	blx	sl
 80079e4:	3001      	adds	r0, #1
 80079e6:	d09d      	beq.n	8007924 <_printf_i+0x15c>
 80079e8:	3501      	adds	r5, #1
 80079ea:	68e3      	ldr	r3, [r4, #12]
 80079ec:	9903      	ldr	r1, [sp, #12]
 80079ee:	1a5b      	subs	r3, r3, r1
 80079f0:	42ab      	cmp	r3, r5
 80079f2:	dcf2      	bgt.n	80079da <_printf_i+0x212>
 80079f4:	e7eb      	b.n	80079ce <_printf_i+0x206>
 80079f6:	2500      	movs	r5, #0
 80079f8:	f104 0619 	add.w	r6, r4, #25
 80079fc:	e7f5      	b.n	80079ea <_printf_i+0x222>
 80079fe:	bf00      	nop
 8007a00:	08009029 	.word	0x08009029
 8007a04:	0800903a 	.word	0x0800903a

08007a08 <memmove>:
 8007a08:	4288      	cmp	r0, r1
 8007a0a:	b510      	push	{r4, lr}
 8007a0c:	eb01 0402 	add.w	r4, r1, r2
 8007a10:	d902      	bls.n	8007a18 <memmove+0x10>
 8007a12:	4284      	cmp	r4, r0
 8007a14:	4623      	mov	r3, r4
 8007a16:	d807      	bhi.n	8007a28 <memmove+0x20>
 8007a18:	1e43      	subs	r3, r0, #1
 8007a1a:	42a1      	cmp	r1, r4
 8007a1c:	d008      	beq.n	8007a30 <memmove+0x28>
 8007a1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a26:	e7f8      	b.n	8007a1a <memmove+0x12>
 8007a28:	4402      	add	r2, r0
 8007a2a:	4601      	mov	r1, r0
 8007a2c:	428a      	cmp	r2, r1
 8007a2e:	d100      	bne.n	8007a32 <memmove+0x2a>
 8007a30:	bd10      	pop	{r4, pc}
 8007a32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a3a:	e7f7      	b.n	8007a2c <memmove+0x24>

08007a3c <memcpy>:
 8007a3c:	440a      	add	r2, r1
 8007a3e:	4291      	cmp	r1, r2
 8007a40:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a44:	d100      	bne.n	8007a48 <memcpy+0xc>
 8007a46:	4770      	bx	lr
 8007a48:	b510      	push	{r4, lr}
 8007a4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a52:	4291      	cmp	r1, r2
 8007a54:	d1f9      	bne.n	8007a4a <memcpy+0xe>
 8007a56:	bd10      	pop	{r4, pc}

08007a58 <_realloc_r>:
 8007a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a5c:	4680      	mov	r8, r0
 8007a5e:	4615      	mov	r5, r2
 8007a60:	460c      	mov	r4, r1
 8007a62:	b921      	cbnz	r1, 8007a6e <_realloc_r+0x16>
 8007a64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a68:	4611      	mov	r1, r2
 8007a6a:	f7ff bb4f 	b.w	800710c <_malloc_r>
 8007a6e:	b92a      	cbnz	r2, 8007a7c <_realloc_r+0x24>
 8007a70:	f7ff fc9a 	bl	80073a8 <_free_r>
 8007a74:	2400      	movs	r4, #0
 8007a76:	4620      	mov	r0, r4
 8007a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a7c:	f000 f81a 	bl	8007ab4 <_malloc_usable_size_r>
 8007a80:	4285      	cmp	r5, r0
 8007a82:	4606      	mov	r6, r0
 8007a84:	d802      	bhi.n	8007a8c <_realloc_r+0x34>
 8007a86:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007a8a:	d8f4      	bhi.n	8007a76 <_realloc_r+0x1e>
 8007a8c:	4629      	mov	r1, r5
 8007a8e:	4640      	mov	r0, r8
 8007a90:	f7ff fb3c 	bl	800710c <_malloc_r>
 8007a94:	4607      	mov	r7, r0
 8007a96:	2800      	cmp	r0, #0
 8007a98:	d0ec      	beq.n	8007a74 <_realloc_r+0x1c>
 8007a9a:	42b5      	cmp	r5, r6
 8007a9c:	462a      	mov	r2, r5
 8007a9e:	4621      	mov	r1, r4
 8007aa0:	bf28      	it	cs
 8007aa2:	4632      	movcs	r2, r6
 8007aa4:	f7ff ffca 	bl	8007a3c <memcpy>
 8007aa8:	4621      	mov	r1, r4
 8007aaa:	4640      	mov	r0, r8
 8007aac:	f7ff fc7c 	bl	80073a8 <_free_r>
 8007ab0:	463c      	mov	r4, r7
 8007ab2:	e7e0      	b.n	8007a76 <_realloc_r+0x1e>

08007ab4 <_malloc_usable_size_r>:
 8007ab4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ab8:	1f18      	subs	r0, r3, #4
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	bfbc      	itt	lt
 8007abe:	580b      	ldrlt	r3, [r1, r0]
 8007ac0:	18c0      	addlt	r0, r0, r3
 8007ac2:	4770      	bx	lr

08007ac4 <pow>:
 8007ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac6:	ed2d 8b02 	vpush	{d8}
 8007aca:	eeb0 8a40 	vmov.f32	s16, s0
 8007ace:	eef0 8a60 	vmov.f32	s17, s1
 8007ad2:	ec55 4b11 	vmov	r4, r5, d1
 8007ad6:	f000 f873 	bl	8007bc0 <__ieee754_pow>
 8007ada:	4622      	mov	r2, r4
 8007adc:	462b      	mov	r3, r5
 8007ade:	4620      	mov	r0, r4
 8007ae0:	4629      	mov	r1, r5
 8007ae2:	ec57 6b10 	vmov	r6, r7, d0
 8007ae6:	f7f9 f841 	bl	8000b6c <__aeabi_dcmpun>
 8007aea:	2800      	cmp	r0, #0
 8007aec:	d13b      	bne.n	8007b66 <pow+0xa2>
 8007aee:	ec51 0b18 	vmov	r0, r1, d8
 8007af2:	2200      	movs	r2, #0
 8007af4:	2300      	movs	r3, #0
 8007af6:	f7f9 f807 	bl	8000b08 <__aeabi_dcmpeq>
 8007afa:	b1b8      	cbz	r0, 8007b2c <pow+0x68>
 8007afc:	2200      	movs	r2, #0
 8007afe:	2300      	movs	r3, #0
 8007b00:	4620      	mov	r0, r4
 8007b02:	4629      	mov	r1, r5
 8007b04:	f7f9 f800 	bl	8000b08 <__aeabi_dcmpeq>
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	d146      	bne.n	8007b9a <pow+0xd6>
 8007b0c:	ec45 4b10 	vmov	d0, r4, r5
 8007b10:	f000 f848 	bl	8007ba4 <finite>
 8007b14:	b338      	cbz	r0, 8007b66 <pow+0xa2>
 8007b16:	2200      	movs	r2, #0
 8007b18:	2300      	movs	r3, #0
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	4629      	mov	r1, r5
 8007b1e:	f7f8 fffd 	bl	8000b1c <__aeabi_dcmplt>
 8007b22:	b300      	cbz	r0, 8007b66 <pow+0xa2>
 8007b24:	f7ff fc14 	bl	8007350 <__errno>
 8007b28:	2322      	movs	r3, #34	@ 0x22
 8007b2a:	e01b      	b.n	8007b64 <pow+0xa0>
 8007b2c:	ec47 6b10 	vmov	d0, r6, r7
 8007b30:	f000 f838 	bl	8007ba4 <finite>
 8007b34:	b9e0      	cbnz	r0, 8007b70 <pow+0xac>
 8007b36:	eeb0 0a48 	vmov.f32	s0, s16
 8007b3a:	eef0 0a68 	vmov.f32	s1, s17
 8007b3e:	f000 f831 	bl	8007ba4 <finite>
 8007b42:	b1a8      	cbz	r0, 8007b70 <pow+0xac>
 8007b44:	ec45 4b10 	vmov	d0, r4, r5
 8007b48:	f000 f82c 	bl	8007ba4 <finite>
 8007b4c:	b180      	cbz	r0, 8007b70 <pow+0xac>
 8007b4e:	4632      	mov	r2, r6
 8007b50:	463b      	mov	r3, r7
 8007b52:	4630      	mov	r0, r6
 8007b54:	4639      	mov	r1, r7
 8007b56:	f7f9 f809 	bl	8000b6c <__aeabi_dcmpun>
 8007b5a:	2800      	cmp	r0, #0
 8007b5c:	d0e2      	beq.n	8007b24 <pow+0x60>
 8007b5e:	f7ff fbf7 	bl	8007350 <__errno>
 8007b62:	2321      	movs	r3, #33	@ 0x21
 8007b64:	6003      	str	r3, [r0, #0]
 8007b66:	ecbd 8b02 	vpop	{d8}
 8007b6a:	ec47 6b10 	vmov	d0, r6, r7
 8007b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b70:	2200      	movs	r2, #0
 8007b72:	2300      	movs	r3, #0
 8007b74:	4630      	mov	r0, r6
 8007b76:	4639      	mov	r1, r7
 8007b78:	f7f8 ffc6 	bl	8000b08 <__aeabi_dcmpeq>
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	d0f2      	beq.n	8007b66 <pow+0xa2>
 8007b80:	eeb0 0a48 	vmov.f32	s0, s16
 8007b84:	eef0 0a68 	vmov.f32	s1, s17
 8007b88:	f000 f80c 	bl	8007ba4 <finite>
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	d0ea      	beq.n	8007b66 <pow+0xa2>
 8007b90:	ec45 4b10 	vmov	d0, r4, r5
 8007b94:	f000 f806 	bl	8007ba4 <finite>
 8007b98:	e7c3      	b.n	8007b22 <pow+0x5e>
 8007b9a:	4f01      	ldr	r7, [pc, #4]	@ (8007ba0 <pow+0xdc>)
 8007b9c:	2600      	movs	r6, #0
 8007b9e:	e7e2      	b.n	8007b66 <pow+0xa2>
 8007ba0:	3ff00000 	.word	0x3ff00000

08007ba4 <finite>:
 8007ba4:	b082      	sub	sp, #8
 8007ba6:	ed8d 0b00 	vstr	d0, [sp]
 8007baa:	9801      	ldr	r0, [sp, #4]
 8007bac:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8007bb0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8007bb4:	0fc0      	lsrs	r0, r0, #31
 8007bb6:	b002      	add	sp, #8
 8007bb8:	4770      	bx	lr
 8007bba:	0000      	movs	r0, r0
 8007bbc:	0000      	movs	r0, r0
	...

08007bc0 <__ieee754_pow>:
 8007bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bc4:	b091      	sub	sp, #68	@ 0x44
 8007bc6:	ed8d 1b00 	vstr	d1, [sp]
 8007bca:	e9dd 1900 	ldrd	r1, r9, [sp]
 8007bce:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8007bd2:	ea5a 0001 	orrs.w	r0, sl, r1
 8007bd6:	ec57 6b10 	vmov	r6, r7, d0
 8007bda:	d113      	bne.n	8007c04 <__ieee754_pow+0x44>
 8007bdc:	19b3      	adds	r3, r6, r6
 8007bde:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8007be2:	4152      	adcs	r2, r2
 8007be4:	4298      	cmp	r0, r3
 8007be6:	4b98      	ldr	r3, [pc, #608]	@ (8007e48 <__ieee754_pow+0x288>)
 8007be8:	4193      	sbcs	r3, r2
 8007bea:	f080 84ea 	bcs.w	80085c2 <__ieee754_pow+0xa02>
 8007bee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	4639      	mov	r1, r7
 8007bf6:	f7f8 fb69 	bl	80002cc <__adddf3>
 8007bfa:	ec41 0b10 	vmov	d0, r0, r1
 8007bfe:	b011      	add	sp, #68	@ 0x44
 8007c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c04:	4a91      	ldr	r2, [pc, #580]	@ (8007e4c <__ieee754_pow+0x28c>)
 8007c06:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007c0a:	4590      	cmp	r8, r2
 8007c0c:	463d      	mov	r5, r7
 8007c0e:	4633      	mov	r3, r6
 8007c10:	d806      	bhi.n	8007c20 <__ieee754_pow+0x60>
 8007c12:	d101      	bne.n	8007c18 <__ieee754_pow+0x58>
 8007c14:	2e00      	cmp	r6, #0
 8007c16:	d1ea      	bne.n	8007bee <__ieee754_pow+0x2e>
 8007c18:	4592      	cmp	sl, r2
 8007c1a:	d801      	bhi.n	8007c20 <__ieee754_pow+0x60>
 8007c1c:	d10e      	bne.n	8007c3c <__ieee754_pow+0x7c>
 8007c1e:	b169      	cbz	r1, 8007c3c <__ieee754_pow+0x7c>
 8007c20:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8007c24:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8007c28:	431d      	orrs	r5, r3
 8007c2a:	d1e0      	bne.n	8007bee <__ieee754_pow+0x2e>
 8007c2c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007c30:	18db      	adds	r3, r3, r3
 8007c32:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8007c36:	4152      	adcs	r2, r2
 8007c38:	429d      	cmp	r5, r3
 8007c3a:	e7d4      	b.n	8007be6 <__ieee754_pow+0x26>
 8007c3c:	2d00      	cmp	r5, #0
 8007c3e:	46c3      	mov	fp, r8
 8007c40:	da3a      	bge.n	8007cb8 <__ieee754_pow+0xf8>
 8007c42:	4a83      	ldr	r2, [pc, #524]	@ (8007e50 <__ieee754_pow+0x290>)
 8007c44:	4592      	cmp	sl, r2
 8007c46:	d84d      	bhi.n	8007ce4 <__ieee754_pow+0x124>
 8007c48:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8007c4c:	4592      	cmp	sl, r2
 8007c4e:	f240 84c7 	bls.w	80085e0 <__ieee754_pow+0xa20>
 8007c52:	ea4f 522a 	mov.w	r2, sl, asr #20
 8007c56:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8007c5a:	2a14      	cmp	r2, #20
 8007c5c:	dd0f      	ble.n	8007c7e <__ieee754_pow+0xbe>
 8007c5e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8007c62:	fa21 f402 	lsr.w	r4, r1, r2
 8007c66:	fa04 f202 	lsl.w	r2, r4, r2
 8007c6a:	428a      	cmp	r2, r1
 8007c6c:	f040 84b8 	bne.w	80085e0 <__ieee754_pow+0xa20>
 8007c70:	f004 0401 	and.w	r4, r4, #1
 8007c74:	f1c4 0402 	rsb	r4, r4, #2
 8007c78:	2900      	cmp	r1, #0
 8007c7a:	d158      	bne.n	8007d2e <__ieee754_pow+0x16e>
 8007c7c:	e00e      	b.n	8007c9c <__ieee754_pow+0xdc>
 8007c7e:	2900      	cmp	r1, #0
 8007c80:	d154      	bne.n	8007d2c <__ieee754_pow+0x16c>
 8007c82:	f1c2 0214 	rsb	r2, r2, #20
 8007c86:	fa4a f402 	asr.w	r4, sl, r2
 8007c8a:	fa04 f202 	lsl.w	r2, r4, r2
 8007c8e:	4552      	cmp	r2, sl
 8007c90:	f040 84a3 	bne.w	80085da <__ieee754_pow+0xa1a>
 8007c94:	f004 0401 	and.w	r4, r4, #1
 8007c98:	f1c4 0402 	rsb	r4, r4, #2
 8007c9c:	4a6d      	ldr	r2, [pc, #436]	@ (8007e54 <__ieee754_pow+0x294>)
 8007c9e:	4592      	cmp	sl, r2
 8007ca0:	d12e      	bne.n	8007d00 <__ieee754_pow+0x140>
 8007ca2:	f1b9 0f00 	cmp.w	r9, #0
 8007ca6:	f280 8494 	bge.w	80085d2 <__ieee754_pow+0xa12>
 8007caa:	496a      	ldr	r1, [pc, #424]	@ (8007e54 <__ieee754_pow+0x294>)
 8007cac:	4632      	mov	r2, r6
 8007cae:	463b      	mov	r3, r7
 8007cb0:	2000      	movs	r0, #0
 8007cb2:	f7f8 fdeb 	bl	800088c <__aeabi_ddiv>
 8007cb6:	e7a0      	b.n	8007bfa <__ieee754_pow+0x3a>
 8007cb8:	2400      	movs	r4, #0
 8007cba:	bbc1      	cbnz	r1, 8007d2e <__ieee754_pow+0x16e>
 8007cbc:	4a63      	ldr	r2, [pc, #396]	@ (8007e4c <__ieee754_pow+0x28c>)
 8007cbe:	4592      	cmp	sl, r2
 8007cc0:	d1ec      	bne.n	8007c9c <__ieee754_pow+0xdc>
 8007cc2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8007cc6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8007cca:	431a      	orrs	r2, r3
 8007ccc:	f000 8479 	beq.w	80085c2 <__ieee754_pow+0xa02>
 8007cd0:	4b61      	ldr	r3, [pc, #388]	@ (8007e58 <__ieee754_pow+0x298>)
 8007cd2:	4598      	cmp	r8, r3
 8007cd4:	d908      	bls.n	8007ce8 <__ieee754_pow+0x128>
 8007cd6:	f1b9 0f00 	cmp.w	r9, #0
 8007cda:	f2c0 8476 	blt.w	80085ca <__ieee754_pow+0xa0a>
 8007cde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ce2:	e78a      	b.n	8007bfa <__ieee754_pow+0x3a>
 8007ce4:	2402      	movs	r4, #2
 8007ce6:	e7e8      	b.n	8007cba <__ieee754_pow+0xfa>
 8007ce8:	f1b9 0f00 	cmp.w	r9, #0
 8007cec:	f04f 0000 	mov.w	r0, #0
 8007cf0:	f04f 0100 	mov.w	r1, #0
 8007cf4:	da81      	bge.n	8007bfa <__ieee754_pow+0x3a>
 8007cf6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007cfa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007cfe:	e77c      	b.n	8007bfa <__ieee754_pow+0x3a>
 8007d00:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8007d04:	d106      	bne.n	8007d14 <__ieee754_pow+0x154>
 8007d06:	4632      	mov	r2, r6
 8007d08:	463b      	mov	r3, r7
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	4639      	mov	r1, r7
 8007d0e:	f7f8 fc93 	bl	8000638 <__aeabi_dmul>
 8007d12:	e772      	b.n	8007bfa <__ieee754_pow+0x3a>
 8007d14:	4a51      	ldr	r2, [pc, #324]	@ (8007e5c <__ieee754_pow+0x29c>)
 8007d16:	4591      	cmp	r9, r2
 8007d18:	d109      	bne.n	8007d2e <__ieee754_pow+0x16e>
 8007d1a:	2d00      	cmp	r5, #0
 8007d1c:	db07      	blt.n	8007d2e <__ieee754_pow+0x16e>
 8007d1e:	ec47 6b10 	vmov	d0, r6, r7
 8007d22:	b011      	add	sp, #68	@ 0x44
 8007d24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d28:	f000 bd52 	b.w	80087d0 <__ieee754_sqrt>
 8007d2c:	2400      	movs	r4, #0
 8007d2e:	ec47 6b10 	vmov	d0, r6, r7
 8007d32:	9302      	str	r3, [sp, #8]
 8007d34:	f000 fc88 	bl	8008648 <fabs>
 8007d38:	9b02      	ldr	r3, [sp, #8]
 8007d3a:	ec51 0b10 	vmov	r0, r1, d0
 8007d3e:	bb53      	cbnz	r3, 8007d96 <__ieee754_pow+0x1d6>
 8007d40:	4b44      	ldr	r3, [pc, #272]	@ (8007e54 <__ieee754_pow+0x294>)
 8007d42:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d002      	beq.n	8007d50 <__ieee754_pow+0x190>
 8007d4a:	f1b8 0f00 	cmp.w	r8, #0
 8007d4e:	d122      	bne.n	8007d96 <__ieee754_pow+0x1d6>
 8007d50:	f1b9 0f00 	cmp.w	r9, #0
 8007d54:	da05      	bge.n	8007d62 <__ieee754_pow+0x1a2>
 8007d56:	4602      	mov	r2, r0
 8007d58:	460b      	mov	r3, r1
 8007d5a:	2000      	movs	r0, #0
 8007d5c:	493d      	ldr	r1, [pc, #244]	@ (8007e54 <__ieee754_pow+0x294>)
 8007d5e:	f7f8 fd95 	bl	800088c <__aeabi_ddiv>
 8007d62:	2d00      	cmp	r5, #0
 8007d64:	f6bf af49 	bge.w	8007bfa <__ieee754_pow+0x3a>
 8007d68:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8007d6c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8007d70:	ea58 0804 	orrs.w	r8, r8, r4
 8007d74:	d108      	bne.n	8007d88 <__ieee754_pow+0x1c8>
 8007d76:	4602      	mov	r2, r0
 8007d78:	460b      	mov	r3, r1
 8007d7a:	4610      	mov	r0, r2
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	f7f8 faa3 	bl	80002c8 <__aeabi_dsub>
 8007d82:	4602      	mov	r2, r0
 8007d84:	460b      	mov	r3, r1
 8007d86:	e794      	b.n	8007cb2 <__ieee754_pow+0xf2>
 8007d88:	2c01      	cmp	r4, #1
 8007d8a:	f47f af36 	bne.w	8007bfa <__ieee754_pow+0x3a>
 8007d8e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007d92:	4619      	mov	r1, r3
 8007d94:	e731      	b.n	8007bfa <__ieee754_pow+0x3a>
 8007d96:	0feb      	lsrs	r3, r5, #31
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	ea53 0204 	orrs.w	r2, r3, r4
 8007d9e:	d102      	bne.n	8007da6 <__ieee754_pow+0x1e6>
 8007da0:	4632      	mov	r2, r6
 8007da2:	463b      	mov	r3, r7
 8007da4:	e7e9      	b.n	8007d7a <__ieee754_pow+0x1ba>
 8007da6:	3c01      	subs	r4, #1
 8007da8:	431c      	orrs	r4, r3
 8007daa:	d016      	beq.n	8007dda <__ieee754_pow+0x21a>
 8007dac:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8007e38 <__ieee754_pow+0x278>
 8007db0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8007db4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007db8:	f240 8112 	bls.w	8007fe0 <__ieee754_pow+0x420>
 8007dbc:	4b28      	ldr	r3, [pc, #160]	@ (8007e60 <__ieee754_pow+0x2a0>)
 8007dbe:	459a      	cmp	sl, r3
 8007dc0:	4b25      	ldr	r3, [pc, #148]	@ (8007e58 <__ieee754_pow+0x298>)
 8007dc2:	d916      	bls.n	8007df2 <__ieee754_pow+0x232>
 8007dc4:	4598      	cmp	r8, r3
 8007dc6:	d80b      	bhi.n	8007de0 <__ieee754_pow+0x220>
 8007dc8:	f1b9 0f00 	cmp.w	r9, #0
 8007dcc:	da0b      	bge.n	8007de6 <__ieee754_pow+0x226>
 8007dce:	2000      	movs	r0, #0
 8007dd0:	b011      	add	sp, #68	@ 0x44
 8007dd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd6:	f000 bcf3 	b.w	80087c0 <__math_oflow>
 8007dda:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8007e40 <__ieee754_pow+0x280>
 8007dde:	e7e7      	b.n	8007db0 <__ieee754_pow+0x1f0>
 8007de0:	f1b9 0f00 	cmp.w	r9, #0
 8007de4:	dcf3      	bgt.n	8007dce <__ieee754_pow+0x20e>
 8007de6:	2000      	movs	r0, #0
 8007de8:	b011      	add	sp, #68	@ 0x44
 8007dea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dee:	f000 bcdf 	b.w	80087b0 <__math_uflow>
 8007df2:	4598      	cmp	r8, r3
 8007df4:	d20c      	bcs.n	8007e10 <__ieee754_pow+0x250>
 8007df6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	f7f8 fe8d 	bl	8000b1c <__aeabi_dcmplt>
 8007e02:	3800      	subs	r0, #0
 8007e04:	bf18      	it	ne
 8007e06:	2001      	movne	r0, #1
 8007e08:	f1b9 0f00 	cmp.w	r9, #0
 8007e0c:	daec      	bge.n	8007de8 <__ieee754_pow+0x228>
 8007e0e:	e7df      	b.n	8007dd0 <__ieee754_pow+0x210>
 8007e10:	4b10      	ldr	r3, [pc, #64]	@ (8007e54 <__ieee754_pow+0x294>)
 8007e12:	4598      	cmp	r8, r3
 8007e14:	f04f 0200 	mov.w	r2, #0
 8007e18:	d924      	bls.n	8007e64 <__ieee754_pow+0x2a4>
 8007e1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e1e:	2300      	movs	r3, #0
 8007e20:	f7f8 fe7c 	bl	8000b1c <__aeabi_dcmplt>
 8007e24:	3800      	subs	r0, #0
 8007e26:	bf18      	it	ne
 8007e28:	2001      	movne	r0, #1
 8007e2a:	f1b9 0f00 	cmp.w	r9, #0
 8007e2e:	dccf      	bgt.n	8007dd0 <__ieee754_pow+0x210>
 8007e30:	e7da      	b.n	8007de8 <__ieee754_pow+0x228>
 8007e32:	bf00      	nop
 8007e34:	f3af 8000 	nop.w
 8007e38:	00000000 	.word	0x00000000
 8007e3c:	3ff00000 	.word	0x3ff00000
 8007e40:	00000000 	.word	0x00000000
 8007e44:	bff00000 	.word	0xbff00000
 8007e48:	fff00000 	.word	0xfff00000
 8007e4c:	7ff00000 	.word	0x7ff00000
 8007e50:	433fffff 	.word	0x433fffff
 8007e54:	3ff00000 	.word	0x3ff00000
 8007e58:	3fefffff 	.word	0x3fefffff
 8007e5c:	3fe00000 	.word	0x3fe00000
 8007e60:	43f00000 	.word	0x43f00000
 8007e64:	4b5a      	ldr	r3, [pc, #360]	@ (8007fd0 <__ieee754_pow+0x410>)
 8007e66:	f7f8 fa2f 	bl	80002c8 <__aeabi_dsub>
 8007e6a:	a351      	add	r3, pc, #324	@ (adr r3, 8007fb0 <__ieee754_pow+0x3f0>)
 8007e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e70:	4604      	mov	r4, r0
 8007e72:	460d      	mov	r5, r1
 8007e74:	f7f8 fbe0 	bl	8000638 <__aeabi_dmul>
 8007e78:	a34f      	add	r3, pc, #316	@ (adr r3, 8007fb8 <__ieee754_pow+0x3f8>)
 8007e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7e:	4606      	mov	r6, r0
 8007e80:	460f      	mov	r7, r1
 8007e82:	4620      	mov	r0, r4
 8007e84:	4629      	mov	r1, r5
 8007e86:	f7f8 fbd7 	bl	8000638 <__aeabi_dmul>
 8007e8a:	4b52      	ldr	r3, [pc, #328]	@ (8007fd4 <__ieee754_pow+0x414>)
 8007e8c:	4682      	mov	sl, r0
 8007e8e:	468b      	mov	fp, r1
 8007e90:	2200      	movs	r2, #0
 8007e92:	4620      	mov	r0, r4
 8007e94:	4629      	mov	r1, r5
 8007e96:	f7f8 fbcf 	bl	8000638 <__aeabi_dmul>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	a148      	add	r1, pc, #288	@ (adr r1, 8007fc0 <__ieee754_pow+0x400>)
 8007ea0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ea4:	f7f8 fa10 	bl	80002c8 <__aeabi_dsub>
 8007ea8:	4622      	mov	r2, r4
 8007eaa:	462b      	mov	r3, r5
 8007eac:	f7f8 fbc4 	bl	8000638 <__aeabi_dmul>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	2000      	movs	r0, #0
 8007eb6:	4948      	ldr	r1, [pc, #288]	@ (8007fd8 <__ieee754_pow+0x418>)
 8007eb8:	f7f8 fa06 	bl	80002c8 <__aeabi_dsub>
 8007ebc:	4622      	mov	r2, r4
 8007ebe:	4680      	mov	r8, r0
 8007ec0:	4689      	mov	r9, r1
 8007ec2:	462b      	mov	r3, r5
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	4629      	mov	r1, r5
 8007ec8:	f7f8 fbb6 	bl	8000638 <__aeabi_dmul>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	460b      	mov	r3, r1
 8007ed0:	4640      	mov	r0, r8
 8007ed2:	4649      	mov	r1, r9
 8007ed4:	f7f8 fbb0 	bl	8000638 <__aeabi_dmul>
 8007ed8:	a33b      	add	r3, pc, #236	@ (adr r3, 8007fc8 <__ieee754_pow+0x408>)
 8007eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ede:	f7f8 fbab 	bl	8000638 <__aeabi_dmul>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	4650      	mov	r0, sl
 8007ee8:	4659      	mov	r1, fp
 8007eea:	f7f8 f9ed 	bl	80002c8 <__aeabi_dsub>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	4680      	mov	r8, r0
 8007ef4:	4689      	mov	r9, r1
 8007ef6:	4630      	mov	r0, r6
 8007ef8:	4639      	mov	r1, r7
 8007efa:	f7f8 f9e7 	bl	80002cc <__adddf3>
 8007efe:	2400      	movs	r4, #0
 8007f00:	4632      	mov	r2, r6
 8007f02:	463b      	mov	r3, r7
 8007f04:	4620      	mov	r0, r4
 8007f06:	460d      	mov	r5, r1
 8007f08:	f7f8 f9de 	bl	80002c8 <__aeabi_dsub>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	460b      	mov	r3, r1
 8007f10:	4640      	mov	r0, r8
 8007f12:	4649      	mov	r1, r9
 8007f14:	f7f8 f9d8 	bl	80002c8 <__aeabi_dsub>
 8007f18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007f20:	2300      	movs	r3, #0
 8007f22:	9304      	str	r3, [sp, #16]
 8007f24:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007f28:	4606      	mov	r6, r0
 8007f2a:	460f      	mov	r7, r1
 8007f2c:	4652      	mov	r2, sl
 8007f2e:	465b      	mov	r3, fp
 8007f30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f34:	f7f8 f9c8 	bl	80002c8 <__aeabi_dsub>
 8007f38:	4622      	mov	r2, r4
 8007f3a:	462b      	mov	r3, r5
 8007f3c:	f7f8 fb7c 	bl	8000638 <__aeabi_dmul>
 8007f40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f44:	4680      	mov	r8, r0
 8007f46:	4689      	mov	r9, r1
 8007f48:	4630      	mov	r0, r6
 8007f4a:	4639      	mov	r1, r7
 8007f4c:	f7f8 fb74 	bl	8000638 <__aeabi_dmul>
 8007f50:	4602      	mov	r2, r0
 8007f52:	460b      	mov	r3, r1
 8007f54:	4640      	mov	r0, r8
 8007f56:	4649      	mov	r1, r9
 8007f58:	f7f8 f9b8 	bl	80002cc <__adddf3>
 8007f5c:	4652      	mov	r2, sl
 8007f5e:	465b      	mov	r3, fp
 8007f60:	4606      	mov	r6, r0
 8007f62:	460f      	mov	r7, r1
 8007f64:	4620      	mov	r0, r4
 8007f66:	4629      	mov	r1, r5
 8007f68:	f7f8 fb66 	bl	8000638 <__aeabi_dmul>
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	4602      	mov	r2, r0
 8007f70:	4680      	mov	r8, r0
 8007f72:	4689      	mov	r9, r1
 8007f74:	4630      	mov	r0, r6
 8007f76:	4639      	mov	r1, r7
 8007f78:	f7f8 f9a8 	bl	80002cc <__adddf3>
 8007f7c:	4b17      	ldr	r3, [pc, #92]	@ (8007fdc <__ieee754_pow+0x41c>)
 8007f7e:	4299      	cmp	r1, r3
 8007f80:	4604      	mov	r4, r0
 8007f82:	460d      	mov	r5, r1
 8007f84:	468a      	mov	sl, r1
 8007f86:	468b      	mov	fp, r1
 8007f88:	f340 82ef 	ble.w	800856a <__ieee754_pow+0x9aa>
 8007f8c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8007f90:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8007f94:	4303      	orrs	r3, r0
 8007f96:	f000 81e8 	beq.w	800836a <__ieee754_pow+0x7aa>
 8007f9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	f7f8 fdbb 	bl	8000b1c <__aeabi_dcmplt>
 8007fa6:	3800      	subs	r0, #0
 8007fa8:	bf18      	it	ne
 8007faa:	2001      	movne	r0, #1
 8007fac:	e710      	b.n	8007dd0 <__ieee754_pow+0x210>
 8007fae:	bf00      	nop
 8007fb0:	60000000 	.word	0x60000000
 8007fb4:	3ff71547 	.word	0x3ff71547
 8007fb8:	f85ddf44 	.word	0xf85ddf44
 8007fbc:	3e54ae0b 	.word	0x3e54ae0b
 8007fc0:	55555555 	.word	0x55555555
 8007fc4:	3fd55555 	.word	0x3fd55555
 8007fc8:	652b82fe 	.word	0x652b82fe
 8007fcc:	3ff71547 	.word	0x3ff71547
 8007fd0:	3ff00000 	.word	0x3ff00000
 8007fd4:	3fd00000 	.word	0x3fd00000
 8007fd8:	3fe00000 	.word	0x3fe00000
 8007fdc:	408fffff 	.word	0x408fffff
 8007fe0:	4bd5      	ldr	r3, [pc, #852]	@ (8008338 <__ieee754_pow+0x778>)
 8007fe2:	402b      	ands	r3, r5
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	b92b      	cbnz	r3, 8007ff4 <__ieee754_pow+0x434>
 8007fe8:	4bd4      	ldr	r3, [pc, #848]	@ (800833c <__ieee754_pow+0x77c>)
 8007fea:	f7f8 fb25 	bl	8000638 <__aeabi_dmul>
 8007fee:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8007ff2:	468b      	mov	fp, r1
 8007ff4:	ea4f 532b 	mov.w	r3, fp, asr #20
 8007ff8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007ffc:	4413      	add	r3, r2
 8007ffe:	930a      	str	r3, [sp, #40]	@ 0x28
 8008000:	4bcf      	ldr	r3, [pc, #828]	@ (8008340 <__ieee754_pow+0x780>)
 8008002:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8008006:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800800a:	459b      	cmp	fp, r3
 800800c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008010:	dd08      	ble.n	8008024 <__ieee754_pow+0x464>
 8008012:	4bcc      	ldr	r3, [pc, #816]	@ (8008344 <__ieee754_pow+0x784>)
 8008014:	459b      	cmp	fp, r3
 8008016:	f340 81a5 	ble.w	8008364 <__ieee754_pow+0x7a4>
 800801a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800801c:	3301      	adds	r3, #1
 800801e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008020:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8008024:	f04f 0a00 	mov.w	sl, #0
 8008028:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800802c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800802e:	4bc6      	ldr	r3, [pc, #792]	@ (8008348 <__ieee754_pow+0x788>)
 8008030:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008034:	ed93 7b00 	vldr	d7, [r3]
 8008038:	4629      	mov	r1, r5
 800803a:	ec53 2b17 	vmov	r2, r3, d7
 800803e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008042:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008046:	f7f8 f93f 	bl	80002c8 <__aeabi_dsub>
 800804a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800804e:	4606      	mov	r6, r0
 8008050:	460f      	mov	r7, r1
 8008052:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008056:	f7f8 f939 	bl	80002cc <__adddf3>
 800805a:	4602      	mov	r2, r0
 800805c:	460b      	mov	r3, r1
 800805e:	2000      	movs	r0, #0
 8008060:	49ba      	ldr	r1, [pc, #744]	@ (800834c <__ieee754_pow+0x78c>)
 8008062:	f7f8 fc13 	bl	800088c <__aeabi_ddiv>
 8008066:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800806a:	4602      	mov	r2, r0
 800806c:	460b      	mov	r3, r1
 800806e:	4630      	mov	r0, r6
 8008070:	4639      	mov	r1, r7
 8008072:	f7f8 fae1 	bl	8000638 <__aeabi_dmul>
 8008076:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800807a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800807e:	106d      	asrs	r5, r5, #1
 8008080:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8008084:	f04f 0b00 	mov.w	fp, #0
 8008088:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800808c:	4661      	mov	r1, ip
 800808e:	2200      	movs	r2, #0
 8008090:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8008094:	4658      	mov	r0, fp
 8008096:	46e1      	mov	r9, ip
 8008098:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800809c:	4614      	mov	r4, r2
 800809e:	461d      	mov	r5, r3
 80080a0:	f7f8 faca 	bl	8000638 <__aeabi_dmul>
 80080a4:	4602      	mov	r2, r0
 80080a6:	460b      	mov	r3, r1
 80080a8:	4630      	mov	r0, r6
 80080aa:	4639      	mov	r1, r7
 80080ac:	f7f8 f90c 	bl	80002c8 <__aeabi_dsub>
 80080b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80080b4:	4606      	mov	r6, r0
 80080b6:	460f      	mov	r7, r1
 80080b8:	4620      	mov	r0, r4
 80080ba:	4629      	mov	r1, r5
 80080bc:	f7f8 f904 	bl	80002c8 <__aeabi_dsub>
 80080c0:	4602      	mov	r2, r0
 80080c2:	460b      	mov	r3, r1
 80080c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80080c8:	f7f8 f8fe 	bl	80002c8 <__aeabi_dsub>
 80080cc:	465a      	mov	r2, fp
 80080ce:	464b      	mov	r3, r9
 80080d0:	f7f8 fab2 	bl	8000638 <__aeabi_dmul>
 80080d4:	4602      	mov	r2, r0
 80080d6:	460b      	mov	r3, r1
 80080d8:	4630      	mov	r0, r6
 80080da:	4639      	mov	r1, r7
 80080dc:	f7f8 f8f4 	bl	80002c8 <__aeabi_dsub>
 80080e0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80080e4:	f7f8 faa8 	bl	8000638 <__aeabi_dmul>
 80080e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80080f0:	4610      	mov	r0, r2
 80080f2:	4619      	mov	r1, r3
 80080f4:	f7f8 faa0 	bl	8000638 <__aeabi_dmul>
 80080f8:	a37d      	add	r3, pc, #500	@ (adr r3, 80082f0 <__ieee754_pow+0x730>)
 80080fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fe:	4604      	mov	r4, r0
 8008100:	460d      	mov	r5, r1
 8008102:	f7f8 fa99 	bl	8000638 <__aeabi_dmul>
 8008106:	a37c      	add	r3, pc, #496	@ (adr r3, 80082f8 <__ieee754_pow+0x738>)
 8008108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810c:	f7f8 f8de 	bl	80002cc <__adddf3>
 8008110:	4622      	mov	r2, r4
 8008112:	462b      	mov	r3, r5
 8008114:	f7f8 fa90 	bl	8000638 <__aeabi_dmul>
 8008118:	a379      	add	r3, pc, #484	@ (adr r3, 8008300 <__ieee754_pow+0x740>)
 800811a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811e:	f7f8 f8d5 	bl	80002cc <__adddf3>
 8008122:	4622      	mov	r2, r4
 8008124:	462b      	mov	r3, r5
 8008126:	f7f8 fa87 	bl	8000638 <__aeabi_dmul>
 800812a:	a377      	add	r3, pc, #476	@ (adr r3, 8008308 <__ieee754_pow+0x748>)
 800812c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008130:	f7f8 f8cc 	bl	80002cc <__adddf3>
 8008134:	4622      	mov	r2, r4
 8008136:	462b      	mov	r3, r5
 8008138:	f7f8 fa7e 	bl	8000638 <__aeabi_dmul>
 800813c:	a374      	add	r3, pc, #464	@ (adr r3, 8008310 <__ieee754_pow+0x750>)
 800813e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008142:	f7f8 f8c3 	bl	80002cc <__adddf3>
 8008146:	4622      	mov	r2, r4
 8008148:	462b      	mov	r3, r5
 800814a:	f7f8 fa75 	bl	8000638 <__aeabi_dmul>
 800814e:	a372      	add	r3, pc, #456	@ (adr r3, 8008318 <__ieee754_pow+0x758>)
 8008150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008154:	f7f8 f8ba 	bl	80002cc <__adddf3>
 8008158:	4622      	mov	r2, r4
 800815a:	4606      	mov	r6, r0
 800815c:	460f      	mov	r7, r1
 800815e:	462b      	mov	r3, r5
 8008160:	4620      	mov	r0, r4
 8008162:	4629      	mov	r1, r5
 8008164:	f7f8 fa68 	bl	8000638 <__aeabi_dmul>
 8008168:	4602      	mov	r2, r0
 800816a:	460b      	mov	r3, r1
 800816c:	4630      	mov	r0, r6
 800816e:	4639      	mov	r1, r7
 8008170:	f7f8 fa62 	bl	8000638 <__aeabi_dmul>
 8008174:	465a      	mov	r2, fp
 8008176:	4604      	mov	r4, r0
 8008178:	460d      	mov	r5, r1
 800817a:	464b      	mov	r3, r9
 800817c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008180:	f7f8 f8a4 	bl	80002cc <__adddf3>
 8008184:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008188:	f7f8 fa56 	bl	8000638 <__aeabi_dmul>
 800818c:	4622      	mov	r2, r4
 800818e:	462b      	mov	r3, r5
 8008190:	f7f8 f89c 	bl	80002cc <__adddf3>
 8008194:	465a      	mov	r2, fp
 8008196:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800819a:	464b      	mov	r3, r9
 800819c:	4658      	mov	r0, fp
 800819e:	4649      	mov	r1, r9
 80081a0:	f7f8 fa4a 	bl	8000638 <__aeabi_dmul>
 80081a4:	4b6a      	ldr	r3, [pc, #424]	@ (8008350 <__ieee754_pow+0x790>)
 80081a6:	2200      	movs	r2, #0
 80081a8:	4606      	mov	r6, r0
 80081aa:	460f      	mov	r7, r1
 80081ac:	f7f8 f88e 	bl	80002cc <__adddf3>
 80081b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80081b4:	f7f8 f88a 	bl	80002cc <__adddf3>
 80081b8:	46d8      	mov	r8, fp
 80081ba:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80081be:	460d      	mov	r5, r1
 80081c0:	465a      	mov	r2, fp
 80081c2:	460b      	mov	r3, r1
 80081c4:	4640      	mov	r0, r8
 80081c6:	4649      	mov	r1, r9
 80081c8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80081cc:	f7f8 fa34 	bl	8000638 <__aeabi_dmul>
 80081d0:	465c      	mov	r4, fp
 80081d2:	4680      	mov	r8, r0
 80081d4:	4689      	mov	r9, r1
 80081d6:	4b5e      	ldr	r3, [pc, #376]	@ (8008350 <__ieee754_pow+0x790>)
 80081d8:	2200      	movs	r2, #0
 80081da:	4620      	mov	r0, r4
 80081dc:	4629      	mov	r1, r5
 80081de:	f7f8 f873 	bl	80002c8 <__aeabi_dsub>
 80081e2:	4632      	mov	r2, r6
 80081e4:	463b      	mov	r3, r7
 80081e6:	f7f8 f86f 	bl	80002c8 <__aeabi_dsub>
 80081ea:	4602      	mov	r2, r0
 80081ec:	460b      	mov	r3, r1
 80081ee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80081f2:	f7f8 f869 	bl	80002c8 <__aeabi_dsub>
 80081f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081fa:	f7f8 fa1d 	bl	8000638 <__aeabi_dmul>
 80081fe:	4622      	mov	r2, r4
 8008200:	4606      	mov	r6, r0
 8008202:	460f      	mov	r7, r1
 8008204:	462b      	mov	r3, r5
 8008206:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800820a:	f7f8 fa15 	bl	8000638 <__aeabi_dmul>
 800820e:	4602      	mov	r2, r0
 8008210:	460b      	mov	r3, r1
 8008212:	4630      	mov	r0, r6
 8008214:	4639      	mov	r1, r7
 8008216:	f7f8 f859 	bl	80002cc <__adddf3>
 800821a:	4606      	mov	r6, r0
 800821c:	460f      	mov	r7, r1
 800821e:	4602      	mov	r2, r0
 8008220:	460b      	mov	r3, r1
 8008222:	4640      	mov	r0, r8
 8008224:	4649      	mov	r1, r9
 8008226:	f7f8 f851 	bl	80002cc <__adddf3>
 800822a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800822e:	a33c      	add	r3, pc, #240	@ (adr r3, 8008320 <__ieee754_pow+0x760>)
 8008230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008234:	4658      	mov	r0, fp
 8008236:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800823a:	460d      	mov	r5, r1
 800823c:	f7f8 f9fc 	bl	8000638 <__aeabi_dmul>
 8008240:	465c      	mov	r4, fp
 8008242:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008246:	4642      	mov	r2, r8
 8008248:	464b      	mov	r3, r9
 800824a:	4620      	mov	r0, r4
 800824c:	4629      	mov	r1, r5
 800824e:	f7f8 f83b 	bl	80002c8 <__aeabi_dsub>
 8008252:	4602      	mov	r2, r0
 8008254:	460b      	mov	r3, r1
 8008256:	4630      	mov	r0, r6
 8008258:	4639      	mov	r1, r7
 800825a:	f7f8 f835 	bl	80002c8 <__aeabi_dsub>
 800825e:	a332      	add	r3, pc, #200	@ (adr r3, 8008328 <__ieee754_pow+0x768>)
 8008260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008264:	f7f8 f9e8 	bl	8000638 <__aeabi_dmul>
 8008268:	a331      	add	r3, pc, #196	@ (adr r3, 8008330 <__ieee754_pow+0x770>)
 800826a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826e:	4606      	mov	r6, r0
 8008270:	460f      	mov	r7, r1
 8008272:	4620      	mov	r0, r4
 8008274:	4629      	mov	r1, r5
 8008276:	f7f8 f9df 	bl	8000638 <__aeabi_dmul>
 800827a:	4602      	mov	r2, r0
 800827c:	460b      	mov	r3, r1
 800827e:	4630      	mov	r0, r6
 8008280:	4639      	mov	r1, r7
 8008282:	f7f8 f823 	bl	80002cc <__adddf3>
 8008286:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008288:	4b32      	ldr	r3, [pc, #200]	@ (8008354 <__ieee754_pow+0x794>)
 800828a:	4413      	add	r3, r2
 800828c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008290:	f7f8 f81c 	bl	80002cc <__adddf3>
 8008294:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008298:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800829a:	f7f8 f963 	bl	8000564 <__aeabi_i2d>
 800829e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80082a0:	4b2d      	ldr	r3, [pc, #180]	@ (8008358 <__ieee754_pow+0x798>)
 80082a2:	4413      	add	r3, r2
 80082a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80082a8:	4606      	mov	r6, r0
 80082aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082ae:	460f      	mov	r7, r1
 80082b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082b4:	f7f8 f80a 	bl	80002cc <__adddf3>
 80082b8:	4642      	mov	r2, r8
 80082ba:	464b      	mov	r3, r9
 80082bc:	f7f8 f806 	bl	80002cc <__adddf3>
 80082c0:	4632      	mov	r2, r6
 80082c2:	463b      	mov	r3, r7
 80082c4:	f7f8 f802 	bl	80002cc <__adddf3>
 80082c8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80082cc:	4632      	mov	r2, r6
 80082ce:	463b      	mov	r3, r7
 80082d0:	4658      	mov	r0, fp
 80082d2:	460d      	mov	r5, r1
 80082d4:	f7f7 fff8 	bl	80002c8 <__aeabi_dsub>
 80082d8:	4642      	mov	r2, r8
 80082da:	464b      	mov	r3, r9
 80082dc:	f7f7 fff4 	bl	80002c8 <__aeabi_dsub>
 80082e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082e4:	f7f7 fff0 	bl	80002c8 <__aeabi_dsub>
 80082e8:	465c      	mov	r4, fp
 80082ea:	4602      	mov	r2, r0
 80082ec:	e036      	b.n	800835c <__ieee754_pow+0x79c>
 80082ee:	bf00      	nop
 80082f0:	4a454eef 	.word	0x4a454eef
 80082f4:	3fca7e28 	.word	0x3fca7e28
 80082f8:	93c9db65 	.word	0x93c9db65
 80082fc:	3fcd864a 	.word	0x3fcd864a
 8008300:	a91d4101 	.word	0xa91d4101
 8008304:	3fd17460 	.word	0x3fd17460
 8008308:	518f264d 	.word	0x518f264d
 800830c:	3fd55555 	.word	0x3fd55555
 8008310:	db6fabff 	.word	0xdb6fabff
 8008314:	3fdb6db6 	.word	0x3fdb6db6
 8008318:	33333303 	.word	0x33333303
 800831c:	3fe33333 	.word	0x3fe33333
 8008320:	e0000000 	.word	0xe0000000
 8008324:	3feec709 	.word	0x3feec709
 8008328:	dc3a03fd 	.word	0xdc3a03fd
 800832c:	3feec709 	.word	0x3feec709
 8008330:	145b01f5 	.word	0x145b01f5
 8008334:	be3e2fe0 	.word	0xbe3e2fe0
 8008338:	7ff00000 	.word	0x7ff00000
 800833c:	43400000 	.word	0x43400000
 8008340:	0003988e 	.word	0x0003988e
 8008344:	000bb679 	.word	0x000bb679
 8008348:	08009070 	.word	0x08009070
 800834c:	3ff00000 	.word	0x3ff00000
 8008350:	40080000 	.word	0x40080000
 8008354:	08009050 	.word	0x08009050
 8008358:	08009060 	.word	0x08009060
 800835c:	460b      	mov	r3, r1
 800835e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008362:	e5d7      	b.n	8007f14 <__ieee754_pow+0x354>
 8008364:	f04f 0a01 	mov.w	sl, #1
 8008368:	e65e      	b.n	8008028 <__ieee754_pow+0x468>
 800836a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800863c <__ieee754_pow+0xa7c>)
 800836c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008370:	4630      	mov	r0, r6
 8008372:	4639      	mov	r1, r7
 8008374:	f7f7 ffaa 	bl	80002cc <__adddf3>
 8008378:	4642      	mov	r2, r8
 800837a:	e9cd 0100 	strd	r0, r1, [sp]
 800837e:	464b      	mov	r3, r9
 8008380:	4620      	mov	r0, r4
 8008382:	4629      	mov	r1, r5
 8008384:	f7f7 ffa0 	bl	80002c8 <__aeabi_dsub>
 8008388:	4602      	mov	r2, r0
 800838a:	460b      	mov	r3, r1
 800838c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008390:	f7f8 fbe2 	bl	8000b58 <__aeabi_dcmpgt>
 8008394:	2800      	cmp	r0, #0
 8008396:	f47f ae00 	bne.w	8007f9a <__ieee754_pow+0x3da>
 800839a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800839e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80083a2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80083a6:	fa43 fa0a 	asr.w	sl, r3, sl
 80083aa:	44da      	add	sl, fp
 80083ac:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80083b0:	489d      	ldr	r0, [pc, #628]	@ (8008628 <__ieee754_pow+0xa68>)
 80083b2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80083b6:	4108      	asrs	r0, r1
 80083b8:	ea00 030a 	and.w	r3, r0, sl
 80083bc:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80083c0:	f1c1 0114 	rsb	r1, r1, #20
 80083c4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80083c8:	fa4a fa01 	asr.w	sl, sl, r1
 80083cc:	f1bb 0f00 	cmp.w	fp, #0
 80083d0:	4640      	mov	r0, r8
 80083d2:	4649      	mov	r1, r9
 80083d4:	f04f 0200 	mov.w	r2, #0
 80083d8:	bfb8      	it	lt
 80083da:	f1ca 0a00 	rsblt	sl, sl, #0
 80083de:	f7f7 ff73 	bl	80002c8 <__aeabi_dsub>
 80083e2:	4680      	mov	r8, r0
 80083e4:	4689      	mov	r9, r1
 80083e6:	4632      	mov	r2, r6
 80083e8:	463b      	mov	r3, r7
 80083ea:	4640      	mov	r0, r8
 80083ec:	4649      	mov	r1, r9
 80083ee:	f7f7 ff6d 	bl	80002cc <__adddf3>
 80083f2:	2400      	movs	r4, #0
 80083f4:	a37c      	add	r3, pc, #496	@ (adr r3, 80085e8 <__ieee754_pow+0xa28>)
 80083f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fa:	4620      	mov	r0, r4
 80083fc:	460d      	mov	r5, r1
 80083fe:	f7f8 f91b 	bl	8000638 <__aeabi_dmul>
 8008402:	4642      	mov	r2, r8
 8008404:	e9cd 0100 	strd	r0, r1, [sp]
 8008408:	464b      	mov	r3, r9
 800840a:	4620      	mov	r0, r4
 800840c:	4629      	mov	r1, r5
 800840e:	f7f7 ff5b 	bl	80002c8 <__aeabi_dsub>
 8008412:	4602      	mov	r2, r0
 8008414:	460b      	mov	r3, r1
 8008416:	4630      	mov	r0, r6
 8008418:	4639      	mov	r1, r7
 800841a:	f7f7 ff55 	bl	80002c8 <__aeabi_dsub>
 800841e:	a374      	add	r3, pc, #464	@ (adr r3, 80085f0 <__ieee754_pow+0xa30>)
 8008420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008424:	f7f8 f908 	bl	8000638 <__aeabi_dmul>
 8008428:	a373      	add	r3, pc, #460	@ (adr r3, 80085f8 <__ieee754_pow+0xa38>)
 800842a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842e:	4680      	mov	r8, r0
 8008430:	4689      	mov	r9, r1
 8008432:	4620      	mov	r0, r4
 8008434:	4629      	mov	r1, r5
 8008436:	f7f8 f8ff 	bl	8000638 <__aeabi_dmul>
 800843a:	4602      	mov	r2, r0
 800843c:	460b      	mov	r3, r1
 800843e:	4640      	mov	r0, r8
 8008440:	4649      	mov	r1, r9
 8008442:	f7f7 ff43 	bl	80002cc <__adddf3>
 8008446:	4604      	mov	r4, r0
 8008448:	460d      	mov	r5, r1
 800844a:	4602      	mov	r2, r0
 800844c:	460b      	mov	r3, r1
 800844e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008452:	f7f7 ff3b 	bl	80002cc <__adddf3>
 8008456:	e9dd 2300 	ldrd	r2, r3, [sp]
 800845a:	4680      	mov	r8, r0
 800845c:	4689      	mov	r9, r1
 800845e:	f7f7 ff33 	bl	80002c8 <__aeabi_dsub>
 8008462:	4602      	mov	r2, r0
 8008464:	460b      	mov	r3, r1
 8008466:	4620      	mov	r0, r4
 8008468:	4629      	mov	r1, r5
 800846a:	f7f7 ff2d 	bl	80002c8 <__aeabi_dsub>
 800846e:	4642      	mov	r2, r8
 8008470:	4606      	mov	r6, r0
 8008472:	460f      	mov	r7, r1
 8008474:	464b      	mov	r3, r9
 8008476:	4640      	mov	r0, r8
 8008478:	4649      	mov	r1, r9
 800847a:	f7f8 f8dd 	bl	8000638 <__aeabi_dmul>
 800847e:	a360      	add	r3, pc, #384	@ (adr r3, 8008600 <__ieee754_pow+0xa40>)
 8008480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008484:	4604      	mov	r4, r0
 8008486:	460d      	mov	r5, r1
 8008488:	f7f8 f8d6 	bl	8000638 <__aeabi_dmul>
 800848c:	a35e      	add	r3, pc, #376	@ (adr r3, 8008608 <__ieee754_pow+0xa48>)
 800848e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008492:	f7f7 ff19 	bl	80002c8 <__aeabi_dsub>
 8008496:	4622      	mov	r2, r4
 8008498:	462b      	mov	r3, r5
 800849a:	f7f8 f8cd 	bl	8000638 <__aeabi_dmul>
 800849e:	a35c      	add	r3, pc, #368	@ (adr r3, 8008610 <__ieee754_pow+0xa50>)
 80084a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a4:	f7f7 ff12 	bl	80002cc <__adddf3>
 80084a8:	4622      	mov	r2, r4
 80084aa:	462b      	mov	r3, r5
 80084ac:	f7f8 f8c4 	bl	8000638 <__aeabi_dmul>
 80084b0:	a359      	add	r3, pc, #356	@ (adr r3, 8008618 <__ieee754_pow+0xa58>)
 80084b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b6:	f7f7 ff07 	bl	80002c8 <__aeabi_dsub>
 80084ba:	4622      	mov	r2, r4
 80084bc:	462b      	mov	r3, r5
 80084be:	f7f8 f8bb 	bl	8000638 <__aeabi_dmul>
 80084c2:	a357      	add	r3, pc, #348	@ (adr r3, 8008620 <__ieee754_pow+0xa60>)
 80084c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c8:	f7f7 ff00 	bl	80002cc <__adddf3>
 80084cc:	4622      	mov	r2, r4
 80084ce:	462b      	mov	r3, r5
 80084d0:	f7f8 f8b2 	bl	8000638 <__aeabi_dmul>
 80084d4:	4602      	mov	r2, r0
 80084d6:	460b      	mov	r3, r1
 80084d8:	4640      	mov	r0, r8
 80084da:	4649      	mov	r1, r9
 80084dc:	f7f7 fef4 	bl	80002c8 <__aeabi_dsub>
 80084e0:	4604      	mov	r4, r0
 80084e2:	460d      	mov	r5, r1
 80084e4:	4602      	mov	r2, r0
 80084e6:	460b      	mov	r3, r1
 80084e8:	4640      	mov	r0, r8
 80084ea:	4649      	mov	r1, r9
 80084ec:	f7f8 f8a4 	bl	8000638 <__aeabi_dmul>
 80084f0:	2200      	movs	r2, #0
 80084f2:	e9cd 0100 	strd	r0, r1, [sp]
 80084f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80084fa:	4620      	mov	r0, r4
 80084fc:	4629      	mov	r1, r5
 80084fe:	f7f7 fee3 	bl	80002c8 <__aeabi_dsub>
 8008502:	4602      	mov	r2, r0
 8008504:	460b      	mov	r3, r1
 8008506:	e9dd 0100 	ldrd	r0, r1, [sp]
 800850a:	f7f8 f9bf 	bl	800088c <__aeabi_ddiv>
 800850e:	4632      	mov	r2, r6
 8008510:	4604      	mov	r4, r0
 8008512:	460d      	mov	r5, r1
 8008514:	463b      	mov	r3, r7
 8008516:	4640      	mov	r0, r8
 8008518:	4649      	mov	r1, r9
 800851a:	f7f8 f88d 	bl	8000638 <__aeabi_dmul>
 800851e:	4632      	mov	r2, r6
 8008520:	463b      	mov	r3, r7
 8008522:	f7f7 fed3 	bl	80002cc <__adddf3>
 8008526:	4602      	mov	r2, r0
 8008528:	460b      	mov	r3, r1
 800852a:	4620      	mov	r0, r4
 800852c:	4629      	mov	r1, r5
 800852e:	f7f7 fecb 	bl	80002c8 <__aeabi_dsub>
 8008532:	4642      	mov	r2, r8
 8008534:	464b      	mov	r3, r9
 8008536:	f7f7 fec7 	bl	80002c8 <__aeabi_dsub>
 800853a:	460b      	mov	r3, r1
 800853c:	4602      	mov	r2, r0
 800853e:	493b      	ldr	r1, [pc, #236]	@ (800862c <__ieee754_pow+0xa6c>)
 8008540:	2000      	movs	r0, #0
 8008542:	f7f7 fec1 	bl	80002c8 <__aeabi_dsub>
 8008546:	ec41 0b10 	vmov	d0, r0, r1
 800854a:	ee10 3a90 	vmov	r3, s1
 800854e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008552:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008556:	da30      	bge.n	80085ba <__ieee754_pow+0x9fa>
 8008558:	4650      	mov	r0, sl
 800855a:	f000 f87d 	bl	8008658 <scalbn>
 800855e:	ec51 0b10 	vmov	r0, r1, d0
 8008562:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008566:	f7ff bbd2 	b.w	8007d0e <__ieee754_pow+0x14e>
 800856a:	4c31      	ldr	r4, [pc, #196]	@ (8008630 <__ieee754_pow+0xa70>)
 800856c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008570:	42a3      	cmp	r3, r4
 8008572:	d91a      	bls.n	80085aa <__ieee754_pow+0x9ea>
 8008574:	4b2f      	ldr	r3, [pc, #188]	@ (8008634 <__ieee754_pow+0xa74>)
 8008576:	440b      	add	r3, r1
 8008578:	4303      	orrs	r3, r0
 800857a:	d009      	beq.n	8008590 <__ieee754_pow+0x9d0>
 800857c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008580:	2200      	movs	r2, #0
 8008582:	2300      	movs	r3, #0
 8008584:	f7f8 faca 	bl	8000b1c <__aeabi_dcmplt>
 8008588:	3800      	subs	r0, #0
 800858a:	bf18      	it	ne
 800858c:	2001      	movne	r0, #1
 800858e:	e42b      	b.n	8007de8 <__ieee754_pow+0x228>
 8008590:	4642      	mov	r2, r8
 8008592:	464b      	mov	r3, r9
 8008594:	f7f7 fe98 	bl	80002c8 <__aeabi_dsub>
 8008598:	4632      	mov	r2, r6
 800859a:	463b      	mov	r3, r7
 800859c:	f7f8 fad2 	bl	8000b44 <__aeabi_dcmpge>
 80085a0:	2800      	cmp	r0, #0
 80085a2:	d1eb      	bne.n	800857c <__ieee754_pow+0x9bc>
 80085a4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8008644 <__ieee754_pow+0xa84>
 80085a8:	e6f7      	b.n	800839a <__ieee754_pow+0x7da>
 80085aa:	469a      	mov	sl, r3
 80085ac:	4b22      	ldr	r3, [pc, #136]	@ (8008638 <__ieee754_pow+0xa78>)
 80085ae:	459a      	cmp	sl, r3
 80085b0:	f63f aef3 	bhi.w	800839a <__ieee754_pow+0x7da>
 80085b4:	f8dd a010 	ldr.w	sl, [sp, #16]
 80085b8:	e715      	b.n	80083e6 <__ieee754_pow+0x826>
 80085ba:	ec51 0b10 	vmov	r0, r1, d0
 80085be:	4619      	mov	r1, r3
 80085c0:	e7cf      	b.n	8008562 <__ieee754_pow+0x9a2>
 80085c2:	491a      	ldr	r1, [pc, #104]	@ (800862c <__ieee754_pow+0xa6c>)
 80085c4:	2000      	movs	r0, #0
 80085c6:	f7ff bb18 	b.w	8007bfa <__ieee754_pow+0x3a>
 80085ca:	2000      	movs	r0, #0
 80085cc:	2100      	movs	r1, #0
 80085ce:	f7ff bb14 	b.w	8007bfa <__ieee754_pow+0x3a>
 80085d2:	4630      	mov	r0, r6
 80085d4:	4639      	mov	r1, r7
 80085d6:	f7ff bb10 	b.w	8007bfa <__ieee754_pow+0x3a>
 80085da:	460c      	mov	r4, r1
 80085dc:	f7ff bb5e 	b.w	8007c9c <__ieee754_pow+0xdc>
 80085e0:	2400      	movs	r4, #0
 80085e2:	f7ff bb49 	b.w	8007c78 <__ieee754_pow+0xb8>
 80085e6:	bf00      	nop
 80085e8:	00000000 	.word	0x00000000
 80085ec:	3fe62e43 	.word	0x3fe62e43
 80085f0:	fefa39ef 	.word	0xfefa39ef
 80085f4:	3fe62e42 	.word	0x3fe62e42
 80085f8:	0ca86c39 	.word	0x0ca86c39
 80085fc:	be205c61 	.word	0xbe205c61
 8008600:	72bea4d0 	.word	0x72bea4d0
 8008604:	3e663769 	.word	0x3e663769
 8008608:	c5d26bf1 	.word	0xc5d26bf1
 800860c:	3ebbbd41 	.word	0x3ebbbd41
 8008610:	af25de2c 	.word	0xaf25de2c
 8008614:	3f11566a 	.word	0x3f11566a
 8008618:	16bebd93 	.word	0x16bebd93
 800861c:	3f66c16c 	.word	0x3f66c16c
 8008620:	5555553e 	.word	0x5555553e
 8008624:	3fc55555 	.word	0x3fc55555
 8008628:	fff00000 	.word	0xfff00000
 800862c:	3ff00000 	.word	0x3ff00000
 8008630:	4090cbff 	.word	0x4090cbff
 8008634:	3f6f3400 	.word	0x3f6f3400
 8008638:	3fe00000 	.word	0x3fe00000
 800863c:	652b82fe 	.word	0x652b82fe
 8008640:	3c971547 	.word	0x3c971547
 8008644:	4090cc00 	.word	0x4090cc00

08008648 <fabs>:
 8008648:	ec51 0b10 	vmov	r0, r1, d0
 800864c:	4602      	mov	r2, r0
 800864e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008652:	ec43 2b10 	vmov	d0, r2, r3
 8008656:	4770      	bx	lr

08008658 <scalbn>:
 8008658:	b570      	push	{r4, r5, r6, lr}
 800865a:	ec55 4b10 	vmov	r4, r5, d0
 800865e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008662:	4606      	mov	r6, r0
 8008664:	462b      	mov	r3, r5
 8008666:	b991      	cbnz	r1, 800868e <scalbn+0x36>
 8008668:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800866c:	4323      	orrs	r3, r4
 800866e:	d03d      	beq.n	80086ec <scalbn+0x94>
 8008670:	4b35      	ldr	r3, [pc, #212]	@ (8008748 <scalbn+0xf0>)
 8008672:	4620      	mov	r0, r4
 8008674:	4629      	mov	r1, r5
 8008676:	2200      	movs	r2, #0
 8008678:	f7f7 ffde 	bl	8000638 <__aeabi_dmul>
 800867c:	4b33      	ldr	r3, [pc, #204]	@ (800874c <scalbn+0xf4>)
 800867e:	429e      	cmp	r6, r3
 8008680:	4604      	mov	r4, r0
 8008682:	460d      	mov	r5, r1
 8008684:	da0f      	bge.n	80086a6 <scalbn+0x4e>
 8008686:	a328      	add	r3, pc, #160	@ (adr r3, 8008728 <scalbn+0xd0>)
 8008688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868c:	e01e      	b.n	80086cc <scalbn+0x74>
 800868e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8008692:	4291      	cmp	r1, r2
 8008694:	d10b      	bne.n	80086ae <scalbn+0x56>
 8008696:	4622      	mov	r2, r4
 8008698:	4620      	mov	r0, r4
 800869a:	4629      	mov	r1, r5
 800869c:	f7f7 fe16 	bl	80002cc <__adddf3>
 80086a0:	4604      	mov	r4, r0
 80086a2:	460d      	mov	r5, r1
 80086a4:	e022      	b.n	80086ec <scalbn+0x94>
 80086a6:	460b      	mov	r3, r1
 80086a8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80086ac:	3936      	subs	r1, #54	@ 0x36
 80086ae:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80086b2:	4296      	cmp	r6, r2
 80086b4:	dd0d      	ble.n	80086d2 <scalbn+0x7a>
 80086b6:	2d00      	cmp	r5, #0
 80086b8:	a11d      	add	r1, pc, #116	@ (adr r1, 8008730 <scalbn+0xd8>)
 80086ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086be:	da02      	bge.n	80086c6 <scalbn+0x6e>
 80086c0:	a11d      	add	r1, pc, #116	@ (adr r1, 8008738 <scalbn+0xe0>)
 80086c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086c6:	a31a      	add	r3, pc, #104	@ (adr r3, 8008730 <scalbn+0xd8>)
 80086c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086cc:	f7f7 ffb4 	bl	8000638 <__aeabi_dmul>
 80086d0:	e7e6      	b.n	80086a0 <scalbn+0x48>
 80086d2:	1872      	adds	r2, r6, r1
 80086d4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80086d8:	428a      	cmp	r2, r1
 80086da:	dcec      	bgt.n	80086b6 <scalbn+0x5e>
 80086dc:	2a00      	cmp	r2, #0
 80086de:	dd08      	ble.n	80086f2 <scalbn+0x9a>
 80086e0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80086e4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80086e8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80086ec:	ec45 4b10 	vmov	d0, r4, r5
 80086f0:	bd70      	pop	{r4, r5, r6, pc}
 80086f2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80086f6:	da08      	bge.n	800870a <scalbn+0xb2>
 80086f8:	2d00      	cmp	r5, #0
 80086fa:	a10b      	add	r1, pc, #44	@ (adr r1, 8008728 <scalbn+0xd0>)
 80086fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008700:	dac1      	bge.n	8008686 <scalbn+0x2e>
 8008702:	a10f      	add	r1, pc, #60	@ (adr r1, 8008740 <scalbn+0xe8>)
 8008704:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008708:	e7bd      	b.n	8008686 <scalbn+0x2e>
 800870a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800870e:	3236      	adds	r2, #54	@ 0x36
 8008710:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008714:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008718:	4620      	mov	r0, r4
 800871a:	4b0d      	ldr	r3, [pc, #52]	@ (8008750 <scalbn+0xf8>)
 800871c:	4629      	mov	r1, r5
 800871e:	2200      	movs	r2, #0
 8008720:	e7d4      	b.n	80086cc <scalbn+0x74>
 8008722:	bf00      	nop
 8008724:	f3af 8000 	nop.w
 8008728:	c2f8f359 	.word	0xc2f8f359
 800872c:	01a56e1f 	.word	0x01a56e1f
 8008730:	8800759c 	.word	0x8800759c
 8008734:	7e37e43c 	.word	0x7e37e43c
 8008738:	8800759c 	.word	0x8800759c
 800873c:	fe37e43c 	.word	0xfe37e43c
 8008740:	c2f8f359 	.word	0xc2f8f359
 8008744:	81a56e1f 	.word	0x81a56e1f
 8008748:	43500000 	.word	0x43500000
 800874c:	ffff3cb0 	.word	0xffff3cb0
 8008750:	3c900000 	.word	0x3c900000

08008754 <with_errno>:
 8008754:	b510      	push	{r4, lr}
 8008756:	ed2d 8b02 	vpush	{d8}
 800875a:	eeb0 8a40 	vmov.f32	s16, s0
 800875e:	eef0 8a60 	vmov.f32	s17, s1
 8008762:	4604      	mov	r4, r0
 8008764:	f7fe fdf4 	bl	8007350 <__errno>
 8008768:	eeb0 0a48 	vmov.f32	s0, s16
 800876c:	eef0 0a68 	vmov.f32	s1, s17
 8008770:	ecbd 8b02 	vpop	{d8}
 8008774:	6004      	str	r4, [r0, #0]
 8008776:	bd10      	pop	{r4, pc}

08008778 <xflow>:
 8008778:	4603      	mov	r3, r0
 800877a:	b507      	push	{r0, r1, r2, lr}
 800877c:	ec51 0b10 	vmov	r0, r1, d0
 8008780:	b183      	cbz	r3, 80087a4 <xflow+0x2c>
 8008782:	4602      	mov	r2, r0
 8008784:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008788:	e9cd 2300 	strd	r2, r3, [sp]
 800878c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008790:	f7f7 ff52 	bl	8000638 <__aeabi_dmul>
 8008794:	ec41 0b10 	vmov	d0, r0, r1
 8008798:	2022      	movs	r0, #34	@ 0x22
 800879a:	b003      	add	sp, #12
 800879c:	f85d eb04 	ldr.w	lr, [sp], #4
 80087a0:	f7ff bfd8 	b.w	8008754 <with_errno>
 80087a4:	4602      	mov	r2, r0
 80087a6:	460b      	mov	r3, r1
 80087a8:	e7ee      	b.n	8008788 <xflow+0x10>
 80087aa:	0000      	movs	r0, r0
 80087ac:	0000      	movs	r0, r0
	...

080087b0 <__math_uflow>:
 80087b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80087b8 <__math_uflow+0x8>
 80087b4:	f7ff bfe0 	b.w	8008778 <xflow>
 80087b8:	00000000 	.word	0x00000000
 80087bc:	10000000 	.word	0x10000000

080087c0 <__math_oflow>:
 80087c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80087c8 <__math_oflow+0x8>
 80087c4:	f7ff bfd8 	b.w	8008778 <xflow>
 80087c8:	00000000 	.word	0x00000000
 80087cc:	70000000 	.word	0x70000000

080087d0 <__ieee754_sqrt>:
 80087d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d4:	4a68      	ldr	r2, [pc, #416]	@ (8008978 <__ieee754_sqrt+0x1a8>)
 80087d6:	ec55 4b10 	vmov	r4, r5, d0
 80087da:	43aa      	bics	r2, r5
 80087dc:	462b      	mov	r3, r5
 80087de:	4621      	mov	r1, r4
 80087e0:	d110      	bne.n	8008804 <__ieee754_sqrt+0x34>
 80087e2:	4622      	mov	r2, r4
 80087e4:	4620      	mov	r0, r4
 80087e6:	4629      	mov	r1, r5
 80087e8:	f7f7 ff26 	bl	8000638 <__aeabi_dmul>
 80087ec:	4602      	mov	r2, r0
 80087ee:	460b      	mov	r3, r1
 80087f0:	4620      	mov	r0, r4
 80087f2:	4629      	mov	r1, r5
 80087f4:	f7f7 fd6a 	bl	80002cc <__adddf3>
 80087f8:	4604      	mov	r4, r0
 80087fa:	460d      	mov	r5, r1
 80087fc:	ec45 4b10 	vmov	d0, r4, r5
 8008800:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008804:	2d00      	cmp	r5, #0
 8008806:	dc0e      	bgt.n	8008826 <__ieee754_sqrt+0x56>
 8008808:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800880c:	4322      	orrs	r2, r4
 800880e:	d0f5      	beq.n	80087fc <__ieee754_sqrt+0x2c>
 8008810:	b19d      	cbz	r5, 800883a <__ieee754_sqrt+0x6a>
 8008812:	4622      	mov	r2, r4
 8008814:	4620      	mov	r0, r4
 8008816:	4629      	mov	r1, r5
 8008818:	f7f7 fd56 	bl	80002c8 <__aeabi_dsub>
 800881c:	4602      	mov	r2, r0
 800881e:	460b      	mov	r3, r1
 8008820:	f7f8 f834 	bl	800088c <__aeabi_ddiv>
 8008824:	e7e8      	b.n	80087f8 <__ieee754_sqrt+0x28>
 8008826:	152a      	asrs	r2, r5, #20
 8008828:	d115      	bne.n	8008856 <__ieee754_sqrt+0x86>
 800882a:	2000      	movs	r0, #0
 800882c:	e009      	b.n	8008842 <__ieee754_sqrt+0x72>
 800882e:	0acb      	lsrs	r3, r1, #11
 8008830:	3a15      	subs	r2, #21
 8008832:	0549      	lsls	r1, r1, #21
 8008834:	2b00      	cmp	r3, #0
 8008836:	d0fa      	beq.n	800882e <__ieee754_sqrt+0x5e>
 8008838:	e7f7      	b.n	800882a <__ieee754_sqrt+0x5a>
 800883a:	462a      	mov	r2, r5
 800883c:	e7fa      	b.n	8008834 <__ieee754_sqrt+0x64>
 800883e:	005b      	lsls	r3, r3, #1
 8008840:	3001      	adds	r0, #1
 8008842:	02dc      	lsls	r4, r3, #11
 8008844:	d5fb      	bpl.n	800883e <__ieee754_sqrt+0x6e>
 8008846:	1e44      	subs	r4, r0, #1
 8008848:	1b12      	subs	r2, r2, r4
 800884a:	f1c0 0420 	rsb	r4, r0, #32
 800884e:	fa21 f404 	lsr.w	r4, r1, r4
 8008852:	4323      	orrs	r3, r4
 8008854:	4081      	lsls	r1, r0
 8008856:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800885a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800885e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008862:	07d2      	lsls	r2, r2, #31
 8008864:	bf5c      	itt	pl
 8008866:	005b      	lslpl	r3, r3, #1
 8008868:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800886c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008870:	bf58      	it	pl
 8008872:	0049      	lslpl	r1, r1, #1
 8008874:	2600      	movs	r6, #0
 8008876:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800887a:	106d      	asrs	r5, r5, #1
 800887c:	0049      	lsls	r1, r1, #1
 800887e:	2016      	movs	r0, #22
 8008880:	4632      	mov	r2, r6
 8008882:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8008886:	1917      	adds	r7, r2, r4
 8008888:	429f      	cmp	r7, r3
 800888a:	bfde      	ittt	le
 800888c:	193a      	addle	r2, r7, r4
 800888e:	1bdb      	suble	r3, r3, r7
 8008890:	1936      	addle	r6, r6, r4
 8008892:	0fcf      	lsrs	r7, r1, #31
 8008894:	3801      	subs	r0, #1
 8008896:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800889a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800889e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80088a2:	d1f0      	bne.n	8008886 <__ieee754_sqrt+0xb6>
 80088a4:	4604      	mov	r4, r0
 80088a6:	2720      	movs	r7, #32
 80088a8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80088ac:	429a      	cmp	r2, r3
 80088ae:	eb00 0e0c 	add.w	lr, r0, ip
 80088b2:	db02      	blt.n	80088ba <__ieee754_sqrt+0xea>
 80088b4:	d113      	bne.n	80088de <__ieee754_sqrt+0x10e>
 80088b6:	458e      	cmp	lr, r1
 80088b8:	d811      	bhi.n	80088de <__ieee754_sqrt+0x10e>
 80088ba:	f1be 0f00 	cmp.w	lr, #0
 80088be:	eb0e 000c 	add.w	r0, lr, ip
 80088c2:	da42      	bge.n	800894a <__ieee754_sqrt+0x17a>
 80088c4:	2800      	cmp	r0, #0
 80088c6:	db40      	blt.n	800894a <__ieee754_sqrt+0x17a>
 80088c8:	f102 0801 	add.w	r8, r2, #1
 80088cc:	1a9b      	subs	r3, r3, r2
 80088ce:	458e      	cmp	lr, r1
 80088d0:	bf88      	it	hi
 80088d2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80088d6:	eba1 010e 	sub.w	r1, r1, lr
 80088da:	4464      	add	r4, ip
 80088dc:	4642      	mov	r2, r8
 80088de:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80088e2:	3f01      	subs	r7, #1
 80088e4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80088e8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80088ec:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80088f0:	d1dc      	bne.n	80088ac <__ieee754_sqrt+0xdc>
 80088f2:	4319      	orrs	r1, r3
 80088f4:	d01b      	beq.n	800892e <__ieee754_sqrt+0x15e>
 80088f6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800897c <__ieee754_sqrt+0x1ac>
 80088fa:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8008980 <__ieee754_sqrt+0x1b0>
 80088fe:	e9da 0100 	ldrd	r0, r1, [sl]
 8008902:	e9db 2300 	ldrd	r2, r3, [fp]
 8008906:	f7f7 fcdf 	bl	80002c8 <__aeabi_dsub>
 800890a:	e9da 8900 	ldrd	r8, r9, [sl]
 800890e:	4602      	mov	r2, r0
 8008910:	460b      	mov	r3, r1
 8008912:	4640      	mov	r0, r8
 8008914:	4649      	mov	r1, r9
 8008916:	f7f8 f90b 	bl	8000b30 <__aeabi_dcmple>
 800891a:	b140      	cbz	r0, 800892e <__ieee754_sqrt+0x15e>
 800891c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008920:	e9da 0100 	ldrd	r0, r1, [sl]
 8008924:	e9db 2300 	ldrd	r2, r3, [fp]
 8008928:	d111      	bne.n	800894e <__ieee754_sqrt+0x17e>
 800892a:	3601      	adds	r6, #1
 800892c:	463c      	mov	r4, r7
 800892e:	1072      	asrs	r2, r6, #1
 8008930:	0863      	lsrs	r3, r4, #1
 8008932:	07f1      	lsls	r1, r6, #31
 8008934:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8008938:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800893c:	bf48      	it	mi
 800893e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8008942:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8008946:	4618      	mov	r0, r3
 8008948:	e756      	b.n	80087f8 <__ieee754_sqrt+0x28>
 800894a:	4690      	mov	r8, r2
 800894c:	e7be      	b.n	80088cc <__ieee754_sqrt+0xfc>
 800894e:	f7f7 fcbd 	bl	80002cc <__adddf3>
 8008952:	e9da 8900 	ldrd	r8, r9, [sl]
 8008956:	4602      	mov	r2, r0
 8008958:	460b      	mov	r3, r1
 800895a:	4640      	mov	r0, r8
 800895c:	4649      	mov	r1, r9
 800895e:	f7f8 f8dd 	bl	8000b1c <__aeabi_dcmplt>
 8008962:	b120      	cbz	r0, 800896e <__ieee754_sqrt+0x19e>
 8008964:	1ca0      	adds	r0, r4, #2
 8008966:	bf08      	it	eq
 8008968:	3601      	addeq	r6, #1
 800896a:	3402      	adds	r4, #2
 800896c:	e7df      	b.n	800892e <__ieee754_sqrt+0x15e>
 800896e:	1c63      	adds	r3, r4, #1
 8008970:	f023 0401 	bic.w	r4, r3, #1
 8008974:	e7db      	b.n	800892e <__ieee754_sqrt+0x15e>
 8008976:	bf00      	nop
 8008978:	7ff00000 	.word	0x7ff00000
 800897c:	20000080 	.word	0x20000080
 8008980:	20000078 	.word	0x20000078

08008984 <_init>:
 8008984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008986:	bf00      	nop
 8008988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800898a:	bc08      	pop	{r3}
 800898c:	469e      	mov	lr, r3
 800898e:	4770      	bx	lr

08008990 <_fini>:
 8008990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008992:	bf00      	nop
 8008994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008996:	bc08      	pop	{r3}
 8008998:	469e      	mov	lr, r3
 800899a:	4770      	bx	lr
