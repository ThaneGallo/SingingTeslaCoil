
SingingTeslaCoil.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e44  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c4  0800a014  0800a014  0000b014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7d8  0800a7d8  0000c078  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7d8  0800a7d8  0000b7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7e0  0800a7e0  0000c078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7e0  0800a7e0  0000b7e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a7e4  0800a7e4  0000b7e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800a7e8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043dc  20000078  0800a860  0000c078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004454  0800a860  0000c454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001be01  00000000  00000000  0000c0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004505  00000000  00000000  00027ea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001888  00000000  00000000  0002c3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012fe  00000000  00000000  0002dc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026e80  00000000  00000000  0002ef36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020d4b  00000000  00000000  00055db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de505  00000000  00000000  00076b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00155006  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006af0  00000000  00000000  0015504c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0015bb3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009ffc 	.word	0x08009ffc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08009ffc 	.word	0x08009ffc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	4a07      	ldr	r2, [pc, #28]	@ (80005dc <vApplicationGetIdleTaskMemory+0x2c>)
 80005c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	4a06      	ldr	r2, [pc, #24]	@ (80005e0 <vApplicationGetIdleTaskMemory+0x30>)
 80005c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2280      	movs	r2, #128	@ 0x80
 80005cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000094 	.word	0x20000094
 80005e0:	200000e8 	.word	0x200000e8

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005e6:	f2ad 4ddc 	subw	sp, sp, #1244	@ 0x4dc
 80005ea:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f000 fdca 	bl	8001184 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f8d4 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f4:	f000 fa22 	bl	8000a3c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005f8:	f000 f9f6 	bl	80009e8 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80005fc:	f003 fcb8 	bl	8003f70 <MX_FATFS_Init>
  MX_SPI1_Init();
 8000600:	f000 f938 	bl	8000874 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000604:	f000 f96c 	bl	80008e0 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of USART_lock */
  osMutexDef(USART_lock);
 8000608:	2300      	movs	r3, #0
 800060a:	f8c7 34c0 	str.w	r3, [r7, #1216]	@ 0x4c0
 800060e:	2300      	movs	r3, #0
 8000610:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
  USART_lockHandle = osMutexCreate(osMutex(USART_lock));
 8000614:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8000618:	4618      	mov	r0, r3
 800061a:	f006 fb7f 	bl	8006d1c <osMutexCreate>
 800061e:	4603      	mov	r3, r0
 8000620:	4a53      	ldr	r2, [pc, #332]	@ (8000770 <main+0x18c>)
 8000622:	6013      	str	r3, [r2, #0]

  FIL fp;        // for midi file operation
  FATFS FatFs; 	//Fatfs handle
  MIDI_header_chunk hdr; // to container header info
  FRESULT res;
  MIDI_controller *ctrl = malloc(sizeof(MIDI_controller));
 8000624:	2014      	movs	r0, #20
 8000626:	f009 f81f 	bl	8009668 <malloc>
 800062a:	4603      	mov	r3, r0
 800062c:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc


  // uint8_t i = 0;

  osDelay(1000);
 8000630:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000634:	f006 fb5e 	bl	8006cf4 <osDelay>

  res = f_mount(&FatFs, "/", 1); //1=mount now
 8000638:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800063c:	2201      	movs	r2, #1
 800063e:	494d      	ldr	r1, [pc, #308]	@ (8000774 <main+0x190>)
 8000640:	4618      	mov	r0, r3
 8000642:	f005 fe9f 	bl	8006384 <f_mount>
 8000646:	4603      	mov	r3, r0
 8000648:	f887 34cb 	strb.w	r3, [r7, #1227]	@ 0x4cb
       if (res != FR_OK) {
 800064c:	f897 34cb 	ldrb.w	r3, [r7, #1227]	@ 0x4cb
 8000650:	2b00      	cmp	r3, #0
 8000652:	d007      	beq.n	8000664 <main+0x80>
     	myprintf("f_mount error (%i)\r\n", res);
 8000654:	f897 34cb 	ldrb.w	r3, [r7, #1227]	@ 0x4cb
 8000658:	4619      	mov	r1, r3
 800065a:	4847      	ldr	r0, [pc, #284]	@ (8000778 <main+0x194>)
 800065c:	f000 fd30 	bl	80010c0 <myprintf>
     	while(1);
 8000660:	bf00      	nop
 8000662:	e7fd      	b.n	8000660 <main+0x7c>
   * twinkle.mid --> no chords && format 0
   * gerudo.mid --> TONS of chords (3 notes) && format 1
   * mario.mid --> unkown midi event 10
   * shoveit.mid --> broken as well
   * */
  res = f_open(&fp, "twinkle.mid", FA_READ | FA_WRITE);
 8000664:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8000668:	2203      	movs	r2, #3
 800066a:	4944      	ldr	r1, [pc, #272]	@ (800077c <main+0x198>)
 800066c:	4618      	mov	r0, r3
 800066e:	f005 feed 	bl	800644c <f_open>
 8000672:	4603      	mov	r3, r0
 8000674:	f887 34cb 	strb.w	r3, [r7, #1227]	@ 0x4cb

  if (res != FR_OK)
 8000678:	f897 34cb 	ldrb.w	r3, [r7, #1227]	@ 0x4cb
 800067c:	2b00      	cmp	r3, #0
 800067e:	d007      	beq.n	8000690 <main+0xac>
  {
      myprintf("fopen error: %d\n", res);
 8000680:	f897 34cb 	ldrb.w	r3, [r7, #1227]	@ 0x4cb
 8000684:	4619      	mov	r1, r3
 8000686:	483e      	ldr	r0, [pc, #248]	@ (8000780 <main+0x19c>)
 8000688:	f000 fd1a 	bl	80010c0 <myprintf>
      while(1);
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <main+0xa8>
  }


  hdr = parse_midi_header(&fp, hdr); // grabs header info
 8000690:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8000694:	f2a3 4484 	subw	r4, r3, #1156	@ 0x484
 8000698:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 800069c:	f2a3 4384 	subw	r3, r3, #1156	@ 0x484
 80006a0:	f507 7524 	add.w	r5, r7, #656	@ 0x290
 80006a4:	466e      	mov	r6, sp
 80006a6:	f103 0208 	add.w	r2, r3, #8
 80006aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ae:	e886 0003 	stmia.w	r6, {r0, r1}
 80006b2:	cb0c      	ldmia	r3, {r2, r3}
 80006b4:	4629      	mov	r1, r5
 80006b6:	4620      	mov	r0, r4
 80006b8:	f000 fa3c 	bl	8000b34 <parse_midi_header>

  ctrl->format = hdr.format;
 80006bc:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 80006c0:	f2a3 4384 	subw	r3, r3, #1156	@ 0x484
 80006c4:	891b      	ldrh	r3, [r3, #8]
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 80006cc:	741a      	strb	r2, [r3, #16]
  if(hdr.format == 0){
 80006ce:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 80006d2:	f2a3 4384 	subw	r3, r3, #1156	@ 0x484
 80006d6:	891b      	ldrh	r3, [r3, #8]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d104      	bne.n	80006e6 <main+0x102>
	  ctrl->trk_buf = &fp;
 80006dc:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 80006e0:	f507 7224 	add.w	r2, r7, #656	@ 0x290
 80006e4:	609a      	str	r2, [r3, #8]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of NoteQueue1 */
  osMessageQDef(NoteQueue1, 16, note);
 80006e6:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 80006ea:	f2a3 4394 	subw	r3, r3, #1172	@ 0x494
 80006ee:	4a25      	ldr	r2, [pc, #148]	@ (8000784 <main+0x1a0>)
 80006f0:	461c      	mov	r4, r3
 80006f2:	4613      	mov	r3, r2
 80006f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  NoteQueue1Handle = osMessageCreate(osMessageQ(NoteQueue1), NULL);
 80006fa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f006 fc70 	bl	8006fe6 <osMessageCreate>
 8000706:	4603      	mov	r3, r0
 8000708:	4a1f      	ldr	r2, [pc, #124]	@ (8000788 <main+0x1a4>)
 800070a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ParseMidi */
  osThreadDef(ParseMidi, StartParseMidi, osPriorityNormal, 0, 128);
 800070c:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8000710:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8000714:	4a1d      	ldr	r2, [pc, #116]	@ (800078c <main+0x1a8>)
 8000716:	461c      	mov	r4, r3
 8000718:	4615      	mov	r5, r2
 800071a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800071c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800071e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000722:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ParseMidiHandle = osThreadCreate(osThread(ParseMidi), (void*) ctrl);
 8000726:	f107 0320 	add.w	r3, r7, #32
 800072a:	f8d7 14cc 	ldr.w	r1, [r7, #1228]	@ 0x4cc
 800072e:	4618      	mov	r0, r3
 8000730:	f006 fa94 	bl	8006c5c <osThreadCreate>
 8000734:	4603      	mov	r3, r0
 8000736:	4a16      	ldr	r2, [pc, #88]	@ (8000790 <main+0x1ac>)
 8000738:	6013      	str	r3, [r2, #0]

  /* definition and creation of AudioOutput */
  osThreadDef(AudioOutput, StartAudioOutput, osPriorityNormal, 0, 128);
 800073a:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 800073e:	f2a3 43cc 	subw	r3, r3, #1228	@ 0x4cc
 8000742:	4a14      	ldr	r2, [pc, #80]	@ (8000794 <main+0x1b0>)
 8000744:	461c      	mov	r4, r3
 8000746:	4615      	mov	r5, r2
 8000748:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800074a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800074c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000750:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AudioOutputHandle = osThreadCreate(osThread(AudioOutput), (void*) ctrl);
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	f8d7 14cc 	ldr.w	r1, [r7, #1228]	@ 0x4cc
 800075a:	4618      	mov	r0, r3
 800075c:	f006 fa7e 	bl	8006c5c <osThreadCreate>
 8000760:	4603      	mov	r3, r0
 8000762:	4a0d      	ldr	r2, [pc, #52]	@ (8000798 <main+0x1b4>)
 8000764:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000766:	f006 fa72 	bl	8006c4e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800076a:	bf00      	nop
 800076c:	e7fd      	b.n	800076a <main+0x186>
 800076e:	bf00      	nop
 8000770:	200003dc 	.word	0x200003dc
 8000774:	0800a014 	.word	0x0800a014
 8000778:	0800a018 	.word	0x0800a018
 800077c:	0800a030 	.word	0x0800a030
 8000780:	0800a03c 	.word	0x0800a03c
 8000784:	0800a050 	.word	0x0800a050
 8000788:	200003d8 	.word	0x200003d8
 800078c:	0800a06c 	.word	0x0800a06c
 8000790:	200003d0 	.word	0x200003d0
 8000794:	0800a094 	.word	0x0800a094
 8000798:	200003d4 	.word	0x200003d4

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b094      	sub	sp, #80	@ 0x50
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	2234      	movs	r2, #52	@ 0x34
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f009 f854 	bl	8009858 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	f107 0308 	add.w	r3, r7, #8
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c0:	2300      	movs	r3, #0
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	4b29      	ldr	r3, [pc, #164]	@ (800086c <SystemClock_Config+0xd0>)
 80007c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c8:	4a28      	ldr	r2, [pc, #160]	@ (800086c <SystemClock_Config+0xd0>)
 80007ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80007d0:	4b26      	ldr	r3, [pc, #152]	@ (800086c <SystemClock_Config+0xd0>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007dc:	2300      	movs	r3, #0
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	4b23      	ldr	r3, [pc, #140]	@ (8000870 <SystemClock_Config+0xd4>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007e8:	4a21      	ldr	r2, [pc, #132]	@ (8000870 <SystemClock_Config+0xd4>)
 80007ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007ee:	6013      	str	r3, [r2, #0]
 80007f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000870 <SystemClock_Config+0xd4>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007fc:	2302      	movs	r3, #2
 80007fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000800:	2301      	movs	r3, #1
 8000802:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000804:	2310      	movs	r3, #16
 8000806:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000808:	2302      	movs	r3, #2
 800080a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800080c:	2300      	movs	r3, #0
 800080e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000810:	2308      	movs	r3, #8
 8000812:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000814:	2348      	movs	r3, #72	@ 0x48
 8000816:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000818:	2302      	movs	r3, #2
 800081a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800081c:	2302      	movs	r3, #2
 800081e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000820:	2302      	movs	r3, #2
 8000822:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4618      	mov	r0, r3
 800082a:	f001 fa73 	bl	8001d14 <HAL_RCC_OscConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000834:	f000 f978 	bl	8000b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000838:	230f      	movs	r3, #15
 800083a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083c:	2302      	movs	r3, #2
 800083e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000840:	2380      	movs	r3, #128	@ 0x80
 8000842:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000844:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000848:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800084e:	f107 0308 	add.w	r3, r7, #8
 8000852:	2101      	movs	r1, #1
 8000854:	4618      	mov	r0, r3
 8000856:	f000 ff67 	bl	8001728 <HAL_RCC_ClockConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000860:	f000 f962 	bl	8000b28 <Error_Handler>
  }
}
 8000864:	bf00      	nop
 8000866:	3750      	adds	r7, #80	@ 0x50
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40023800 	.word	0x40023800
 8000870:	40007000 	.word	0x40007000

08000874 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000878:	4b17      	ldr	r3, [pc, #92]	@ (80008d8 <MX_SPI1_Init+0x64>)
 800087a:	4a18      	ldr	r2, [pc, #96]	@ (80008dc <MX_SPI1_Init+0x68>)
 800087c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800087e:	4b16      	ldr	r3, [pc, #88]	@ (80008d8 <MX_SPI1_Init+0x64>)
 8000880:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000884:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000886:	4b14      	ldr	r3, [pc, #80]	@ (80008d8 <MX_SPI1_Init+0x64>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800088c:	4b12      	ldr	r3, [pc, #72]	@ (80008d8 <MX_SPI1_Init+0x64>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000892:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <MX_SPI1_Init+0x64>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000898:	4b0f      	ldr	r3, [pc, #60]	@ (80008d8 <MX_SPI1_Init+0x64>)
 800089a:	2200      	movs	r2, #0
 800089c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800089e:	4b0e      	ldr	r3, [pc, #56]	@ (80008d8 <MX_SPI1_Init+0x64>)
 80008a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80008a6:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <MX_SPI1_Init+0x64>)
 80008a8:	2210      	movs	r2, #16
 80008aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ac:	4b0a      	ldr	r3, [pc, #40]	@ (80008d8 <MX_SPI1_Init+0x64>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008b2:	4b09      	ldr	r3, [pc, #36]	@ (80008d8 <MX_SPI1_Init+0x64>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b8:	4b07      	ldr	r3, [pc, #28]	@ (80008d8 <MX_SPI1_Init+0x64>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008be:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <MX_SPI1_Init+0x64>)
 80008c0:	220a      	movs	r2, #10
 80008c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008c4:	4804      	ldr	r0, [pc, #16]	@ (80008d8 <MX_SPI1_Init+0x64>)
 80008c6:	f001 fcc3 	bl	8002250 <HAL_SPI_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008d0:	f000 f92a 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	200002e8 	.word	0x200002e8
 80008dc:	40013000 	.word	0x40013000

080008e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b092      	sub	sp, #72	@ 0x48
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
 8000900:	615a      	str	r2, [r3, #20]
 8000902:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	2220      	movs	r2, #32
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f008 ffa4 	bl	8009858 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000910:	4b33      	ldr	r3, [pc, #204]	@ (80009e0 <MX_TIM1_Init+0x100>)
 8000912:	4a34      	ldr	r2, [pc, #208]	@ (80009e4 <MX_TIM1_Init+0x104>)
 8000914:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 18000;
 8000916:	4b32      	ldr	r3, [pc, #200]	@ (80009e0 <MX_TIM1_Init+0x100>)
 8000918:	f244 6250 	movw	r2, #18000	@ 0x4650
 800091c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091e:	4b30      	ldr	r3, [pc, #192]	@ (80009e0 <MX_TIM1_Init+0x100>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000924:	4b2e      	ldr	r3, [pc, #184]	@ (80009e0 <MX_TIM1_Init+0x100>)
 8000926:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800092a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800092c:	4b2c      	ldr	r3, [pc, #176]	@ (80009e0 <MX_TIM1_Init+0x100>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000932:	4b2b      	ldr	r3, [pc, #172]	@ (80009e0 <MX_TIM1_Init+0x100>)
 8000934:	2200      	movs	r2, #0
 8000936:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000938:	4b29      	ldr	r3, [pc, #164]	@ (80009e0 <MX_TIM1_Init+0x100>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800093e:	4828      	ldr	r0, [pc, #160]	@ (80009e0 <MX_TIM1_Init+0x100>)
 8000940:	f002 f9a2 	bl	8002c88 <HAL_TIM_PWM_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800094a:	f000 f8ed 	bl	8000b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800094e:	2300      	movs	r3, #0
 8000950:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000952:	2300      	movs	r3, #0
 8000954:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000956:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800095a:	4619      	mov	r1, r3
 800095c:	4820      	ldr	r0, [pc, #128]	@ (80009e0 <MX_TIM1_Init+0x100>)
 800095e:	f002 fe19 	bl	8003594 <HAL_TIMEx_MasterConfigSynchronization>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000968:	f000 f8de 	bl	8000b28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800096c:	2360      	movs	r3, #96	@ 0x60
 800096e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000974:	2300      	movs	r3, #0
 8000976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000978:	2300      	movs	r3, #0
 800097a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800097c:	2300      	movs	r3, #0
 800097e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000980:	2300      	movs	r3, #0
 8000982:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000984:	2300      	movs	r3, #0
 8000986:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000988:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800098c:	2200      	movs	r2, #0
 800098e:	4619      	mov	r1, r3
 8000990:	4813      	ldr	r0, [pc, #76]	@ (80009e0 <MX_TIM1_Init+0x100>)
 8000992:	f002 fab9 	bl	8002f08 <HAL_TIM_PWM_ConfigChannel>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 800099c:	f000 f8c4 	bl	8000b28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009ba:	2300      	movs	r3, #0
 80009bc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	4619      	mov	r1, r3
 80009c2:	4807      	ldr	r0, [pc, #28]	@ (80009e0 <MX_TIM1_Init+0x100>)
 80009c4:	f002 fe62 	bl	800368c <HAL_TIMEx_ConfigBreakDeadTime>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 80009ce:	f000 f8ab 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009d2:	4803      	ldr	r0, [pc, #12]	@ (80009e0 <MX_TIM1_Init+0x100>)
 80009d4:	f000 fa08 	bl	8000de8 <HAL_TIM_MspPostInit>

}
 80009d8:	bf00      	nop
 80009da:	3748      	adds	r7, #72	@ 0x48
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000340 	.word	0x20000340
 80009e4:	40010000 	.word	0x40010000

080009e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009ec:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <MX_USART2_UART_Init+0x4c>)
 80009ee:	4a12      	ldr	r2, [pc, #72]	@ (8000a38 <MX_USART2_UART_Init+0x50>)
 80009f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80009f2:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <MX_USART2_UART_Init+0x4c>)
 80009f4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80009f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <MX_USART2_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	@ (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	@ (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	@ (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	@ (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a20:	f002 fe9a 	bl	8003758 <HAL_UART_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a2a:	f000 f87d 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000388 	.word	0x20000388
 8000a38:	40004400 	.word	0x40004400

08000a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	4b10      	ldr	r3, [pc, #64]	@ (8000a98 <MX_GPIO_Init+0x5c>)
 8000a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a58:	4a0f      	ldr	r2, [pc, #60]	@ (8000a98 <MX_GPIO_Init+0x5c>)
 8000a5a:	f043 0301 	orr.w	r3, r3, #1
 8000a5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a60:	4b0d      	ldr	r3, [pc, #52]	@ (8000a98 <MX_GPIO_Init+0x5c>)
 8000a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a64:	f003 0301 	and.w	r3, r3, #1
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2110      	movs	r1, #16
 8000a70:	480a      	ldr	r0, [pc, #40]	@ (8000a9c <MX_GPIO_Init+0x60>)
 8000a72:	f000 fe3f 	bl	80016f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin;
 8000a76:	2310      	movs	r3, #16
 8000a78:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CS_PIN_GPIO_Port, &GPIO_InitStruct);
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4804      	ldr	r0, [pc, #16]	@ (8000a9c <MX_GPIO_Init+0x60>)
 8000a8c:	f000 fc9e 	bl	80013cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a90:	bf00      	nop
 8000a92:	3718      	adds	r7, #24
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020000 	.word	0x40020000

08000aa0 <StartParseMidi>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartParseMidi */
void StartParseMidi(void const * argument)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t cnt = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	73fb      	strb	r3, [r7, #15]
//    uint8_t cnt = 0;
  /* Infinite loop */
    for(;;)
    {

    	myprintf("in parse %d\n\n", cnt);
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4805      	ldr	r0, [pc, #20]	@ (8000ac8 <StartParseMidi+0x28>)
 8000ab2:	f000 fb05 	bl	80010c0 <myprintf>
    	osDelay(1000);
 8000ab6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000aba:	f006 f91b 	bl	8006cf4 <osDelay>
    	cnt++;
 8000abe:	7bfb      	ldrb	r3, [r7, #15]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	73fb      	strb	r3, [r7, #15]
    	myprintf("in parse %d\n\n", cnt);
 8000ac4:	bf00      	nop
 8000ac6:	e7f1      	b.n	8000aac <StartParseMidi+0xc>
 8000ac8:	0800a0b0 	.word	0x0800a0b0

08000acc <StartAudioOutput>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAudioOutput */
void StartAudioOutput(void const * argument)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAudioOutput */

	myprintf("start of audio output\n");
 8000ad4:	4809      	ldr	r0, [pc, #36]	@ (8000afc <StartAudioOutput+0x30>)
 8000ad6:	f000 faf3 	bl	80010c0 <myprintf>
//	MIDI_controller* ctrl = (MIDI_controller*)argument;
//
//	note* recieved_note = malloc(sizeof(note));
	uint8_t cnt = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	73fb      	strb	r3, [r7, #15]
//
//	  if(res.status != osOK){
//		  myprintf("osMessageGet error with code %x\n", res.status);
//	  }
//
			myprintf("in output %d\n", cnt);
 8000ade:	7bfb      	ldrb	r3, [r7, #15]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4807      	ldr	r0, [pc, #28]	@ (8000b00 <StartAudioOutput+0x34>)
 8000ae4:	f000 faec 	bl	80010c0 <myprintf>
	    	osDelay(1000);
 8000ae8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000aec:	f006 f902 	bl	8006cf4 <osDelay>
	    	cnt++;
 8000af0:	7bfb      	ldrb	r3, [r7, #15]
 8000af2:	3301      	adds	r3, #1
 8000af4:	73fb      	strb	r3, [r7, #15]
			myprintf("in output %d\n", cnt);
 8000af6:	bf00      	nop
 8000af8:	e7f1      	b.n	8000ade <StartAudioOutput+0x12>
 8000afa:	bf00      	nop
 8000afc:	0800a0c0 	.word	0x0800a0c0
 8000b00:	0800a0d8 	.word	0x0800a0d8

08000b04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a04      	ldr	r2, [pc, #16]	@ (8000b24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d101      	bne.n	8000b1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b16:	f000 fb57 	bl	80011c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40002000 	.word	0x40002000

08000b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
}
 8000b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <Error_Handler+0x8>

08000b34 <parse_midi_header>:
 * @param fp FIL pointer to music
 * @param hdr pointer to header structure
 * @return returns 0 on sucess other on failure
 * */
MIDI_header_chunk parse_midi_header(FIL *fp, MIDI_header_chunk hdr)
{
 8000b34:	b082      	sub	sp, #8
 8000b36:	b590      	push	{r4, r7, lr}
 8000b38:	b085      	sub	sp, #20
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
 8000b3e:	6039      	str	r1, [r7, #0]
 8000b40:	f107 0120 	add.w	r1, r7, #32
 8000b44:	e881 000c 	stmia.w	r1, {r2, r3}

    uint8_t *buf;

    buf = (uint8_t *)malloc(14);
 8000b48:	200e      	movs	r0, #14
 8000b4a:	f008 fd8d 	bl	8009668 <malloc>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	60fb      	str	r3, [r7, #12]
    if (!buf)
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d102      	bne.n	8000b5e <parse_midi_header+0x2a>
    {
        myprintf("Buffer in parse_midi is null");
 8000b58:	484e      	ldr	r0, [pc, #312]	@ (8000c94 <parse_midi_header+0x160>)
 8000b5a:	f000 fab1 	bl	80010c0 <myprintf>
    }

    f_read(fp, buf, 14, NULL);
 8000b5e:	2300      	movs	r3, #0
 8000b60:	220e      	movs	r2, #14
 8000b62:	68f9      	ldr	r1, [r7, #12]
 8000b64:	6838      	ldr	r0, [r7, #0]
 8000b66:	f005 fe32 	bl	80067ce <f_read>

    // all big endian
    hdr.MThd = (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	061a      	lsls	r2, r3, #24
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	3301      	adds	r3, #1
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	041b      	lsls	r3, r3, #16
 8000b78:	431a      	orrs	r2, r3
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	3302      	adds	r3, #2
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	021b      	lsls	r3, r3, #8
 8000b82:	4313      	orrs	r3, r2
 8000b84:	68fa      	ldr	r2, [r7, #12]
 8000b86:	3203      	adds	r2, #3
 8000b88:	7812      	ldrb	r2, [r2, #0]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	623b      	str	r3, [r7, #32]
    if (hdr.MThd != 0x4D546864)
 8000b8e:	6a3b      	ldr	r3, [r7, #32]
 8000b90:	4a41      	ldr	r2, [pc, #260]	@ (8000c98 <parse_midi_header+0x164>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d004      	beq.n	8000ba0 <parse_midi_header+0x6c>
    {                                                           // string of MThd
        myprintf("Unexpected Header - Recieved: %c\n", hdr.MThd); // return characters for easy read
 8000b96:	6a3b      	ldr	r3, [r7, #32]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4840      	ldr	r0, [pc, #256]	@ (8000c9c <parse_midi_header+0x168>)
 8000b9c:	f000 fa90 	bl	80010c0 <myprintf>
    }

    hdr.hdr_len = (buf[4] << 24) | (buf[5] << 16) | (buf[6] << 8) | buf[7];
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	3304      	adds	r3, #4
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	061a      	lsls	r2, r3, #24
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	3305      	adds	r3, #5
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	041b      	lsls	r3, r3, #16
 8000bb0:	431a      	orrs	r2, r3
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	3306      	adds	r3, #6
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	021b      	lsls	r3, r3, #8
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	68fa      	ldr	r2, [r7, #12]
 8000bbe:	3207      	adds	r2, #7
 8000bc0:	7812      	ldrb	r2, [r2, #0]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (hdr.hdr_len != 0x0006)
 8000bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc8:	2b06      	cmp	r3, #6
 8000bca:	d004      	beq.n	8000bd6 <parse_midi_header+0xa2>
    { // always 6 bytes
        myprintf("Unexpected Header Length - Recieved: %u\n", hdr.hdr_len);
 8000bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4833      	ldr	r0, [pc, #204]	@ (8000ca0 <parse_midi_header+0x16c>)
 8000bd2:	f000 fa75 	bl	80010c0 <myprintf>
    }

    hdr.format = (buf[8] << 8) | buf[9];
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	3308      	adds	r3, #8
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	021b      	lsls	r3, r3, #8
 8000bde:	b21a      	sxth	r2, r3
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	3309      	adds	r3, #9
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	b21b      	sxth	r3, r3
 8000be8:	4313      	orrs	r3, r2
 8000bea:	b21b      	sxth	r3, r3
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	853b      	strh	r3, [r7, #40]	@ 0x28
    if (hdr.format != 0x00 && hdr.format != 0x01 && hdr.format != 0x02)
 8000bf0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d00a      	beq.n	8000c0c <parse_midi_header+0xd8>
 8000bf6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d007      	beq.n	8000c0c <parse_midi_header+0xd8>
 8000bfc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000bfe:	2b02      	cmp	r3, #2
 8000c00:	d004      	beq.n	8000c0c <parse_midi_header+0xd8>
    {
        myprintf("Unexpected Header Format - Recieved: %u\n", hdr.format);
 8000c02:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000c04:	4619      	mov	r1, r3
 8000c06:	4827      	ldr	r0, [pc, #156]	@ (8000ca4 <parse_midi_header+0x170>)
 8000c08:	f000 fa5a 	bl	80010c0 <myprintf>
    }

    hdr.num_tracks = (buf[10] << 8) | buf[11];
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	330a      	adds	r3, #10
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	021b      	lsls	r3, r3, #8
 8000c14:	b21a      	sxth	r2, r3
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	330b      	adds	r3, #11
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	b21b      	sxth	r3, r3
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	b21b      	sxth	r3, r3
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	857b      	strh	r3, [r7, #42]	@ 0x2a
    hdr.division = (buf[12] << 8) | buf[13];
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	330c      	adds	r3, #12
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	021b      	lsls	r3, r3, #8
 8000c2e:	b21a      	sxth	r2, r3
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	330d      	adds	r3, #13
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	b21b      	sxth	r3, r3
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	b21b      	sxth	r3, r3
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    // to check all header info
    myprintf("Header string is: %x\n", hdr.MThd);
 8000c40:	6a3b      	ldr	r3, [r7, #32]
 8000c42:	4619      	mov	r1, r3
 8000c44:	4818      	ldr	r0, [pc, #96]	@ (8000ca8 <parse_midi_header+0x174>)
 8000c46:	f000 fa3b 	bl	80010c0 <myprintf>
    myprintf("Length is: %x\n", hdr.hdr_len);
 8000c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4817      	ldr	r0, [pc, #92]	@ (8000cac <parse_midi_header+0x178>)
 8000c50:	f000 fa36 	bl	80010c0 <myprintf>
    myprintf("Format is:%x \n", hdr.format);
 8000c54:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000c56:	4619      	mov	r1, r3
 8000c58:	4815      	ldr	r0, [pc, #84]	@ (8000cb0 <parse_midi_header+0x17c>)
 8000c5a:	f000 fa31 	bl	80010c0 <myprintf>
    myprintf("Number of tracks is: %x\n", hdr.num_tracks);
 8000c5e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000c60:	4619      	mov	r1, r3
 8000c62:	4814      	ldr	r0, [pc, #80]	@ (8000cb4 <parse_midi_header+0x180>)
 8000c64:	f000 fa2c 	bl	80010c0 <myprintf>
    myprintf("Division is: %x\n", hdr.division);
 8000c68:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4812      	ldr	r0, [pc, #72]	@ (8000cb8 <parse_midi_header+0x184>)
 8000c6e:	f000 fa27 	bl	80010c0 <myprintf>

    free(buf);
 8000c72:	68f8      	ldr	r0, [r7, #12]
 8000c74:	f008 fd00 	bl	8009678 <free>

    return hdr;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	461c      	mov	r4, r3
 8000c7c:	f107 0320 	add.w	r3, r7, #32
 8000c80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000c90:	b002      	add	sp, #8
 8000c92:	4770      	bx	lr
 8000c94:	0800a554 	.word	0x0800a554
 8000c98:	4d546864 	.word	0x4d546864
 8000c9c:	0800a5dc 	.word	0x0800a5dc
 8000ca0:	0800a600 	.word	0x0800a600
 8000ca4:	0800a62c 	.word	0x0800a62c
 8000ca8:	0800a658 	.word	0x0800a658
 8000cac:	0800a670 	.word	0x0800a670
 8000cb0:	0800a680 	.word	0x0800a680
 8000cb4:	0800a690 	.word	0x0800a690
 8000cb8:	0800a6ac 	.word	0x0800a6ac

08000cbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <HAL_MspInit+0x54>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cca:	4a11      	ldr	r2, [pc, #68]	@ (8000d10 <HAL_MspInit+0x54>)
 8000ccc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <HAL_MspInit+0x54>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	603b      	str	r3, [r7, #0]
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d10 <HAL_MspInit+0x54>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d10 <HAL_MspInit+0x54>)
 8000ce8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cee:	4b08      	ldr	r3, [pc, #32]	@ (8000d10 <HAL_MspInit+0x54>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	210f      	movs	r1, #15
 8000cfe:	f06f 0001 	mvn.w	r0, #1
 8000d02:	f000 fb39 	bl	8001378 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40023800 	.word	0x40023800

08000d14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	@ 0x28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a19      	ldr	r2, [pc, #100]	@ (8000d98 <HAL_SPI_MspInit+0x84>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d12b      	bne.n	8000d8e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	4b18      	ldr	r3, [pc, #96]	@ (8000d9c <HAL_SPI_MspInit+0x88>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3e:	4a17      	ldr	r2, [pc, #92]	@ (8000d9c <HAL_SPI_MspInit+0x88>)
 8000d40:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d46:	4b15      	ldr	r3, [pc, #84]	@ (8000d9c <HAL_SPI_MspInit+0x88>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <HAL_SPI_MspInit+0x88>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	4a10      	ldr	r2, [pc, #64]	@ (8000d9c <HAL_SPI_MspInit+0x88>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d62:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <HAL_SPI_MspInit+0x88>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d6e:	23e0      	movs	r3, #224	@ 0xe0
 8000d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d7e:	2305      	movs	r3, #5
 8000d80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	@ (8000da0 <HAL_SPI_MspInit+0x8c>)
 8000d8a:	f000 fb1f 	bl	80013cc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d8e:	bf00      	nop
 8000d90:	3728      	adds	r7, #40	@ 0x28
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40013000 	.word	0x40013000
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40020000 	.word	0x40020000

08000da4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0b      	ldr	r2, [pc, #44]	@ (8000de0 <HAL_TIM_PWM_MspInit+0x3c>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d10d      	bne.n	8000dd2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b0a      	ldr	r3, [pc, #40]	@ (8000de4 <HAL_TIM_PWM_MspInit+0x40>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dbe:	4a09      	ldr	r2, [pc, #36]	@ (8000de4 <HAL_TIM_PWM_MspInit+0x40>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dc6:	4b07      	ldr	r3, [pc, #28]	@ (8000de4 <HAL_TIM_PWM_MspInit+0x40>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000dd2:	bf00      	nop
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	40010000 	.word	0x40010000
 8000de4:	40023800 	.word	0x40023800

08000de8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b088      	sub	sp, #32
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a12      	ldr	r2, [pc, #72]	@ (8000e50 <HAL_TIM_MspPostInit+0x68>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d11e      	bne.n	8000e48 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	4b11      	ldr	r3, [pc, #68]	@ (8000e54 <HAL_TIM_MspPostInit+0x6c>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	4a10      	ldr	r2, [pc, #64]	@ (8000e54 <HAL_TIM_MspPostInit+0x6c>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e54 <HAL_TIM_MspPostInit+0x6c>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e2a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3c:	f107 030c 	add.w	r3, r7, #12
 8000e40:	4619      	mov	r1, r3
 8000e42:	4805      	ldr	r0, [pc, #20]	@ (8000e58 <HAL_TIM_MspPostInit+0x70>)
 8000e44:	f000 fac2 	bl	80013cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e48:	bf00      	nop
 8000e4a:	3720      	adds	r7, #32
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40010000 	.word	0x40010000
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40020000 	.word	0x40020000

08000e5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	@ 0x28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a19      	ldr	r2, [pc, #100]	@ (8000ee0 <HAL_UART_MspInit+0x84>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d12b      	bne.n	8000ed6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	4b18      	ldr	r3, [pc, #96]	@ (8000ee4 <HAL_UART_MspInit+0x88>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e86:	4a17      	ldr	r2, [pc, #92]	@ (8000ee4 <HAL_UART_MspInit+0x88>)
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <HAL_UART_MspInit+0x88>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <HAL_UART_MspInit+0x88>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	4a10      	ldr	r2, [pc, #64]	@ (8000ee4 <HAL_UART_MspInit+0x88>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee4 <HAL_UART_MspInit+0x88>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000eb6:	230c      	movs	r3, #12
 8000eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ec6:	2307      	movs	r3, #7
 8000ec8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4805      	ldr	r0, [pc, #20]	@ (8000ee8 <HAL_UART_MspInit+0x8c>)
 8000ed2:	f000 fa7b 	bl	80013cc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ed6:	bf00      	nop
 8000ed8:	3728      	adds	r7, #40	@ 0x28
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40004400 	.word	0x40004400
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40020000 	.word	0x40020000

08000eec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08e      	sub	sp, #56	@ 0x38
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000efc:	2300      	movs	r3, #0
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	4b33      	ldr	r3, [pc, #204]	@ (8000fd0 <HAL_InitTick+0xe4>)
 8000f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f04:	4a32      	ldr	r2, [pc, #200]	@ (8000fd0 <HAL_InitTick+0xe4>)
 8000f06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f0c:	4b30      	ldr	r3, [pc, #192]	@ (8000fd0 <HAL_InitTick+0xe4>)
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f18:	f107 0210 	add.w	r2, r7, #16
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	4611      	mov	r1, r2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 fd1a 	bl	800195c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f28:	6a3b      	ldr	r3, [r7, #32]
 8000f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d103      	bne.n	8000f3a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f32:	f000 fceb 	bl	800190c <HAL_RCC_GetPCLK1Freq>
 8000f36:	6378      	str	r0, [r7, #52]	@ 0x34
 8000f38:	e004      	b.n	8000f44 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f3a:	f000 fce7 	bl	800190c <HAL_RCC_GetPCLK1Freq>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f46:	4a23      	ldr	r2, [pc, #140]	@ (8000fd4 <HAL_InitTick+0xe8>)
 8000f48:	fba2 2303 	umull	r2, r3, r2, r3
 8000f4c:	0c9b      	lsrs	r3, r3, #18
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000f52:	4b21      	ldr	r3, [pc, #132]	@ (8000fd8 <HAL_InitTick+0xec>)
 8000f54:	4a21      	ldr	r2, [pc, #132]	@ (8000fdc <HAL_InitTick+0xf0>)
 8000f56:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000f58:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd8 <HAL_InitTick+0xec>)
 8000f5a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f5e:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000f60:	4a1d      	ldr	r2, [pc, #116]	@ (8000fd8 <HAL_InitTick+0xec>)
 8000f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f64:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000f66:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd8 <HAL_InitTick+0xec>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd8 <HAL_InitTick+0xec>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f72:	4b19      	ldr	r3, [pc, #100]	@ (8000fd8 <HAL_InitTick+0xec>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000f78:	4817      	ldr	r0, [pc, #92]	@ (8000fd8 <HAL_InitTick+0xec>)
 8000f7a:	f001 fdbb 	bl	8002af4 <HAL_TIM_Base_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000f84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d11b      	bne.n	8000fc4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000f8c:	4812      	ldr	r0, [pc, #72]	@ (8000fd8 <HAL_InitTick+0xec>)
 8000f8e:	f001 fe0b 	bl	8002ba8 <HAL_TIM_Base_Start_IT>
 8000f92:	4603      	mov	r3, r0
 8000f94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000f98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d111      	bne.n	8000fc4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000fa0:	202d      	movs	r0, #45	@ 0x2d
 8000fa2:	f000 fa05 	bl	80013b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b0f      	cmp	r3, #15
 8000faa:	d808      	bhi.n	8000fbe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000fac:	2200      	movs	r2, #0
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	202d      	movs	r0, #45	@ 0x2d
 8000fb2:	f000 f9e1 	bl	8001378 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe0 <HAL_InitTick+0xf4>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	e002      	b.n	8000fc4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000fc4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3738      	adds	r7, #56	@ 0x38
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	431bde83 	.word	0x431bde83
 8000fd8:	200003e0 	.word	0x200003e0
 8000fdc:	40002000 	.word	0x40002000
 8000fe0:	20000004 	.word	0x20000004

08000fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <NMI_Handler+0x4>

08000fec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <HardFault_Handler+0x4>

08000ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <MemManage_Handler+0x4>

08000ffc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <BusFault_Handler+0x4>

08001004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <UsageFault_Handler+0x4>

0800100c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001020:	4802      	ldr	r0, [pc, #8]	@ (800102c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001022:	f001 fe80 	bl	8002d26 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	200003e0 	.word	0x200003e0

08001030 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001038:	4a14      	ldr	r2, [pc, #80]	@ (800108c <_sbrk+0x5c>)
 800103a:	4b15      	ldr	r3, [pc, #84]	@ (8001090 <_sbrk+0x60>)
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001044:	4b13      	ldr	r3, [pc, #76]	@ (8001094 <_sbrk+0x64>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d102      	bne.n	8001052 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800104c:	4b11      	ldr	r3, [pc, #68]	@ (8001094 <_sbrk+0x64>)
 800104e:	4a12      	ldr	r2, [pc, #72]	@ (8001098 <_sbrk+0x68>)
 8001050:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001052:	4b10      	ldr	r3, [pc, #64]	@ (8001094 <_sbrk+0x64>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4413      	add	r3, r2
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	429a      	cmp	r2, r3
 800105e:	d207      	bcs.n	8001070 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001060:	f008 fc12 	bl	8009888 <__errno>
 8001064:	4603      	mov	r3, r0
 8001066:	220c      	movs	r2, #12
 8001068:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800106a:	f04f 33ff 	mov.w	r3, #4294967295
 800106e:	e009      	b.n	8001084 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001070:	4b08      	ldr	r3, [pc, #32]	@ (8001094 <_sbrk+0x64>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001076:	4b07      	ldr	r3, [pc, #28]	@ (8001094 <_sbrk+0x64>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	4a05      	ldr	r2, [pc, #20]	@ (8001094 <_sbrk+0x64>)
 8001080:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001082:	68fb      	ldr	r3, [r7, #12]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20020000 	.word	0x20020000
 8001090:	00000400 	.word	0x00000400
 8001094:	20000428 	.word	0x20000428
 8001098:	20004458 	.word	0x20004458

0800109c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010a0:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <SystemInit+0x20>)
 80010a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010a6:	4a05      	ldr	r2, [pc, #20]	@ (80010bc <SystemInit+0x20>)
 80010a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <myprintf>:
    ms = ((float)delta_time / ctrl->tick_per_q_note) * (60000 / ctrl->tempo);

    return ms;
}

void myprintf(const char *fmt, ...) {
 80010c0:	b40f      	push	{r0, r1, r2, r3}
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b084      	sub	sp, #16
 80010c6:	af00      	add	r7, sp, #0

	osStatus res = osMutexWait(USART_lockHandle, 1000);
 80010c8:	4b16      	ldr	r3, [pc, #88]	@ (8001124 <myprintf+0x64>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80010d0:	4618      	mov	r0, r3
 80010d2:	f005 fe3b 	bl	8006d4c <osMutexWait>
 80010d6:	60f8      	str	r0, [r7, #12]

	if(res == osOK){
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d116      	bne.n	800110c <myprintf+0x4c>
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80010de:	f107 031c 	add.w	r3, r7, #28
 80010e2:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010ec:	480e      	ldr	r0, [pc, #56]	@ (8001128 <myprintf+0x68>)
 80010ee:	f008 fba5 	bl	800983c <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80010f2:	480d      	ldr	r0, [pc, #52]	@ (8001128 <myprintf+0x68>)
 80010f4:	f7ff f88c 	bl	8000210 <strlen>
 80010f8:	4603      	mov	r3, r0
 80010fa:	60bb      	str	r3, [r7, #8]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	b29a      	uxth	r2, r3
 8001100:	f04f 33ff 	mov.w	r3, #4294967295
 8001104:	4908      	ldr	r1, [pc, #32]	@ (8001128 <myprintf+0x68>)
 8001106:	4809      	ldr	r0, [pc, #36]	@ (800112c <myprintf+0x6c>)
 8001108:	f002 fb76 	bl	80037f8 <HAL_UART_Transmit>
	}

	osMutexRelease(USART_lockHandle);
 800110c:	4b05      	ldr	r3, [pc, #20]	@ (8001124 <myprintf+0x64>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f005 fe69 	bl	8006de8 <osMutexRelease>

}
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001120:	b004      	add	sp, #16
 8001122:	4770      	bx	lr
 8001124:	200003dc 	.word	0x200003dc
 8001128:	2000042c 	.word	0x2000042c
 800112c:	20000388 	.word	0x20000388

08001130 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001130:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001168 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001134:	f7ff ffb2 	bl	800109c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001138:	480c      	ldr	r0, [pc, #48]	@ (800116c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800113a:	490d      	ldr	r1, [pc, #52]	@ (8001170 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800113c:	4a0d      	ldr	r2, [pc, #52]	@ (8001174 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001140:	e002      	b.n	8001148 <LoopCopyDataInit>

08001142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001146:	3304      	adds	r3, #4

08001148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800114c:	d3f9      	bcc.n	8001142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114e:	4a0a      	ldr	r2, [pc, #40]	@ (8001178 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001150:	4c0a      	ldr	r4, [pc, #40]	@ (800117c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001154:	e001      	b.n	800115a <LoopFillZerobss>

08001156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001158:	3204      	adds	r2, #4

0800115a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800115c:	d3fb      	bcc.n	8001156 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800115e:	f008 fb99 	bl	8009894 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001162:	f7ff fa3f 	bl	80005e4 <main>
  bx  lr    
 8001166:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001168:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800116c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001170:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001174:	0800a7e8 	.word	0x0800a7e8
  ldr r2, =_sbss
 8001178:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800117c:	20004454 	.word	0x20004454

08001180 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001180:	e7fe      	b.n	8001180 <ADC_IRQHandler>
	...

08001184 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001188:	4b0e      	ldr	r3, [pc, #56]	@ (80011c4 <HAL_Init+0x40>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a0d      	ldr	r2, [pc, #52]	@ (80011c4 <HAL_Init+0x40>)
 800118e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001192:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001194:	4b0b      	ldr	r3, [pc, #44]	@ (80011c4 <HAL_Init+0x40>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a0a      	ldr	r2, [pc, #40]	@ (80011c4 <HAL_Init+0x40>)
 800119a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800119e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a0:	4b08      	ldr	r3, [pc, #32]	@ (80011c4 <HAL_Init+0x40>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a07      	ldr	r2, [pc, #28]	@ (80011c4 <HAL_Init+0x40>)
 80011a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ac:	2003      	movs	r0, #3
 80011ae:	f000 f8d8 	bl	8001362 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011b2:	200f      	movs	r0, #15
 80011b4:	f7ff fe9a 	bl	8000eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b8:	f7ff fd80 	bl	8000cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40023c00 	.word	0x40023c00

080011c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011cc:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <HAL_IncTick+0x20>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <HAL_IncTick+0x24>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4413      	add	r3, r2
 80011d8:	4a04      	ldr	r2, [pc, #16]	@ (80011ec <HAL_IncTick+0x24>)
 80011da:	6013      	str	r3, [r2, #0]
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000008 	.word	0x20000008
 80011ec:	2000052c 	.word	0x2000052c

080011f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return uwTick;
 80011f4:	4b03      	ldr	r3, [pc, #12]	@ (8001204 <HAL_GetTick+0x14>)
 80011f6:	681b      	ldr	r3, [r3, #0]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	2000052c 	.word	0x2000052c

08001208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001218:	4b0c      	ldr	r3, [pc, #48]	@ (800124c <__NVIC_SetPriorityGrouping+0x44>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001224:	4013      	ands	r3, r2
 8001226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001230:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001234:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800123a:	4a04      	ldr	r2, [pc, #16]	@ (800124c <__NVIC_SetPriorityGrouping+0x44>)
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	60d3      	str	r3, [r2, #12]
}
 8001240:	bf00      	nop
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001254:	4b04      	ldr	r3, [pc, #16]	@ (8001268 <__NVIC_GetPriorityGrouping+0x18>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	0a1b      	lsrs	r3, r3, #8
 800125a:	f003 0307 	and.w	r3, r3, #7
}
 800125e:	4618      	mov	r0, r3
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	2b00      	cmp	r3, #0
 800127c:	db0b      	blt.n	8001296 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	f003 021f 	and.w	r2, r3, #31
 8001284:	4907      	ldr	r1, [pc, #28]	@ (80012a4 <__NVIC_EnableIRQ+0x38>)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	095b      	lsrs	r3, r3, #5
 800128c:	2001      	movs	r0, #1
 800128e:	fa00 f202 	lsl.w	r2, r0, r2
 8001292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	e000e100 	.word	0xe000e100

080012a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	6039      	str	r1, [r7, #0]
 80012b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	db0a      	blt.n	80012d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	490c      	ldr	r1, [pc, #48]	@ (80012f4 <__NVIC_SetPriority+0x4c>)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	0112      	lsls	r2, r2, #4
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	440b      	add	r3, r1
 80012cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d0:	e00a      	b.n	80012e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4908      	ldr	r1, [pc, #32]	@ (80012f8 <__NVIC_SetPriority+0x50>)
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	f003 030f 	and.w	r3, r3, #15
 80012de:	3b04      	subs	r3, #4
 80012e0:	0112      	lsls	r2, r2, #4
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	440b      	add	r3, r1
 80012e6:	761a      	strb	r2, [r3, #24]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000e100 	.word	0xe000e100
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b089      	sub	sp, #36	@ 0x24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	f1c3 0307 	rsb	r3, r3, #7
 8001316:	2b04      	cmp	r3, #4
 8001318:	bf28      	it	cs
 800131a:	2304      	movcs	r3, #4
 800131c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3304      	adds	r3, #4
 8001322:	2b06      	cmp	r3, #6
 8001324:	d902      	bls.n	800132c <NVIC_EncodePriority+0x30>
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3b03      	subs	r3, #3
 800132a:	e000      	b.n	800132e <NVIC_EncodePriority+0x32>
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	f04f 32ff 	mov.w	r2, #4294967295
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43da      	mvns	r2, r3
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	401a      	ands	r2, r3
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001344:	f04f 31ff 	mov.w	r1, #4294967295
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	fa01 f303 	lsl.w	r3, r1, r3
 800134e:	43d9      	mvns	r1, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001354:	4313      	orrs	r3, r2
         );
}
 8001356:	4618      	mov	r0, r3
 8001358:	3724      	adds	r7, #36	@ 0x24
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff ff4c 	bl	8001208 <__NVIC_SetPriorityGrouping>
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
 8001384:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800138a:	f7ff ff61 	bl	8001250 <__NVIC_GetPriorityGrouping>
 800138e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	68b9      	ldr	r1, [r7, #8]
 8001394:	6978      	ldr	r0, [r7, #20]
 8001396:	f7ff ffb1 	bl	80012fc <NVIC_EncodePriority>
 800139a:	4602      	mov	r2, r0
 800139c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a0:	4611      	mov	r1, r2
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff ff80 	bl	80012a8 <__NVIC_SetPriority>
}
 80013a8:	bf00      	nop
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ff54 	bl	800126c <__NVIC_EnableIRQ>
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b089      	sub	sp, #36	@ 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
 80013e6:	e165      	b.n	80016b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013e8:	2201      	movs	r2, #1
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	429a      	cmp	r2, r3
 8001402:	f040 8154 	bne.w	80016ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	2b01      	cmp	r3, #1
 8001410:	d005      	beq.n	800141e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800141a:	2b02      	cmp	r3, #2
 800141c:	d130      	bne.n	8001480 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	2203      	movs	r2, #3
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	68da      	ldr	r2, [r3, #12]
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001454:	2201      	movs	r2, #1
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	091b      	lsrs	r3, r3, #4
 800146a:	f003 0201 	and.w	r2, r3, #1
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	2b03      	cmp	r3, #3
 800148a:	d017      	beq.n	80014bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	2203      	movs	r2, #3
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d123      	bne.n	8001510 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	08da      	lsrs	r2, r3, #3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3208      	adds	r2, #8
 80014d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	f003 0307 	and.w	r3, r3, #7
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	220f      	movs	r2, #15
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	691a      	ldr	r2, [r3, #16]
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	08da      	lsrs	r2, r3, #3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3208      	adds	r2, #8
 800150a:	69b9      	ldr	r1, [r7, #24]
 800150c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	2203      	movs	r2, #3
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0203 	and.w	r2, r3, #3
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 80ae 	beq.w	80016ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	4b5d      	ldr	r3, [pc, #372]	@ (80016cc <HAL_GPIO_Init+0x300>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800155a:	4a5c      	ldr	r2, [pc, #368]	@ (80016cc <HAL_GPIO_Init+0x300>)
 800155c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001560:	6453      	str	r3, [r2, #68]	@ 0x44
 8001562:	4b5a      	ldr	r3, [pc, #360]	@ (80016cc <HAL_GPIO_Init+0x300>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001566:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800156e:	4a58      	ldr	r2, [pc, #352]	@ (80016d0 <HAL_GPIO_Init+0x304>)
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	089b      	lsrs	r3, r3, #2
 8001574:	3302      	adds	r3, #2
 8001576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	220f      	movs	r2, #15
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a4f      	ldr	r2, [pc, #316]	@ (80016d4 <HAL_GPIO_Init+0x308>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d025      	beq.n	80015e6 <HAL_GPIO_Init+0x21a>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a4e      	ldr	r2, [pc, #312]	@ (80016d8 <HAL_GPIO_Init+0x30c>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d01f      	beq.n	80015e2 <HAL_GPIO_Init+0x216>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a4d      	ldr	r2, [pc, #308]	@ (80016dc <HAL_GPIO_Init+0x310>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d019      	beq.n	80015de <HAL_GPIO_Init+0x212>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a4c      	ldr	r2, [pc, #304]	@ (80016e0 <HAL_GPIO_Init+0x314>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d013      	beq.n	80015da <HAL_GPIO_Init+0x20e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a4b      	ldr	r2, [pc, #300]	@ (80016e4 <HAL_GPIO_Init+0x318>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d00d      	beq.n	80015d6 <HAL_GPIO_Init+0x20a>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a4a      	ldr	r2, [pc, #296]	@ (80016e8 <HAL_GPIO_Init+0x31c>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d007      	beq.n	80015d2 <HAL_GPIO_Init+0x206>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a49      	ldr	r2, [pc, #292]	@ (80016ec <HAL_GPIO_Init+0x320>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d101      	bne.n	80015ce <HAL_GPIO_Init+0x202>
 80015ca:	2306      	movs	r3, #6
 80015cc:	e00c      	b.n	80015e8 <HAL_GPIO_Init+0x21c>
 80015ce:	2307      	movs	r3, #7
 80015d0:	e00a      	b.n	80015e8 <HAL_GPIO_Init+0x21c>
 80015d2:	2305      	movs	r3, #5
 80015d4:	e008      	b.n	80015e8 <HAL_GPIO_Init+0x21c>
 80015d6:	2304      	movs	r3, #4
 80015d8:	e006      	b.n	80015e8 <HAL_GPIO_Init+0x21c>
 80015da:	2303      	movs	r3, #3
 80015dc:	e004      	b.n	80015e8 <HAL_GPIO_Init+0x21c>
 80015de:	2302      	movs	r3, #2
 80015e0:	e002      	b.n	80015e8 <HAL_GPIO_Init+0x21c>
 80015e2:	2301      	movs	r3, #1
 80015e4:	e000      	b.n	80015e8 <HAL_GPIO_Init+0x21c>
 80015e6:	2300      	movs	r3, #0
 80015e8:	69fa      	ldr	r2, [r7, #28]
 80015ea:	f002 0203 	and.w	r2, r2, #3
 80015ee:	0092      	lsls	r2, r2, #2
 80015f0:	4093      	lsls	r3, r2
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015f8:	4935      	ldr	r1, [pc, #212]	@ (80016d0 <HAL_GPIO_Init+0x304>)
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	089b      	lsrs	r3, r3, #2
 80015fe:	3302      	adds	r3, #2
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001606:	4b3a      	ldr	r3, [pc, #232]	@ (80016f0 <HAL_GPIO_Init+0x324>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	43db      	mvns	r3, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4013      	ands	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800162a:	4a31      	ldr	r2, [pc, #196]	@ (80016f0 <HAL_GPIO_Init+0x324>)
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001630:	4b2f      	ldr	r3, [pc, #188]	@ (80016f0 <HAL_GPIO_Init+0x324>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001654:	4a26      	ldr	r2, [pc, #152]	@ (80016f0 <HAL_GPIO_Init+0x324>)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800165a:	4b25      	ldr	r3, [pc, #148]	@ (80016f0 <HAL_GPIO_Init+0x324>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	43db      	mvns	r3, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4013      	ands	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800167e:	4a1c      	ldr	r2, [pc, #112]	@ (80016f0 <HAL_GPIO_Init+0x324>)
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001684:	4b1a      	ldr	r3, [pc, #104]	@ (80016f0 <HAL_GPIO_Init+0x324>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016a8:	4a11      	ldr	r2, [pc, #68]	@ (80016f0 <HAL_GPIO_Init+0x324>)
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3301      	adds	r3, #1
 80016b2:	61fb      	str	r3, [r7, #28]
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	2b0f      	cmp	r3, #15
 80016b8:	f67f ae96 	bls.w	80013e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
 80016c0:	3724      	adds	r7, #36	@ 0x24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40013800 	.word	0x40013800
 80016d4:	40020000 	.word	0x40020000
 80016d8:	40020400 	.word	0x40020400
 80016dc:	40020800 	.word	0x40020800
 80016e0:	40020c00 	.word	0x40020c00
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40021400 	.word	0x40021400
 80016ec:	40021800 	.word	0x40021800
 80016f0:	40013c00 	.word	0x40013c00

080016f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	807b      	strh	r3, [r7, #2]
 8001700:	4613      	mov	r3, r2
 8001702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001704:	787b      	ldrb	r3, [r7, #1]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800170a:	887a      	ldrh	r2, [r7, #2]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001710:	e003      	b.n	800171a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001712:	887b      	ldrh	r3, [r7, #2]
 8001714:	041a      	lsls	r2, r3, #16
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	619a      	str	r2, [r3, #24]
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e0cc      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800173c:	4b68      	ldr	r3, [pc, #416]	@ (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 030f 	and.w	r3, r3, #15
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d90c      	bls.n	8001764 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174a:	4b65      	ldr	r3, [pc, #404]	@ (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001752:	4b63      	ldr	r3, [pc, #396]	@ (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	429a      	cmp	r2, r3
 800175e:	d001      	beq.n	8001764 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e0b8      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d020      	beq.n	80017b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800177c:	4b59      	ldr	r3, [pc, #356]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	4a58      	ldr	r2, [pc, #352]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001786:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0308 	and.w	r3, r3, #8
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001794:	4b53      	ldr	r3, [pc, #332]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	4a52      	ldr	r2, [pc, #328]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800179e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a0:	4b50      	ldr	r3, [pc, #320]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	494d      	ldr	r1, [pc, #308]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d044      	beq.n	8001848 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d107      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c6:	4b47      	ldr	r3, [pc, #284]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d119      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e07f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d003      	beq.n	80017e6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d107      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e6:	4b3f      	ldr	r3, [pc, #252]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d109      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e06f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f6:	4b3b      	ldr	r3, [pc, #236]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e067      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001806:	4b37      	ldr	r3, [pc, #220]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f023 0203 	bic.w	r2, r3, #3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	4934      	ldr	r1, [pc, #208]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	4313      	orrs	r3, r2
 8001816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001818:	f7ff fcea 	bl	80011f0 <HAL_GetTick>
 800181c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181e:	e00a      	b.n	8001836 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001820:	f7ff fce6 	bl	80011f0 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800182e:	4293      	cmp	r3, r2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e04f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001836:	4b2b      	ldr	r3, [pc, #172]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 020c 	and.w	r2, r3, #12
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	429a      	cmp	r2, r3
 8001846:	d1eb      	bne.n	8001820 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001848:	4b25      	ldr	r3, [pc, #148]	@ (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 030f 	and.w	r3, r3, #15
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	429a      	cmp	r2, r3
 8001854:	d20c      	bcs.n	8001870 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001856:	4b22      	ldr	r3, [pc, #136]	@ (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800185e:	4b20      	ldr	r3, [pc, #128]	@ (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	429a      	cmp	r2, r3
 800186a:	d001      	beq.n	8001870 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e032      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	d008      	beq.n	800188e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800187c:	4b19      	ldr	r3, [pc, #100]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	4916      	ldr	r1, [pc, #88]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	4313      	orrs	r3, r2
 800188c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	2b00      	cmp	r3, #0
 8001898:	d009      	beq.n	80018ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800189a:	4b12      	ldr	r3, [pc, #72]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	490e      	ldr	r1, [pc, #56]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018ae:	f000 f887 	bl	80019c0 <HAL_RCC_GetSysClockFreq>
 80018b2:	4602      	mov	r2, r0
 80018b4:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	091b      	lsrs	r3, r3, #4
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	490a      	ldr	r1, [pc, #40]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c0>)
 80018c0:	5ccb      	ldrb	r3, [r1, r3]
 80018c2:	fa22 f303 	lsr.w	r3, r2, r3
 80018c6:	4a09      	ldr	r2, [pc, #36]	@ (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80018c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80018ca:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fb0c 	bl	8000eec <HAL_InitTick>

  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40023c00 	.word	0x40023c00
 80018e4:	40023800 	.word	0x40023800
 80018e8:	0800a70c 	.word	0x0800a70c
 80018ec:	20000000 	.word	0x20000000
 80018f0:	20000004 	.word	0x20000004

080018f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018f8:	4b03      	ldr	r3, [pc, #12]	@ (8001908 <HAL_RCC_GetHCLKFreq+0x14>)
 80018fa:	681b      	ldr	r3, [r3, #0]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000000 	.word	0x20000000

0800190c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001910:	f7ff fff0 	bl	80018f4 <HAL_RCC_GetHCLKFreq>
 8001914:	4602      	mov	r2, r0
 8001916:	4b05      	ldr	r3, [pc, #20]	@ (800192c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	0a9b      	lsrs	r3, r3, #10
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	4903      	ldr	r1, [pc, #12]	@ (8001930 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001922:	5ccb      	ldrb	r3, [r1, r3]
 8001924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001928:	4618      	mov	r0, r3
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40023800 	.word	0x40023800
 8001930:	0800a71c 	.word	0x0800a71c

08001934 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001938:	f7ff ffdc 	bl	80018f4 <HAL_RCC_GetHCLKFreq>
 800193c:	4602      	mov	r2, r0
 800193e:	4b05      	ldr	r3, [pc, #20]	@ (8001954 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	0b5b      	lsrs	r3, r3, #13
 8001944:	f003 0307 	and.w	r3, r3, #7
 8001948:	4903      	ldr	r1, [pc, #12]	@ (8001958 <HAL_RCC_GetPCLK2Freq+0x24>)
 800194a:	5ccb      	ldrb	r3, [r1, r3]
 800194c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001950:	4618      	mov	r0, r3
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40023800 	.word	0x40023800
 8001958:	0800a71c 	.word	0x0800a71c

0800195c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	220f      	movs	r2, #15
 800196a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800196c:	4b12      	ldr	r3, [pc, #72]	@ (80019b8 <HAL_RCC_GetClockConfig+0x5c>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 0203 	and.w	r2, r3, #3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001978:	4b0f      	ldr	r3, [pc, #60]	@ (80019b8 <HAL_RCC_GetClockConfig+0x5c>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001984:	4b0c      	ldr	r3, [pc, #48]	@ (80019b8 <HAL_RCC_GetClockConfig+0x5c>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001990:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <HAL_RCC_GetClockConfig+0x5c>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	08db      	lsrs	r3, r3, #3
 8001996:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800199e:	4b07      	ldr	r3, [pc, #28]	@ (80019bc <HAL_RCC_GetClockConfig+0x60>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 020f 	and.w	r2, r3, #15
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	601a      	str	r2, [r3, #0]
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40023c00 	.word	0x40023c00

080019c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019c4:	b0a6      	sub	sp, #152	@ 0x98
 80019c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80019da:	2300      	movs	r3, #0
 80019dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019e6:	4bc8      	ldr	r3, [pc, #800]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x348>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 030c 	and.w	r3, r3, #12
 80019ee:	2b0c      	cmp	r3, #12
 80019f0:	f200 817e 	bhi.w	8001cf0 <HAL_RCC_GetSysClockFreq+0x330>
 80019f4:	a201      	add	r2, pc, #4	@ (adr r2, 80019fc <HAL_RCC_GetSysClockFreq+0x3c>)
 80019f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019fa:	bf00      	nop
 80019fc:	08001a31 	.word	0x08001a31
 8001a00:	08001cf1 	.word	0x08001cf1
 8001a04:	08001cf1 	.word	0x08001cf1
 8001a08:	08001cf1 	.word	0x08001cf1
 8001a0c:	08001a39 	.word	0x08001a39
 8001a10:	08001cf1 	.word	0x08001cf1
 8001a14:	08001cf1 	.word	0x08001cf1
 8001a18:	08001cf1 	.word	0x08001cf1
 8001a1c:	08001a41 	.word	0x08001a41
 8001a20:	08001cf1 	.word	0x08001cf1
 8001a24:	08001cf1 	.word	0x08001cf1
 8001a28:	08001cf1 	.word	0x08001cf1
 8001a2c:	08001bab 	.word	0x08001bab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a30:	4bb6      	ldr	r3, [pc, #728]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x34c>)
 8001a32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001a36:	e15f      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a38:	4bb5      	ldr	r3, [pc, #724]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x350>)
 8001a3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001a3e:	e15b      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a40:	4bb1      	ldr	r3, [pc, #708]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a4c:	4bae      	ldr	r3, [pc, #696]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d031      	beq.n	8001abc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a58:	4bab      	ldr	r3, [pc, #684]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	099b      	lsrs	r3, r3, #6
 8001a5e:	2200      	movs	r2, #0
 8001a60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001a62:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001a64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a6a:	663b      	str	r3, [r7, #96]	@ 0x60
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001a70:	4ba7      	ldr	r3, [pc, #668]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x350>)
 8001a72:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001a76:	462a      	mov	r2, r5
 8001a78:	fb03 f202 	mul.w	r2, r3, r2
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	4621      	mov	r1, r4
 8001a80:	fb01 f303 	mul.w	r3, r1, r3
 8001a84:	4413      	add	r3, r2
 8001a86:	4aa2      	ldr	r2, [pc, #648]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x350>)
 8001a88:	4621      	mov	r1, r4
 8001a8a:	fba1 1202 	umull	r1, r2, r1, r2
 8001a8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001a90:	460a      	mov	r2, r1
 8001a92:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001a94:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001a96:	4413      	add	r3, r2
 8001a98:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001a9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001aa2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001aa4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001aa8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001aac:	f7fe fc08 	bl	80002c0 <__aeabi_uldivmod>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001aba:	e064      	b.n	8001b86 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001abc:	4b92      	ldr	r3, [pc, #584]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x348>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	099b      	lsrs	r3, r3, #6
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	653b      	str	r3, [r7, #80]	@ 0x50
 8001ac6:	657a      	str	r2, [r7, #84]	@ 0x54
 8001ac8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ace:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ad4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001ad8:	4622      	mov	r2, r4
 8001ada:	462b      	mov	r3, r5
 8001adc:	f04f 0000 	mov.w	r0, #0
 8001ae0:	f04f 0100 	mov.w	r1, #0
 8001ae4:	0159      	lsls	r1, r3, #5
 8001ae6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aea:	0150      	lsls	r0, r2, #5
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4621      	mov	r1, r4
 8001af2:	1a51      	subs	r1, r2, r1
 8001af4:	6139      	str	r1, [r7, #16]
 8001af6:	4629      	mov	r1, r5
 8001af8:	eb63 0301 	sbc.w	r3, r3, r1
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	f04f 0300 	mov.w	r3, #0
 8001b06:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b0a:	4659      	mov	r1, fp
 8001b0c:	018b      	lsls	r3, r1, #6
 8001b0e:	4651      	mov	r1, sl
 8001b10:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b14:	4651      	mov	r1, sl
 8001b16:	018a      	lsls	r2, r1, #6
 8001b18:	4651      	mov	r1, sl
 8001b1a:	ebb2 0801 	subs.w	r8, r2, r1
 8001b1e:	4659      	mov	r1, fp
 8001b20:	eb63 0901 	sbc.w	r9, r3, r1
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	f04f 0300 	mov.w	r3, #0
 8001b2c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b30:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b34:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b38:	4690      	mov	r8, r2
 8001b3a:	4699      	mov	r9, r3
 8001b3c:	4623      	mov	r3, r4
 8001b3e:	eb18 0303 	adds.w	r3, r8, r3
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	462b      	mov	r3, r5
 8001b46:	eb49 0303 	adc.w	r3, r9, r3
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b58:	4629      	mov	r1, r5
 8001b5a:	028b      	lsls	r3, r1, #10
 8001b5c:	4621      	mov	r1, r4
 8001b5e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b62:	4621      	mov	r1, r4
 8001b64:	028a      	lsls	r2, r1, #10
 8001b66:	4610      	mov	r0, r2
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b6e:	2200      	movs	r2, #0
 8001b70:	643b      	str	r3, [r7, #64]	@ 0x40
 8001b72:	647a      	str	r2, [r7, #68]	@ 0x44
 8001b74:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001b78:	f7fe fba2 	bl	80002c0 <__aeabi_uldivmod>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4613      	mov	r3, r2
 8001b82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b86:	4b60      	ldr	r3, [pc, #384]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	0c1b      	lsrs	r3, r3, #16
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	3301      	adds	r3, #1
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8001b98:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001b9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001ba8:	e0a6      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001baa:	4b57      	ldr	r3, [pc, #348]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x348>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bb6:	4b54      	ldr	r3, [pc, #336]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x348>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d02a      	beq.n	8001c18 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc2:	4b51      	ldr	r3, [pc, #324]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x348>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	099b      	lsrs	r3, r3, #6
 8001bc8:	2200      	movs	r2, #0
 8001bca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001bcc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bd0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4b4e      	ldr	r3, [pc, #312]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x350>)
 8001bd8:	fb03 f201 	mul.w	r2, r3, r1
 8001bdc:	2300      	movs	r3, #0
 8001bde:	fb00 f303 	mul.w	r3, r0, r3
 8001be2:	4413      	add	r3, r2
 8001be4:	4a4a      	ldr	r2, [pc, #296]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x350>)
 8001be6:	fba0 1202 	umull	r1, r2, r0, r2
 8001bea:	677a      	str	r2, [r7, #116]	@ 0x74
 8001bec:	460a      	mov	r2, r1
 8001bee:	673a      	str	r2, [r7, #112]	@ 0x70
 8001bf0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001bf2:	4413      	add	r3, r2
 8001bf4:	677b      	str	r3, [r7, #116]	@ 0x74
 8001bf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bfe:	637a      	str	r2, [r7, #52]	@ 0x34
 8001c00:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001c04:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001c08:	f7fe fb5a 	bl	80002c0 <__aeabi_uldivmod>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4613      	mov	r3, r2
 8001c12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001c16:	e05b      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c18:	4b3b      	ldr	r3, [pc, #236]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	099b      	lsrs	r3, r3, #6
 8001c1e:	2200      	movs	r2, #0
 8001c20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c2a:	623b      	str	r3, [r7, #32]
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c34:	4642      	mov	r2, r8
 8001c36:	464b      	mov	r3, r9
 8001c38:	f04f 0000 	mov.w	r0, #0
 8001c3c:	f04f 0100 	mov.w	r1, #0
 8001c40:	0159      	lsls	r1, r3, #5
 8001c42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c46:	0150      	lsls	r0, r2, #5
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4641      	mov	r1, r8
 8001c4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c52:	4649      	mov	r1, r9
 8001c54:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c6c:	ebb2 040a 	subs.w	r4, r2, sl
 8001c70:	eb63 050b 	sbc.w	r5, r3, fp
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	f04f 0300 	mov.w	r3, #0
 8001c7c:	00eb      	lsls	r3, r5, #3
 8001c7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c82:	00e2      	lsls	r2, r4, #3
 8001c84:	4614      	mov	r4, r2
 8001c86:	461d      	mov	r5, r3
 8001c88:	4643      	mov	r3, r8
 8001c8a:	18e3      	adds	r3, r4, r3
 8001c8c:	603b      	str	r3, [r7, #0]
 8001c8e:	464b      	mov	r3, r9
 8001c90:	eb45 0303 	adc.w	r3, r5, r3
 8001c94:	607b      	str	r3, [r7, #4]
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ca2:	4629      	mov	r1, r5
 8001ca4:	028b      	lsls	r3, r1, #10
 8001ca6:	4621      	mov	r1, r4
 8001ca8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cac:	4621      	mov	r1, r4
 8001cae:	028a      	lsls	r2, r1, #10
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001cb8:	2200      	movs	r2, #0
 8001cba:	61bb      	str	r3, [r7, #24]
 8001cbc:	61fa      	str	r2, [r7, #28]
 8001cbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cc2:	f7fe fafd 	bl	80002c0 <__aeabi_uldivmod>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4613      	mov	r3, r2
 8001ccc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x348>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	0f1b      	lsrs	r3, r3, #28
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8001cde:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001ce2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001cee:	e003      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cf0:	4b06      	ldr	r3, [pc, #24]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x34c>)
 8001cf2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001cf6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cf8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3798      	adds	r7, #152	@ 0x98
 8001d00:	46bd      	mov	sp, r7
 8001d02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d06:	bf00      	nop
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	00f42400 	.word	0x00f42400
 8001d10:	017d7840 	.word	0x017d7840

08001d14 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e28d      	b.n	8002242 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f000 8083 	beq.w	8001e3a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d34:	4b94      	ldr	r3, [pc, #592]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 030c 	and.w	r3, r3, #12
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d019      	beq.n	8001d74 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001d40:	4b91      	ldr	r3, [pc, #580]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 030c 	and.w	r3, r3, #12
        || \
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	d106      	bne.n	8001d5a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001d4c:	4b8e      	ldr	r3, [pc, #568]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d58:	d00c      	beq.n	8001d74 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d5a:	4b8b      	ldr	r3, [pc, #556]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001d62:	2b0c      	cmp	r3, #12
 8001d64:	d112      	bne.n	8001d8c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d66:	4b88      	ldr	r3, [pc, #544]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d72:	d10b      	bne.n	8001d8c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d74:	4b84      	ldr	r3, [pc, #528]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d05b      	beq.n	8001e38 <HAL_RCC_OscConfig+0x124>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d157      	bne.n	8001e38 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e25a      	b.n	8002242 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d94:	d106      	bne.n	8001da4 <HAL_RCC_OscConfig+0x90>
 8001d96:	4b7c      	ldr	r3, [pc, #496]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a7b      	ldr	r2, [pc, #492]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001d9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	e01d      	b.n	8001de0 <HAL_RCC_OscConfig+0xcc>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dac:	d10c      	bne.n	8001dc8 <HAL_RCC_OscConfig+0xb4>
 8001dae:	4b76      	ldr	r3, [pc, #472]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a75      	ldr	r2, [pc, #468]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001db4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	4b73      	ldr	r3, [pc, #460]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a72      	ldr	r2, [pc, #456]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001dc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	e00b      	b.n	8001de0 <HAL_RCC_OscConfig+0xcc>
 8001dc8:	4b6f      	ldr	r3, [pc, #444]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a6e      	ldr	r2, [pc, #440]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001dce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	4b6c      	ldr	r3, [pc, #432]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a6b      	ldr	r2, [pc, #428]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001dda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d013      	beq.n	8001e10 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de8:	f7ff fa02 	bl	80011f0 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df0:	f7ff f9fe 	bl	80011f0 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b64      	cmp	r3, #100	@ 0x64
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e21f      	b.n	8002242 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e02:	4b61      	ldr	r3, [pc, #388]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f0      	beq.n	8001df0 <HAL_RCC_OscConfig+0xdc>
 8001e0e:	e014      	b.n	8001e3a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e10:	f7ff f9ee 	bl	80011f0 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e18:	f7ff f9ea 	bl	80011f0 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b64      	cmp	r3, #100	@ 0x64
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e20b      	b.n	8002242 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e2a:	4b57      	ldr	r3, [pc, #348]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0x104>
 8001e36:	e000      	b.n	8001e3a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d06f      	beq.n	8001f26 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e46:	4b50      	ldr	r3, [pc, #320]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d017      	beq.n	8001e82 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001e52:	4b4d      	ldr	r3, [pc, #308]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 030c 	and.w	r3, r3, #12
        || \
 8001e5a:	2b08      	cmp	r3, #8
 8001e5c:	d105      	bne.n	8001e6a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001e5e:	4b4a      	ldr	r3, [pc, #296]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00b      	beq.n	8001e82 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e6a:	4b47      	ldr	r3, [pc, #284]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001e72:	2b0c      	cmp	r3, #12
 8001e74:	d11c      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e76:	4b44      	ldr	r3, [pc, #272]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d116      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e82:	4b41      	ldr	r3, [pc, #260]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d005      	beq.n	8001e9a <HAL_RCC_OscConfig+0x186>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d001      	beq.n	8001e9a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e1d3      	b.n	8002242 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	4937      	ldr	r1, [pc, #220]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eae:	e03a      	b.n	8001f26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d020      	beq.n	8001efa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eb8:	4b34      	ldr	r3, [pc, #208]	@ (8001f8c <HAL_RCC_OscConfig+0x278>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebe:	f7ff f997 	bl	80011f0 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec6:	f7ff f993 	bl	80011f0 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e1b4      	b.n	8002242 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed8:	4b2b      	ldr	r3, [pc, #172]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0f0      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee4:	4b28      	ldr	r3, [pc, #160]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	4925      	ldr	r1, [pc, #148]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	600b      	str	r3, [r1, #0]
 8001ef8:	e015      	b.n	8001f26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001efa:	4b24      	ldr	r3, [pc, #144]	@ (8001f8c <HAL_RCC_OscConfig+0x278>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f00:	f7ff f976 	bl	80011f0 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f08:	f7ff f972 	bl	80011f0 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e193      	b.n	8002242 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d036      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d016      	beq.n	8001f68 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f3a:	4b15      	ldr	r3, [pc, #84]	@ (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f40:	f7ff f956 	bl	80011f0 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f48:	f7ff f952 	bl	80011f0 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e173      	b.n	8002242 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001f5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCC_OscConfig+0x234>
 8001f66:	e01b      	b.n	8001fa0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f68:	4b09      	ldr	r3, [pc, #36]	@ (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6e:	f7ff f93f 	bl	80011f0 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f74:	e00e      	b.n	8001f94 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f76:	f7ff f93b 	bl	80011f0 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d907      	bls.n	8001f94 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e15c      	b.n	8002242 <HAL_RCC_OscConfig+0x52e>
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	42470000 	.word	0x42470000
 8001f90:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f94:	4b8a      	ldr	r3, [pc, #552]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 8001f96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1ea      	bne.n	8001f76 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 8097 	beq.w	80020dc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fb2:	4b83      	ldr	r3, [pc, #524]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10f      	bne.n	8001fde <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	4b7f      	ldr	r3, [pc, #508]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc6:	4a7e      	ldr	r2, [pc, #504]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 8001fc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fce:	4b7c      	ldr	r3, [pc, #496]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fd6:	60bb      	str	r3, [r7, #8]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fde:	4b79      	ldr	r3, [pc, #484]	@ (80021c4 <HAL_RCC_OscConfig+0x4b0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d118      	bne.n	800201c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fea:	4b76      	ldr	r3, [pc, #472]	@ (80021c4 <HAL_RCC_OscConfig+0x4b0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a75      	ldr	r2, [pc, #468]	@ (80021c4 <HAL_RCC_OscConfig+0x4b0>)
 8001ff0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ff4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ff6:	f7ff f8fb 	bl	80011f0 <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ffe:	f7ff f8f7 	bl	80011f0 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e118      	b.n	8002242 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002010:	4b6c      	ldr	r3, [pc, #432]	@ (80021c4 <HAL_RCC_OscConfig+0x4b0>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0f0      	beq.n	8001ffe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d106      	bne.n	8002032 <HAL_RCC_OscConfig+0x31e>
 8002024:	4b66      	ldr	r3, [pc, #408]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 8002026:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002028:	4a65      	ldr	r2, [pc, #404]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002030:	e01c      	b.n	800206c <HAL_RCC_OscConfig+0x358>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b05      	cmp	r3, #5
 8002038:	d10c      	bne.n	8002054 <HAL_RCC_OscConfig+0x340>
 800203a:	4b61      	ldr	r3, [pc, #388]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 800203c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800203e:	4a60      	ldr	r2, [pc, #384]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 8002040:	f043 0304 	orr.w	r3, r3, #4
 8002044:	6713      	str	r3, [r2, #112]	@ 0x70
 8002046:	4b5e      	ldr	r3, [pc, #376]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 8002048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800204a:	4a5d      	ldr	r2, [pc, #372]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	6713      	str	r3, [r2, #112]	@ 0x70
 8002052:	e00b      	b.n	800206c <HAL_RCC_OscConfig+0x358>
 8002054:	4b5a      	ldr	r3, [pc, #360]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 8002056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002058:	4a59      	ldr	r2, [pc, #356]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 800205a:	f023 0301 	bic.w	r3, r3, #1
 800205e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002060:	4b57      	ldr	r3, [pc, #348]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 8002062:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002064:	4a56      	ldr	r2, [pc, #344]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 8002066:	f023 0304 	bic.w	r3, r3, #4
 800206a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d015      	beq.n	80020a0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002074:	f7ff f8bc 	bl	80011f0 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800207a:	e00a      	b.n	8002092 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800207c:	f7ff f8b8 	bl	80011f0 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	f241 3288 	movw	r2, #5000	@ 0x1388
 800208a:	4293      	cmp	r3, r2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e0d7      	b.n	8002242 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002092:	4b4b      	ldr	r3, [pc, #300]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 8002094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0ee      	beq.n	800207c <HAL_RCC_OscConfig+0x368>
 800209e:	e014      	b.n	80020ca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a0:	f7ff f8a6 	bl	80011f0 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a6:	e00a      	b.n	80020be <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a8:	f7ff f8a2 	bl	80011f0 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e0c1      	b.n	8002242 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020be:	4b40      	ldr	r3, [pc, #256]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 80020c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1ee      	bne.n	80020a8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020ca:	7dfb      	ldrb	r3, [r7, #23]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d105      	bne.n	80020dc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d0:	4b3b      	ldr	r3, [pc, #236]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 80020d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d4:	4a3a      	ldr	r2, [pc, #232]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 80020d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 80ad 	beq.w	8002240 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020e6:	4b36      	ldr	r3, [pc, #216]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 030c 	and.w	r3, r3, #12
 80020ee:	2b08      	cmp	r3, #8
 80020f0:	d060      	beq.n	80021b4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d145      	bne.n	8002186 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020fa:	4b33      	ldr	r3, [pc, #204]	@ (80021c8 <HAL_RCC_OscConfig+0x4b4>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002100:	f7ff f876 	bl	80011f0 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002108:	f7ff f872 	bl	80011f0 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e093      	b.n	8002242 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800211a:	4b29      	ldr	r3, [pc, #164]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f0      	bne.n	8002108 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69da      	ldr	r2, [r3, #28]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002134:	019b      	lsls	r3, r3, #6
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800213c:	085b      	lsrs	r3, r3, #1
 800213e:	3b01      	subs	r3, #1
 8002140:	041b      	lsls	r3, r3, #16
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002148:	061b      	lsls	r3, r3, #24
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002150:	071b      	lsls	r3, r3, #28
 8002152:	491b      	ldr	r1, [pc, #108]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 8002154:	4313      	orrs	r3, r2
 8002156:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002158:	4b1b      	ldr	r3, [pc, #108]	@ (80021c8 <HAL_RCC_OscConfig+0x4b4>)
 800215a:	2201      	movs	r2, #1
 800215c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215e:	f7ff f847 	bl	80011f0 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002166:	f7ff f843 	bl	80011f0 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e064      	b.n	8002242 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002178:	4b11      	ldr	r3, [pc, #68]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0f0      	beq.n	8002166 <HAL_RCC_OscConfig+0x452>
 8002184:	e05c      	b.n	8002240 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002186:	4b10      	ldr	r3, [pc, #64]	@ (80021c8 <HAL_RCC_OscConfig+0x4b4>)
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7ff f830 	bl	80011f0 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002194:	f7ff f82c 	bl	80011f0 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e04d      	b.n	8002242 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a6:	4b06      	ldr	r3, [pc, #24]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f0      	bne.n	8002194 <HAL_RCC_OscConfig+0x480>
 80021b2:	e045      	b.n	8002240 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d107      	bne.n	80021cc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e040      	b.n	8002242 <HAL_RCC_OscConfig+0x52e>
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40007000 	.word	0x40007000
 80021c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021cc:	4b1f      	ldr	r3, [pc, #124]	@ (800224c <HAL_RCC_OscConfig+0x538>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d030      	beq.n	800223c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d129      	bne.n	800223c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d122      	bne.n	800223c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80021fc:	4013      	ands	r3, r2
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002202:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002204:	4293      	cmp	r3, r2
 8002206:	d119      	bne.n	800223c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002212:	085b      	lsrs	r3, r3, #1
 8002214:	3b01      	subs	r3, #1
 8002216:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002218:	429a      	cmp	r2, r3
 800221a:	d10f      	bne.n	800223c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002226:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002228:	429a      	cmp	r2, r3
 800222a:	d107      	bne.n	800223c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002238:	429a      	cmp	r2, r3
 800223a:	d001      	beq.n	8002240 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e000      	b.n	8002242 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40023800 	.word	0x40023800

08002250 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e07b      	b.n	800235a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002266:	2b00      	cmp	r3, #0
 8002268:	d108      	bne.n	800227c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002272:	d009      	beq.n	8002288 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	61da      	str	r2, [r3, #28]
 800227a:	e005      	b.n	8002288 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d106      	bne.n	80022a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7fe fd36 	bl	8000d14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2202      	movs	r2, #2
 80022ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80022d0:	431a      	orrs	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022da:	431a      	orrs	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	431a      	orrs	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022f8:	431a      	orrs	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800230c:	ea42 0103 	orr.w	r1, r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002314:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	0c1b      	lsrs	r3, r3, #16
 8002326:	f003 0104 	and.w	r1, r3, #4
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232e:	f003 0210 	and.w	r2, r3, #16
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	69da      	ldr	r2, [r3, #28]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002348:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b088      	sub	sp, #32
 8002366:	af00      	add	r7, sp, #0
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	603b      	str	r3, [r7, #0]
 800236e:	4613      	mov	r3, r2
 8002370:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002372:	f7fe ff3d 	bl	80011f0 <HAL_GetTick>
 8002376:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002378:	88fb      	ldrh	r3, [r7, #6]
 800237a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b01      	cmp	r3, #1
 8002386:	d001      	beq.n	800238c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002388:	2302      	movs	r3, #2
 800238a:	e12a      	b.n	80025e2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d002      	beq.n	8002398 <HAL_SPI_Transmit+0x36>
 8002392:	88fb      	ldrh	r3, [r7, #6]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e122      	b.n	80025e2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d101      	bne.n	80023aa <HAL_SPI_Transmit+0x48>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e11b      	b.n	80025e2 <HAL_SPI_Transmit+0x280>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2203      	movs	r2, #3
 80023b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	88fa      	ldrh	r2, [r7, #6]
 80023ca:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	88fa      	ldrh	r2, [r7, #6]
 80023d0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023f8:	d10f      	bne.n	800241a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002408:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002418:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002424:	2b40      	cmp	r3, #64	@ 0x40
 8002426:	d007      	beq.n	8002438 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002436:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002440:	d152      	bne.n	80024e8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d002      	beq.n	8002450 <HAL_SPI_Transmit+0xee>
 800244a:	8b7b      	ldrh	r3, [r7, #26]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d145      	bne.n	80024dc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002454:	881a      	ldrh	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002460:	1c9a      	adds	r2, r3, #2
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800246a:	b29b      	uxth	r3, r3
 800246c:	3b01      	subs	r3, #1
 800246e:	b29a      	uxth	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002474:	e032      	b.n	80024dc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b02      	cmp	r3, #2
 8002482:	d112      	bne.n	80024aa <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002488:	881a      	ldrh	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002494:	1c9a      	adds	r2, r3, #2
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800249e:	b29b      	uxth	r3, r3
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80024a8:	e018      	b.n	80024dc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024aa:	f7fe fea1 	bl	80011f0 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d803      	bhi.n	80024c2 <HAL_SPI_Transmit+0x160>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c0:	d102      	bne.n	80024c8 <HAL_SPI_Transmit+0x166>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d109      	bne.n	80024dc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e082      	b.n	80025e2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1c7      	bne.n	8002476 <HAL_SPI_Transmit+0x114>
 80024e6:	e053      	b.n	8002590 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d002      	beq.n	80024f6 <HAL_SPI_Transmit+0x194>
 80024f0:	8b7b      	ldrh	r3, [r7, #26]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d147      	bne.n	8002586 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	330c      	adds	r3, #12
 8002500:	7812      	ldrb	r2, [r2, #0]
 8002502:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002512:	b29b      	uxth	r3, r3
 8002514:	3b01      	subs	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800251c:	e033      	b.n	8002586 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b02      	cmp	r3, #2
 800252a:	d113      	bne.n	8002554 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	330c      	adds	r3, #12
 8002536:	7812      	ldrb	r2, [r2, #0]
 8002538:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002548:	b29b      	uxth	r3, r3
 800254a:	3b01      	subs	r3, #1
 800254c:	b29a      	uxth	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002552:	e018      	b.n	8002586 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002554:	f7fe fe4c 	bl	80011f0 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d803      	bhi.n	800256c <HAL_SPI_Transmit+0x20a>
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256a:	d102      	bne.n	8002572 <HAL_SPI_Transmit+0x210>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d109      	bne.n	8002586 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e02d      	b.n	80025e2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800258a:	b29b      	uxth	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1c6      	bne.n	800251e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002590:	69fa      	ldr	r2, [r7, #28]
 8002592:	6839      	ldr	r1, [r7, #0]
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 fa59 	bl	8002a4c <SPI_EndRxTxTransaction>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d002      	beq.n	80025a6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2220      	movs	r2, #32
 80025a4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10a      	bne.n	80025c4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80025e0:	2300      	movs	r3, #0
  }
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3720      	adds	r7, #32
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b08a      	sub	sp, #40	@ 0x28
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	60f8      	str	r0, [r7, #12]
 80025f2:	60b9      	str	r1, [r7, #8]
 80025f4:	607a      	str	r2, [r7, #4]
 80025f6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80025f8:	2301      	movs	r3, #1
 80025fa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025fc:	f7fe fdf8 	bl	80011f0 <HAL_GetTick>
 8002600:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002608:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002610:	887b      	ldrh	r3, [r7, #2]
 8002612:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002614:	7ffb      	ldrb	r3, [r7, #31]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d00c      	beq.n	8002634 <HAL_SPI_TransmitReceive+0x4a>
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002620:	d106      	bne.n	8002630 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d102      	bne.n	8002630 <HAL_SPI_TransmitReceive+0x46>
 800262a:	7ffb      	ldrb	r3, [r7, #31]
 800262c:	2b04      	cmp	r3, #4
 800262e:	d001      	beq.n	8002634 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002630:	2302      	movs	r3, #2
 8002632:	e17f      	b.n	8002934 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d005      	beq.n	8002646 <HAL_SPI_TransmitReceive+0x5c>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d002      	beq.n	8002646 <HAL_SPI_TransmitReceive+0x5c>
 8002640:	887b      	ldrh	r3, [r7, #2]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e174      	b.n	8002934 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002650:	2b01      	cmp	r3, #1
 8002652:	d101      	bne.n	8002658 <HAL_SPI_TransmitReceive+0x6e>
 8002654:	2302      	movs	r3, #2
 8002656:	e16d      	b.n	8002934 <HAL_SPI_TransmitReceive+0x34a>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b04      	cmp	r3, #4
 800266a:	d003      	beq.n	8002674 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2205      	movs	r2, #5
 8002670:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	887a      	ldrh	r2, [r7, #2]
 8002684:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	887a      	ldrh	r2, [r7, #2]
 800268a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	887a      	ldrh	r2, [r7, #2]
 8002696:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	887a      	ldrh	r2, [r7, #2]
 800269c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026b4:	2b40      	cmp	r3, #64	@ 0x40
 80026b6:	d007      	beq.n	80026c8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026d0:	d17e      	bne.n	80027d0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <HAL_SPI_TransmitReceive+0xf6>
 80026da:	8afb      	ldrh	r3, [r7, #22]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d16c      	bne.n	80027ba <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e4:	881a      	ldrh	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f0:	1c9a      	adds	r2, r3, #2
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002704:	e059      	b.n	80027ba <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b02      	cmp	r3, #2
 8002712:	d11b      	bne.n	800274c <HAL_SPI_TransmitReceive+0x162>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002718:	b29b      	uxth	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d016      	beq.n	800274c <HAL_SPI_TransmitReceive+0x162>
 800271e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002720:	2b01      	cmp	r3, #1
 8002722:	d113      	bne.n	800274c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002728:	881a      	ldrh	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002734:	1c9a      	adds	r2, r3, #2
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800273e:	b29b      	uxth	r3, r3
 8002740:	3b01      	subs	r3, #1
 8002742:	b29a      	uxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b01      	cmp	r3, #1
 8002758:	d119      	bne.n	800278e <HAL_SPI_TransmitReceive+0x1a4>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800275e:	b29b      	uxth	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	d014      	beq.n	800278e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800276e:	b292      	uxth	r2, r2
 8002770:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002776:	1c9a      	adds	r2, r3, #2
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002780:	b29b      	uxth	r3, r3
 8002782:	3b01      	subs	r3, #1
 8002784:	b29a      	uxth	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800278a:	2301      	movs	r3, #1
 800278c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800278e:	f7fe fd2f 	bl	80011f0 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800279a:	429a      	cmp	r2, r3
 800279c:	d80d      	bhi.n	80027ba <HAL_SPI_TransmitReceive+0x1d0>
 800279e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a4:	d009      	beq.n	80027ba <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e0bc      	b.n	8002934 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027be:	b29b      	uxth	r3, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1a0      	bne.n	8002706 <HAL_SPI_TransmitReceive+0x11c>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d19b      	bne.n	8002706 <HAL_SPI_TransmitReceive+0x11c>
 80027ce:	e082      	b.n	80028d6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d002      	beq.n	80027de <HAL_SPI_TransmitReceive+0x1f4>
 80027d8:	8afb      	ldrh	r3, [r7, #22]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d171      	bne.n	80028c2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	330c      	adds	r3, #12
 80027e8:	7812      	ldrb	r2, [r2, #0]
 80027ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002804:	e05d      	b.n	80028c2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b02      	cmp	r3, #2
 8002812:	d11c      	bne.n	800284e <HAL_SPI_TransmitReceive+0x264>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002818:	b29b      	uxth	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d017      	beq.n	800284e <HAL_SPI_TransmitReceive+0x264>
 800281e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002820:	2b01      	cmp	r3, #1
 8002822:	d114      	bne.n	800284e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	330c      	adds	r3, #12
 800282e:	7812      	ldrb	r2, [r2, #0]
 8002830:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002836:	1c5a      	adds	r2, r3, #1
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002840:	b29b      	uxth	r3, r3
 8002842:	3b01      	subs	r3, #1
 8002844:	b29a      	uxth	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800284a:	2300      	movs	r3, #0
 800284c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b01      	cmp	r3, #1
 800285a:	d119      	bne.n	8002890 <HAL_SPI_TransmitReceive+0x2a6>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002860:	b29b      	uxth	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d014      	beq.n	8002890 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68da      	ldr	r2, [r3, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002870:	b2d2      	uxtb	r2, r2
 8002872:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002882:	b29b      	uxth	r3, r3
 8002884:	3b01      	subs	r3, #1
 8002886:	b29a      	uxth	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800288c:	2301      	movs	r3, #1
 800288e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002890:	f7fe fcae 	bl	80011f0 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800289c:	429a      	cmp	r2, r3
 800289e:	d803      	bhi.n	80028a8 <HAL_SPI_TransmitReceive+0x2be>
 80028a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a6:	d102      	bne.n	80028ae <HAL_SPI_TransmitReceive+0x2c4>
 80028a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d109      	bne.n	80028c2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e038      	b.n	8002934 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d19c      	bne.n	8002806 <HAL_SPI_TransmitReceive+0x21c>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d197      	bne.n	8002806 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028d6:	6a3a      	ldr	r2, [r7, #32]
 80028d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 f8b6 	bl	8002a4c <SPI_EndRxTxTransaction>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d008      	beq.n	80028f8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2220      	movs	r2, #32
 80028ea:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e01d      	b.n	8002934 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10a      	bne.n	8002916 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002900:	2300      	movs	r3, #0
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	613b      	str	r3, [r7, #16]
 8002914:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002932:	2300      	movs	r3, #0
  }
}
 8002934:	4618      	mov	r0, r3
 8002936:	3728      	adds	r7, #40	@ 0x28
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b088      	sub	sp, #32
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	4613      	mov	r3, r2
 800294a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800294c:	f7fe fc50 	bl	80011f0 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002954:	1a9b      	subs	r3, r3, r2
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	4413      	add	r3, r2
 800295a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800295c:	f7fe fc48 	bl	80011f0 <HAL_GetTick>
 8002960:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002962:	4b39      	ldr	r3, [pc, #228]	@ (8002a48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	015b      	lsls	r3, r3, #5
 8002968:	0d1b      	lsrs	r3, r3, #20
 800296a:	69fa      	ldr	r2, [r7, #28]
 800296c:	fb02 f303 	mul.w	r3, r2, r3
 8002970:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002972:	e054      	b.n	8002a1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297a:	d050      	beq.n	8002a1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800297c:	f7fe fc38 	bl	80011f0 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	69fa      	ldr	r2, [r7, #28]
 8002988:	429a      	cmp	r2, r3
 800298a:	d902      	bls.n	8002992 <SPI_WaitFlagStateUntilTimeout+0x56>
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d13d      	bne.n	8002a0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80029a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029aa:	d111      	bne.n	80029d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029b4:	d004      	beq.n	80029c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029be:	d107      	bne.n	80029d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029d8:	d10f      	bne.n	80029fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80029f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e017      	b.n	8002a3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a14:	2300      	movs	r3, #0
 8002a16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	4013      	ands	r3, r2
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	bf0c      	ite	eq
 8002a2e:	2301      	moveq	r3, #1
 8002a30:	2300      	movne	r3, #0
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	461a      	mov	r2, r3
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d19b      	bne.n	8002974 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3720      	adds	r7, #32
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000000 	.word	0x20000000

08002a4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b088      	sub	sp, #32
 8002a50:	af02      	add	r7, sp, #8
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	2102      	movs	r1, #2
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f7ff ff6a 	bl	800293c <SPI_WaitFlagStateUntilTimeout>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d007      	beq.n	8002a7e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a72:	f043 0220 	orr.w	r2, r3, #32
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e032      	b.n	8002ae4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002aec <SPI_EndRxTxTransaction+0xa0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a1b      	ldr	r2, [pc, #108]	@ (8002af0 <SPI_EndRxTxTransaction+0xa4>)
 8002a84:	fba2 2303 	umull	r2, r3, r2, r3
 8002a88:	0d5b      	lsrs	r3, r3, #21
 8002a8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a8e:	fb02 f303 	mul.w	r3, r2, r3
 8002a92:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a9c:	d112      	bne.n	8002ac4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	2180      	movs	r1, #128	@ 0x80
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f7ff ff47 	bl	800293c <SPI_WaitFlagStateUntilTimeout>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d016      	beq.n	8002ae2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab8:	f043 0220 	orr.w	r2, r3, #32
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e00f      	b.n	8002ae4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00a      	beq.n	8002ae0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	3b01      	subs	r3, #1
 8002ace:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ada:	2b80      	cmp	r3, #128	@ 0x80
 8002adc:	d0f2      	beq.n	8002ac4 <SPI_EndRxTxTransaction+0x78>
 8002ade:	e000      	b.n	8002ae2 <SPI_EndRxTxTransaction+0x96>
        break;
 8002ae0:	bf00      	nop
  }

  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3718      	adds	r7, #24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20000000 	.word	0x20000000
 8002af0:	165e9f81 	.word	0x165e9f81

08002af4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e041      	b.n	8002b8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d106      	bne.n	8002b20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f839 	bl	8002b92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3304      	adds	r3, #4
 8002b30:	4619      	mov	r1, r3
 8002b32:	4610      	mov	r0, r2
 8002b34:	f000 fad2 	bl	80030dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
	...

08002ba8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d001      	beq.n	8002bc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e04e      	b.n	8002c5e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0201 	orr.w	r2, r2, #1
 8002bd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a23      	ldr	r2, [pc, #140]	@ (8002c6c <HAL_TIM_Base_Start_IT+0xc4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d022      	beq.n	8002c28 <HAL_TIM_Base_Start_IT+0x80>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bea:	d01d      	beq.n	8002c28 <HAL_TIM_Base_Start_IT+0x80>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a1f      	ldr	r2, [pc, #124]	@ (8002c70 <HAL_TIM_Base_Start_IT+0xc8>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d018      	beq.n	8002c28 <HAL_TIM_Base_Start_IT+0x80>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a1e      	ldr	r2, [pc, #120]	@ (8002c74 <HAL_TIM_Base_Start_IT+0xcc>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d013      	beq.n	8002c28 <HAL_TIM_Base_Start_IT+0x80>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a1c      	ldr	r2, [pc, #112]	@ (8002c78 <HAL_TIM_Base_Start_IT+0xd0>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d00e      	beq.n	8002c28 <HAL_TIM_Base_Start_IT+0x80>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a1b      	ldr	r2, [pc, #108]	@ (8002c7c <HAL_TIM_Base_Start_IT+0xd4>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d009      	beq.n	8002c28 <HAL_TIM_Base_Start_IT+0x80>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a19      	ldr	r2, [pc, #100]	@ (8002c80 <HAL_TIM_Base_Start_IT+0xd8>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d004      	beq.n	8002c28 <HAL_TIM_Base_Start_IT+0x80>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a18      	ldr	r2, [pc, #96]	@ (8002c84 <HAL_TIM_Base_Start_IT+0xdc>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d111      	bne.n	8002c4c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2b06      	cmp	r3, #6
 8002c38:	d010      	beq.n	8002c5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f042 0201 	orr.w	r2, r2, #1
 8002c48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c4a:	e007      	b.n	8002c5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0201 	orr.w	r2, r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	40010000 	.word	0x40010000
 8002c70:	40000400 	.word	0x40000400
 8002c74:	40000800 	.word	0x40000800
 8002c78:	40000c00 	.word	0x40000c00
 8002c7c:	40010400 	.word	0x40010400
 8002c80:	40014000 	.word	0x40014000
 8002c84:	40001800 	.word	0x40001800

08002c88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e041      	b.n	8002d1e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d106      	bne.n	8002cb4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7fe f878 	bl	8000da4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3304      	adds	r3, #4
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4610      	mov	r0, r2
 8002cc8:	f000 fa08 	bl	80030dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b084      	sub	sp, #16
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d020      	beq.n	8002d8a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d01b      	beq.n	8002d8a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f06f 0202 	mvn.w	r2, #2
 8002d5a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	f003 0303 	and.w	r3, r3, #3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 f995 	bl	80030a0 <HAL_TIM_IC_CaptureCallback>
 8002d76:	e005      	b.n	8002d84 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 f987 	bl	800308c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f998 	bl	80030b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d020      	beq.n	8002dd6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f003 0304 	and.w	r3, r3, #4
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d01b      	beq.n	8002dd6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f06f 0204 	mvn.w	r2, #4
 8002da6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f96f 	bl	80030a0 <HAL_TIM_IC_CaptureCallback>
 8002dc2:	e005      	b.n	8002dd0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 f961 	bl	800308c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f972 	bl	80030b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	f003 0308 	and.w	r3, r3, #8
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d020      	beq.n	8002e22 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d01b      	beq.n	8002e22 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f06f 0208 	mvn.w	r2, #8
 8002df2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2204      	movs	r2, #4
 8002df8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d003      	beq.n	8002e10 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 f949 	bl	80030a0 <HAL_TIM_IC_CaptureCallback>
 8002e0e:	e005      	b.n	8002e1c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 f93b 	bl	800308c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f94c 	bl	80030b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d020      	beq.n	8002e6e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f003 0310 	and.w	r3, r3, #16
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d01b      	beq.n	8002e6e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f06f 0210 	mvn.w	r2, #16
 8002e3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2208      	movs	r2, #8
 8002e44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f923 	bl	80030a0 <HAL_TIM_IC_CaptureCallback>
 8002e5a:	e005      	b.n	8002e68 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 f915 	bl	800308c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f926 	bl	80030b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00c      	beq.n	8002e92 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d007      	beq.n	8002e92 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f06f 0201 	mvn.w	r2, #1
 8002e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7fd fe39 	bl	8000b04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00c      	beq.n	8002eb6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d007      	beq.n	8002eb6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fc47 	bl	8003744 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00c      	beq.n	8002eda <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d007      	beq.n	8002eda <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 f8f7 	bl	80030c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	f003 0320 	and.w	r3, r3, #32
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00c      	beq.n	8002efe <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f003 0320 	and.w	r3, r3, #32
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d007      	beq.n	8002efe <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f06f 0220 	mvn.w	r2, #32
 8002ef6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 fc19 	bl	8003730 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002efe:	bf00      	nop
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
	...

08002f08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f14:	2300      	movs	r3, #0
 8002f16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d101      	bne.n	8002f26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f22:	2302      	movs	r3, #2
 8002f24:	e0ae      	b.n	8003084 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b0c      	cmp	r3, #12
 8002f32:	f200 809f 	bhi.w	8003074 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f36:	a201      	add	r2, pc, #4	@ (adr r2, 8002f3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3c:	08002f71 	.word	0x08002f71
 8002f40:	08003075 	.word	0x08003075
 8002f44:	08003075 	.word	0x08003075
 8002f48:	08003075 	.word	0x08003075
 8002f4c:	08002fb1 	.word	0x08002fb1
 8002f50:	08003075 	.word	0x08003075
 8002f54:	08003075 	.word	0x08003075
 8002f58:	08003075 	.word	0x08003075
 8002f5c:	08002ff3 	.word	0x08002ff3
 8002f60:	08003075 	.word	0x08003075
 8002f64:	08003075 	.word	0x08003075
 8002f68:	08003075 	.word	0x08003075
 8002f6c:	08003033 	.word	0x08003033
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68b9      	ldr	r1, [r7, #8]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 f95c 	bl	8003234 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	699a      	ldr	r2, [r3, #24]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0208 	orr.w	r2, r2, #8
 8002f8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699a      	ldr	r2, [r3, #24]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0204 	bic.w	r2, r2, #4
 8002f9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6999      	ldr	r1, [r3, #24]
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	691a      	ldr	r2, [r3, #16]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	619a      	str	r2, [r3, #24]
      break;
 8002fae:	e064      	b.n	800307a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 f9ac 	bl	8003314 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699a      	ldr	r2, [r3, #24]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	699a      	ldr	r2, [r3, #24]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6999      	ldr	r1, [r3, #24]
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	021a      	lsls	r2, r3, #8
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	619a      	str	r2, [r3, #24]
      break;
 8002ff0:	e043      	b.n	800307a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68b9      	ldr	r1, [r7, #8]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 fa01 	bl	8003400 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	69da      	ldr	r2, [r3, #28]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f042 0208 	orr.w	r2, r2, #8
 800300c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	69da      	ldr	r2, [r3, #28]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0204 	bic.w	r2, r2, #4
 800301c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	69d9      	ldr	r1, [r3, #28]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	430a      	orrs	r2, r1
 800302e:	61da      	str	r2, [r3, #28]
      break;
 8003030:	e023      	b.n	800307a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68b9      	ldr	r1, [r7, #8]
 8003038:	4618      	mov	r0, r3
 800303a:	f000 fa55 	bl	80034e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	69da      	ldr	r2, [r3, #28]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800304c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	69da      	ldr	r2, [r3, #28]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800305c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	69d9      	ldr	r1, [r3, #28]
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	021a      	lsls	r2, r3, #8
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	61da      	str	r2, [r3, #28]
      break;
 8003072:	e002      	b.n	800307a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	75fb      	strb	r3, [r7, #23]
      break;
 8003078:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003082:	7dfb      	ldrb	r3, [r7, #23]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a46      	ldr	r2, [pc, #280]	@ (8003208 <TIM_Base_SetConfig+0x12c>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d013      	beq.n	800311c <TIM_Base_SetConfig+0x40>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030fa:	d00f      	beq.n	800311c <TIM_Base_SetConfig+0x40>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a43      	ldr	r2, [pc, #268]	@ (800320c <TIM_Base_SetConfig+0x130>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d00b      	beq.n	800311c <TIM_Base_SetConfig+0x40>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a42      	ldr	r2, [pc, #264]	@ (8003210 <TIM_Base_SetConfig+0x134>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d007      	beq.n	800311c <TIM_Base_SetConfig+0x40>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a41      	ldr	r2, [pc, #260]	@ (8003214 <TIM_Base_SetConfig+0x138>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d003      	beq.n	800311c <TIM_Base_SetConfig+0x40>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a40      	ldr	r2, [pc, #256]	@ (8003218 <TIM_Base_SetConfig+0x13c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d108      	bne.n	800312e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003122:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	4313      	orrs	r3, r2
 800312c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a35      	ldr	r2, [pc, #212]	@ (8003208 <TIM_Base_SetConfig+0x12c>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d02b      	beq.n	800318e <TIM_Base_SetConfig+0xb2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800313c:	d027      	beq.n	800318e <TIM_Base_SetConfig+0xb2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a32      	ldr	r2, [pc, #200]	@ (800320c <TIM_Base_SetConfig+0x130>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d023      	beq.n	800318e <TIM_Base_SetConfig+0xb2>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a31      	ldr	r2, [pc, #196]	@ (8003210 <TIM_Base_SetConfig+0x134>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d01f      	beq.n	800318e <TIM_Base_SetConfig+0xb2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a30      	ldr	r2, [pc, #192]	@ (8003214 <TIM_Base_SetConfig+0x138>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d01b      	beq.n	800318e <TIM_Base_SetConfig+0xb2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a2f      	ldr	r2, [pc, #188]	@ (8003218 <TIM_Base_SetConfig+0x13c>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d017      	beq.n	800318e <TIM_Base_SetConfig+0xb2>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a2e      	ldr	r2, [pc, #184]	@ (800321c <TIM_Base_SetConfig+0x140>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d013      	beq.n	800318e <TIM_Base_SetConfig+0xb2>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a2d      	ldr	r2, [pc, #180]	@ (8003220 <TIM_Base_SetConfig+0x144>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d00f      	beq.n	800318e <TIM_Base_SetConfig+0xb2>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a2c      	ldr	r2, [pc, #176]	@ (8003224 <TIM_Base_SetConfig+0x148>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00b      	beq.n	800318e <TIM_Base_SetConfig+0xb2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a2b      	ldr	r2, [pc, #172]	@ (8003228 <TIM_Base_SetConfig+0x14c>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d007      	beq.n	800318e <TIM_Base_SetConfig+0xb2>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a2a      	ldr	r2, [pc, #168]	@ (800322c <TIM_Base_SetConfig+0x150>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d003      	beq.n	800318e <TIM_Base_SetConfig+0xb2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a29      	ldr	r2, [pc, #164]	@ (8003230 <TIM_Base_SetConfig+0x154>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d108      	bne.n	80031a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4313      	orrs	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a10      	ldr	r2, [pc, #64]	@ (8003208 <TIM_Base_SetConfig+0x12c>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d003      	beq.n	80031d4 <TIM_Base_SetConfig+0xf8>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a12      	ldr	r2, [pc, #72]	@ (8003218 <TIM_Base_SetConfig+0x13c>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d103      	bne.n	80031dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d105      	bne.n	80031fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f023 0201 	bic.w	r2, r3, #1
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	611a      	str	r2, [r3, #16]
  }
}
 80031fa:	bf00      	nop
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	40010000 	.word	0x40010000
 800320c:	40000400 	.word	0x40000400
 8003210:	40000800 	.word	0x40000800
 8003214:	40000c00 	.word	0x40000c00
 8003218:	40010400 	.word	0x40010400
 800321c:	40014000 	.word	0x40014000
 8003220:	40014400 	.word	0x40014400
 8003224:	40014800 	.word	0x40014800
 8003228:	40001800 	.word	0x40001800
 800322c:	40001c00 	.word	0x40001c00
 8003230:	40002000 	.word	0x40002000

08003234 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003234:	b480      	push	{r7}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	f023 0201 	bic.w	r2, r3, #1
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f023 0303 	bic.w	r3, r3, #3
 800326a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f023 0302 	bic.w	r3, r3, #2
 800327c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	4313      	orrs	r3, r2
 8003286:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a20      	ldr	r2, [pc, #128]	@ (800330c <TIM_OC1_SetConfig+0xd8>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d003      	beq.n	8003298 <TIM_OC1_SetConfig+0x64>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a1f      	ldr	r2, [pc, #124]	@ (8003310 <TIM_OC1_SetConfig+0xdc>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d10c      	bne.n	80032b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f023 0308 	bic.w	r3, r3, #8
 800329e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f023 0304 	bic.w	r3, r3, #4
 80032b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a15      	ldr	r2, [pc, #84]	@ (800330c <TIM_OC1_SetConfig+0xd8>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d003      	beq.n	80032c2 <TIM_OC1_SetConfig+0x8e>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a14      	ldr	r2, [pc, #80]	@ (8003310 <TIM_OC1_SetConfig+0xdc>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d111      	bne.n	80032e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80032d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	4313      	orrs	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	621a      	str	r2, [r3, #32]
}
 8003300:	bf00      	nop
 8003302:	371c      	adds	r7, #28
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	40010000 	.word	0x40010000
 8003310:	40010400 	.word	0x40010400

08003314 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003314:	b480      	push	{r7}
 8003316:	b087      	sub	sp, #28
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	f023 0210 	bic.w	r2, r3, #16
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800334a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	021b      	lsls	r3, r3, #8
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	4313      	orrs	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	f023 0320 	bic.w	r3, r3, #32
 800335e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	4313      	orrs	r3, r2
 800336a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a22      	ldr	r2, [pc, #136]	@ (80033f8 <TIM_OC2_SetConfig+0xe4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d003      	beq.n	800337c <TIM_OC2_SetConfig+0x68>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a21      	ldr	r2, [pc, #132]	@ (80033fc <TIM_OC2_SetConfig+0xe8>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d10d      	bne.n	8003398 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003382:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	4313      	orrs	r3, r2
 800338e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003396:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a17      	ldr	r2, [pc, #92]	@ (80033f8 <TIM_OC2_SetConfig+0xe4>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d003      	beq.n	80033a8 <TIM_OC2_SetConfig+0x94>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a16      	ldr	r2, [pc, #88]	@ (80033fc <TIM_OC2_SetConfig+0xe8>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d113      	bne.n	80033d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80033ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80033b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	621a      	str	r2, [r3, #32]
}
 80033ea:	bf00      	nop
 80033ec:	371c      	adds	r7, #28
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	40010000 	.word	0x40010000
 80033fc:	40010400 	.word	0x40010400

08003400 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003400:	b480      	push	{r7}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800342e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f023 0303 	bic.w	r3, r3, #3
 8003436:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	4313      	orrs	r3, r2
 8003440:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003448:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	021b      	lsls	r3, r3, #8
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	4313      	orrs	r3, r2
 8003454:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a21      	ldr	r2, [pc, #132]	@ (80034e0 <TIM_OC3_SetConfig+0xe0>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d003      	beq.n	8003466 <TIM_OC3_SetConfig+0x66>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a20      	ldr	r2, [pc, #128]	@ (80034e4 <TIM_OC3_SetConfig+0xe4>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d10d      	bne.n	8003482 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800346c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	021b      	lsls	r3, r3, #8
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	4313      	orrs	r3, r2
 8003478:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003480:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a16      	ldr	r2, [pc, #88]	@ (80034e0 <TIM_OC3_SetConfig+0xe0>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d003      	beq.n	8003492 <TIM_OC3_SetConfig+0x92>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a15      	ldr	r2, [pc, #84]	@ (80034e4 <TIM_OC3_SetConfig+0xe4>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d113      	bne.n	80034ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003498:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80034a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	621a      	str	r2, [r3, #32]
}
 80034d4:	bf00      	nop
 80034d6:	371c      	adds	r7, #28
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	40010000 	.word	0x40010000
 80034e4:	40010400 	.word	0x40010400

080034e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800351e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	021b      	lsls	r3, r3, #8
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	4313      	orrs	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003532:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	031b      	lsls	r3, r3, #12
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	4313      	orrs	r3, r2
 800353e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a12      	ldr	r2, [pc, #72]	@ (800358c <TIM_OC4_SetConfig+0xa4>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d003      	beq.n	8003550 <TIM_OC4_SetConfig+0x68>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a11      	ldr	r2, [pc, #68]	@ (8003590 <TIM_OC4_SetConfig+0xa8>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d109      	bne.n	8003564 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003556:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	019b      	lsls	r3, r3, #6
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	4313      	orrs	r3, r2
 8003562:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	621a      	str	r2, [r3, #32]
}
 800357e:	bf00      	nop
 8003580:	371c      	adds	r7, #28
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	40010000 	.word	0x40010000
 8003590:	40010400 	.word	0x40010400

08003594 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035a8:	2302      	movs	r3, #2
 80035aa:	e05a      	b.n	8003662 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4313      	orrs	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a21      	ldr	r2, [pc, #132]	@ (8003670 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d022      	beq.n	8003636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035f8:	d01d      	beq.n	8003636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a1d      	ldr	r2, [pc, #116]	@ (8003674 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d018      	beq.n	8003636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a1b      	ldr	r2, [pc, #108]	@ (8003678 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d013      	beq.n	8003636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a1a      	ldr	r2, [pc, #104]	@ (800367c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d00e      	beq.n	8003636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a18      	ldr	r2, [pc, #96]	@ (8003680 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d009      	beq.n	8003636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a17      	ldr	r2, [pc, #92]	@ (8003684 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d004      	beq.n	8003636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a15      	ldr	r2, [pc, #84]	@ (8003688 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d10c      	bne.n	8003650 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800363c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	4313      	orrs	r3, r2
 8003646:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	40010000 	.word	0x40010000
 8003674:	40000400 	.word	0x40000400
 8003678:	40000800 	.word	0x40000800
 800367c:	40000c00 	.word	0x40000c00
 8003680:	40010400 	.word	0x40010400
 8003684:	40014000 	.word	0x40014000
 8003688:	40001800 	.word	0x40001800

0800368c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003696:	2300      	movs	r3, #0
 8003698:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d101      	bne.n	80036a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80036a4:	2302      	movs	r3, #2
 80036a6:	e03d      	b.n	8003724 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	4313      	orrs	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	4313      	orrs	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e042      	b.n	80037f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fd fb6c 	bl	8000e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2224      	movs	r2, #36	@ 0x24
 8003788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800379a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f973 	bl	8003a88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	691a      	ldr	r2, [r3, #16]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	695a      	ldr	r2, [r3, #20]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80037c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68da      	ldr	r2, [r3, #12]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2220      	movs	r2, #32
 80037dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b08a      	sub	sp, #40	@ 0x28
 80037fc:	af02      	add	r7, sp, #8
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	603b      	str	r3, [r7, #0]
 8003804:	4613      	mov	r3, r2
 8003806:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b20      	cmp	r3, #32
 8003816:	d175      	bne.n	8003904 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <HAL_UART_Transmit+0x2c>
 800381e:	88fb      	ldrh	r3, [r7, #6]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e06e      	b.n	8003906 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2221      	movs	r2, #33	@ 0x21
 8003832:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003836:	f7fd fcdb 	bl	80011f0 <HAL_GetTick>
 800383a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	88fa      	ldrh	r2, [r7, #6]
 8003840:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	88fa      	ldrh	r2, [r7, #6]
 8003846:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003850:	d108      	bne.n	8003864 <HAL_UART_Transmit+0x6c>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d104      	bne.n	8003864 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800385a:	2300      	movs	r3, #0
 800385c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	61bb      	str	r3, [r7, #24]
 8003862:	e003      	b.n	800386c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003868:	2300      	movs	r3, #0
 800386a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800386c:	e02e      	b.n	80038cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2200      	movs	r2, #0
 8003876:	2180      	movs	r1, #128	@ 0x80
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f848 	bl	800390e <UART_WaitOnFlagUntilTimeout>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e03a      	b.n	8003906 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10b      	bne.n	80038ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	881b      	ldrh	r3, [r3, #0]
 800389a:	461a      	mov	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	3302      	adds	r3, #2
 80038aa:	61bb      	str	r3, [r7, #24]
 80038ac:	e007      	b.n	80038be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	781a      	ldrb	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	3301      	adds	r3, #1
 80038bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1cb      	bne.n	800386e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2200      	movs	r2, #0
 80038de:	2140      	movs	r1, #64	@ 0x40
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 f814 	bl	800390e <UART_WaitOnFlagUntilTimeout>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e006      	b.n	8003906 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003900:	2300      	movs	r3, #0
 8003902:	e000      	b.n	8003906 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003904:	2302      	movs	r3, #2
  }
}
 8003906:	4618      	mov	r0, r3
 8003908:	3720      	adds	r7, #32
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b086      	sub	sp, #24
 8003912:	af00      	add	r7, sp, #0
 8003914:	60f8      	str	r0, [r7, #12]
 8003916:	60b9      	str	r1, [r7, #8]
 8003918:	603b      	str	r3, [r7, #0]
 800391a:	4613      	mov	r3, r2
 800391c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800391e:	e03b      	b.n	8003998 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003920:	6a3b      	ldr	r3, [r7, #32]
 8003922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003926:	d037      	beq.n	8003998 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003928:	f7fd fc62 	bl	80011f0 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	6a3a      	ldr	r2, [r7, #32]
 8003934:	429a      	cmp	r2, r3
 8003936:	d302      	bcc.n	800393e <UART_WaitOnFlagUntilTimeout+0x30>
 8003938:	6a3b      	ldr	r3, [r7, #32]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e03a      	b.n	80039b8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b00      	cmp	r3, #0
 800394e:	d023      	beq.n	8003998 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2b80      	cmp	r3, #128	@ 0x80
 8003954:	d020      	beq.n	8003998 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2b40      	cmp	r3, #64	@ 0x40
 800395a:	d01d      	beq.n	8003998 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b08      	cmp	r3, #8
 8003968:	d116      	bne.n	8003998 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800396a:	2300      	movs	r3, #0
 800396c:	617b      	str	r3, [r7, #20]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	617b      	str	r3, [r7, #20]
 800397e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 f81d 	bl	80039c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2208      	movs	r2, #8
 800398a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e00f      	b.n	80039b8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	4013      	ands	r3, r2
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	bf0c      	ite	eq
 80039a8:	2301      	moveq	r3, #1
 80039aa:	2300      	movne	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	461a      	mov	r2, r3
 80039b0:	79fb      	ldrb	r3, [r7, #7]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d0b4      	beq.n	8003920 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3718      	adds	r7, #24
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b095      	sub	sp, #84	@ 0x54
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	330c      	adds	r3, #12
 80039ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039d2:	e853 3f00 	ldrex	r3, [r3]
 80039d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80039d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	330c      	adds	r3, #12
 80039e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039e8:	643a      	str	r2, [r7, #64]	@ 0x40
 80039ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80039ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039f0:	e841 2300 	strex	r3, r2, [r1]
 80039f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80039f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1e5      	bne.n	80039c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3314      	adds	r3, #20
 8003a02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	e853 3f00 	ldrex	r3, [r3]
 8003a0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f023 0301 	bic.w	r3, r3, #1
 8003a12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3314      	adds	r3, #20
 8003a1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a24:	e841 2300 	strex	r3, r2, [r1]
 8003a28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1e5      	bne.n	80039fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d119      	bne.n	8003a6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	330c      	adds	r3, #12
 8003a3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	e853 3f00 	ldrex	r3, [r3]
 8003a46:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	f023 0310 	bic.w	r3, r3, #16
 8003a4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	330c      	adds	r3, #12
 8003a56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a58:	61ba      	str	r2, [r7, #24]
 8003a5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5c:	6979      	ldr	r1, [r7, #20]
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	e841 2300 	strex	r3, r2, [r1]
 8003a64:	613b      	str	r3, [r7, #16]
   return(result);
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1e5      	bne.n	8003a38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003a7a:	bf00      	nop
 8003a7c:	3754      	adds	r7, #84	@ 0x54
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
	...

08003a88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a8c:	b0c0      	sub	sp, #256	@ 0x100
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa4:	68d9      	ldr	r1, [r3, #12]
 8003aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	ea40 0301 	orr.w	r3, r0, r1
 8003ab0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003ae0:	f021 010c 	bic.w	r1, r1, #12
 8003ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003aee:	430b      	orrs	r3, r1
 8003af0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b02:	6999      	ldr	r1, [r3, #24]
 8003b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	ea40 0301 	orr.w	r3, r0, r1
 8003b0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	4b8f      	ldr	r3, [pc, #572]	@ (8003d54 <UART_SetConfig+0x2cc>)
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d005      	beq.n	8003b28 <UART_SetConfig+0xa0>
 8003b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	4b8d      	ldr	r3, [pc, #564]	@ (8003d58 <UART_SetConfig+0x2d0>)
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d104      	bne.n	8003b32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b28:	f7fd ff04 	bl	8001934 <HAL_RCC_GetPCLK2Freq>
 8003b2c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003b30:	e003      	b.n	8003b3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b32:	f7fd feeb 	bl	800190c <HAL_RCC_GetPCLK1Freq>
 8003b36:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b44:	f040 810c 	bne.w	8003d60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b52:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003b56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003b5a:	4622      	mov	r2, r4
 8003b5c:	462b      	mov	r3, r5
 8003b5e:	1891      	adds	r1, r2, r2
 8003b60:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003b62:	415b      	adcs	r3, r3
 8003b64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b6a:	4621      	mov	r1, r4
 8003b6c:	eb12 0801 	adds.w	r8, r2, r1
 8003b70:	4629      	mov	r1, r5
 8003b72:	eb43 0901 	adc.w	r9, r3, r1
 8003b76:	f04f 0200 	mov.w	r2, #0
 8003b7a:	f04f 0300 	mov.w	r3, #0
 8003b7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b8a:	4690      	mov	r8, r2
 8003b8c:	4699      	mov	r9, r3
 8003b8e:	4623      	mov	r3, r4
 8003b90:	eb18 0303 	adds.w	r3, r8, r3
 8003b94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b98:	462b      	mov	r3, r5
 8003b9a:	eb49 0303 	adc.w	r3, r9, r3
 8003b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003bae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003bb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	18db      	adds	r3, r3, r3
 8003bba:	653b      	str	r3, [r7, #80]	@ 0x50
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	eb42 0303 	adc.w	r3, r2, r3
 8003bc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003bc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003bc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003bcc:	f7fc fb78 	bl	80002c0 <__aeabi_uldivmod>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4b61      	ldr	r3, [pc, #388]	@ (8003d5c <UART_SetConfig+0x2d4>)
 8003bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8003bda:	095b      	lsrs	r3, r3, #5
 8003bdc:	011c      	lsls	r4, r3, #4
 8003bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003be2:	2200      	movs	r2, #0
 8003be4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003be8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003bec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003bf0:	4642      	mov	r2, r8
 8003bf2:	464b      	mov	r3, r9
 8003bf4:	1891      	adds	r1, r2, r2
 8003bf6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003bf8:	415b      	adcs	r3, r3
 8003bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c00:	4641      	mov	r1, r8
 8003c02:	eb12 0a01 	adds.w	sl, r2, r1
 8003c06:	4649      	mov	r1, r9
 8003c08:	eb43 0b01 	adc.w	fp, r3, r1
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c20:	4692      	mov	sl, r2
 8003c22:	469b      	mov	fp, r3
 8003c24:	4643      	mov	r3, r8
 8003c26:	eb1a 0303 	adds.w	r3, sl, r3
 8003c2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c2e:	464b      	mov	r3, r9
 8003c30:	eb4b 0303 	adc.w	r3, fp, r3
 8003c34:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c44:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003c48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	18db      	adds	r3, r3, r3
 8003c50:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c52:	4613      	mov	r3, r2
 8003c54:	eb42 0303 	adc.w	r3, r2, r3
 8003c58:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003c5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003c62:	f7fc fb2d 	bl	80002c0 <__aeabi_uldivmod>
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	4611      	mov	r1, r2
 8003c6c:	4b3b      	ldr	r3, [pc, #236]	@ (8003d5c <UART_SetConfig+0x2d4>)
 8003c6e:	fba3 2301 	umull	r2, r3, r3, r1
 8003c72:	095b      	lsrs	r3, r3, #5
 8003c74:	2264      	movs	r2, #100	@ 0x64
 8003c76:	fb02 f303 	mul.w	r3, r2, r3
 8003c7a:	1acb      	subs	r3, r1, r3
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003c82:	4b36      	ldr	r3, [pc, #216]	@ (8003d5c <UART_SetConfig+0x2d4>)
 8003c84:	fba3 2302 	umull	r2, r3, r3, r2
 8003c88:	095b      	lsrs	r3, r3, #5
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003c90:	441c      	add	r4, r3
 8003c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c96:	2200      	movs	r2, #0
 8003c98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c9c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003ca0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003ca4:	4642      	mov	r2, r8
 8003ca6:	464b      	mov	r3, r9
 8003ca8:	1891      	adds	r1, r2, r2
 8003caa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003cac:	415b      	adcs	r3, r3
 8003cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003cb4:	4641      	mov	r1, r8
 8003cb6:	1851      	adds	r1, r2, r1
 8003cb8:	6339      	str	r1, [r7, #48]	@ 0x30
 8003cba:	4649      	mov	r1, r9
 8003cbc:	414b      	adcs	r3, r1
 8003cbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cc0:	f04f 0200 	mov.w	r2, #0
 8003cc4:	f04f 0300 	mov.w	r3, #0
 8003cc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003ccc:	4659      	mov	r1, fp
 8003cce:	00cb      	lsls	r3, r1, #3
 8003cd0:	4651      	mov	r1, sl
 8003cd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cd6:	4651      	mov	r1, sl
 8003cd8:	00ca      	lsls	r2, r1, #3
 8003cda:	4610      	mov	r0, r2
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4603      	mov	r3, r0
 8003ce0:	4642      	mov	r2, r8
 8003ce2:	189b      	adds	r3, r3, r2
 8003ce4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ce8:	464b      	mov	r3, r9
 8003cea:	460a      	mov	r2, r1
 8003cec:	eb42 0303 	adc.w	r3, r2, r3
 8003cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d00:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003d04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d08:	460b      	mov	r3, r1
 8003d0a:	18db      	adds	r3, r3, r3
 8003d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d0e:	4613      	mov	r3, r2
 8003d10:	eb42 0303 	adc.w	r3, r2, r3
 8003d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003d1e:	f7fc facf 	bl	80002c0 <__aeabi_uldivmod>
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	4b0d      	ldr	r3, [pc, #52]	@ (8003d5c <UART_SetConfig+0x2d4>)
 8003d28:	fba3 1302 	umull	r1, r3, r3, r2
 8003d2c:	095b      	lsrs	r3, r3, #5
 8003d2e:	2164      	movs	r1, #100	@ 0x64
 8003d30:	fb01 f303 	mul.w	r3, r1, r3
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	3332      	adds	r3, #50	@ 0x32
 8003d3a:	4a08      	ldr	r2, [pc, #32]	@ (8003d5c <UART_SetConfig+0x2d4>)
 8003d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d40:	095b      	lsrs	r3, r3, #5
 8003d42:	f003 0207 	and.w	r2, r3, #7
 8003d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4422      	add	r2, r4
 8003d4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d50:	e106      	b.n	8003f60 <UART_SetConfig+0x4d8>
 8003d52:	bf00      	nop
 8003d54:	40011000 	.word	0x40011000
 8003d58:	40011400 	.word	0x40011400
 8003d5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d64:	2200      	movs	r2, #0
 8003d66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d6a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003d6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003d72:	4642      	mov	r2, r8
 8003d74:	464b      	mov	r3, r9
 8003d76:	1891      	adds	r1, r2, r2
 8003d78:	6239      	str	r1, [r7, #32]
 8003d7a:	415b      	adcs	r3, r3
 8003d7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d82:	4641      	mov	r1, r8
 8003d84:	1854      	adds	r4, r2, r1
 8003d86:	4649      	mov	r1, r9
 8003d88:	eb43 0501 	adc.w	r5, r3, r1
 8003d8c:	f04f 0200 	mov.w	r2, #0
 8003d90:	f04f 0300 	mov.w	r3, #0
 8003d94:	00eb      	lsls	r3, r5, #3
 8003d96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d9a:	00e2      	lsls	r2, r4, #3
 8003d9c:	4614      	mov	r4, r2
 8003d9e:	461d      	mov	r5, r3
 8003da0:	4643      	mov	r3, r8
 8003da2:	18e3      	adds	r3, r4, r3
 8003da4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003da8:	464b      	mov	r3, r9
 8003daa:	eb45 0303 	adc.w	r3, r5, r3
 8003dae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003dbe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003dc2:	f04f 0200 	mov.w	r2, #0
 8003dc6:	f04f 0300 	mov.w	r3, #0
 8003dca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003dce:	4629      	mov	r1, r5
 8003dd0:	008b      	lsls	r3, r1, #2
 8003dd2:	4621      	mov	r1, r4
 8003dd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dd8:	4621      	mov	r1, r4
 8003dda:	008a      	lsls	r2, r1, #2
 8003ddc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003de0:	f7fc fa6e 	bl	80002c0 <__aeabi_uldivmod>
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	4b60      	ldr	r3, [pc, #384]	@ (8003f6c <UART_SetConfig+0x4e4>)
 8003dea:	fba3 2302 	umull	r2, r3, r3, r2
 8003dee:	095b      	lsrs	r3, r3, #5
 8003df0:	011c      	lsls	r4, r3, #4
 8003df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003df6:	2200      	movs	r2, #0
 8003df8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003dfc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003e04:	4642      	mov	r2, r8
 8003e06:	464b      	mov	r3, r9
 8003e08:	1891      	adds	r1, r2, r2
 8003e0a:	61b9      	str	r1, [r7, #24]
 8003e0c:	415b      	adcs	r3, r3
 8003e0e:	61fb      	str	r3, [r7, #28]
 8003e10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e14:	4641      	mov	r1, r8
 8003e16:	1851      	adds	r1, r2, r1
 8003e18:	6139      	str	r1, [r7, #16]
 8003e1a:	4649      	mov	r1, r9
 8003e1c:	414b      	adcs	r3, r1
 8003e1e:	617b      	str	r3, [r7, #20]
 8003e20:	f04f 0200 	mov.w	r2, #0
 8003e24:	f04f 0300 	mov.w	r3, #0
 8003e28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e2c:	4659      	mov	r1, fp
 8003e2e:	00cb      	lsls	r3, r1, #3
 8003e30:	4651      	mov	r1, sl
 8003e32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e36:	4651      	mov	r1, sl
 8003e38:	00ca      	lsls	r2, r1, #3
 8003e3a:	4610      	mov	r0, r2
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4603      	mov	r3, r0
 8003e40:	4642      	mov	r2, r8
 8003e42:	189b      	adds	r3, r3, r2
 8003e44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e48:	464b      	mov	r3, r9
 8003e4a:	460a      	mov	r2, r1
 8003e4c:	eb42 0303 	adc.w	r3, r2, r3
 8003e50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e5e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003e60:	f04f 0200 	mov.w	r2, #0
 8003e64:	f04f 0300 	mov.w	r3, #0
 8003e68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003e6c:	4649      	mov	r1, r9
 8003e6e:	008b      	lsls	r3, r1, #2
 8003e70:	4641      	mov	r1, r8
 8003e72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e76:	4641      	mov	r1, r8
 8003e78:	008a      	lsls	r2, r1, #2
 8003e7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003e7e:	f7fc fa1f 	bl	80002c0 <__aeabi_uldivmod>
 8003e82:	4602      	mov	r2, r0
 8003e84:	460b      	mov	r3, r1
 8003e86:	4611      	mov	r1, r2
 8003e88:	4b38      	ldr	r3, [pc, #224]	@ (8003f6c <UART_SetConfig+0x4e4>)
 8003e8a:	fba3 2301 	umull	r2, r3, r3, r1
 8003e8e:	095b      	lsrs	r3, r3, #5
 8003e90:	2264      	movs	r2, #100	@ 0x64
 8003e92:	fb02 f303 	mul.w	r3, r2, r3
 8003e96:	1acb      	subs	r3, r1, r3
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	3332      	adds	r3, #50	@ 0x32
 8003e9c:	4a33      	ldr	r2, [pc, #204]	@ (8003f6c <UART_SetConfig+0x4e4>)
 8003e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea2:	095b      	lsrs	r3, r3, #5
 8003ea4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ea8:	441c      	add	r4, r3
 8003eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003eae:	2200      	movs	r2, #0
 8003eb0:	673b      	str	r3, [r7, #112]	@ 0x70
 8003eb2:	677a      	str	r2, [r7, #116]	@ 0x74
 8003eb4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003eb8:	4642      	mov	r2, r8
 8003eba:	464b      	mov	r3, r9
 8003ebc:	1891      	adds	r1, r2, r2
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	415b      	adcs	r3, r3
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ec8:	4641      	mov	r1, r8
 8003eca:	1851      	adds	r1, r2, r1
 8003ecc:	6039      	str	r1, [r7, #0]
 8003ece:	4649      	mov	r1, r9
 8003ed0:	414b      	adcs	r3, r1
 8003ed2:	607b      	str	r3, [r7, #4]
 8003ed4:	f04f 0200 	mov.w	r2, #0
 8003ed8:	f04f 0300 	mov.w	r3, #0
 8003edc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ee0:	4659      	mov	r1, fp
 8003ee2:	00cb      	lsls	r3, r1, #3
 8003ee4:	4651      	mov	r1, sl
 8003ee6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eea:	4651      	mov	r1, sl
 8003eec:	00ca      	lsls	r2, r1, #3
 8003eee:	4610      	mov	r0, r2
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	4642      	mov	r2, r8
 8003ef6:	189b      	adds	r3, r3, r2
 8003ef8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003efa:	464b      	mov	r3, r9
 8003efc:	460a      	mov	r2, r1
 8003efe:	eb42 0303 	adc.w	r3, r2, r3
 8003f02:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f0e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003f1c:	4649      	mov	r1, r9
 8003f1e:	008b      	lsls	r3, r1, #2
 8003f20:	4641      	mov	r1, r8
 8003f22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f26:	4641      	mov	r1, r8
 8003f28:	008a      	lsls	r2, r1, #2
 8003f2a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003f2e:	f7fc f9c7 	bl	80002c0 <__aeabi_uldivmod>
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	4b0d      	ldr	r3, [pc, #52]	@ (8003f6c <UART_SetConfig+0x4e4>)
 8003f38:	fba3 1302 	umull	r1, r3, r3, r2
 8003f3c:	095b      	lsrs	r3, r3, #5
 8003f3e:	2164      	movs	r1, #100	@ 0x64
 8003f40:	fb01 f303 	mul.w	r3, r1, r3
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	011b      	lsls	r3, r3, #4
 8003f48:	3332      	adds	r3, #50	@ 0x32
 8003f4a:	4a08      	ldr	r2, [pc, #32]	@ (8003f6c <UART_SetConfig+0x4e4>)
 8003f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f50:	095b      	lsrs	r3, r3, #5
 8003f52:	f003 020f 	and.w	r2, r3, #15
 8003f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4422      	add	r2, r4
 8003f5e:	609a      	str	r2, [r3, #8]
}
 8003f60:	bf00      	nop
 8003f62:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003f66:	46bd      	mov	sp, r7
 8003f68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f6c:	51eb851f 	.word	0x51eb851f

08003f70 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003f74:	4904      	ldr	r1, [pc, #16]	@ (8003f88 <MX_FATFS_Init+0x18>)
 8003f76:	4805      	ldr	r0, [pc, #20]	@ (8003f8c <MX_FATFS_Init+0x1c>)
 8003f78:	f002 fde4 	bl	8006b44 <FATFS_LinkDriver>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	461a      	mov	r2, r3
 8003f80:	4b03      	ldr	r3, [pc, #12]	@ (8003f90 <MX_FATFS_Init+0x20>)
 8003f82:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003f84:	bf00      	nop
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	20000534 	.word	0x20000534
 8003f8c:	2000000c 	.word	0x2000000c
 8003f90:	20000530 	.word	0x20000530

08003f94 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003f98:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	4603      	mov	r3, r0
 8003fac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINEStat = STA_NOINIT;
 8003fae:	79fb      	ldrb	r3, [r7, #7]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 f9d3 	bl	800435c <USER_SPI_initialize>
 8003fb6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 8003fca:	79fb      	ldrb	r3, [r7, #7]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 fab1 	bl	8004534 <USER_SPI_status>
 8003fd2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60b9      	str	r1, [r7, #8]
 8003fe4:	607a      	str	r2, [r7, #4]
 8003fe6:	603b      	str	r3, [r7, #0]
 8003fe8:	4603      	mov	r3, r0
 8003fea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8003fec:	7bf8      	ldrb	r0, [r7, #15]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	68b9      	ldr	r1, [r7, #8]
 8003ff4:	f000 fab4 	bl	8004560 <USER_SPI_read>
 8003ff8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b084      	sub	sp, #16
 8004006:	af00      	add	r7, sp, #0
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	603b      	str	r3, [r7, #0]
 800400e:	4603      	mov	r3, r0
 8004010:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8004012:	7bf8      	ldrb	r0, [r7, #15]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	68b9      	ldr	r1, [r7, #8]
 800401a:	f000 fb07 	bl	800462c <USER_SPI_write>
 800401e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	4603      	mov	r3, r0
 8004030:	603a      	str	r2, [r7, #0]
 8004032:	71fb      	strb	r3, [r7, #7]
 8004034:	460b      	mov	r3, r1
 8004036:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 8004038:	79b9      	ldrb	r1, [r7, #6]
 800403a:	79fb      	ldrb	r3, [r7, #7]
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f000 fb70 	bl	8004724 <USER_SPI_ioctl>
 8004044:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004046:	4618      	mov	r0, r3
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
	...

08004050 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8004058:	f7fd f8ca 	bl	80011f0 <HAL_GetTick>
 800405c:	4603      	mov	r3, r0
 800405e:	4a04      	ldr	r2, [pc, #16]	@ (8004070 <SPI_Timer_On+0x20>)
 8004060:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8004062:	4a04      	ldr	r2, [pc, #16]	@ (8004074 <SPI_Timer_On+0x24>)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6013      	str	r3, [r2, #0]
}
 8004068:	bf00      	nop
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	2000053c 	.word	0x2000053c
 8004074:	20000540 	.word	0x20000540

08004078 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800407c:	f7fd f8b8 	bl	80011f0 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	4b06      	ldr	r3, [pc, #24]	@ (800409c <SPI_Timer_Status+0x24>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	1ad2      	subs	r2, r2, r3
 8004088:	4b05      	ldr	r3, [pc, #20]	@ (80040a0 <SPI_Timer_Status+0x28>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	429a      	cmp	r2, r3
 800408e:	bf34      	ite	cc
 8004090:	2301      	movcc	r3, #1
 8004092:	2300      	movcs	r3, #0
 8004094:	b2db      	uxtb	r3, r3
}
 8004096:	4618      	mov	r0, r3
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	2000053c 	.word	0x2000053c
 80040a0:	20000540 	.word	0x20000540

080040a4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af02      	add	r7, sp, #8
 80040aa:	4603      	mov	r3, r0
 80040ac:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80040ae:	f107 020f 	add.w	r2, r7, #15
 80040b2:	1df9      	adds	r1, r7, #7
 80040b4:	2332      	movs	r3, #50	@ 0x32
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	2301      	movs	r3, #1
 80040ba:	4804      	ldr	r0, [pc, #16]	@ (80040cc <xchg_spi+0x28>)
 80040bc:	f7fe fa95 	bl	80025ea <HAL_SPI_TransmitReceive>
    return rxDat;
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	200002e8 	.word	0x200002e8

080040d0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80040d0:	b590      	push	{r4, r7, lr}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80040da:	2300      	movs	r3, #0
 80040dc:	60fb      	str	r3, [r7, #12]
 80040de:	e00a      	b.n	80040f6 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	18d4      	adds	r4, r2, r3
 80040e6:	20ff      	movs	r0, #255	@ 0xff
 80040e8:	f7ff ffdc 	bl	80040a4 <xchg_spi>
 80040ec:	4603      	mov	r3, r0
 80040ee:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	3301      	adds	r3, #1
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d3f0      	bcc.n	80040e0 <rcvr_spi_multi+0x10>
	}
}
 80040fe:	bf00      	nop
 8004100:	bf00      	nop
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	bd90      	pop	{r4, r7, pc}

08004108 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	b29a      	uxth	r2, r3
 8004116:	f04f 33ff 	mov.w	r3, #4294967295
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	4803      	ldr	r0, [pc, #12]	@ (800412c <xmit_spi_multi+0x24>)
 800411e:	f7fe f920 	bl	8002362 <HAL_SPI_Transmit>
}
 8004122:	bf00      	nop
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	200002e8 	.word	0x200002e8

08004130 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8004138:	f7fd f85a 	bl	80011f0 <HAL_GetTick>
 800413c:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8004142:	20ff      	movs	r0, #255	@ 0xff
 8004144:	f7ff ffae 	bl	80040a4 <xchg_spi>
 8004148:	4603      	mov	r3, r0
 800414a:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800414c:	7bfb      	ldrb	r3, [r7, #15]
 800414e:	2bff      	cmp	r3, #255	@ 0xff
 8004150:	d007      	beq.n	8004162 <wait_ready+0x32>
 8004152:	f7fd f84d 	bl	80011f0 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	429a      	cmp	r2, r3
 8004160:	d8ef      	bhi.n	8004142 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8004162:	7bfb      	ldrb	r3, [r7, #15]
 8004164:	2bff      	cmp	r3, #255	@ 0xff
 8004166:	bf0c      	ite	eq
 8004168:	2301      	moveq	r3, #1
 800416a:	2300      	movne	r3, #0
 800416c:	b2db      	uxtb	r3, r3
}
 800416e:	4618      	mov	r0, r3
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
	...

08004178 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800417c:	2201      	movs	r2, #1
 800417e:	2110      	movs	r1, #16
 8004180:	4803      	ldr	r0, [pc, #12]	@ (8004190 <despiselect+0x18>)
 8004182:	f7fd fab7 	bl	80016f4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8004186:	20ff      	movs	r0, #255	@ 0xff
 8004188:	f7ff ff8c 	bl	80040a4 <xchg_spi>

}
 800418c:	bf00      	nop
 800418e:	bd80      	pop	{r7, pc}
 8004190:	40020000 	.word	0x40020000

08004194 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8004198:	2200      	movs	r2, #0
 800419a:	2110      	movs	r1, #16
 800419c:	4809      	ldr	r0, [pc, #36]	@ (80041c4 <spiselect+0x30>)
 800419e:	f7fd faa9 	bl	80016f4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80041a2:	20ff      	movs	r0, #255	@ 0xff
 80041a4:	f7ff ff7e 	bl	80040a4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80041a8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80041ac:	f7ff ffc0 	bl	8004130 <wait_ready>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <spiselect+0x26>
 80041b6:	2301      	movs	r3, #1
 80041b8:	e002      	b.n	80041c0 <spiselect+0x2c>

	despiselect();
 80041ba:	f7ff ffdd 	bl	8004178 <despiselect>
	return 0;	/* Timeout */
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	40020000 	.word	0x40020000

080041c8 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80041d2:	20c8      	movs	r0, #200	@ 0xc8
 80041d4:	f7ff ff3c 	bl	8004050 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80041d8:	20ff      	movs	r0, #255	@ 0xff
 80041da:	f7ff ff63 	bl	80040a4 <xchg_spi>
 80041de:	4603      	mov	r3, r0
 80041e0:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
 80041e4:	2bff      	cmp	r3, #255	@ 0xff
 80041e6:	d104      	bne.n	80041f2 <rcvr_datablock+0x2a>
 80041e8:	f7ff ff46 	bl	8004078 <SPI_Timer_Status>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1f2      	bne.n	80041d8 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
 80041f4:	2bfe      	cmp	r3, #254	@ 0xfe
 80041f6:	d001      	beq.n	80041fc <rcvr_datablock+0x34>
 80041f8:	2300      	movs	r3, #0
 80041fa:	e00a      	b.n	8004212 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80041fc:	6839      	ldr	r1, [r7, #0]
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7ff ff66 	bl	80040d0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8004204:	20ff      	movs	r0, #255	@ 0xff
 8004206:	f7ff ff4d 	bl	80040a4 <xchg_spi>
 800420a:	20ff      	movs	r0, #255	@ 0xff
 800420c:	f7ff ff4a 	bl	80040a4 <xchg_spi>

	return 1;						/* Function succeeded */
 8004210:	2301      	movs	r3, #1
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b084      	sub	sp, #16
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	460b      	mov	r3, r1
 8004224:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8004226:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800422a:	f7ff ff81 	bl	8004130 <wait_ready>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d101      	bne.n	8004238 <xmit_datablock+0x1e>
 8004234:	2300      	movs	r3, #0
 8004236:	e01e      	b.n	8004276 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8004238:	78fb      	ldrb	r3, [r7, #3]
 800423a:	4618      	mov	r0, r3
 800423c:	f7ff ff32 	bl	80040a4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8004240:	78fb      	ldrb	r3, [r7, #3]
 8004242:	2bfd      	cmp	r3, #253	@ 0xfd
 8004244:	d016      	beq.n	8004274 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8004246:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7ff ff5c 	bl	8004108 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8004250:	20ff      	movs	r0, #255	@ 0xff
 8004252:	f7ff ff27 	bl	80040a4 <xchg_spi>
 8004256:	20ff      	movs	r0, #255	@ 0xff
 8004258:	f7ff ff24 	bl	80040a4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800425c:	20ff      	movs	r0, #255	@ 0xff
 800425e:	f7ff ff21 	bl	80040a4 <xchg_spi>
 8004262:	4603      	mov	r3, r0
 8004264:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8004266:	7bfb      	ldrb	r3, [r7, #15]
 8004268:	f003 031f 	and.w	r3, r3, #31
 800426c:	2b05      	cmp	r3, #5
 800426e:	d001      	beq.n	8004274 <xmit_datablock+0x5a>
 8004270:	2300      	movs	r3, #0
 8004272:	e000      	b.n	8004276 <xmit_datablock+0x5c>
	}
	return 1;
 8004274:	2301      	movs	r3, #1
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b084      	sub	sp, #16
 8004282:	af00      	add	r7, sp, #0
 8004284:	4603      	mov	r3, r0
 8004286:	6039      	str	r1, [r7, #0]
 8004288:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800428a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428e:	2b00      	cmp	r3, #0
 8004290:	da0e      	bge.n	80042b0 <send_cmd+0x32>
		cmd &= 0x7F;
 8004292:	79fb      	ldrb	r3, [r7, #7]
 8004294:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004298:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800429a:	2100      	movs	r1, #0
 800429c:	2037      	movs	r0, #55	@ 0x37
 800429e:	f7ff ffee 	bl	800427e <send_cmd>
 80042a2:	4603      	mov	r3, r0
 80042a4:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80042a6:	7bbb      	ldrb	r3, [r7, #14]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d901      	bls.n	80042b0 <send_cmd+0x32>
 80042ac:	7bbb      	ldrb	r3, [r7, #14]
 80042ae:	e051      	b.n	8004354 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80042b0:	79fb      	ldrb	r3, [r7, #7]
 80042b2:	2b0c      	cmp	r3, #12
 80042b4:	d008      	beq.n	80042c8 <send_cmd+0x4a>
		despiselect();
 80042b6:	f7ff ff5f 	bl	8004178 <despiselect>
		if (!spiselect()) return 0xFF;
 80042ba:	f7ff ff6b 	bl	8004194 <spiselect>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <send_cmd+0x4a>
 80042c4:	23ff      	movs	r3, #255	@ 0xff
 80042c6:	e045      	b.n	8004354 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80042c8:	79fb      	ldrb	r3, [r7, #7]
 80042ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7ff fee7 	bl	80040a4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	0e1b      	lsrs	r3, r3, #24
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff fee1 	bl	80040a4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	0c1b      	lsrs	r3, r3, #16
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff fedb 	bl	80040a4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	0a1b      	lsrs	r3, r3, #8
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff fed5 	bl	80040a4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff fed0 	bl	80040a4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8004304:	2301      	movs	r3, #1
 8004306:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8004308:	79fb      	ldrb	r3, [r7, #7]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <send_cmd+0x94>
 800430e:	2395      	movs	r3, #149	@ 0x95
 8004310:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	2b08      	cmp	r3, #8
 8004316:	d101      	bne.n	800431c <send_cmd+0x9e>
 8004318:	2387      	movs	r3, #135	@ 0x87
 800431a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800431c:	7bfb      	ldrb	r3, [r7, #15]
 800431e:	4618      	mov	r0, r3
 8004320:	f7ff fec0 	bl	80040a4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8004324:	79fb      	ldrb	r3, [r7, #7]
 8004326:	2b0c      	cmp	r3, #12
 8004328:	d102      	bne.n	8004330 <send_cmd+0xb2>
 800432a:	20ff      	movs	r0, #255	@ 0xff
 800432c:	f7ff feba 	bl	80040a4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8004330:	230a      	movs	r3, #10
 8004332:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8004334:	20ff      	movs	r0, #255	@ 0xff
 8004336:	f7ff feb5 	bl	80040a4 <xchg_spi>
 800433a:	4603      	mov	r3, r0
 800433c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800433e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004342:	2b00      	cmp	r3, #0
 8004344:	da05      	bge.n	8004352 <send_cmd+0xd4>
 8004346:	7bfb      	ldrb	r3, [r7, #15]
 8004348:	3b01      	subs	r3, #1
 800434a:	73fb      	strb	r3, [r7, #15]
 800434c:	7bfb      	ldrb	r3, [r7, #15]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1f0      	bne.n	8004334 <send_cmd+0xb6>

	return res;							/* Return received response */
 8004352:	7bbb      	ldrb	r3, [r7, #14]
}
 8004354:	4618      	mov	r0, r3
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800435c:	b590      	push	{r4, r7, lr}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	4603      	mov	r3, r0
 8004364:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8004366:	79fb      	ldrb	r3, [r7, #7]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <USER_SPI_initialize+0x14>
 800436c:	2301      	movs	r3, #1
 800436e:	e0d6      	b.n	800451e <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8004370:	4b6d      	ldr	r3, [pc, #436]	@ (8004528 <USER_SPI_initialize+0x1cc>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	b2db      	uxtb	r3, r3
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <USER_SPI_initialize+0x2a>
 800437e:	4b6a      	ldr	r3, [pc, #424]	@ (8004528 <USER_SPI_initialize+0x1cc>)
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	b2db      	uxtb	r3, r3
 8004384:	e0cb      	b.n	800451e <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8004386:	4b69      	ldr	r3, [pc, #420]	@ (800452c <USER_SPI_initialize+0x1d0>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8004390:	4b66      	ldr	r3, [pc, #408]	@ (800452c <USER_SPI_initialize+0x1d0>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8004398:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800439a:	230a      	movs	r3, #10
 800439c:	73fb      	strb	r3, [r7, #15]
 800439e:	e005      	b.n	80043ac <USER_SPI_initialize+0x50>
 80043a0:	20ff      	movs	r0, #255	@ 0xff
 80043a2:	f7ff fe7f 	bl	80040a4 <xchg_spi>
 80043a6:	7bfb      	ldrb	r3, [r7, #15]
 80043a8:	3b01      	subs	r3, #1
 80043aa:	73fb      	strb	r3, [r7, #15]
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1f6      	bne.n	80043a0 <USER_SPI_initialize+0x44>

	ty = 0;
 80043b2:	2300      	movs	r3, #0
 80043b4:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80043b6:	2100      	movs	r1, #0
 80043b8:	2000      	movs	r0, #0
 80043ba:	f7ff ff60 	bl	800427e <send_cmd>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	f040 808b 	bne.w	80044dc <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80043c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80043ca:	f7ff fe41 	bl	8004050 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80043ce:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80043d2:	2008      	movs	r0, #8
 80043d4:	f7ff ff53 	bl	800427e <send_cmd>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d151      	bne.n	8004482 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80043de:	2300      	movs	r3, #0
 80043e0:	73fb      	strb	r3, [r7, #15]
 80043e2:	e00d      	b.n	8004400 <USER_SPI_initialize+0xa4>
 80043e4:	7bfc      	ldrb	r4, [r7, #15]
 80043e6:	20ff      	movs	r0, #255	@ 0xff
 80043e8:	f7ff fe5c 	bl	80040a4 <xchg_spi>
 80043ec:	4603      	mov	r3, r0
 80043ee:	461a      	mov	r2, r3
 80043f0:	f104 0310 	add.w	r3, r4, #16
 80043f4:	443b      	add	r3, r7
 80043f6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80043fa:	7bfb      	ldrb	r3, [r7, #15]
 80043fc:	3301      	adds	r3, #1
 80043fe:	73fb      	strb	r3, [r7, #15]
 8004400:	7bfb      	ldrb	r3, [r7, #15]
 8004402:	2b03      	cmp	r3, #3
 8004404:	d9ee      	bls.n	80043e4 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8004406:	7abb      	ldrb	r3, [r7, #10]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d167      	bne.n	80044dc <USER_SPI_initialize+0x180>
 800440c:	7afb      	ldrb	r3, [r7, #11]
 800440e:	2baa      	cmp	r3, #170	@ 0xaa
 8004410:	d164      	bne.n	80044dc <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8004412:	bf00      	nop
 8004414:	f7ff fe30 	bl	8004078 <SPI_Timer_Status>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d007      	beq.n	800442e <USER_SPI_initialize+0xd2>
 800441e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004422:	20a9      	movs	r0, #169	@ 0xa9
 8004424:	f7ff ff2b 	bl	800427e <send_cmd>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f2      	bne.n	8004414 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800442e:	f7ff fe23 	bl	8004078 <SPI_Timer_Status>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d051      	beq.n	80044dc <USER_SPI_initialize+0x180>
 8004438:	2100      	movs	r1, #0
 800443a:	203a      	movs	r0, #58	@ 0x3a
 800443c:	f7ff ff1f 	bl	800427e <send_cmd>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d14a      	bne.n	80044dc <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8004446:	2300      	movs	r3, #0
 8004448:	73fb      	strb	r3, [r7, #15]
 800444a:	e00d      	b.n	8004468 <USER_SPI_initialize+0x10c>
 800444c:	7bfc      	ldrb	r4, [r7, #15]
 800444e:	20ff      	movs	r0, #255	@ 0xff
 8004450:	f7ff fe28 	bl	80040a4 <xchg_spi>
 8004454:	4603      	mov	r3, r0
 8004456:	461a      	mov	r2, r3
 8004458:	f104 0310 	add.w	r3, r4, #16
 800445c:	443b      	add	r3, r7
 800445e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004462:	7bfb      	ldrb	r3, [r7, #15]
 8004464:	3301      	adds	r3, #1
 8004466:	73fb      	strb	r3, [r7, #15]
 8004468:	7bfb      	ldrb	r3, [r7, #15]
 800446a:	2b03      	cmp	r3, #3
 800446c:	d9ee      	bls.n	800444c <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800446e:	7a3b      	ldrb	r3, [r7, #8]
 8004470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <USER_SPI_initialize+0x120>
 8004478:	230c      	movs	r3, #12
 800447a:	e000      	b.n	800447e <USER_SPI_initialize+0x122>
 800447c:	2304      	movs	r3, #4
 800447e:	737b      	strb	r3, [r7, #13]
 8004480:	e02c      	b.n	80044dc <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8004482:	2100      	movs	r1, #0
 8004484:	20a9      	movs	r0, #169	@ 0xa9
 8004486:	f7ff fefa 	bl	800427e <send_cmd>
 800448a:	4603      	mov	r3, r0
 800448c:	2b01      	cmp	r3, #1
 800448e:	d804      	bhi.n	800449a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8004490:	2302      	movs	r3, #2
 8004492:	737b      	strb	r3, [r7, #13]
 8004494:	23a9      	movs	r3, #169	@ 0xa9
 8004496:	73bb      	strb	r3, [r7, #14]
 8004498:	e003      	b.n	80044a2 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800449a:	2301      	movs	r3, #1
 800449c:	737b      	strb	r3, [r7, #13]
 800449e:	2301      	movs	r3, #1
 80044a0:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80044a2:	bf00      	nop
 80044a4:	f7ff fde8 	bl	8004078 <SPI_Timer_Status>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d007      	beq.n	80044be <USER_SPI_initialize+0x162>
 80044ae:	7bbb      	ldrb	r3, [r7, #14]
 80044b0:	2100      	movs	r1, #0
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7ff fee3 	bl	800427e <send_cmd>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1f2      	bne.n	80044a4 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80044be:	f7ff fddb 	bl	8004078 <SPI_Timer_Status>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d007      	beq.n	80044d8 <USER_SPI_initialize+0x17c>
 80044c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80044cc:	2010      	movs	r0, #16
 80044ce:	f7ff fed6 	bl	800427e <send_cmd>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <USER_SPI_initialize+0x180>
				ty = 0;
 80044d8:	2300      	movs	r3, #0
 80044da:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80044dc:	4a14      	ldr	r2, [pc, #80]	@ (8004530 <USER_SPI_initialize+0x1d4>)
 80044de:	7b7b      	ldrb	r3, [r7, #13]
 80044e0:	7013      	strb	r3, [r2, #0]
	despiselect();
 80044e2:	f7ff fe49 	bl	8004178 <despiselect>

	if (ty) {			/* OK */
 80044e6:	7b7b      	ldrb	r3, [r7, #13]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d012      	beq.n	8004512 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80044ec:	4b0f      	ldr	r3, [pc, #60]	@ (800452c <USER_SPI_initialize+0x1d0>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80044f6:	4b0d      	ldr	r3, [pc, #52]	@ (800452c <USER_SPI_initialize+0x1d0>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0210 	orr.w	r2, r2, #16
 80044fe:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8004500:	4b09      	ldr	r3, [pc, #36]	@ (8004528 <USER_SPI_initialize+0x1cc>)
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	f023 0301 	bic.w	r3, r3, #1
 800450a:	b2da      	uxtb	r2, r3
 800450c:	4b06      	ldr	r3, [pc, #24]	@ (8004528 <USER_SPI_initialize+0x1cc>)
 800450e:	701a      	strb	r2, [r3, #0]
 8004510:	e002      	b.n	8004518 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8004512:	4b05      	ldr	r3, [pc, #20]	@ (8004528 <USER_SPI_initialize+0x1cc>)
 8004514:	2201      	movs	r2, #1
 8004516:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8004518:	4b03      	ldr	r3, [pc, #12]	@ (8004528 <USER_SPI_initialize+0x1cc>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	b2db      	uxtb	r3, r3
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	bd90      	pop	{r4, r7, pc}
 8004526:	bf00      	nop
 8004528:	20000020 	.word	0x20000020
 800452c:	200002e8 	.word	0x200002e8
 8004530:	20000538 	.word	0x20000538

08004534 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	4603      	mov	r3, r0
 800453c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800453e:	79fb      	ldrb	r3, [r7, #7]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <USER_SPI_status+0x14>
 8004544:	2301      	movs	r3, #1
 8004546:	e002      	b.n	800454e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8004548:	4b04      	ldr	r3, [pc, #16]	@ (800455c <USER_SPI_status+0x28>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	b2db      	uxtb	r3, r3
}
 800454e:	4618      	mov	r0, r3
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	20000020 	.word	0x20000020

08004560 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	60b9      	str	r1, [r7, #8]
 8004568:	607a      	str	r2, [r7, #4]
 800456a:	603b      	str	r3, [r7, #0]
 800456c:	4603      	mov	r3, r0
 800456e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004570:	7bfb      	ldrb	r3, [r7, #15]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d102      	bne.n	800457c <USER_SPI_read+0x1c>
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <USER_SPI_read+0x20>
 800457c:	2304      	movs	r3, #4
 800457e:	e04d      	b.n	800461c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004580:	4b28      	ldr	r3, [pc, #160]	@ (8004624 <USER_SPI_read+0xc4>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	b2db      	uxtb	r3, r3
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <USER_SPI_read+0x32>
 800458e:	2303      	movs	r3, #3
 8004590:	e044      	b.n	800461c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8004592:	4b25      	ldr	r3, [pc, #148]	@ (8004628 <USER_SPI_read+0xc8>)
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	f003 0308 	and.w	r3, r3, #8
 800459a:	2b00      	cmp	r3, #0
 800459c:	d102      	bne.n	80045a4 <USER_SPI_read+0x44>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	025b      	lsls	r3, r3, #9
 80045a2:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d111      	bne.n	80045ce <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	2011      	movs	r0, #17
 80045ae:	f7ff fe66 	bl	800427e <send_cmd>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d129      	bne.n	800460c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80045b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80045bc:	68b8      	ldr	r0, [r7, #8]
 80045be:	f7ff fe03 	bl	80041c8 <rcvr_datablock>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d021      	beq.n	800460c <USER_SPI_read+0xac>
			count = 0;
 80045c8:	2300      	movs	r3, #0
 80045ca:	603b      	str	r3, [r7, #0]
 80045cc:	e01e      	b.n	800460c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80045ce:	6879      	ldr	r1, [r7, #4]
 80045d0:	2012      	movs	r0, #18
 80045d2:	f7ff fe54 	bl	800427e <send_cmd>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d117      	bne.n	800460c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80045dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80045e0:	68b8      	ldr	r0, [r7, #8]
 80045e2:	f7ff fdf1 	bl	80041c8 <rcvr_datablock>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <USER_SPI_read+0xa2>
				buff += 512;
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80045f2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	3b01      	subs	r3, #1
 80045f8:	603b      	str	r3, [r7, #0]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1ed      	bne.n	80045dc <USER_SPI_read+0x7c>
 8004600:	e000      	b.n	8004604 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8004602:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8004604:	2100      	movs	r1, #0
 8004606:	200c      	movs	r0, #12
 8004608:	f7ff fe39 	bl	800427e <send_cmd>
		}
	}
	despiselect();
 800460c:	f7ff fdb4 	bl	8004178 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	bf14      	ite	ne
 8004616:	2301      	movne	r3, #1
 8004618:	2300      	moveq	r3, #0
 800461a:	b2db      	uxtb	r3, r3
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	20000020 	.word	0x20000020
 8004628:	20000538 	.word	0x20000538

0800462c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	60b9      	str	r1, [r7, #8]
 8004634:	607a      	str	r2, [r7, #4]
 8004636:	603b      	str	r3, [r7, #0]
 8004638:	4603      	mov	r3, r0
 800463a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800463c:	7bfb      	ldrb	r3, [r7, #15]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d102      	bne.n	8004648 <USER_SPI_write+0x1c>
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <USER_SPI_write+0x20>
 8004648:	2304      	movs	r3, #4
 800464a:	e063      	b.n	8004714 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800464c:	4b33      	ldr	r3, [pc, #204]	@ (800471c <USER_SPI_write+0xf0>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	b2db      	uxtb	r3, r3
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <USER_SPI_write+0x32>
 800465a:	2303      	movs	r3, #3
 800465c:	e05a      	b.n	8004714 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800465e:	4b2f      	ldr	r3, [pc, #188]	@ (800471c <USER_SPI_write+0xf0>)
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	b2db      	uxtb	r3, r3
 8004664:	f003 0304 	and.w	r3, r3, #4
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <USER_SPI_write+0x44>
 800466c:	2302      	movs	r3, #2
 800466e:	e051      	b.n	8004714 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8004670:	4b2b      	ldr	r3, [pc, #172]	@ (8004720 <USER_SPI_write+0xf4>)
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	f003 0308 	and.w	r3, r3, #8
 8004678:	2b00      	cmp	r3, #0
 800467a:	d102      	bne.n	8004682 <USER_SPI_write+0x56>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	025b      	lsls	r3, r3, #9
 8004680:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d110      	bne.n	80046aa <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8004688:	6879      	ldr	r1, [r7, #4]
 800468a:	2018      	movs	r0, #24
 800468c:	f7ff fdf7 	bl	800427e <send_cmd>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d136      	bne.n	8004704 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8004696:	21fe      	movs	r1, #254	@ 0xfe
 8004698:	68b8      	ldr	r0, [r7, #8]
 800469a:	f7ff fdbe 	bl	800421a <xmit_datablock>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d02f      	beq.n	8004704 <USER_SPI_write+0xd8>
			count = 0;
 80046a4:	2300      	movs	r3, #0
 80046a6:	603b      	str	r3, [r7, #0]
 80046a8:	e02c      	b.n	8004704 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80046aa:	4b1d      	ldr	r3, [pc, #116]	@ (8004720 <USER_SPI_write+0xf4>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	f003 0306 	and.w	r3, r3, #6
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <USER_SPI_write+0x92>
 80046b6:	6839      	ldr	r1, [r7, #0]
 80046b8:	2097      	movs	r0, #151	@ 0x97
 80046ba:	f7ff fde0 	bl	800427e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80046be:	6879      	ldr	r1, [r7, #4]
 80046c0:	2019      	movs	r0, #25
 80046c2:	f7ff fddc 	bl	800427e <send_cmd>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d11b      	bne.n	8004704 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80046cc:	21fc      	movs	r1, #252	@ 0xfc
 80046ce:	68b8      	ldr	r0, [r7, #8]
 80046d0:	f7ff fda3 	bl	800421a <xmit_datablock>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <USER_SPI_write+0xc4>
				buff += 512;
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80046e0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	3b01      	subs	r3, #1
 80046e6:	603b      	str	r3, [r7, #0]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1ee      	bne.n	80046cc <USER_SPI_write+0xa0>
 80046ee:	e000      	b.n	80046f2 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80046f0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80046f2:	21fd      	movs	r1, #253	@ 0xfd
 80046f4:	2000      	movs	r0, #0
 80046f6:	f7ff fd90 	bl	800421a <xmit_datablock>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d101      	bne.n	8004704 <USER_SPI_write+0xd8>
 8004700:	2301      	movs	r3, #1
 8004702:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8004704:	f7ff fd38 	bl	8004178 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	bf14      	ite	ne
 800470e:	2301      	movne	r3, #1
 8004710:	2300      	moveq	r3, #0
 8004712:	b2db      	uxtb	r3, r3
}
 8004714:	4618      	mov	r0, r3
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	20000020 	.word	0x20000020
 8004720:	20000538 	.word	0x20000538

08004724 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b08c      	sub	sp, #48	@ 0x30
 8004728:	af00      	add	r7, sp, #0
 800472a:	4603      	mov	r3, r0
 800472c:	603a      	str	r2, [r7, #0]
 800472e:	71fb      	strb	r3, [r7, #7]
 8004730:	460b      	mov	r3, r1
 8004732:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8004734:	79fb      	ldrb	r3, [r7, #7]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <USER_SPI_ioctl+0x1a>
 800473a:	2304      	movs	r3, #4
 800473c:	e15a      	b.n	80049f4 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800473e:	4baf      	ldr	r3, [pc, #700]	@ (80049fc <USER_SPI_ioctl+0x2d8>)
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	b2db      	uxtb	r3, r3
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <USER_SPI_ioctl+0x2c>
 800474c:	2303      	movs	r3, #3
 800474e:	e151      	b.n	80049f4 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8004756:	79bb      	ldrb	r3, [r7, #6]
 8004758:	2b04      	cmp	r3, #4
 800475a:	f200 8136 	bhi.w	80049ca <USER_SPI_ioctl+0x2a6>
 800475e:	a201      	add	r2, pc, #4	@ (adr r2, 8004764 <USER_SPI_ioctl+0x40>)
 8004760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004764:	08004779 	.word	0x08004779
 8004768:	0800478d 	.word	0x0800478d
 800476c:	080049cb 	.word	0x080049cb
 8004770:	08004839 	.word	0x08004839
 8004774:	0800492f 	.word	0x0800492f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8004778:	f7ff fd0c 	bl	8004194 <spiselect>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	f000 8127 	beq.w	80049d2 <USER_SPI_ioctl+0x2ae>
 8004784:	2300      	movs	r3, #0
 8004786:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800478a:	e122      	b.n	80049d2 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800478c:	2100      	movs	r1, #0
 800478e:	2009      	movs	r0, #9
 8004790:	f7ff fd75 	bl	800427e <send_cmd>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	f040 811d 	bne.w	80049d6 <USER_SPI_ioctl+0x2b2>
 800479c:	f107 030c 	add.w	r3, r7, #12
 80047a0:	2110      	movs	r1, #16
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7ff fd10 	bl	80041c8 <rcvr_datablock>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 8113 	beq.w	80049d6 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80047b0:	7b3b      	ldrb	r3, [r7, #12]
 80047b2:	099b      	lsrs	r3, r3, #6
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d111      	bne.n	80047de <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80047ba:	7d7b      	ldrb	r3, [r7, #21]
 80047bc:	461a      	mov	r2, r3
 80047be:	7d3b      	ldrb	r3, [r7, #20]
 80047c0:	021b      	lsls	r3, r3, #8
 80047c2:	4413      	add	r3, r2
 80047c4:	461a      	mov	r2, r3
 80047c6:	7cfb      	ldrb	r3, [r7, #19]
 80047c8:	041b      	lsls	r3, r3, #16
 80047ca:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 80047ce:	4413      	add	r3, r2
 80047d0:	3301      	adds	r3, #1
 80047d2:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	029a      	lsls	r2, r3, #10
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	e028      	b.n	8004830 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80047de:	7c7b      	ldrb	r3, [r7, #17]
 80047e0:	f003 030f 	and.w	r3, r3, #15
 80047e4:	b2da      	uxtb	r2, r3
 80047e6:	7dbb      	ldrb	r3, [r7, #22]
 80047e8:	09db      	lsrs	r3, r3, #7
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	4413      	add	r3, r2
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	7d7b      	ldrb	r3, [r7, #21]
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	f003 0306 	and.w	r3, r3, #6
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	4413      	add	r3, r2
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	3302      	adds	r3, #2
 8004802:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8004806:	7d3b      	ldrb	r3, [r7, #20]
 8004808:	099b      	lsrs	r3, r3, #6
 800480a:	b2db      	uxtb	r3, r3
 800480c:	461a      	mov	r2, r3
 800480e:	7cfb      	ldrb	r3, [r7, #19]
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	441a      	add	r2, r3
 8004814:	7cbb      	ldrb	r3, [r7, #18]
 8004816:	029b      	lsls	r3, r3, #10
 8004818:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800481c:	4413      	add	r3, r2
 800481e:	3301      	adds	r3, #1
 8004820:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8004822:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004826:	3b09      	subs	r3, #9
 8004828:	69fa      	ldr	r2, [r7, #28]
 800482a:	409a      	lsls	r2, r3
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8004830:	2300      	movs	r3, #0
 8004832:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8004836:	e0ce      	b.n	80049d6 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8004838:	4b71      	ldr	r3, [pc, #452]	@ (8004a00 <USER_SPI_ioctl+0x2dc>)
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b00      	cmp	r3, #0
 8004842:	d031      	beq.n	80048a8 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8004844:	2100      	movs	r1, #0
 8004846:	208d      	movs	r0, #141	@ 0x8d
 8004848:	f7ff fd19 	bl	800427e <send_cmd>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	f040 80c3 	bne.w	80049da <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8004854:	20ff      	movs	r0, #255	@ 0xff
 8004856:	f7ff fc25 	bl	80040a4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800485a:	f107 030c 	add.w	r3, r7, #12
 800485e:	2110      	movs	r1, #16
 8004860:	4618      	mov	r0, r3
 8004862:	f7ff fcb1 	bl	80041c8 <rcvr_datablock>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 80b6 	beq.w	80049da <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800486e:	2330      	movs	r3, #48	@ 0x30
 8004870:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8004874:	e007      	b.n	8004886 <USER_SPI_ioctl+0x162>
 8004876:	20ff      	movs	r0, #255	@ 0xff
 8004878:	f7ff fc14 	bl	80040a4 <xchg_spi>
 800487c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004880:	3b01      	subs	r3, #1
 8004882:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8004886:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1f3      	bne.n	8004876 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800488e:	7dbb      	ldrb	r3, [r7, #22]
 8004890:	091b      	lsrs	r3, r3, #4
 8004892:	b2db      	uxtb	r3, r3
 8004894:	461a      	mov	r2, r3
 8004896:	2310      	movs	r3, #16
 8004898:	fa03 f202 	lsl.w	r2, r3, r2
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80048a0:	2300      	movs	r3, #0
 80048a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80048a6:	e098      	b.n	80049da <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80048a8:	2100      	movs	r1, #0
 80048aa:	2009      	movs	r0, #9
 80048ac:	f7ff fce7 	bl	800427e <send_cmd>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f040 8091 	bne.w	80049da <USER_SPI_ioctl+0x2b6>
 80048b8:	f107 030c 	add.w	r3, r7, #12
 80048bc:	2110      	movs	r1, #16
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff fc82 	bl	80041c8 <rcvr_datablock>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f000 8087 	beq.w	80049da <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80048cc:	4b4c      	ldr	r3, [pc, #304]	@ (8004a00 <USER_SPI_ioctl+0x2dc>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d012      	beq.n	80048fe <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80048d8:	7dbb      	ldrb	r3, [r7, #22]
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80048e0:	7dfa      	ldrb	r2, [r7, #23]
 80048e2:	09d2      	lsrs	r2, r2, #7
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	4413      	add	r3, r2
 80048e8:	1c5a      	adds	r2, r3, #1
 80048ea:	7e7b      	ldrb	r3, [r7, #25]
 80048ec:	099b      	lsrs	r3, r3, #6
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	3b01      	subs	r3, #1
 80048f2:	fa02 f303 	lsl.w	r3, r2, r3
 80048f6:	461a      	mov	r2, r3
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	e013      	b.n	8004926 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80048fe:	7dbb      	ldrb	r3, [r7, #22]
 8004900:	109b      	asrs	r3, r3, #2
 8004902:	b29b      	uxth	r3, r3
 8004904:	f003 031f 	and.w	r3, r3, #31
 8004908:	3301      	adds	r3, #1
 800490a:	7dfa      	ldrb	r2, [r7, #23]
 800490c:	00d2      	lsls	r2, r2, #3
 800490e:	f002 0218 	and.w	r2, r2, #24
 8004912:	7df9      	ldrb	r1, [r7, #23]
 8004914:	0949      	lsrs	r1, r1, #5
 8004916:	b2c9      	uxtb	r1, r1
 8004918:	440a      	add	r2, r1
 800491a:	3201      	adds	r2, #1
 800491c:	fb02 f303 	mul.w	r3, r2, r3
 8004920:	461a      	mov	r2, r3
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8004926:	2300      	movs	r3, #0
 8004928:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800492c:	e055      	b.n	80049da <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800492e:	4b34      	ldr	r3, [pc, #208]	@ (8004a00 <USER_SPI_ioctl+0x2dc>)
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	f003 0306 	and.w	r3, r3, #6
 8004936:	2b00      	cmp	r3, #0
 8004938:	d051      	beq.n	80049de <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800493a:	f107 020c 	add.w	r2, r7, #12
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	210b      	movs	r1, #11
 8004942:	4618      	mov	r0, r3
 8004944:	f7ff feee 	bl	8004724 <USER_SPI_ioctl>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d149      	bne.n	80049e2 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800494e:	7b3b      	ldrb	r3, [r7, #12]
 8004950:	099b      	lsrs	r3, r3, #6
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d104      	bne.n	8004962 <USER_SPI_ioctl+0x23e>
 8004958:	7dbb      	ldrb	r3, [r7, #22]
 800495a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800495e:	2b00      	cmp	r3, #0
 8004960:	d041      	beq.n	80049e6 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	623b      	str	r3, [r7, #32]
 8004966:	6a3b      	ldr	r3, [r7, #32]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8004972:	4b23      	ldr	r3, [pc, #140]	@ (8004a00 <USER_SPI_ioctl+0x2dc>)
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b00      	cmp	r3, #0
 800497c:	d105      	bne.n	800498a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800497e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004980:	025b      	lsls	r3, r3, #9
 8004982:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004986:	025b      	lsls	r3, r3, #9
 8004988:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800498a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800498c:	2020      	movs	r0, #32
 800498e:	f7ff fc76 	bl	800427e <send_cmd>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d128      	bne.n	80049ea <USER_SPI_ioctl+0x2c6>
 8004998:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800499a:	2021      	movs	r0, #33	@ 0x21
 800499c:	f7ff fc6f 	bl	800427e <send_cmd>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d121      	bne.n	80049ea <USER_SPI_ioctl+0x2c6>
 80049a6:	2100      	movs	r1, #0
 80049a8:	2026      	movs	r0, #38	@ 0x26
 80049aa:	f7ff fc68 	bl	800427e <send_cmd>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d11a      	bne.n	80049ea <USER_SPI_ioctl+0x2c6>
 80049b4:	f247 5030 	movw	r0, #30000	@ 0x7530
 80049b8:	f7ff fbba 	bl	8004130 <wait_ready>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d013      	beq.n	80049ea <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80049c2:	2300      	movs	r3, #0
 80049c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80049c8:	e00f      	b.n	80049ea <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80049ca:	2304      	movs	r3, #4
 80049cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80049d0:	e00c      	b.n	80049ec <USER_SPI_ioctl+0x2c8>
		break;
 80049d2:	bf00      	nop
 80049d4:	e00a      	b.n	80049ec <USER_SPI_ioctl+0x2c8>
		break;
 80049d6:	bf00      	nop
 80049d8:	e008      	b.n	80049ec <USER_SPI_ioctl+0x2c8>
		break;
 80049da:	bf00      	nop
 80049dc:	e006      	b.n	80049ec <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80049de:	bf00      	nop
 80049e0:	e004      	b.n	80049ec <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80049e2:	bf00      	nop
 80049e4:	e002      	b.n	80049ec <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80049e6:	bf00      	nop
 80049e8:	e000      	b.n	80049ec <USER_SPI_ioctl+0x2c8>
		break;
 80049ea:	bf00      	nop
	}

	despiselect();
 80049ec:	f7ff fbc4 	bl	8004178 <despiselect>

	return res;
 80049f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3730      	adds	r7, #48	@ 0x30
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	20000020 	.word	0x20000020
 8004a00:	20000538 	.word	0x20000538

08004a04 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004a0e:	79fb      	ldrb	r3, [r7, #7]
 8004a10:	4a08      	ldr	r2, [pc, #32]	@ (8004a34 <disk_status+0x30>)
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	79fa      	ldrb	r2, [r7, #7]
 8004a1c:	4905      	ldr	r1, [pc, #20]	@ (8004a34 <disk_status+0x30>)
 8004a1e:	440a      	add	r2, r1
 8004a20:	7a12      	ldrb	r2, [r2, #8]
 8004a22:	4610      	mov	r0, r2
 8004a24:	4798      	blx	r3
 8004a26:	4603      	mov	r3, r0
 8004a28:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	2000056c 	.word	0x2000056c

08004a38 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	4603      	mov	r3, r0
 8004a40:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004a42:	2300      	movs	r3, #0
 8004a44:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004a46:	79fb      	ldrb	r3, [r7, #7]
 8004a48:	4a0e      	ldr	r2, [pc, #56]	@ (8004a84 <disk_initialize+0x4c>)
 8004a4a:	5cd3      	ldrb	r3, [r2, r3]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d114      	bne.n	8004a7a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004a50:	79fb      	ldrb	r3, [r7, #7]
 8004a52:	4a0c      	ldr	r2, [pc, #48]	@ (8004a84 <disk_initialize+0x4c>)
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	79fa      	ldrb	r2, [r7, #7]
 8004a5e:	4909      	ldr	r1, [pc, #36]	@ (8004a84 <disk_initialize+0x4c>)
 8004a60:	440a      	add	r2, r1
 8004a62:	7a12      	ldrb	r2, [r2, #8]
 8004a64:	4610      	mov	r0, r2
 8004a66:	4798      	blx	r3
 8004a68:	4603      	mov	r3, r0
 8004a6a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8004a6c:	7bfb      	ldrb	r3, [r7, #15]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d103      	bne.n	8004a7a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8004a72:	79fb      	ldrb	r3, [r7, #7]
 8004a74:	4a03      	ldr	r2, [pc, #12]	@ (8004a84 <disk_initialize+0x4c>)
 8004a76:	2101      	movs	r1, #1
 8004a78:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	2000056c 	.word	0x2000056c

08004a88 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004a88:	b590      	push	{r4, r7, lr}
 8004a8a:	b087      	sub	sp, #28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60b9      	str	r1, [r7, #8]
 8004a90:	607a      	str	r2, [r7, #4]
 8004a92:	603b      	str	r3, [r7, #0]
 8004a94:	4603      	mov	r3, r0
 8004a96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004a98:	7bfb      	ldrb	r3, [r7, #15]
 8004a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8004ac4 <disk_read+0x3c>)
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	689c      	ldr	r4, [r3, #8]
 8004aa4:	7bfb      	ldrb	r3, [r7, #15]
 8004aa6:	4a07      	ldr	r2, [pc, #28]	@ (8004ac4 <disk_read+0x3c>)
 8004aa8:	4413      	add	r3, r2
 8004aaa:	7a18      	ldrb	r0, [r3, #8]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	68b9      	ldr	r1, [r7, #8]
 8004ab2:	47a0      	blx	r4
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	75fb      	strb	r3, [r7, #23]
  return res;
 8004ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	371c      	adds	r7, #28
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd90      	pop	{r4, r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	2000056c 	.word	0x2000056c

08004ac8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004ac8:	b590      	push	{r4, r7, lr}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60b9      	str	r1, [r7, #8]
 8004ad0:	607a      	str	r2, [r7, #4]
 8004ad2:	603b      	str	r3, [r7, #0]
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004ad8:	7bfb      	ldrb	r3, [r7, #15]
 8004ada:	4a0a      	ldr	r2, [pc, #40]	@ (8004b04 <disk_write+0x3c>)
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4413      	add	r3, r2
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	68dc      	ldr	r4, [r3, #12]
 8004ae4:	7bfb      	ldrb	r3, [r7, #15]
 8004ae6:	4a07      	ldr	r2, [pc, #28]	@ (8004b04 <disk_write+0x3c>)
 8004ae8:	4413      	add	r3, r2
 8004aea:	7a18      	ldrb	r0, [r3, #8]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	68b9      	ldr	r1, [r7, #8]
 8004af2:	47a0      	blx	r4
 8004af4:	4603      	mov	r3, r0
 8004af6:	75fb      	strb	r3, [r7, #23]
  return res;
 8004af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	371c      	adds	r7, #28
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd90      	pop	{r4, r7, pc}
 8004b02:	bf00      	nop
 8004b04:	2000056c 	.word	0x2000056c

08004b08 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3301      	adds	r3, #1
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004b18:	89fb      	ldrh	r3, [r7, #14]
 8004b1a:	021b      	lsls	r3, r3, #8
 8004b1c:	b21a      	sxth	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	b21b      	sxth	r3, r3
 8004b24:	4313      	orrs	r3, r2
 8004b26:	b21b      	sxth	r3, r3
 8004b28:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004b2a:	89fb      	ldrh	r3, [r7, #14]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3714      	adds	r7, #20
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	3303      	adds	r3, #3
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	021b      	lsls	r3, r3, #8
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	3202      	adds	r2, #2
 8004b50:	7812      	ldrb	r2, [r2, #0]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	021b      	lsls	r3, r3, #8
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	3201      	adds	r2, #1
 8004b5e:	7812      	ldrb	r2, [r2, #0]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	021b      	lsls	r3, r3, #8
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	7812      	ldrb	r2, [r2, #0]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	60fb      	str	r3, [r7, #12]
	return rv;
 8004b70:	68fb      	ldr	r3, [r7, #12]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3714      	adds	r7, #20
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr

08004b7e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004b7e:	b480      	push	{r7}
 8004b80:	b083      	sub	sp, #12
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
 8004b86:	460b      	mov	r3, r1
 8004b88:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	1c5a      	adds	r2, r3, #1
 8004b8e:	607a      	str	r2, [r7, #4]
 8004b90:	887a      	ldrh	r2, [r7, #2]
 8004b92:	b2d2      	uxtb	r2, r2
 8004b94:	701a      	strb	r2, [r3, #0]
 8004b96:	887b      	ldrh	r3, [r7, #2]
 8004b98:	0a1b      	lsrs	r3, r3, #8
 8004b9a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	1c5a      	adds	r2, r3, #1
 8004ba0:	607a      	str	r2, [r7, #4]
 8004ba2:	887a      	ldrh	r2, [r7, #2]
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	701a      	strb	r2, [r3, #0]
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	1c5a      	adds	r2, r3, #1
 8004bc2:	607a      	str	r2, [r7, #4]
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	b2d2      	uxtb	r2, r2
 8004bc8:	701a      	strb	r2, [r3, #0]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	0a1b      	lsrs	r3, r3, #8
 8004bce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	1c5a      	adds	r2, r3, #1
 8004bd4:	607a      	str	r2, [r7, #4]
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	b2d2      	uxtb	r2, r2
 8004bda:	701a      	strb	r2, [r3, #0]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	0a1b      	lsrs	r3, r3, #8
 8004be0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	1c5a      	adds	r2, r3, #1
 8004be6:	607a      	str	r2, [r7, #4]
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	b2d2      	uxtb	r2, r2
 8004bec:	701a      	strb	r2, [r3, #0]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	0a1b      	lsrs	r3, r3, #8
 8004bf2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	1c5a      	adds	r2, r3, #1
 8004bf8:	607a      	str	r2, [r7, #4]
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	b2d2      	uxtb	r2, r2
 8004bfe:	701a      	strb	r2, [r3, #0]
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004c0c:	b480      	push	{r7}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00d      	beq.n	8004c42 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	1c53      	adds	r3, r2, #1
 8004c2a:	613b      	str	r3, [r7, #16]
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	1c59      	adds	r1, r3, #1
 8004c30:	6179      	str	r1, [r7, #20]
 8004c32:	7812      	ldrb	r2, [r2, #0]
 8004c34:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	607b      	str	r3, [r7, #4]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1f1      	bne.n	8004c26 <mem_cpy+0x1a>
	}
}
 8004c42:	bf00      	nop
 8004c44:	371c      	adds	r7, #28
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004c4e:	b480      	push	{r7}
 8004c50:	b087      	sub	sp, #28
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	60f8      	str	r0, [r7, #12]
 8004c56:	60b9      	str	r1, [r7, #8]
 8004c58:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	1c5a      	adds	r2, r3, #1
 8004c62:	617a      	str	r2, [r7, #20]
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	b2d2      	uxtb	r2, r2
 8004c68:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	607b      	str	r3, [r7, #4]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1f3      	bne.n	8004c5e <mem_set+0x10>
}
 8004c76:	bf00      	nop
 8004c78:	bf00      	nop
 8004c7a:	371c      	adds	r7, #28
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004c84:	b480      	push	{r7}
 8004c86:	b089      	sub	sp, #36	@ 0x24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	61fb      	str	r3, [r7, #28]
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	1c5a      	adds	r2, r3, #1
 8004ca0:	61fa      	str	r2, [r7, #28]
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	61ba      	str	r2, [r7, #24]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	1acb      	subs	r3, r1, r3
 8004cb0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	607b      	str	r3, [r7, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d002      	beq.n	8004cc4 <mem_cmp+0x40>
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0eb      	beq.n	8004c9c <mem_cmp+0x18>

	return r;
 8004cc4:	697b      	ldr	r3, [r7, #20]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3724      	adds	r7, #36	@ 0x24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004cd2:	b480      	push	{r7}
 8004cd4:	b083      	sub	sp, #12
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004cdc:	e002      	b.n	8004ce4 <chk_chr+0x12>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	607b      	str	r3, [r7, #4]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d005      	beq.n	8004cf8 <chk_chr+0x26>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d1f2      	bne.n	8004cde <chk_chr+0xc>
	return *str;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d009      	beq.n	8004d2a <lock_fs+0x22>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f001 ff4d 	bl	8006bba <ff_req_grant>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <lock_fs+0x22>
 8004d26:	2301      	movs	r3, #1
 8004d28:	e000      	b.n	8004d2c <lock_fs+0x24>
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3708      	adds	r7, #8
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00d      	beq.n	8004d62 <unlock_fs+0x2e>
 8004d46:	78fb      	ldrb	r3, [r7, #3]
 8004d48:	2b0c      	cmp	r3, #12
 8004d4a:	d00a      	beq.n	8004d62 <unlock_fs+0x2e>
 8004d4c:	78fb      	ldrb	r3, [r7, #3]
 8004d4e:	2b0b      	cmp	r3, #11
 8004d50:	d007      	beq.n	8004d62 <unlock_fs+0x2e>
 8004d52:	78fb      	ldrb	r3, [r7, #3]
 8004d54:	2b0f      	cmp	r3, #15
 8004d56:	d004      	beq.n	8004d62 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f001 ff41 	bl	8006be4 <ff_rel_grant>
	}
}
 8004d62:	bf00      	nop
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
	...

08004d6c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004d76:	2300      	movs	r3, #0
 8004d78:	60bb      	str	r3, [r7, #8]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	e029      	b.n	8004dd4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004d80:	4a27      	ldr	r2, [pc, #156]	@ (8004e20 <chk_lock+0xb4>)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	011b      	lsls	r3, r3, #4
 8004d86:	4413      	add	r3, r2
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d01d      	beq.n	8004dca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004d8e:	4a24      	ldr	r2, [pc, #144]	@ (8004e20 <chk_lock+0xb4>)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	011b      	lsls	r3, r3, #4
 8004d94:	4413      	add	r3, r2
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d116      	bne.n	8004dce <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004da0:	4a1f      	ldr	r2, [pc, #124]	@ (8004e20 <chk_lock+0xb4>)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	011b      	lsls	r3, r3, #4
 8004da6:	4413      	add	r3, r2
 8004da8:	3304      	adds	r3, #4
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d10c      	bne.n	8004dce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004db4:	4a1a      	ldr	r2, [pc, #104]	@ (8004e20 <chk_lock+0xb4>)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	011b      	lsls	r3, r3, #4
 8004dba:	4413      	add	r3, r2
 8004dbc:	3308      	adds	r3, #8
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d102      	bne.n	8004dce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004dc8:	e007      	b.n	8004dda <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d9d2      	bls.n	8004d80 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d109      	bne.n	8004df4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d102      	bne.n	8004dec <chk_lock+0x80>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d101      	bne.n	8004df0 <chk_lock+0x84>
 8004dec:	2300      	movs	r3, #0
 8004dee:	e010      	b.n	8004e12 <chk_lock+0xa6>
 8004df0:	2312      	movs	r3, #18
 8004df2:	e00e      	b.n	8004e12 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d108      	bne.n	8004e0c <chk_lock+0xa0>
 8004dfa:	4a09      	ldr	r2, [pc, #36]	@ (8004e20 <chk_lock+0xb4>)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	011b      	lsls	r3, r3, #4
 8004e00:	4413      	add	r3, r2
 8004e02:	330c      	adds	r3, #12
 8004e04:	881b      	ldrh	r3, [r3, #0]
 8004e06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e0a:	d101      	bne.n	8004e10 <chk_lock+0xa4>
 8004e0c:	2310      	movs	r3, #16
 8004e0e:	e000      	b.n	8004e12 <chk_lock+0xa6>
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	2000054c 	.word	0x2000054c

08004e24 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	607b      	str	r3, [r7, #4]
 8004e2e:	e002      	b.n	8004e36 <enq_lock+0x12>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	3301      	adds	r3, #1
 8004e34:	607b      	str	r3, [r7, #4]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d806      	bhi.n	8004e4a <enq_lock+0x26>
 8004e3c:	4a09      	ldr	r2, [pc, #36]	@ (8004e64 <enq_lock+0x40>)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	011b      	lsls	r3, r3, #4
 8004e42:	4413      	add	r3, r2
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1f2      	bne.n	8004e30 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	bf14      	ite	ne
 8004e50:	2301      	movne	r3, #1
 8004e52:	2300      	moveq	r3, #0
 8004e54:	b2db      	uxtb	r3, r3
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	2000054c 	.word	0x2000054c

08004e68 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004e72:	2300      	movs	r3, #0
 8004e74:	60fb      	str	r3, [r7, #12]
 8004e76:	e01f      	b.n	8004eb8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004e78:	4a41      	ldr	r2, [pc, #260]	@ (8004f80 <inc_lock+0x118>)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	011b      	lsls	r3, r3, #4
 8004e7e:	4413      	add	r3, r2
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d113      	bne.n	8004eb2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004e8a:	4a3d      	ldr	r2, [pc, #244]	@ (8004f80 <inc_lock+0x118>)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	4413      	add	r3, r2
 8004e92:	3304      	adds	r3, #4
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d109      	bne.n	8004eb2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004e9e:	4a38      	ldr	r2, [pc, #224]	@ (8004f80 <inc_lock+0x118>)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	011b      	lsls	r3, r3, #4
 8004ea4:	4413      	add	r3, r2
 8004ea6:	3308      	adds	r3, #8
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d006      	beq.n	8004ec0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	60fb      	str	r3, [r7, #12]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d9dc      	bls.n	8004e78 <inc_lock+0x10>
 8004ebe:	e000      	b.n	8004ec2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004ec0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d132      	bne.n	8004f2e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	60fb      	str	r3, [r7, #12]
 8004ecc:	e002      	b.n	8004ed4 <inc_lock+0x6c>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d806      	bhi.n	8004ee8 <inc_lock+0x80>
 8004eda:	4a29      	ldr	r2, [pc, #164]	@ (8004f80 <inc_lock+0x118>)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	011b      	lsls	r3, r3, #4
 8004ee0:	4413      	add	r3, r2
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1f2      	bne.n	8004ece <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d101      	bne.n	8004ef2 <inc_lock+0x8a>
 8004eee:	2300      	movs	r3, #0
 8004ef0:	e040      	b.n	8004f74 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	4922      	ldr	r1, [pc, #136]	@ (8004f80 <inc_lock+0x118>)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	011b      	lsls	r3, r3, #4
 8004efc:	440b      	add	r3, r1
 8004efe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	491e      	ldr	r1, [pc, #120]	@ (8004f80 <inc_lock+0x118>)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	440b      	add	r3, r1
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	695a      	ldr	r2, [r3, #20]
 8004f14:	491a      	ldr	r1, [pc, #104]	@ (8004f80 <inc_lock+0x118>)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	011b      	lsls	r3, r3, #4
 8004f1a:	440b      	add	r3, r1
 8004f1c:	3308      	adds	r3, #8
 8004f1e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004f20:	4a17      	ldr	r2, [pc, #92]	@ (8004f80 <inc_lock+0x118>)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	011b      	lsls	r3, r3, #4
 8004f26:	4413      	add	r3, r2
 8004f28:	330c      	adds	r3, #12
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d009      	beq.n	8004f48 <inc_lock+0xe0>
 8004f34:	4a12      	ldr	r2, [pc, #72]	@ (8004f80 <inc_lock+0x118>)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	011b      	lsls	r3, r3, #4
 8004f3a:	4413      	add	r3, r2
 8004f3c:	330c      	adds	r3, #12
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d001      	beq.n	8004f48 <inc_lock+0xe0>
 8004f44:	2300      	movs	r3, #0
 8004f46:	e015      	b.n	8004f74 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d108      	bne.n	8004f60 <inc_lock+0xf8>
 8004f4e:	4a0c      	ldr	r2, [pc, #48]	@ (8004f80 <inc_lock+0x118>)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	011b      	lsls	r3, r3, #4
 8004f54:	4413      	add	r3, r2
 8004f56:	330c      	adds	r3, #12
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	e001      	b.n	8004f64 <inc_lock+0xfc>
 8004f60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f64:	4906      	ldr	r1, [pc, #24]	@ (8004f80 <inc_lock+0x118>)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	011b      	lsls	r3, r3, #4
 8004f6a:	440b      	add	r3, r1
 8004f6c:	330c      	adds	r3, #12
 8004f6e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	3301      	adds	r3, #1
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	2000054c 	.word	0x2000054c

08004f84 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	60fb      	str	r3, [r7, #12]
 8004f90:	e010      	b.n	8004fb4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004f92:	4a0d      	ldr	r2, [pc, #52]	@ (8004fc8 <clear_lock+0x44>)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	011b      	lsls	r3, r3, #4
 8004f98:	4413      	add	r3, r2
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d105      	bne.n	8004fae <clear_lock+0x2a>
 8004fa2:	4a09      	ldr	r2, [pc, #36]	@ (8004fc8 <clear_lock+0x44>)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	011b      	lsls	r3, r3, #4
 8004fa8:	4413      	add	r3, r2
 8004faa:	2200      	movs	r2, #0
 8004fac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d9eb      	bls.n	8004f92 <clear_lock+0xe>
	}
}
 8004fba:	bf00      	nop
 8004fbc:	bf00      	nop
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	2000054c 	.word	0x2000054c

08004fcc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	78db      	ldrb	r3, [r3, #3]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d034      	beq.n	800504a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	7858      	ldrb	r0, [r3, #1]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	f7ff fd68 	bl	8004ac8 <disk_write>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d002      	beq.n	8005004 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	73fb      	strb	r3, [r7, #15]
 8005002:	e022      	b.n	800504a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	1ad2      	subs	r2, r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	429a      	cmp	r2, r3
 8005018:	d217      	bcs.n	800504a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	789b      	ldrb	r3, [r3, #2]
 800501e:	613b      	str	r3, [r7, #16]
 8005020:	e010      	b.n	8005044 <sync_window+0x78>
					wsect += fs->fsize;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	4413      	add	r3, r2
 800502a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	7858      	ldrb	r0, [r3, #1]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005036:	2301      	movs	r3, #1
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	f7ff fd45 	bl	8004ac8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	3b01      	subs	r3, #1
 8005042:	613b      	str	r3, [r7, #16]
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d8eb      	bhi.n	8005022 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800504a:	7bfb      	ldrb	r3, [r7, #15]
}
 800504c:	4618      	mov	r0, r3
 800504e:	3718      	adds	r7, #24
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800505e:	2300      	movs	r3, #0
 8005060:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	429a      	cmp	r2, r3
 800506a:	d01b      	beq.n	80050a4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f7ff ffad 	bl	8004fcc <sync_window>
 8005072:	4603      	mov	r3, r0
 8005074:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005076:	7bfb      	ldrb	r3, [r7, #15]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d113      	bne.n	80050a4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	7858      	ldrb	r0, [r3, #1]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005086:	2301      	movs	r3, #1
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	f7ff fcfd 	bl	8004a88 <disk_read>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d004      	beq.n	800509e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005094:	f04f 33ff 	mov.w	r3, #4294967295
 8005098:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800509a:	2301      	movs	r3, #1
 800509c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 80050a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b083      	sub	sp, #12
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	3b02      	subs	r3, #2
 80050bc:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	3b02      	subs	r3, #2
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d301      	bcc.n	80050ce <clust2sect+0x20>
 80050ca:	2300      	movs	r3, #0
 80050cc:	e008      	b.n	80050e0 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	895b      	ldrh	r3, [r3, #10]
 80050d2:	461a      	mov	r2, r3
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	fb03 f202 	mul.w	r2, r3, r2
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050de:	4413      	add	r3, r2
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d904      	bls.n	800510c <get_fat+0x20>
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	429a      	cmp	r2, r3
 800510a:	d302      	bcc.n	8005112 <get_fat+0x26>
		val = 1;	/* Internal error */
 800510c:	2301      	movs	r3, #1
 800510e:	617b      	str	r3, [r7, #20]
 8005110:	e08e      	b.n	8005230 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005112:	f04f 33ff 	mov.w	r3, #4294967295
 8005116:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	2b03      	cmp	r3, #3
 800511e:	d061      	beq.n	80051e4 <get_fat+0xf8>
 8005120:	2b03      	cmp	r3, #3
 8005122:	dc7b      	bgt.n	800521c <get_fat+0x130>
 8005124:	2b01      	cmp	r3, #1
 8005126:	d002      	beq.n	800512e <get_fat+0x42>
 8005128:	2b02      	cmp	r3, #2
 800512a:	d041      	beq.n	80051b0 <get_fat+0xc4>
 800512c:	e076      	b.n	800521c <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	60fb      	str	r3, [r7, #12]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	085b      	lsrs	r3, r3, #1
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4413      	add	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	0a5b      	lsrs	r3, r3, #9
 8005144:	4413      	add	r3, r2
 8005146:	4619      	mov	r1, r3
 8005148:	6938      	ldr	r0, [r7, #16]
 800514a:	f7ff ff83 	bl	8005054 <move_window>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d166      	bne.n	8005222 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	60fa      	str	r2, [r7, #12]
 800515a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	4413      	add	r3, r2
 8005162:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005166:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	0a5b      	lsrs	r3, r3, #9
 8005170:	4413      	add	r3, r2
 8005172:	4619      	mov	r1, r3
 8005174:	6938      	ldr	r0, [r7, #16]
 8005176:	f7ff ff6d 	bl	8005054 <move_window>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d152      	bne.n	8005226 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	4413      	add	r3, r2
 800518a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800518e:	021b      	lsls	r3, r3, #8
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	4313      	orrs	r3, r2
 8005194:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	2b00      	cmp	r3, #0
 800519e:	d002      	beq.n	80051a6 <get_fat+0xba>
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	091b      	lsrs	r3, r3, #4
 80051a4:	e002      	b.n	80051ac <get_fat+0xc0>
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051ac:	617b      	str	r3, [r7, #20]
			break;
 80051ae:	e03f      	b.n	8005230 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	0a1b      	lsrs	r3, r3, #8
 80051b8:	4413      	add	r3, r2
 80051ba:	4619      	mov	r1, r3
 80051bc:	6938      	ldr	r0, [r7, #16]
 80051be:	f7ff ff49 	bl	8005054 <move_window>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d130      	bne.n	800522a <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80051d6:	4413      	add	r3, r2
 80051d8:	4618      	mov	r0, r3
 80051da:	f7ff fc95 	bl	8004b08 <ld_word>
 80051de:	4603      	mov	r3, r0
 80051e0:	617b      	str	r3, [r7, #20]
			break;
 80051e2:	e025      	b.n	8005230 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	09db      	lsrs	r3, r3, #7
 80051ec:	4413      	add	r3, r2
 80051ee:	4619      	mov	r1, r3
 80051f0:	6938      	ldr	r0, [r7, #16]
 80051f2:	f7ff ff2f 	bl	8005054 <move_window>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d118      	bne.n	800522e <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800520a:	4413      	add	r3, r2
 800520c:	4618      	mov	r0, r3
 800520e:	f7ff fc93 	bl	8004b38 <ld_dword>
 8005212:	4603      	mov	r3, r0
 8005214:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005218:	617b      	str	r3, [r7, #20]
			break;
 800521a:	e009      	b.n	8005230 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800521c:	2301      	movs	r3, #1
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	e006      	b.n	8005230 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005222:	bf00      	nop
 8005224:	e004      	b.n	8005230 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005226:	bf00      	nop
 8005228:	e002      	b.n	8005230 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800522a:	bf00      	nop
 800522c:	e000      	b.n	8005230 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800522e:	bf00      	nop
		}
	}

	return val;
 8005230:	697b      	ldr	r3, [r7, #20]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800523a:	b590      	push	{r4, r7, lr}
 800523c:	b089      	sub	sp, #36	@ 0x24
 800523e:	af00      	add	r7, sp, #0
 8005240:	60f8      	str	r0, [r7, #12]
 8005242:	60b9      	str	r1, [r7, #8]
 8005244:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005246:	2302      	movs	r3, #2
 8005248:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	2b01      	cmp	r3, #1
 800524e:	f240 80d9 	bls.w	8005404 <put_fat+0x1ca>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	429a      	cmp	r2, r3
 800525a:	f080 80d3 	bcs.w	8005404 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	2b03      	cmp	r3, #3
 8005264:	f000 8096 	beq.w	8005394 <put_fat+0x15a>
 8005268:	2b03      	cmp	r3, #3
 800526a:	f300 80cb 	bgt.w	8005404 <put_fat+0x1ca>
 800526e:	2b01      	cmp	r3, #1
 8005270:	d002      	beq.n	8005278 <put_fat+0x3e>
 8005272:	2b02      	cmp	r3, #2
 8005274:	d06e      	beq.n	8005354 <put_fat+0x11a>
 8005276:	e0c5      	b.n	8005404 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	61bb      	str	r3, [r7, #24]
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	085b      	lsrs	r3, r3, #1
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	4413      	add	r3, r2
 8005284:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	0a5b      	lsrs	r3, r3, #9
 800528e:	4413      	add	r3, r2
 8005290:	4619      	mov	r1, r3
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f7ff fede 	bl	8005054 <move_window>
 8005298:	4603      	mov	r3, r0
 800529a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800529c:	7ffb      	ldrb	r3, [r7, #31]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f040 80a9 	bne.w	80053f6 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	1c59      	adds	r1, r3, #1
 80052ae:	61b9      	str	r1, [r7, #24]
 80052b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052b4:	4413      	add	r3, r2
 80052b6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00d      	beq.n	80052de <put_fat+0xa4>
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	b25b      	sxtb	r3, r3
 80052c8:	f003 030f 	and.w	r3, r3, #15
 80052cc:	b25a      	sxtb	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	011b      	lsls	r3, r3, #4
 80052d4:	b25b      	sxtb	r3, r3
 80052d6:	4313      	orrs	r3, r2
 80052d8:	b25b      	sxtb	r3, r3
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	e001      	b.n	80052e2 <put_fat+0xa8>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2201      	movs	r2, #1
 80052ea:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	0a5b      	lsrs	r3, r3, #9
 80052f4:	4413      	add	r3, r2
 80052f6:	4619      	mov	r1, r3
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f7ff feab 	bl	8005054 <move_window>
 80052fe:	4603      	mov	r3, r0
 8005300:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005302:	7ffb      	ldrb	r3, [r7, #31]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d178      	bne.n	80053fa <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005314:	4413      	add	r3, r2
 8005316:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <put_fat+0xf0>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	091b      	lsrs	r3, r3, #4
 8005326:	b2db      	uxtb	r3, r3
 8005328:	e00e      	b.n	8005348 <put_fat+0x10e>
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	b25b      	sxtb	r3, r3
 8005330:	f023 030f 	bic.w	r3, r3, #15
 8005334:	b25a      	sxtb	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	0a1b      	lsrs	r3, r3, #8
 800533a:	b25b      	sxtb	r3, r3
 800533c:	f003 030f 	and.w	r3, r3, #15
 8005340:	b25b      	sxtb	r3, r3
 8005342:	4313      	orrs	r3, r2
 8005344:	b25b      	sxtb	r3, r3
 8005346:	b2db      	uxtb	r3, r3
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2201      	movs	r2, #1
 8005350:	70da      	strb	r2, [r3, #3]
			break;
 8005352:	e057      	b.n	8005404 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	0a1b      	lsrs	r3, r3, #8
 800535c:	4413      	add	r3, r2
 800535e:	4619      	mov	r1, r3
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f7ff fe77 	bl	8005054 <move_window>
 8005366:	4603      	mov	r3, r0
 8005368:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800536a:	7ffb      	ldrb	r3, [r7, #31]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d146      	bne.n	80053fe <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800537e:	4413      	add	r3, r2
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	b292      	uxth	r2, r2
 8005384:	4611      	mov	r1, r2
 8005386:	4618      	mov	r0, r3
 8005388:	f7ff fbf9 	bl	8004b7e <st_word>
			fs->wflag = 1;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2201      	movs	r2, #1
 8005390:	70da      	strb	r2, [r3, #3]
			break;
 8005392:	e037      	b.n	8005404 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	09db      	lsrs	r3, r3, #7
 800539c:	4413      	add	r3, r2
 800539e:	4619      	mov	r1, r3
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f7ff fe57 	bl	8005054 <move_window>
 80053a6:	4603      	mov	r3, r0
 80053a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80053aa:	7ffb      	ldrb	r3, [r7, #31]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d128      	bne.n	8005402 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80053c4:	4413      	add	r3, r2
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7ff fbb6 	bl	8004b38 <ld_dword>
 80053cc:	4603      	mov	r3, r0
 80053ce:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80053d2:	4323      	orrs	r3, r4
 80053d4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80053e4:	4413      	add	r3, r2
 80053e6:	6879      	ldr	r1, [r7, #4]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7ff fbe3 	bl	8004bb4 <st_dword>
			fs->wflag = 1;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2201      	movs	r2, #1
 80053f2:	70da      	strb	r2, [r3, #3]
			break;
 80053f4:	e006      	b.n	8005404 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80053f6:	bf00      	nop
 80053f8:	e004      	b.n	8005404 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80053fa:	bf00      	nop
 80053fc:	e002      	b.n	8005404 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80053fe:	bf00      	nop
 8005400:	e000      	b.n	8005404 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005402:	bf00      	nop
		}
	}
	return res;
 8005404:	7ffb      	ldrb	r3, [r7, #31]
}
 8005406:	4618      	mov	r0, r3
 8005408:	3724      	adds	r7, #36	@ 0x24
 800540a:	46bd      	mov	sp, r7
 800540c:	bd90      	pop	{r4, r7, pc}

0800540e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b088      	sub	sp, #32
 8005412:	af00      	add	r7, sp, #0
 8005414:	60f8      	str	r0, [r7, #12]
 8005416:	60b9      	str	r1, [r7, #8]
 8005418:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800541a:	2300      	movs	r3, #0
 800541c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d904      	bls.n	8005434 <remove_chain+0x26>
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	429a      	cmp	r2, r3
 8005432:	d301      	bcc.n	8005438 <remove_chain+0x2a>
 8005434:	2302      	movs	r3, #2
 8005436:	e04b      	b.n	80054d0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00c      	beq.n	8005458 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800543e:	f04f 32ff 	mov.w	r2, #4294967295
 8005442:	6879      	ldr	r1, [r7, #4]
 8005444:	69b8      	ldr	r0, [r7, #24]
 8005446:	f7ff fef8 	bl	800523a <put_fat>
 800544a:	4603      	mov	r3, r0
 800544c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800544e:	7ffb      	ldrb	r3, [r7, #31]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d001      	beq.n	8005458 <remove_chain+0x4a>
 8005454:	7ffb      	ldrb	r3, [r7, #31]
 8005456:	e03b      	b.n	80054d0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005458:	68b9      	ldr	r1, [r7, #8]
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f7ff fe46 	bl	80050ec <get_fat>
 8005460:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d031      	beq.n	80054cc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d101      	bne.n	8005472 <remove_chain+0x64>
 800546e:	2302      	movs	r3, #2
 8005470:	e02e      	b.n	80054d0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005478:	d101      	bne.n	800547e <remove_chain+0x70>
 800547a:	2301      	movs	r3, #1
 800547c:	e028      	b.n	80054d0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800547e:	2200      	movs	r2, #0
 8005480:	68b9      	ldr	r1, [r7, #8]
 8005482:	69b8      	ldr	r0, [r7, #24]
 8005484:	f7ff fed9 	bl	800523a <put_fat>
 8005488:	4603      	mov	r3, r0
 800548a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800548c:	7ffb      	ldrb	r3, [r7, #31]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <remove_chain+0x88>
 8005492:	7ffb      	ldrb	r3, [r7, #31]
 8005494:	e01c      	b.n	80054d0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	695a      	ldr	r2, [r3, #20]
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	3b02      	subs	r3, #2
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d20b      	bcs.n	80054bc <remove_chain+0xae>
			fs->free_clst++;
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	1c5a      	adds	r2, r3, #1
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	791b      	ldrb	r3, [r3, #4]
 80054b2:	f043 0301 	orr.w	r3, r3, #1
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d3c6      	bcc.n	8005458 <remove_chain+0x4a>
 80054ca:	e000      	b.n	80054ce <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80054cc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3720      	adds	r7, #32
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b088      	sub	sp, #32
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10d      	bne.n	800550a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d004      	beq.n	8005504 <create_chain+0x2c>
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	69ba      	ldr	r2, [r7, #24]
 8005500:	429a      	cmp	r2, r3
 8005502:	d31b      	bcc.n	800553c <create_chain+0x64>
 8005504:	2301      	movs	r3, #1
 8005506:	61bb      	str	r3, [r7, #24]
 8005508:	e018      	b.n	800553c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800550a:	6839      	ldr	r1, [r7, #0]
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7ff fded 	bl	80050ec <get_fat>
 8005512:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d801      	bhi.n	800551e <create_chain+0x46>
 800551a:	2301      	movs	r3, #1
 800551c:	e070      	b.n	8005600 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005524:	d101      	bne.n	800552a <create_chain+0x52>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	e06a      	b.n	8005600 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	429a      	cmp	r2, r3
 8005532:	d201      	bcs.n	8005538 <create_chain+0x60>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	e063      	b.n	8005600 <create_chain+0x128>
		scl = clst;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	3301      	adds	r3, #1
 8005544:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	69fa      	ldr	r2, [r7, #28]
 800554c:	429a      	cmp	r2, r3
 800554e:	d307      	bcc.n	8005560 <create_chain+0x88>
				ncl = 2;
 8005550:	2302      	movs	r3, #2
 8005552:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005554:	69fa      	ldr	r2, [r7, #28]
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	429a      	cmp	r2, r3
 800555a:	d901      	bls.n	8005560 <create_chain+0x88>
 800555c:	2300      	movs	r3, #0
 800555e:	e04f      	b.n	8005600 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005560:	69f9      	ldr	r1, [r7, #28]
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7ff fdc2 	bl	80050ec <get_fat>
 8005568:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00e      	beq.n	800558e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d003      	beq.n	800557e <create_chain+0xa6>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557c:	d101      	bne.n	8005582 <create_chain+0xaa>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	e03e      	b.n	8005600 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005582:	69fa      	ldr	r2, [r7, #28]
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	429a      	cmp	r2, r3
 8005588:	d1da      	bne.n	8005540 <create_chain+0x68>
 800558a:	2300      	movs	r3, #0
 800558c:	e038      	b.n	8005600 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800558e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005590:	f04f 32ff 	mov.w	r2, #4294967295
 8005594:	69f9      	ldr	r1, [r7, #28]
 8005596:	6938      	ldr	r0, [r7, #16]
 8005598:	f7ff fe4f 	bl	800523a <put_fat>
 800559c:	4603      	mov	r3, r0
 800559e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80055a0:	7dfb      	ldrb	r3, [r7, #23]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d109      	bne.n	80055ba <create_chain+0xe2>
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d006      	beq.n	80055ba <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80055ac:	69fa      	ldr	r2, [r7, #28]
 80055ae:	6839      	ldr	r1, [r7, #0]
 80055b0:	6938      	ldr	r0, [r7, #16]
 80055b2:	f7ff fe42 	bl	800523a <put_fat>
 80055b6:	4603      	mov	r3, r0
 80055b8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80055ba:	7dfb      	ldrb	r3, [r7, #23]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d116      	bne.n	80055ee <create_chain+0x116>
		fs->last_clst = ncl;
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	69fa      	ldr	r2, [r7, #28]
 80055c4:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	695a      	ldr	r2, [r3, #20]
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	3b02      	subs	r3, #2
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d804      	bhi.n	80055de <create_chain+0x106>
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	695b      	ldr	r3, [r3, #20]
 80055d8:	1e5a      	subs	r2, r3, #1
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	791b      	ldrb	r3, [r3, #4]
 80055e2:	f043 0301 	orr.w	r3, r3, #1
 80055e6:	b2da      	uxtb	r2, r3
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	711a      	strb	r2, [r3, #4]
 80055ec:	e007      	b.n	80055fe <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80055ee:	7dfb      	ldrb	r3, [r7, #23]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d102      	bne.n	80055fa <create_chain+0x122>
 80055f4:	f04f 33ff 	mov.w	r3, #4294967295
 80055f8:	e000      	b.n	80055fc <create_chain+0x124>
 80055fa:	2301      	movs	r3, #1
 80055fc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80055fe:	69fb      	ldr	r3, [r7, #28]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3720      	adds	r7, #32
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800561c:	3304      	adds	r3, #4
 800561e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	0a5b      	lsrs	r3, r3, #9
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	8952      	ldrh	r2, [r2, #10]
 8005628:	fbb3 f3f2 	udiv	r3, r3, r2
 800562c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	1d1a      	adds	r2, r3, #4
 8005632:	613a      	str	r2, [r7, #16]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <clmt_clust+0x3a>
 800563e:	2300      	movs	r3, #0
 8005640:	e010      	b.n	8005664 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	429a      	cmp	r2, r3
 8005648:	d307      	bcc.n	800565a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	617b      	str	r3, [r7, #20]
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	3304      	adds	r3, #4
 8005656:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005658:	e7e9      	b.n	800562e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800565a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	4413      	add	r3, r2
}
 8005664:	4618      	mov	r0, r3
 8005666:	371c      	adds	r7, #28
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005686:	d204      	bcs.n	8005692 <dir_sdi+0x22>
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	f003 031f 	and.w	r3, r3, #31
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005692:	2302      	movs	r3, #2
 8005694:	e063      	b.n	800575e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d106      	bne.n	80056b6 <dir_sdi+0x46>
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d902      	bls.n	80056b6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10c      	bne.n	80056d6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	095b      	lsrs	r3, r3, #5
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	8912      	ldrh	r2, [r2, #8]
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d301      	bcc.n	80056cc <dir_sdi+0x5c>
 80056c8:	2302      	movs	r3, #2
 80056ca:	e048      	b.n	800575e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	61da      	str	r2, [r3, #28]
 80056d4:	e029      	b.n	800572a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	895b      	ldrh	r3, [r3, #10]
 80056da:	025b      	lsls	r3, r3, #9
 80056dc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80056de:	e019      	b.n	8005714 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6979      	ldr	r1, [r7, #20]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7ff fd01 	bl	80050ec <get_fat>
 80056ea:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f2:	d101      	bne.n	80056f8 <dir_sdi+0x88>
 80056f4:	2301      	movs	r3, #1
 80056f6:	e032      	b.n	800575e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d904      	bls.n	8005708 <dir_sdi+0x98>
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	429a      	cmp	r2, r3
 8005706:	d301      	bcc.n	800570c <dir_sdi+0x9c>
 8005708:	2302      	movs	r3, #2
 800570a:	e028      	b.n	800575e <dir_sdi+0xee>
			ofs -= csz;
 800570c:	683a      	ldr	r2, [r7, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005714:	683a      	ldr	r2, [r7, #0]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	429a      	cmp	r2, r3
 800571a:	d2e1      	bcs.n	80056e0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800571c:	6979      	ldr	r1, [r7, #20]
 800571e:	6938      	ldr	r0, [r7, #16]
 8005720:	f7ff fcc5 	bl	80050ae <clust2sect>
 8005724:	4602      	mov	r2, r0
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	69db      	ldr	r3, [r3, #28]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d101      	bne.n	800573c <dir_sdi+0xcc>
 8005738:	2302      	movs	r3, #2
 800573a:	e010      	b.n	800575e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	69da      	ldr	r2, [r3, #28]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	0a5b      	lsrs	r3, r3, #9
 8005744:	441a      	add	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005756:	441a      	add	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3718      	adds	r7, #24
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b086      	sub	sp, #24
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
 800576e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	3320      	adds	r3, #32
 800577c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <dir_next+0x28>
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800578c:	d301      	bcc.n	8005792 <dir_next+0x2c>
 800578e:	2304      	movs	r3, #4
 8005790:	e0aa      	b.n	80058e8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005798:	2b00      	cmp	r3, #0
 800579a:	f040 8098 	bne.w	80058ce <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	1c5a      	adds	r2, r3, #1
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10b      	bne.n	80057c8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	095b      	lsrs	r3, r3, #5
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	8912      	ldrh	r2, [r2, #8]
 80057b8:	4293      	cmp	r3, r2
 80057ba:	f0c0 8088 	bcc.w	80058ce <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	61da      	str	r2, [r3, #28]
 80057c4:	2304      	movs	r3, #4
 80057c6:	e08f      	b.n	80058e8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	0a5b      	lsrs	r3, r3, #9
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	8952      	ldrh	r2, [r2, #10]
 80057d0:	3a01      	subs	r2, #1
 80057d2:	4013      	ands	r3, r2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d17a      	bne.n	80058ce <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	4619      	mov	r1, r3
 80057e0:	4610      	mov	r0, r2
 80057e2:	f7ff fc83 	bl	80050ec <get_fat>
 80057e6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d801      	bhi.n	80057f2 <dir_next+0x8c>
 80057ee:	2302      	movs	r3, #2
 80057f0:	e07a      	b.n	80058e8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f8:	d101      	bne.n	80057fe <dir_next+0x98>
 80057fa:	2301      	movs	r3, #1
 80057fc:	e074      	b.n	80058e8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	429a      	cmp	r2, r3
 8005806:	d358      	bcc.n	80058ba <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d104      	bne.n	8005818 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	61da      	str	r2, [r3, #28]
 8005814:	2304      	movs	r3, #4
 8005816:	e067      	b.n	80058e8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	4619      	mov	r1, r3
 8005820:	4610      	mov	r0, r2
 8005822:	f7ff fe59 	bl	80054d8 <create_chain>
 8005826:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d101      	bne.n	8005832 <dir_next+0xcc>
 800582e:	2307      	movs	r3, #7
 8005830:	e05a      	b.n	80058e8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d101      	bne.n	800583c <dir_next+0xd6>
 8005838:	2302      	movs	r3, #2
 800583a:	e055      	b.n	80058e8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005842:	d101      	bne.n	8005848 <dir_next+0xe2>
 8005844:	2301      	movs	r3, #1
 8005846:	e04f      	b.n	80058e8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f7ff fbbf 	bl	8004fcc <sync_window>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <dir_next+0xf2>
 8005854:	2301      	movs	r3, #1
 8005856:	e047      	b.n	80058e8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	3334      	adds	r3, #52	@ 0x34
 800585c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005860:	2100      	movs	r1, #0
 8005862:	4618      	mov	r0, r3
 8005864:	f7ff f9f3 	bl	8004c4e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005868:	2300      	movs	r3, #0
 800586a:	613b      	str	r3, [r7, #16]
 800586c:	6979      	ldr	r1, [r7, #20]
 800586e:	68f8      	ldr	r0, [r7, #12]
 8005870:	f7ff fc1d 	bl	80050ae <clust2sect>
 8005874:	4602      	mov	r2, r0
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	631a      	str	r2, [r3, #48]	@ 0x30
 800587a:	e012      	b.n	80058a2 <dir_next+0x13c>
						fs->wflag = 1;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2201      	movs	r2, #1
 8005880:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f7ff fba2 	bl	8004fcc <sync_window>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <dir_next+0x12c>
 800588e:	2301      	movs	r3, #1
 8005890:	e02a      	b.n	80058e8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	3301      	adds	r3, #1
 8005896:	613b      	str	r3, [r7, #16]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589c:	1c5a      	adds	r2, r3, #1
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	895b      	ldrh	r3, [r3, #10]
 80058a6:	461a      	mov	r2, r3
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d3e6      	bcc.n	800587c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	1ad2      	subs	r2, r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80058c0:	6979      	ldr	r1, [r7, #20]
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f7ff fbf3 	bl	80050ae <clust2sect>
 80058c8:	4602      	mov	r2, r0
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058e0:	441a      	add	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3718      	adds	r7, #24
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005900:	2100      	movs	r1, #0
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f7ff feb4 	bl	8005670 <dir_sdi>
 8005908:	4603      	mov	r3, r0
 800590a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800590c:	7dfb      	ldrb	r3, [r7, #23]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d12b      	bne.n	800596a <dir_alloc+0x7a>
		n = 0;
 8005912:	2300      	movs	r3, #0
 8005914:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	4619      	mov	r1, r3
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f7ff fb99 	bl	8005054 <move_window>
 8005922:	4603      	mov	r3, r0
 8005924:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005926:	7dfb      	ldrb	r3, [r7, #23]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d11d      	bne.n	8005968 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	2be5      	cmp	r3, #229	@ 0xe5
 8005934:	d004      	beq.n	8005940 <dir_alloc+0x50>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d107      	bne.n	8005950 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	3301      	adds	r3, #1
 8005944:	613b      	str	r3, [r7, #16]
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	429a      	cmp	r2, r3
 800594c:	d102      	bne.n	8005954 <dir_alloc+0x64>
 800594e:	e00c      	b.n	800596a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005950:	2300      	movs	r3, #0
 8005952:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005954:	2101      	movs	r1, #1
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f7ff ff05 	bl	8005766 <dir_next>
 800595c:	4603      	mov	r3, r0
 800595e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005960:	7dfb      	ldrb	r3, [r7, #23]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d0d7      	beq.n	8005916 <dir_alloc+0x26>
 8005966:	e000      	b.n	800596a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005968:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800596a:	7dfb      	ldrb	r3, [r7, #23]
 800596c:	2b04      	cmp	r3, #4
 800596e:	d101      	bne.n	8005974 <dir_alloc+0x84>
 8005970:	2307      	movs	r3, #7
 8005972:	75fb      	strb	r3, [r7, #23]
	return res;
 8005974:	7dfb      	ldrb	r3, [r7, #23]
}
 8005976:	4618      	mov	r0, r3
 8005978:	3718      	adds	r7, #24
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b084      	sub	sp, #16
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
 8005986:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	331a      	adds	r3, #26
 800598c:	4618      	mov	r0, r3
 800598e:	f7ff f8bb 	bl	8004b08 <ld_word>
 8005992:	4603      	mov	r3, r0
 8005994:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	2b03      	cmp	r3, #3
 800599c:	d109      	bne.n	80059b2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	3314      	adds	r3, #20
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7ff f8b0 	bl	8004b08 <ld_word>
 80059a8:	4603      	mov	r3, r0
 80059aa:	041b      	lsls	r3, r3, #16
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80059b2:	68fb      	ldr	r3, [r7, #12]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	331a      	adds	r3, #26
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	b292      	uxth	r2, r2
 80059d0:	4611      	mov	r1, r2
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7ff f8d3 	bl	8004b7e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	2b03      	cmp	r3, #3
 80059de:	d109      	bne.n	80059f4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	f103 0214 	add.w	r2, r3, #20
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	0c1b      	lsrs	r3, r3, #16
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	4619      	mov	r1, r3
 80059ee:	4610      	mov	r0, r2
 80059f0:	f7ff f8c5 	bl	8004b7e <st_word>
	}
}
 80059f4:	bf00      	nop
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b086      	sub	sp, #24
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f7ff fe2f 	bl	8005670 <dir_sdi>
 8005a12:	4603      	mov	r3, r0
 8005a14:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005a16:	7dfb      	ldrb	r3, [r7, #23]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <dir_find+0x24>
 8005a1c:	7dfb      	ldrb	r3, [r7, #23]
 8005a1e:	e03e      	b.n	8005a9e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	69db      	ldr	r3, [r3, #28]
 8005a24:	4619      	mov	r1, r3
 8005a26:	6938      	ldr	r0, [r7, #16]
 8005a28:	f7ff fb14 	bl	8005054 <move_window>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005a30:	7dfb      	ldrb	r3, [r7, #23]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d12f      	bne.n	8005a96 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005a3e:	7bfb      	ldrb	r3, [r7, #15]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d102      	bne.n	8005a4a <dir_find+0x4e>
 8005a44:	2304      	movs	r3, #4
 8005a46:	75fb      	strb	r3, [r7, #23]
 8005a48:	e028      	b.n	8005a9c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	330b      	adds	r3, #11
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a1b      	ldr	r3, [r3, #32]
 8005a60:	330b      	adds	r3, #11
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	f003 0308 	and.w	r3, r3, #8
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10a      	bne.n	8005a82 <dir_find+0x86>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a18      	ldr	r0, [r3, #32]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	3324      	adds	r3, #36	@ 0x24
 8005a74:	220b      	movs	r2, #11
 8005a76:	4619      	mov	r1, r3
 8005a78:	f7ff f904 	bl	8004c84 <mem_cmp>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00b      	beq.n	8005a9a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005a82:	2100      	movs	r1, #0
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f7ff fe6e 	bl	8005766 <dir_next>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005a8e:	7dfb      	ldrb	r3, [r7, #23]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d0c5      	beq.n	8005a20 <dir_find+0x24>
 8005a94:	e002      	b.n	8005a9c <dir_find+0xa0>
		if (res != FR_OK) break;
 8005a96:	bf00      	nop
 8005a98:	e000      	b.n	8005a9c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005a9a:	bf00      	nop

	return res;
 8005a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3718      	adds	r7, #24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b084      	sub	sp, #16
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005ab4:	2101      	movs	r1, #1
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7ff ff1a 	bl	80058f0 <dir_alloc>
 8005abc:	4603      	mov	r3, r0
 8005abe:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d11c      	bne.n	8005b00 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	4619      	mov	r1, r3
 8005acc:	68b8      	ldr	r0, [r7, #8]
 8005ace:	f7ff fac1 	bl	8005054 <move_window>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005ad6:	7bfb      	ldrb	r3, [r7, #15]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d111      	bne.n	8005b00 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a1b      	ldr	r3, [r3, #32]
 8005ae0:	2220      	movs	r2, #32
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7ff f8b2 	bl	8004c4e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a18      	ldr	r0, [r3, #32]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	3324      	adds	r3, #36	@ 0x24
 8005af2:	220b      	movs	r2, #11
 8005af4:	4619      	mov	r1, r3
 8005af6:	f7ff f889 	bl	8004c0c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	2201      	movs	r2, #1
 8005afe:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
	...

08005b0c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b088      	sub	sp, #32
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	3324      	adds	r3, #36	@ 0x24
 8005b20:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005b22:	220b      	movs	r2, #11
 8005b24:	2120      	movs	r1, #32
 8005b26:	68b8      	ldr	r0, [r7, #8]
 8005b28:	f7ff f891 	bl	8004c4e <mem_set>
	si = i = 0; ni = 8;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	613b      	str	r3, [r7, #16]
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	61fb      	str	r3, [r7, #28]
 8005b34:	2308      	movs	r3, #8
 8005b36:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	1c5a      	adds	r2, r3, #1
 8005b3c:	61fa      	str	r2, [r7, #28]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	4413      	add	r3, r2
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005b46:	7efb      	ldrb	r3, [r7, #27]
 8005b48:	2b20      	cmp	r3, #32
 8005b4a:	d94e      	bls.n	8005bea <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005b4c:	7efb      	ldrb	r3, [r7, #27]
 8005b4e:	2b2f      	cmp	r3, #47	@ 0x2f
 8005b50:	d006      	beq.n	8005b60 <create_name+0x54>
 8005b52:	7efb      	ldrb	r3, [r7, #27]
 8005b54:	2b5c      	cmp	r3, #92	@ 0x5c
 8005b56:	d110      	bne.n	8005b7a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005b58:	e002      	b.n	8005b60 <create_name+0x54>
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	61fb      	str	r3, [r7, #28]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	4413      	add	r3, r2
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	2b2f      	cmp	r3, #47	@ 0x2f
 8005b6a:	d0f6      	beq.n	8005b5a <create_name+0x4e>
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	4413      	add	r3, r2
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	2b5c      	cmp	r3, #92	@ 0x5c
 8005b76:	d0f0      	beq.n	8005b5a <create_name+0x4e>
			break;
 8005b78:	e038      	b.n	8005bec <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8005b7a:	7efb      	ldrb	r3, [r7, #27]
 8005b7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b7e:	d003      	beq.n	8005b88 <create_name+0x7c>
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d30c      	bcc.n	8005ba2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	2b0b      	cmp	r3, #11
 8005b8c:	d002      	beq.n	8005b94 <create_name+0x88>
 8005b8e:	7efb      	ldrb	r3, [r7, #27]
 8005b90:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b92:	d001      	beq.n	8005b98 <create_name+0x8c>
 8005b94:	2306      	movs	r3, #6
 8005b96:	e044      	b.n	8005c22 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005b98:	2308      	movs	r3, #8
 8005b9a:	613b      	str	r3, [r7, #16]
 8005b9c:	230b      	movs	r3, #11
 8005b9e:	617b      	str	r3, [r7, #20]
			continue;
 8005ba0:	e022      	b.n	8005be8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005ba2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	da04      	bge.n	8005bb4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005baa:	7efb      	ldrb	r3, [r7, #27]
 8005bac:	3b80      	subs	r3, #128	@ 0x80
 8005bae:	4a1f      	ldr	r2, [pc, #124]	@ (8005c2c <create_name+0x120>)
 8005bb0:	5cd3      	ldrb	r3, [r2, r3]
 8005bb2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005bb4:	7efb      	ldrb	r3, [r7, #27]
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	481d      	ldr	r0, [pc, #116]	@ (8005c30 <create_name+0x124>)
 8005bba:	f7ff f88a 	bl	8004cd2 <chk_chr>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <create_name+0xbc>
 8005bc4:	2306      	movs	r3, #6
 8005bc6:	e02c      	b.n	8005c22 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005bc8:	7efb      	ldrb	r3, [r7, #27]
 8005bca:	2b60      	cmp	r3, #96	@ 0x60
 8005bcc:	d905      	bls.n	8005bda <create_name+0xce>
 8005bce:	7efb      	ldrb	r3, [r7, #27]
 8005bd0:	2b7a      	cmp	r3, #122	@ 0x7a
 8005bd2:	d802      	bhi.n	8005bda <create_name+0xce>
 8005bd4:	7efb      	ldrb	r3, [r7, #27]
 8005bd6:	3b20      	subs	r3, #32
 8005bd8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	1c5a      	adds	r2, r3, #1
 8005bde:	613a      	str	r2, [r7, #16]
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	4413      	add	r3, r2
 8005be4:	7efa      	ldrb	r2, [r7, #27]
 8005be6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005be8:	e7a6      	b.n	8005b38 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005bea:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	441a      	add	r2, r3
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d101      	bne.n	8005c00 <create_name+0xf4>
 8005bfc:	2306      	movs	r3, #6
 8005bfe:	e010      	b.n	8005c22 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	2be5      	cmp	r3, #229	@ 0xe5
 8005c06:	d102      	bne.n	8005c0e <create_name+0x102>
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	2205      	movs	r2, #5
 8005c0c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005c0e:	7efb      	ldrb	r3, [r7, #27]
 8005c10:	2b20      	cmp	r3, #32
 8005c12:	d801      	bhi.n	8005c18 <create_name+0x10c>
 8005c14:	2204      	movs	r2, #4
 8005c16:	e000      	b.n	8005c1a <create_name+0x10e>
 8005c18:	2200      	movs	r2, #0
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	330b      	adds	r3, #11
 8005c1e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005c20:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3720      	adds	r7, #32
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	0800a724 	.word	0x0800a724
 8005c30:	0800a6c0 	.word	0x0800a6c0

08005c34 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005c48:	e002      	b.n	8005c50 <follow_path+0x1c>
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	603b      	str	r3, [r7, #0]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	2b2f      	cmp	r3, #47	@ 0x2f
 8005c56:	d0f8      	beq.n	8005c4a <follow_path+0x16>
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	2b5c      	cmp	r3, #92	@ 0x5c
 8005c5e:	d0f4      	beq.n	8005c4a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	2200      	movs	r2, #0
 8005c64:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	2b1f      	cmp	r3, #31
 8005c6c:	d80a      	bhi.n	8005c84 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2280      	movs	r2, #128	@ 0x80
 8005c72:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8005c76:	2100      	movs	r1, #0
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f7ff fcf9 	bl	8005670 <dir_sdi>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	75fb      	strb	r3, [r7, #23]
 8005c82:	e043      	b.n	8005d0c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005c84:	463b      	mov	r3, r7
 8005c86:	4619      	mov	r1, r3
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f7ff ff3f 	bl	8005b0c <create_name>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005c92:	7dfb      	ldrb	r3, [r7, #23]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d134      	bne.n	8005d02 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f7ff feaf 	bl	80059fc <dir_find>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005ca8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005caa:	7dfb      	ldrb	r3, [r7, #23]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00a      	beq.n	8005cc6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005cb0:	7dfb      	ldrb	r3, [r7, #23]
 8005cb2:	2b04      	cmp	r3, #4
 8005cb4:	d127      	bne.n	8005d06 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005cb6:	7afb      	ldrb	r3, [r7, #11]
 8005cb8:	f003 0304 	and.w	r3, r3, #4
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d122      	bne.n	8005d06 <follow_path+0xd2>
 8005cc0:	2305      	movs	r3, #5
 8005cc2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005cc4:	e01f      	b.n	8005d06 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005cc6:	7afb      	ldrb	r3, [r7, #11]
 8005cc8:	f003 0304 	and.w	r3, r3, #4
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d11c      	bne.n	8005d0a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	799b      	ldrb	r3, [r3, #6]
 8005cd4:	f003 0310 	and.w	r3, r3, #16
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d102      	bne.n	8005ce2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005cdc:	2305      	movs	r3, #5
 8005cde:	75fb      	strb	r3, [r7, #23]
 8005ce0:	e014      	b.n	8005d0c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cf0:	4413      	add	r3, r2
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f7ff fe42 	bl	800597e <ld_clust>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005d00:	e7c0      	b.n	8005c84 <follow_path+0x50>
			if (res != FR_OK) break;
 8005d02:	bf00      	nop
 8005d04:	e002      	b.n	8005d0c <follow_path+0xd8>
				break;
 8005d06:	bf00      	nop
 8005d08:	e000      	b.n	8005d0c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005d0a:	bf00      	nop
			}
		}
	}

	return res;
 8005d0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3718      	adds	r7, #24
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b087      	sub	sp, #28
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d22:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d031      	beq.n	8005d90 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	617b      	str	r3, [r7, #20]
 8005d32:	e002      	b.n	8005d3a <get_ldnumber+0x24>
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	3301      	adds	r3, #1
 8005d38:	617b      	str	r3, [r7, #20]
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2b20      	cmp	r3, #32
 8005d40:	d903      	bls.n	8005d4a <get_ldnumber+0x34>
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	2b3a      	cmp	r3, #58	@ 0x3a
 8005d48:	d1f4      	bne.n	8005d34 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	2b3a      	cmp	r3, #58	@ 0x3a
 8005d50:	d11c      	bne.n	8005d8c <get_ldnumber+0x76>
			tp = *path;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	1c5a      	adds	r2, r3, #1
 8005d5c:	60fa      	str	r2, [r7, #12]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	3b30      	subs	r3, #48	@ 0x30
 8005d62:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	2b09      	cmp	r3, #9
 8005d68:	d80e      	bhi.n	8005d88 <get_ldnumber+0x72>
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d10a      	bne.n	8005d88 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d107      	bne.n	8005d88 <get_ldnumber+0x72>
					vol = (int)i;
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	617b      	str	r3, [r7, #20]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	e002      	b.n	8005d92 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005d90:	693b      	ldr	r3, [r7, #16]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	371c      	adds	r7, #28
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
	...

08005da0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	70da      	strb	r2, [r3, #3]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f04f 32ff 	mov.w	r2, #4294967295
 8005db6:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005db8:	6839      	ldr	r1, [r7, #0]
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f7ff f94a 	bl	8005054 <move_window>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d001      	beq.n	8005dca <check_fs+0x2a>
 8005dc6:	2304      	movs	r3, #4
 8005dc8:	e038      	b.n	8005e3c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	3334      	adds	r3, #52	@ 0x34
 8005dce:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7fe fe98 	bl	8004b08 <ld_word>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	461a      	mov	r2, r3
 8005ddc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d001      	beq.n	8005de8 <check_fs+0x48>
 8005de4:	2303      	movs	r3, #3
 8005de6:	e029      	b.n	8005e3c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005dee:	2be9      	cmp	r3, #233	@ 0xe9
 8005df0:	d009      	beq.n	8005e06 <check_fs+0x66>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005df8:	2beb      	cmp	r3, #235	@ 0xeb
 8005dfa:	d11e      	bne.n	8005e3a <check_fs+0x9a>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005e02:	2b90      	cmp	r3, #144	@ 0x90
 8005e04:	d119      	bne.n	8005e3a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	3334      	adds	r3, #52	@ 0x34
 8005e0a:	3336      	adds	r3, #54	@ 0x36
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7fe fe93 	bl	8004b38 <ld_dword>
 8005e12:	4603      	mov	r3, r0
 8005e14:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005e18:	4a0a      	ldr	r2, [pc, #40]	@ (8005e44 <check_fs+0xa4>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d101      	bne.n	8005e22 <check_fs+0x82>
 8005e1e:	2300      	movs	r3, #0
 8005e20:	e00c      	b.n	8005e3c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	3334      	adds	r3, #52	@ 0x34
 8005e26:	3352      	adds	r3, #82	@ 0x52
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7fe fe85 	bl	8004b38 <ld_dword>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	4a05      	ldr	r2, [pc, #20]	@ (8005e48 <check_fs+0xa8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d101      	bne.n	8005e3a <check_fs+0x9a>
 8005e36:	2300      	movs	r3, #0
 8005e38:	e000      	b.n	8005e3c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005e3a:	2302      	movs	r3, #2
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3708      	adds	r7, #8
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	00544146 	.word	0x00544146
 8005e48:	33544146 	.word	0x33544146

08005e4c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b096      	sub	sp, #88	@ 0x58
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	4613      	mov	r3, r2
 8005e58:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f7ff ff58 	bl	8005d16 <get_ldnumber>
 8005e66:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005e68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	da01      	bge.n	8005e72 <find_volume+0x26>
 8005e6e:	230b      	movs	r3, #11
 8005e70:	e235      	b.n	80062de <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005e72:	4aa5      	ldr	r2, [pc, #660]	@ (8006108 <find_volume+0x2bc>)
 8005e74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <find_volume+0x3a>
 8005e82:	230c      	movs	r3, #12
 8005e84:	e22b      	b.n	80062de <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8005e86:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005e88:	f7fe ff3e 	bl	8004d08 <lock_fs>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <find_volume+0x4a>
 8005e92:	230f      	movs	r3, #15
 8005e94:	e223      	b.n	80062de <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e9a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005e9c:	79fb      	ldrb	r3, [r7, #7]
 8005e9e:	f023 0301 	bic.w	r3, r3, #1
 8005ea2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d01a      	beq.n	8005ee2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8005eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eae:	785b      	ldrb	r3, [r3, #1]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7fe fda7 	bl	8004a04 <disk_status>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005ebc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005ec0:	f003 0301 	and.w	r3, r3, #1
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10c      	bne.n	8005ee2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005ec8:	79fb      	ldrb	r3, [r7, #7]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d007      	beq.n	8005ede <find_volume+0x92>
 8005ece:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005ed2:	f003 0304 	and.w	r3, r3, #4
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8005eda:	230a      	movs	r3, #10
 8005edc:	e1ff      	b.n	80062de <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8005ede:	2300      	movs	r3, #0
 8005ee0:	e1fd      	b.n	80062de <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005ee8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eea:	b2da      	uxtb	r2, r3
 8005eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef2:	785b      	ldrb	r3, [r3, #1]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7fe fd9f 	bl	8004a38 <disk_initialize>
 8005efa:	4603      	mov	r3, r0
 8005efc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005f00:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d001      	beq.n	8005f10 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e1e6      	b.n	80062de <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005f10:	79fb      	ldrb	r3, [r7, #7]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d007      	beq.n	8005f26 <find_volume+0xda>
 8005f16:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005f1a:	f003 0304 	and.w	r3, r3, #4
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d001      	beq.n	8005f26 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8005f22:	230a      	movs	r3, #10
 8005f24:	e1db      	b.n	80062de <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005f26:	2300      	movs	r3, #0
 8005f28:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005f2a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005f2c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005f2e:	f7ff ff37 	bl	8005da0 <check_fs>
 8005f32:	4603      	mov	r3, r0
 8005f34:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005f38:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d149      	bne.n	8005fd4 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005f40:	2300      	movs	r3, #0
 8005f42:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f44:	e01e      	b.n	8005f84 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f48:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8005f4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f4e:	011b      	lsls	r3, r3, #4
 8005f50:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8005f54:	4413      	add	r3, r2
 8005f56:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f5a:	3304      	adds	r3, #4
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d006      	beq.n	8005f70 <find_volume+0x124>
 8005f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f64:	3308      	adds	r3, #8
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7fe fde6 	bl	8004b38 <ld_dword>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	e000      	b.n	8005f72 <find_volume+0x126>
 8005f70:	2200      	movs	r2, #0
 8005f72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	3358      	adds	r3, #88	@ 0x58
 8005f78:	443b      	add	r3, r7
 8005f7a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005f7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f80:	3301      	adds	r3, #1
 8005f82:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f86:	2b03      	cmp	r3, #3
 8005f88:	d9dd      	bls.n	8005f46 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8005f8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d002      	beq.n	8005f9a <find_volume+0x14e>
 8005f94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f96:	3b01      	subs	r3, #1
 8005f98:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005f9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	3358      	adds	r3, #88	@ 0x58
 8005fa0:	443b      	add	r3, r7
 8005fa2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005fa6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005fa8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d005      	beq.n	8005fba <find_volume+0x16e>
 8005fae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005fb0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005fb2:	f7ff fef5 	bl	8005da0 <check_fs>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	e000      	b.n	8005fbc <find_volume+0x170>
 8005fba:	2303      	movs	r3, #3
 8005fbc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005fc0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d905      	bls.n	8005fd4 <find_volume+0x188>
 8005fc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fca:	3301      	adds	r3, #1
 8005fcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fd0:	2b03      	cmp	r3, #3
 8005fd2:	d9e2      	bls.n	8005f9a <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005fd4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005fd8:	2b04      	cmp	r3, #4
 8005fda:	d101      	bne.n	8005fe0 <find_volume+0x194>
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e17e      	b.n	80062de <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005fe0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d901      	bls.n	8005fec <find_volume+0x1a0>
 8005fe8:	230d      	movs	r3, #13
 8005fea:	e178      	b.n	80062de <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fee:	3334      	adds	r3, #52	@ 0x34
 8005ff0:	330b      	adds	r3, #11
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7fe fd88 	bl	8004b08 <ld_word>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ffe:	d001      	beq.n	8006004 <find_volume+0x1b8>
 8006000:	230d      	movs	r3, #13
 8006002:	e16c      	b.n	80062de <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006006:	3334      	adds	r3, #52	@ 0x34
 8006008:	3316      	adds	r3, #22
 800600a:	4618      	mov	r0, r3
 800600c:	f7fe fd7c 	bl	8004b08 <ld_word>
 8006010:	4603      	mov	r3, r0
 8006012:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006014:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006016:	2b00      	cmp	r3, #0
 8006018:	d106      	bne.n	8006028 <find_volume+0x1dc>
 800601a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800601c:	3334      	adds	r3, #52	@ 0x34
 800601e:	3324      	adds	r3, #36	@ 0x24
 8006020:	4618      	mov	r0, r3
 8006022:	f7fe fd89 	bl	8004b38 <ld_dword>
 8006026:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8006028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800602a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800602c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800602e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006030:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006036:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800603a:	789b      	ldrb	r3, [r3, #2]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d005      	beq.n	800604c <find_volume+0x200>
 8006040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006042:	789b      	ldrb	r3, [r3, #2]
 8006044:	2b02      	cmp	r3, #2
 8006046:	d001      	beq.n	800604c <find_volume+0x200>
 8006048:	230d      	movs	r3, #13
 800604a:	e148      	b.n	80062de <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800604c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800604e:	789b      	ldrb	r3, [r3, #2]
 8006050:	461a      	mov	r2, r3
 8006052:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006054:	fb02 f303 	mul.w	r3, r2, r3
 8006058:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800605a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800605c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006060:	461a      	mov	r2, r3
 8006062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006064:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006068:	895b      	ldrh	r3, [r3, #10]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d008      	beq.n	8006080 <find_volume+0x234>
 800606e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006070:	895b      	ldrh	r3, [r3, #10]
 8006072:	461a      	mov	r2, r3
 8006074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006076:	895b      	ldrh	r3, [r3, #10]
 8006078:	3b01      	subs	r3, #1
 800607a:	4013      	ands	r3, r2
 800607c:	2b00      	cmp	r3, #0
 800607e:	d001      	beq.n	8006084 <find_volume+0x238>
 8006080:	230d      	movs	r3, #13
 8006082:	e12c      	b.n	80062de <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006086:	3334      	adds	r3, #52	@ 0x34
 8006088:	3311      	adds	r3, #17
 800608a:	4618      	mov	r0, r3
 800608c:	f7fe fd3c 	bl	8004b08 <ld_word>
 8006090:	4603      	mov	r3, r0
 8006092:	461a      	mov	r2, r3
 8006094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006096:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800609a:	891b      	ldrh	r3, [r3, #8]
 800609c:	f003 030f 	and.w	r3, r3, #15
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d001      	beq.n	80060aa <find_volume+0x25e>
 80060a6:	230d      	movs	r3, #13
 80060a8:	e119      	b.n	80062de <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80060aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ac:	3334      	adds	r3, #52	@ 0x34
 80060ae:	3313      	adds	r3, #19
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7fe fd29 	bl	8004b08 <ld_word>
 80060b6:	4603      	mov	r3, r0
 80060b8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80060ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d106      	bne.n	80060ce <find_volume+0x282>
 80060c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c2:	3334      	adds	r3, #52	@ 0x34
 80060c4:	3320      	adds	r3, #32
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7fe fd36 	bl	8004b38 <ld_dword>
 80060cc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80060ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d0:	3334      	adds	r3, #52	@ 0x34
 80060d2:	330e      	adds	r3, #14
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7fe fd17 	bl	8004b08 <ld_word>
 80060da:	4603      	mov	r3, r0
 80060dc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80060de:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d101      	bne.n	80060e8 <find_volume+0x29c>
 80060e4:	230d      	movs	r3, #13
 80060e6:	e0fa      	b.n	80062de <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80060e8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80060ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060ec:	4413      	add	r3, r2
 80060ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80060f0:	8912      	ldrh	r2, [r2, #8]
 80060f2:	0912      	lsrs	r2, r2, #4
 80060f4:	b292      	uxth	r2, r2
 80060f6:	4413      	add	r3, r2
 80060f8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80060fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060fe:	429a      	cmp	r2, r3
 8006100:	d204      	bcs.n	800610c <find_volume+0x2c0>
 8006102:	230d      	movs	r3, #13
 8006104:	e0eb      	b.n	80062de <find_volume+0x492>
 8006106:	bf00      	nop
 8006108:	20000544 	.word	0x20000544
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800610c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800610e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006114:	8952      	ldrh	r2, [r2, #10]
 8006116:	fbb3 f3f2 	udiv	r3, r3, r2
 800611a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800611c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <find_volume+0x2da>
 8006122:	230d      	movs	r3, #13
 8006124:	e0db      	b.n	80062de <find_volume+0x492>
		fmt = FS_FAT32;
 8006126:	2303      	movs	r3, #3
 8006128:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800612c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006132:	4293      	cmp	r3, r2
 8006134:	d802      	bhi.n	800613c <find_volume+0x2f0>
 8006136:	2302      	movs	r3, #2
 8006138:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800613c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006142:	4293      	cmp	r3, r2
 8006144:	d802      	bhi.n	800614c <find_volume+0x300>
 8006146:	2301      	movs	r3, #1
 8006148:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800614c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614e:	1c9a      	adds	r2, r3, #2
 8006150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006152:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8006154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006156:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006158:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800615a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800615c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800615e:	441a      	add	r2, r3
 8006160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006162:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8006164:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006168:	441a      	add	r2, r3
 800616a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800616c:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800616e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006172:	2b03      	cmp	r3, #3
 8006174:	d11e      	bne.n	80061b4 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006178:	3334      	adds	r3, #52	@ 0x34
 800617a:	332a      	adds	r3, #42	@ 0x2a
 800617c:	4618      	mov	r0, r3
 800617e:	f7fe fcc3 	bl	8004b08 <ld_word>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d001      	beq.n	800618c <find_volume+0x340>
 8006188:	230d      	movs	r3, #13
 800618a:	e0a8      	b.n	80062de <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800618c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800618e:	891b      	ldrh	r3, [r3, #8]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d001      	beq.n	8006198 <find_volume+0x34c>
 8006194:	230d      	movs	r3, #13
 8006196:	e0a2      	b.n	80062de <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800619a:	3334      	adds	r3, #52	@ 0x34
 800619c:	332c      	adds	r3, #44	@ 0x2c
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fe fcca 	bl	8004b38 <ld_dword>
 80061a4:	4602      	mov	r2, r0
 80061a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a8:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80061aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80061b2:	e01f      	b.n	80061f4 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80061b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061b6:	891b      	ldrh	r3, [r3, #8]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <find_volume+0x374>
 80061bc:	230d      	movs	r3, #13
 80061be:	e08e      	b.n	80062de <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80061c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061c6:	441a      	add	r2, r3
 80061c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ca:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80061cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d103      	bne.n	80061dc <find_volume+0x390>
 80061d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	005b      	lsls	r3, r3, #1
 80061da:	e00a      	b.n	80061f2 <find_volume+0x3a6>
 80061dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061de:	699a      	ldr	r2, [r3, #24]
 80061e0:	4613      	mov	r3, r2
 80061e2:	005b      	lsls	r3, r3, #1
 80061e4:	4413      	add	r3, r2
 80061e6:	085a      	lsrs	r2, r3, #1
 80061e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80061f2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80061f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f6:	69da      	ldr	r2, [r3, #28]
 80061f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061fa:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80061fe:	0a5b      	lsrs	r3, r3, #9
 8006200:	429a      	cmp	r2, r3
 8006202:	d201      	bcs.n	8006208 <find_volume+0x3bc>
 8006204:	230d      	movs	r3, #13
 8006206:	e06a      	b.n	80062de <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800620a:	f04f 32ff 	mov.w	r2, #4294967295
 800620e:	615a      	str	r2, [r3, #20]
 8006210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006212:	695a      	ldr	r2, [r3, #20]
 8006214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006216:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8006218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800621a:	2280      	movs	r2, #128	@ 0x80
 800621c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800621e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006222:	2b03      	cmp	r3, #3
 8006224:	d149      	bne.n	80062ba <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006228:	3334      	adds	r3, #52	@ 0x34
 800622a:	3330      	adds	r3, #48	@ 0x30
 800622c:	4618      	mov	r0, r3
 800622e:	f7fe fc6b 	bl	8004b08 <ld_word>
 8006232:	4603      	mov	r3, r0
 8006234:	2b01      	cmp	r3, #1
 8006236:	d140      	bne.n	80062ba <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006238:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800623a:	3301      	adds	r3, #1
 800623c:	4619      	mov	r1, r3
 800623e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006240:	f7fe ff08 	bl	8005054 <move_window>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d137      	bne.n	80062ba <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800624a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800624c:	2200      	movs	r2, #0
 800624e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006252:	3334      	adds	r3, #52	@ 0x34
 8006254:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006258:	4618      	mov	r0, r3
 800625a:	f7fe fc55 	bl	8004b08 <ld_word>
 800625e:	4603      	mov	r3, r0
 8006260:	461a      	mov	r2, r3
 8006262:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006266:	429a      	cmp	r2, r3
 8006268:	d127      	bne.n	80062ba <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800626a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800626c:	3334      	adds	r3, #52	@ 0x34
 800626e:	4618      	mov	r0, r3
 8006270:	f7fe fc62 	bl	8004b38 <ld_dword>
 8006274:	4603      	mov	r3, r0
 8006276:	4a1c      	ldr	r2, [pc, #112]	@ (80062e8 <find_volume+0x49c>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d11e      	bne.n	80062ba <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800627c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800627e:	3334      	adds	r3, #52	@ 0x34
 8006280:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006284:	4618      	mov	r0, r3
 8006286:	f7fe fc57 	bl	8004b38 <ld_dword>
 800628a:	4603      	mov	r3, r0
 800628c:	4a17      	ldr	r2, [pc, #92]	@ (80062ec <find_volume+0x4a0>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d113      	bne.n	80062ba <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006294:	3334      	adds	r3, #52	@ 0x34
 8006296:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800629a:	4618      	mov	r0, r3
 800629c:	f7fe fc4c 	bl	8004b38 <ld_dword>
 80062a0:	4602      	mov	r2, r0
 80062a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80062a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a8:	3334      	adds	r3, #52	@ 0x34
 80062aa:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7fe fc42 	bl	8004b38 <ld_dword>
 80062b4:	4602      	mov	r2, r0
 80062b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80062ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062bc:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80062c0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80062c2:	4b0b      	ldr	r3, [pc, #44]	@ (80062f0 <find_volume+0x4a4>)
 80062c4:	881b      	ldrh	r3, [r3, #0]
 80062c6:	3301      	adds	r3, #1
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	4b09      	ldr	r3, [pc, #36]	@ (80062f0 <find_volume+0x4a4>)
 80062cc:	801a      	strh	r2, [r3, #0]
 80062ce:	4b08      	ldr	r3, [pc, #32]	@ (80062f0 <find_volume+0x4a4>)
 80062d0:	881a      	ldrh	r2, [r3, #0]
 80062d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80062d6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80062d8:	f7fe fe54 	bl	8004f84 <clear_lock>
#endif
	return FR_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3758      	adds	r7, #88	@ 0x58
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	41615252 	.word	0x41615252
 80062ec:	61417272 	.word	0x61417272
 80062f0:	20000548 	.word	0x20000548

080062f4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80062fe:	2309      	movs	r3, #9
 8006300:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d02e      	beq.n	8006366 <validate+0x72>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d02a      	beq.n	8006366 <validate+0x72>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d025      	beq.n	8006366 <validate+0x72>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	889a      	ldrh	r2, [r3, #4]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	88db      	ldrh	r3, [r3, #6]
 8006324:	429a      	cmp	r2, r3
 8006326:	d11e      	bne.n	8006366 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4618      	mov	r0, r3
 800632e:	f7fe fceb 	bl	8004d08 <lock_fs>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d014      	beq.n	8006362 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	785b      	ldrb	r3, [r3, #1]
 800633e:	4618      	mov	r0, r3
 8006340:	f7fe fb60 	bl	8004a04 <disk_status>
 8006344:	4603      	mov	r3, r0
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	2b00      	cmp	r3, #0
 800634c:	d102      	bne.n	8006354 <validate+0x60>
				res = FR_OK;
 800634e:	2300      	movs	r3, #0
 8006350:	73fb      	strb	r3, [r7, #15]
 8006352:	e008      	b.n	8006366 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2100      	movs	r1, #0
 800635a:	4618      	mov	r0, r3
 800635c:	f7fe fcea 	bl	8004d34 <unlock_fs>
 8006360:	e001      	b.n	8006366 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8006362:	230f      	movs	r3, #15
 8006364:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006366:	7bfb      	ldrb	r3, [r7, #15]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d102      	bne.n	8006372 <validate+0x7e>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	e000      	b.n	8006374 <validate+0x80>
 8006372:	2300      	movs	r3, #0
 8006374:	683a      	ldr	r2, [r7, #0]
 8006376:	6013      	str	r3, [r2, #0]
	return res;
 8006378:	7bfb      	ldrb	r3, [r7, #15]
}
 800637a:	4618      	mov	r0, r3
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
	...

08006384 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b088      	sub	sp, #32
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	4613      	mov	r3, r2
 8006390:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006396:	f107 0310 	add.w	r3, r7, #16
 800639a:	4618      	mov	r0, r3
 800639c:	f7ff fcbb 	bl	8005d16 <get_ldnumber>
 80063a0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	da01      	bge.n	80063ac <f_mount+0x28>
 80063a8:	230b      	movs	r3, #11
 80063aa:	e048      	b.n	800643e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80063ac:	4a26      	ldr	r2, [pc, #152]	@ (8006448 <f_mount+0xc4>)
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063b4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00f      	beq.n	80063dc <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80063bc:	69b8      	ldr	r0, [r7, #24]
 80063be:	f7fe fde1 	bl	8004f84 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 fbeb 	bl	8006ba2 <ff_del_syncobj>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d101      	bne.n	80063d6 <f_mount+0x52>
 80063d2:	2302      	movs	r3, #2
 80063d4:	e033      	b.n	800643e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	2200      	movs	r2, #0
 80063da:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00f      	beq.n	8006402 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	b2da      	uxtb	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	330c      	adds	r3, #12
 80063f0:	4619      	mov	r1, r3
 80063f2:	4610      	mov	r0, r2
 80063f4:	f000 fbb5 	bl	8006b62 <ff_cre_syncobj>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <f_mount+0x7e>
 80063fe:	2302      	movs	r3, #2
 8006400:	e01d      	b.n	800643e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	4910      	ldr	r1, [pc, #64]	@ (8006448 <f_mount+0xc4>)
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d002      	beq.n	8006418 <f_mount+0x94>
 8006412:	79fb      	ldrb	r3, [r7, #7]
 8006414:	2b01      	cmp	r3, #1
 8006416:	d001      	beq.n	800641c <f_mount+0x98>
 8006418:	2300      	movs	r3, #0
 800641a:	e010      	b.n	800643e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800641c:	f107 010c 	add.w	r1, r7, #12
 8006420:	f107 0308 	add.w	r3, r7, #8
 8006424:	2200      	movs	r2, #0
 8006426:	4618      	mov	r0, r3
 8006428:	f7ff fd10 	bl	8005e4c <find_volume>
 800642c:	4603      	mov	r3, r0
 800642e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	7dfa      	ldrb	r2, [r7, #23]
 8006434:	4611      	mov	r1, r2
 8006436:	4618      	mov	r0, r3
 8006438:	f7fe fc7c 	bl	8004d34 <unlock_fs>
 800643c:	7dfb      	ldrb	r3, [r7, #23]
}
 800643e:	4618      	mov	r0, r3
 8006440:	3720      	adds	r7, #32
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	20000544 	.word	0x20000544

0800644c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b098      	sub	sp, #96	@ 0x60
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	4613      	mov	r3, r2
 8006458:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d101      	bne.n	8006464 <f_open+0x18>
 8006460:	2309      	movs	r3, #9
 8006462:	e1b0      	b.n	80067c6 <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006464:	79fb      	ldrb	r3, [r7, #7]
 8006466:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800646a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800646c:	79fa      	ldrb	r2, [r7, #7]
 800646e:	f107 0110 	add.w	r1, r7, #16
 8006472:	f107 0308 	add.w	r3, r7, #8
 8006476:	4618      	mov	r0, r3
 8006478:	f7ff fce8 	bl	8005e4c <find_volume>
 800647c:	4603      	mov	r3, r0
 800647e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8006482:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006486:	2b00      	cmp	r3, #0
 8006488:	f040 818d 	bne.w	80067a6 <f_open+0x35a>
		dj.obj.fs = fs;
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	f107 0314 	add.w	r3, r7, #20
 8006496:	4611      	mov	r1, r2
 8006498:	4618      	mov	r0, r3
 800649a:	f7ff fbcb 	bl	8005c34 <follow_path>
 800649e:	4603      	mov	r3, r0
 80064a0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80064a4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d118      	bne.n	80064de <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80064ac:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80064b0:	b25b      	sxtb	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	da03      	bge.n	80064be <f_open+0x72>
				res = FR_INVALID_NAME;
 80064b6:	2306      	movs	r3, #6
 80064b8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80064bc:	e00f      	b.n	80064de <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80064be:	79fb      	ldrb	r3, [r7, #7]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	bf8c      	ite	hi
 80064c4:	2301      	movhi	r3, #1
 80064c6:	2300      	movls	r3, #0
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	461a      	mov	r2, r3
 80064cc:	f107 0314 	add.w	r3, r7, #20
 80064d0:	4611      	mov	r1, r2
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7fe fc4a 	bl	8004d6c <chk_lock>
 80064d8:	4603      	mov	r3, r0
 80064da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80064de:	79fb      	ldrb	r3, [r7, #7]
 80064e0:	f003 031c 	and.w	r3, r3, #28
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d07f      	beq.n	80065e8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80064e8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d017      	beq.n	8006520 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80064f0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80064f4:	2b04      	cmp	r3, #4
 80064f6:	d10e      	bne.n	8006516 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80064f8:	f7fe fc94 	bl	8004e24 <enq_lock>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d006      	beq.n	8006510 <f_open+0xc4>
 8006502:	f107 0314 	add.w	r3, r7, #20
 8006506:	4618      	mov	r0, r3
 8006508:	f7ff facd 	bl	8005aa6 <dir_register>
 800650c:	4603      	mov	r3, r0
 800650e:	e000      	b.n	8006512 <f_open+0xc6>
 8006510:	2312      	movs	r3, #18
 8006512:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006516:	79fb      	ldrb	r3, [r7, #7]
 8006518:	f043 0308 	orr.w	r3, r3, #8
 800651c:	71fb      	strb	r3, [r7, #7]
 800651e:	e010      	b.n	8006542 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006520:	7ebb      	ldrb	r3, [r7, #26]
 8006522:	f003 0311 	and.w	r3, r3, #17
 8006526:	2b00      	cmp	r3, #0
 8006528:	d003      	beq.n	8006532 <f_open+0xe6>
					res = FR_DENIED;
 800652a:	2307      	movs	r3, #7
 800652c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006530:	e007      	b.n	8006542 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006532:	79fb      	ldrb	r3, [r7, #7]
 8006534:	f003 0304 	and.w	r3, r3, #4
 8006538:	2b00      	cmp	r3, #0
 800653a:	d002      	beq.n	8006542 <f_open+0xf6>
 800653c:	2308      	movs	r3, #8
 800653e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006542:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006546:	2b00      	cmp	r3, #0
 8006548:	d168      	bne.n	800661c <f_open+0x1d0>
 800654a:	79fb      	ldrb	r3, [r7, #7]
 800654c:	f003 0308 	and.w	r3, r3, #8
 8006550:	2b00      	cmp	r3, #0
 8006552:	d063      	beq.n	800661c <f_open+0x1d0>
				dw = GET_FATTIME();
 8006554:	f7fd fd1e 	bl	8003f94 <get_fattime>
 8006558:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800655a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800655c:	330e      	adds	r3, #14
 800655e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006560:	4618      	mov	r0, r3
 8006562:	f7fe fb27 	bl	8004bb4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006568:	3316      	adds	r3, #22
 800656a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800656c:	4618      	mov	r0, r3
 800656e:	f7fe fb21 	bl	8004bb4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006574:	330b      	adds	r3, #11
 8006576:	2220      	movs	r2, #32
 8006578:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800657e:	4611      	mov	r1, r2
 8006580:	4618      	mov	r0, r3
 8006582:	f7ff f9fc 	bl	800597e <ld_clust>
 8006586:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800658c:	2200      	movs	r2, #0
 800658e:	4618      	mov	r0, r3
 8006590:	f7ff fa14 	bl	80059bc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006596:	331c      	adds	r3, #28
 8006598:	2100      	movs	r1, #0
 800659a:	4618      	mov	r0, r3
 800659c:	f7fe fb0a 	bl	8004bb4 <st_dword>
					fs->wflag = 1;
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	2201      	movs	r2, #1
 80065a4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80065a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d037      	beq.n	800661c <f_open+0x1d0>
						dw = fs->winsect;
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065b0:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80065b2:	f107 0314 	add.w	r3, r7, #20
 80065b6:	2200      	movs	r2, #0
 80065b8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7fe ff27 	bl	800540e <remove_chain>
 80065c0:	4603      	mov	r3, r0
 80065c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 80065c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d126      	bne.n	800661c <f_open+0x1d0>
							res = move_window(fs, dw);
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fe fd3e 	bl	8005054 <move_window>
 80065d8:	4603      	mov	r3, r0
 80065da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80065e2:	3a01      	subs	r2, #1
 80065e4:	611a      	str	r2, [r3, #16]
 80065e6:	e019      	b.n	800661c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80065e8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d115      	bne.n	800661c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80065f0:	7ebb      	ldrb	r3, [r7, #26]
 80065f2:	f003 0310 	and.w	r3, r3, #16
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <f_open+0x1b6>
					res = FR_NO_FILE;
 80065fa:	2304      	movs	r3, #4
 80065fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006600:	e00c      	b.n	800661c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006602:	79fb      	ldrb	r3, [r7, #7]
 8006604:	f003 0302 	and.w	r3, r3, #2
 8006608:	2b00      	cmp	r3, #0
 800660a:	d007      	beq.n	800661c <f_open+0x1d0>
 800660c:	7ebb      	ldrb	r3, [r7, #26]
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b00      	cmp	r3, #0
 8006614:	d002      	beq.n	800661c <f_open+0x1d0>
						res = FR_DENIED;
 8006616:	2307      	movs	r3, #7
 8006618:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800661c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006620:	2b00      	cmp	r3, #0
 8006622:	d126      	bne.n	8006672 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006624:	79fb      	ldrb	r3, [r7, #7]
 8006626:	f003 0308 	and.w	r3, r3, #8
 800662a:	2b00      	cmp	r3, #0
 800662c:	d003      	beq.n	8006636 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800662e:	79fb      	ldrb	r3, [r7, #7]
 8006630:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006634:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800663e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006644:	79fb      	ldrb	r3, [r7, #7]
 8006646:	2b01      	cmp	r3, #1
 8006648:	bf8c      	ite	hi
 800664a:	2301      	movhi	r3, #1
 800664c:	2300      	movls	r3, #0
 800664e:	b2db      	uxtb	r3, r3
 8006650:	461a      	mov	r2, r3
 8006652:	f107 0314 	add.w	r3, r7, #20
 8006656:	4611      	mov	r1, r2
 8006658:	4618      	mov	r0, r3
 800665a:	f7fe fc05 	bl	8004e68 <inc_lock>
 800665e:	4602      	mov	r2, r0
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d102      	bne.n	8006672 <f_open+0x226>
 800666c:	2302      	movs	r3, #2
 800666e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006672:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006676:	2b00      	cmp	r3, #0
 8006678:	f040 8095 	bne.w	80067a6 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006680:	4611      	mov	r1, r2
 8006682:	4618      	mov	r0, r3
 8006684:	f7ff f97b 	bl	800597e <ld_clust>
 8006688:	4602      	mov	r2, r0
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800668e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006690:	331c      	adds	r3, #28
 8006692:	4618      	mov	r0, r3
 8006694:	f7fe fa50 	bl	8004b38 <ld_dword>
 8006698:	4602      	mov	r2, r0
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	88da      	ldrh	r2, [r3, #6]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	79fa      	ldrb	r2, [r7, #7]
 80066b6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	3330      	adds	r3, #48	@ 0x30
 80066ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066d2:	2100      	movs	r1, #0
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7fe faba 	bl	8004c4e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80066da:	79fb      	ldrb	r3, [r7, #7]
 80066dc:	f003 0320 	and.w	r3, r3, #32
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d060      	beq.n	80067a6 <f_open+0x35a>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d05c      	beq.n	80067a6 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	68da      	ldr	r2, [r3, #12]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	895b      	ldrh	r3, [r3, #10]
 80066f8:	025b      	lsls	r3, r3, #9
 80066fa:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	657b      	str	r3, [r7, #84]	@ 0x54
 8006708:	e016      	b.n	8006738 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800670e:	4618      	mov	r0, r3
 8006710:	f7fe fcec 	bl	80050ec <get_fat>
 8006714:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006716:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006718:	2b01      	cmp	r3, #1
 800671a:	d802      	bhi.n	8006722 <f_open+0x2d6>
 800671c:	2302      	movs	r3, #2
 800671e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006722:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006728:	d102      	bne.n	8006730 <f_open+0x2e4>
 800672a:	2301      	movs	r3, #1
 800672c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006730:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006732:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	657b      	str	r3, [r7, #84]	@ 0x54
 8006738:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800673c:	2b00      	cmp	r3, #0
 800673e:	d103      	bne.n	8006748 <f_open+0x2fc>
 8006740:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006742:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006744:	429a      	cmp	r2, r3
 8006746:	d8e0      	bhi.n	800670a <f_open+0x2be>
				}
				fp->clust = clst;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800674c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800674e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006752:	2b00      	cmp	r3, #0
 8006754:	d127      	bne.n	80067a6 <f_open+0x35a>
 8006756:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800675c:	2b00      	cmp	r3, #0
 800675e:	d022      	beq.n	80067a6 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006764:	4618      	mov	r0, r3
 8006766:	f7fe fca2 	bl	80050ae <clust2sect>
 800676a:	6478      	str	r0, [r7, #68]	@ 0x44
 800676c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800676e:	2b00      	cmp	r3, #0
 8006770:	d103      	bne.n	800677a <f_open+0x32e>
						res = FR_INT_ERR;
 8006772:	2302      	movs	r3, #2
 8006774:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006778:	e015      	b.n	80067a6 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800677a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800677c:	0a5a      	lsrs	r2, r3, #9
 800677e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006780:	441a      	add	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	7858      	ldrb	r0, [r3, #1]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6a1a      	ldr	r2, [r3, #32]
 8006794:	2301      	movs	r3, #1
 8006796:	f7fe f977 	bl	8004a88 <disk_read>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d002      	beq.n	80067a6 <f_open+0x35a>
 80067a0:	2301      	movs	r3, #1
 80067a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80067a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d002      	beq.n	80067b4 <f_open+0x368>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 80067ba:	4611      	mov	r1, r2
 80067bc:	4618      	mov	r0, r3
 80067be:	f7fe fab9 	bl	8004d34 <unlock_fs>
 80067c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3760      	adds	r7, #96	@ 0x60
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b08e      	sub	sp, #56	@ 0x38
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	60f8      	str	r0, [r7, #12]
 80067d6:	60b9      	str	r1, [r7, #8]
 80067d8:	607a      	str	r2, [r7, #4]
 80067da:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	2200      	movs	r2, #0
 80067e4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f107 0214 	add.w	r2, r7, #20
 80067ec:	4611      	mov	r1, r2
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7ff fd80 	bl	80062f4 <validate>
 80067f4:	4603      	mov	r3, r0
 80067f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80067fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d107      	bne.n	8006812 <f_read+0x44>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	7d5b      	ldrb	r3, [r3, #21]
 8006806:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800680a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800680e:	2b00      	cmp	r3, #0
 8006810:	d009      	beq.n	8006826 <f_read+0x58>
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8006818:	4611      	mov	r1, r2
 800681a:	4618      	mov	r0, r3
 800681c:	f7fe fa8a 	bl	8004d34 <unlock_fs>
 8006820:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006824:	e13d      	b.n	8006aa2 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	7d1b      	ldrb	r3, [r3, #20]
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	2b00      	cmp	r3, #0
 8006830:	d106      	bne.n	8006840 <f_read+0x72>
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	2107      	movs	r1, #7
 8006836:	4618      	mov	r0, r3
 8006838:	f7fe fa7c 	bl	8004d34 <unlock_fs>
 800683c:	2307      	movs	r3, #7
 800683e:	e130      	b.n	8006aa2 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	68da      	ldr	r2, [r3, #12]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	6a3b      	ldr	r3, [r7, #32]
 8006850:	429a      	cmp	r2, r3
 8006852:	f240 811c 	bls.w	8006a8e <f_read+0x2c0>
 8006856:	6a3b      	ldr	r3, [r7, #32]
 8006858:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800685a:	e118      	b.n	8006a8e <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006864:	2b00      	cmp	r3, #0
 8006866:	f040 80e4 	bne.w	8006a32 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	699b      	ldr	r3, [r3, #24]
 800686e:	0a5b      	lsrs	r3, r3, #9
 8006870:	697a      	ldr	r2, [r7, #20]
 8006872:	8952      	ldrh	r2, [r2, #10]
 8006874:	3a01      	subs	r2, #1
 8006876:	4013      	ands	r3, r2
 8006878:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d139      	bne.n	80068f4 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	699b      	ldr	r3, [r3, #24]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d103      	bne.n	8006890 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	633b      	str	r3, [r7, #48]	@ 0x30
 800688e:	e013      	b.n	80068b8 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006894:	2b00      	cmp	r3, #0
 8006896:	d007      	beq.n	80068a8 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	4619      	mov	r1, r3
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f7fe feb2 	bl	8005608 <clmt_clust>
 80068a4:	6338      	str	r0, [r7, #48]	@ 0x30
 80068a6:	e007      	b.n	80068b8 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	69db      	ldr	r3, [r3, #28]
 80068ae:	4619      	mov	r1, r3
 80068b0:	4610      	mov	r0, r2
 80068b2:	f7fe fc1b 	bl	80050ec <get_fat>
 80068b6:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80068b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d809      	bhi.n	80068d2 <f_read+0x104>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2202      	movs	r2, #2
 80068c2:	755a      	strb	r2, [r3, #21]
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	2102      	movs	r1, #2
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7fe fa33 	bl	8004d34 <unlock_fs>
 80068ce:	2302      	movs	r3, #2
 80068d0:	e0e7      	b.n	8006aa2 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80068d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d8:	d109      	bne.n	80068ee <f_read+0x120>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2201      	movs	r2, #1
 80068de:	755a      	strb	r2, [r3, #21]
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	2101      	movs	r1, #1
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7fe fa25 	bl	8004d34 <unlock_fs>
 80068ea:	2301      	movs	r3, #1
 80068ec:	e0d9      	b.n	8006aa2 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068f2:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	4619      	mov	r1, r3
 80068fc:	4610      	mov	r0, r2
 80068fe:	f7fe fbd6 	bl	80050ae <clust2sect>
 8006902:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d109      	bne.n	800691e <f_read+0x150>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2202      	movs	r2, #2
 800690e:	755a      	strb	r2, [r3, #21]
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	2102      	movs	r1, #2
 8006914:	4618      	mov	r0, r3
 8006916:	f7fe fa0d 	bl	8004d34 <unlock_fs>
 800691a:	2302      	movs	r3, #2
 800691c:	e0c1      	b.n	8006aa2 <f_read+0x2d4>
			sect += csect;
 800691e:	69ba      	ldr	r2, [r7, #24]
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	4413      	add	r3, r2
 8006924:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	0a5b      	lsrs	r3, r3, #9
 800692a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800692c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800692e:	2b00      	cmp	r3, #0
 8006930:	d03e      	beq.n	80069b0 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006932:	69fa      	ldr	r2, [r7, #28]
 8006934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006936:	4413      	add	r3, r2
 8006938:	697a      	ldr	r2, [r7, #20]
 800693a:	8952      	ldrh	r2, [r2, #10]
 800693c:	4293      	cmp	r3, r2
 800693e:	d905      	bls.n	800694c <f_read+0x17e>
					cc = fs->csize - csect;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	895b      	ldrh	r3, [r3, #10]
 8006944:	461a      	mov	r2, r3
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	7858      	ldrb	r0, [r3, #1]
 8006950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006952:	69ba      	ldr	r2, [r7, #24]
 8006954:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006956:	f7fe f897 	bl	8004a88 <disk_read>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d009      	beq.n	8006974 <f_read+0x1a6>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2201      	movs	r2, #1
 8006964:	755a      	strb	r2, [r3, #21]
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	2101      	movs	r1, #1
 800696a:	4618      	mov	r0, r3
 800696c:	f7fe f9e2 	bl	8004d34 <unlock_fs>
 8006970:	2301      	movs	r3, #1
 8006972:	e096      	b.n	8006aa2 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	7d1b      	ldrb	r3, [r3, #20]
 8006978:	b25b      	sxtb	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	da14      	bge.n	80069a8 <f_read+0x1da>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6a1a      	ldr	r2, [r3, #32]
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006988:	429a      	cmp	r2, r3
 800698a:	d90d      	bls.n	80069a8 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6a1a      	ldr	r2, [r3, #32]
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	025b      	lsls	r3, r3, #9
 8006996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006998:	18d0      	adds	r0, r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	3330      	adds	r3, #48	@ 0x30
 800699e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069a2:	4619      	mov	r1, r3
 80069a4:	f7fe f932 	bl	8004c0c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80069a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069aa:	025b      	lsls	r3, r3, #9
 80069ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80069ae:	e05a      	b.n	8006a66 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6a1b      	ldr	r3, [r3, #32]
 80069b4:	69ba      	ldr	r2, [r7, #24]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d038      	beq.n	8006a2c <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	7d1b      	ldrb	r3, [r3, #20]
 80069be:	b25b      	sxtb	r3, r3
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	da1d      	bge.n	8006a00 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	7858      	ldrb	r0, [r3, #1]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6a1a      	ldr	r2, [r3, #32]
 80069d2:	2301      	movs	r3, #1
 80069d4:	f7fe f878 	bl	8004ac8 <disk_write>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d009      	beq.n	80069f2 <f_read+0x224>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2201      	movs	r2, #1
 80069e2:	755a      	strb	r2, [r3, #21]
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	2101      	movs	r1, #1
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7fe f9a3 	bl	8004d34 <unlock_fs>
 80069ee:	2301      	movs	r3, #1
 80069f0:	e057      	b.n	8006aa2 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	7d1b      	ldrb	r3, [r3, #20]
 80069f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069fa:	b2da      	uxtb	r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	7858      	ldrb	r0, [r3, #1]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	69ba      	ldr	r2, [r7, #24]
 8006a0e:	f7fe f83b 	bl	8004a88 <disk_read>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d009      	beq.n	8006a2c <f_read+0x25e>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	755a      	strb	r2, [r3, #21]
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	2101      	movs	r1, #1
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fe f986 	bl	8004d34 <unlock_fs>
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e03a      	b.n	8006aa2 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	69ba      	ldr	r2, [r7, #24]
 8006a30:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a3a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8006a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006a40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d901      	bls.n	8006a4c <f_read+0x27e>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a5a:	4413      	add	r3, r2
 8006a5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a5e:	4619      	mov	r1, r3
 8006a60:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006a62:	f7fe f8d3 	bl	8004c0c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a6a:	4413      	add	r3, r2
 8006a6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	699a      	ldr	r2, [r3, #24]
 8006a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a74:	441a      	add	r2, r3
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	619a      	str	r2, [r3, #24]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a80:	441a      	add	r2, r3
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	601a      	str	r2, [r3, #0]
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f47f aee3 	bne.w	800685c <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	2100      	movs	r1, #0
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fe f94a 	bl	8004d34 <unlock_fs>
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3738      	adds	r7, #56	@ 0x38
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
	...

08006aac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b087      	sub	sp, #28
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006aba:	2301      	movs	r3, #1
 8006abc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006ac2:	4b1f      	ldr	r3, [pc, #124]	@ (8006b40 <FATFS_LinkDriverEx+0x94>)
 8006ac4:	7a5b      	ldrb	r3, [r3, #9]
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d131      	bne.n	8006b30 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006acc:	4b1c      	ldr	r3, [pc, #112]	@ (8006b40 <FATFS_LinkDriverEx+0x94>)
 8006ace:	7a5b      	ldrb	r3, [r3, #9]
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8006b40 <FATFS_LinkDriverEx+0x94>)
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006ada:	4b19      	ldr	r3, [pc, #100]	@ (8006b40 <FATFS_LinkDriverEx+0x94>)
 8006adc:	7a5b      	ldrb	r3, [r3, #9]
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	4a17      	ldr	r2, [pc, #92]	@ (8006b40 <FATFS_LinkDriverEx+0x94>)
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006aea:	4b15      	ldr	r3, [pc, #84]	@ (8006b40 <FATFS_LinkDriverEx+0x94>)
 8006aec:	7a5b      	ldrb	r3, [r3, #9]
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	461a      	mov	r2, r3
 8006af2:	4b13      	ldr	r3, [pc, #76]	@ (8006b40 <FATFS_LinkDriverEx+0x94>)
 8006af4:	4413      	add	r3, r2
 8006af6:	79fa      	ldrb	r2, [r7, #7]
 8006af8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006afa:	4b11      	ldr	r3, [pc, #68]	@ (8006b40 <FATFS_LinkDriverEx+0x94>)
 8006afc:	7a5b      	ldrb	r3, [r3, #9]
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	1c5a      	adds	r2, r3, #1
 8006b02:	b2d1      	uxtb	r1, r2
 8006b04:	4a0e      	ldr	r2, [pc, #56]	@ (8006b40 <FATFS_LinkDriverEx+0x94>)
 8006b06:	7251      	strb	r1, [r2, #9]
 8006b08:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006b0a:	7dbb      	ldrb	r3, [r7, #22]
 8006b0c:	3330      	adds	r3, #48	@ 0x30
 8006b0e:	b2da      	uxtb	r2, r3
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	3301      	adds	r3, #1
 8006b18:	223a      	movs	r2, #58	@ 0x3a
 8006b1a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	3302      	adds	r3, #2
 8006b20:	222f      	movs	r2, #47	@ 0x2f
 8006b22:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	3303      	adds	r3, #3
 8006b28:	2200      	movs	r2, #0
 8006b2a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006b30:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	371c      	adds	r7, #28
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	2000056c 	.word	0x2000056c

08006b44 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006b4e:	2200      	movs	r2, #0
 8006b50:	6839      	ldr	r1, [r7, #0]
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f7ff ffaa 	bl	8006aac <FATFS_LinkDriverEx>
 8006b58:	4603      	mov	r3, r0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b086      	sub	sp, #24
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	4603      	mov	r3, r0
 8006b6a:	6039      	str	r1, [r7, #0]
 8006b6c:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8006b6e:	2300      	movs	r3, #0
 8006b70:	60fb      	str	r3, [r7, #12]
 8006b72:	2300      	movs	r3, #0
 8006b74:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8006b76:	f107 030c 	add.w	r3, r7, #12
 8006b7a:	2101      	movs	r1, #1
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f000 f969 	bl	8006e54 <osSemaphoreCreate>
 8006b82:	4602      	mov	r2, r0
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	bf14      	ite	ne
 8006b90:	2301      	movne	r3, #1
 8006b92:	2300      	moveq	r3, #0
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	617b      	str	r3, [r7, #20]

    return ret;
 8006b98:	697b      	ldr	r3, [r7, #20]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3718      	adds	r7, #24
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b082      	sub	sp, #8
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fa08 	bl	8006fc0 <osSemaphoreDelete>
#endif
    return 1;
 8006bb0:	2301      	movs	r3, #1
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3708      	adds	r7, #8
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b084      	sub	sp, #16
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8006bc6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f974 	bl	8006eb8 <osSemaphoreWait>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d101      	bne.n	8006bda <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006bda:	68fb      	ldr	r3, [r7, #12]
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3710      	adds	r7, #16
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 f9b1 	bl	8006f54 <osSemaphoreRelease>
#endif
}
 8006bf2:	bf00      	nop
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b085      	sub	sp, #20
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	4603      	mov	r3, r0
 8006c02:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006c04:	2300      	movs	r3, #0
 8006c06:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006c08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c0c:	2b84      	cmp	r3, #132	@ 0x84
 8006c0e:	d005      	beq.n	8006c1c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006c10:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	4413      	add	r3, r2
 8006c18:	3303      	adds	r3, #3
 8006c1a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3714      	adds	r7, #20
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b083      	sub	sp, #12
 8006c2e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c30:	f3ef 8305 	mrs	r3, IPSR
 8006c34:	607b      	str	r3, [r7, #4]
  return(result);
 8006c36:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	bf14      	ite	ne
 8006c3c:	2301      	movne	r3, #1
 8006c3e:	2300      	moveq	r3, #0
 8006c40:	b2db      	uxtb	r3, r3
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006c52:	f001 fa9b 	bl	800818c <vTaskStartScheduler>
  
  return osOK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c5e:	b089      	sub	sp, #36	@ 0x24
 8006c60:	af04      	add	r7, sp, #16
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d020      	beq.n	8006cb0 <osThreadCreate+0x54>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d01c      	beq.n	8006cb0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	685c      	ldr	r4, [r3, #4]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	691e      	ldr	r6, [r3, #16]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7ff ffb6 	bl	8006bfa <makeFreeRtosPriority>
 8006c8e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	695b      	ldr	r3, [r3, #20]
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c98:	9202      	str	r2, [sp, #8]
 8006c9a:	9301      	str	r3, [sp, #4]
 8006c9c:	9100      	str	r1, [sp, #0]
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	4632      	mov	r2, r6
 8006ca2:	4629      	mov	r1, r5
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	f001 f8a3 	bl	8007df0 <xTaskCreateStatic>
 8006caa:	4603      	mov	r3, r0
 8006cac:	60fb      	str	r3, [r7, #12]
 8006cae:	e01c      	b.n	8006cea <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	685c      	ldr	r4, [r3, #4]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006cbc:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7ff ff98 	bl	8006bfa <makeFreeRtosPriority>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	f107 030c 	add.w	r3, r7, #12
 8006cd0:	9301      	str	r3, [sp, #4]
 8006cd2:	9200      	str	r2, [sp, #0]
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	4632      	mov	r2, r6
 8006cd8:	4629      	mov	r1, r5
 8006cda:	4620      	mov	r0, r4
 8006cdc:	f001 f8e8 	bl	8007eb0 <xTaskCreate>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d001      	beq.n	8006cea <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	e000      	b.n	8006cec <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006cea:	68fb      	ldr	r3, [r7, #12]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006cf4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d001      	beq.n	8006d0a <osDelay+0x16>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	e000      	b.n	8006d0c <osDelay+0x18>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f001 fa07 	bl	8008120 <vTaskDelay>
  
  return osOK;
 8006d12:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d007      	beq.n	8006d3c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	4619      	mov	r1, r3
 8006d32:	2001      	movs	r0, #1
 8006d34:	f000 fba7 	bl	8007486 <xQueueCreateMutexStatic>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	e003      	b.n	8006d44 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006d3c:	2001      	movs	r0, #1
 8006d3e:	f000 fb8a 	bl	8007456 <xQueueCreateMutex>
 8006d42:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006d56:	2300      	movs	r3, #0
 8006d58:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d101      	bne.n	8006d64 <osMutexWait+0x18>
    return osErrorParameter;
 8006d60:	2380      	movs	r3, #128	@ 0x80
 8006d62:	e03a      	b.n	8006dda <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8006d64:	2300      	movs	r3, #0
 8006d66:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6e:	d103      	bne.n	8006d78 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006d70:	f04f 33ff 	mov.w	r3, #4294967295
 8006d74:	60fb      	str	r3, [r7, #12]
 8006d76:	e009      	b.n	8006d8c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d006      	beq.n	8006d8c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <osMutexWait+0x40>
      ticks = 1;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006d8c:	f7ff ff4d 	bl	8006c2a <inHandlerMode>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d017      	beq.n	8006dc6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006d96:	f107 0308 	add.w	r3, r7, #8
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fe2e 	bl	8007a00 <xQueueReceiveFromISR>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d001      	beq.n	8006dae <osMutexWait+0x62>
      return osErrorOS;
 8006daa:	23ff      	movs	r3, #255	@ 0xff
 8006dac:	e015      	b.n	8006dda <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d011      	beq.n	8006dd8 <osMutexWait+0x8c>
 8006db4:	4b0b      	ldr	r3, [pc, #44]	@ (8006de4 <osMutexWait+0x98>)
 8006db6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dba:	601a      	str	r2, [r3, #0]
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	f3bf 8f6f 	isb	sy
 8006dc4:	e008      	b.n	8006dd8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8006dc6:	68f9      	ldr	r1, [r7, #12]
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fd09 	bl	80077e0 <xQueueSemaphoreTake>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d001      	beq.n	8006dd8 <osMutexWait+0x8c>
    return osErrorOS;
 8006dd4:	23ff      	movs	r3, #255	@ 0xff
 8006dd6:	e000      	b.n	8006dda <osMutexWait+0x8e>
  }
  
  return osOK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	e000ed04 	.word	0xe000ed04

08006de8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006df0:	2300      	movs	r3, #0
 8006df2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006df4:	2300      	movs	r3, #0
 8006df6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006df8:	f7ff ff17 	bl	8006c2a <inHandlerMode>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d016      	beq.n	8006e30 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006e02:	f107 0308 	add.w	r3, r7, #8
 8006e06:	4619      	mov	r1, r3
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fc59 	bl	80076c0 <xQueueGiveFromISR>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d001      	beq.n	8006e18 <osMutexRelease+0x30>
      return osErrorOS;
 8006e14:	23ff      	movs	r3, #255	@ 0xff
 8006e16:	e017      	b.n	8006e48 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d013      	beq.n	8006e46 <osMutexRelease+0x5e>
 8006e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8006e50 <osMutexRelease+0x68>)
 8006e20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e24:	601a      	str	r2, [r3, #0]
 8006e26:	f3bf 8f4f 	dsb	sy
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	e00a      	b.n	8006e46 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006e30:	2300      	movs	r3, #0
 8006e32:	2200      	movs	r2, #0
 8006e34:	2100      	movs	r1, #0
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fb40 	bl	80074bc <xQueueGenericSend>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d001      	beq.n	8006e46 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8006e42:	23ff      	movs	r3, #255	@ 0xff
 8006e44:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8006e46:	68fb      	ldr	r3, [r7, #12]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	e000ed04 	.word	0xe000ed04

08006e54 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b086      	sub	sp, #24
 8006e58:	af02      	add	r7, sp, #8
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00f      	beq.n	8006e86 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d10a      	bne.n	8006e82 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	2203      	movs	r2, #3
 8006e72:	9200      	str	r2, [sp, #0]
 8006e74:	2200      	movs	r2, #0
 8006e76:	2100      	movs	r1, #0
 8006e78:	2001      	movs	r0, #1
 8006e7a:	f000 f9fb 	bl	8007274 <xQueueGenericCreateStatic>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	e016      	b.n	8006eb0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006e82:	2300      	movs	r3, #0
 8006e84:	e014      	b.n	8006eb0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d110      	bne.n	8006eae <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006e8c:	2203      	movs	r2, #3
 8006e8e:	2100      	movs	r1, #0
 8006e90:	2001      	movs	r0, #1
 8006e92:	f000 fa6c 	bl	800736e <xQueueGenericCreate>
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d005      	beq.n	8006eaa <osSemaphoreCreate+0x56>
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f000 fb09 	bl	80074bc <xQueueGenericSend>
      return sema;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	e000      	b.n	8006eb0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006eae:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d101      	bne.n	8006ed0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006ecc:	2380      	movs	r3, #128	@ 0x80
 8006ece:	e03a      	b.n	8006f46 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eda:	d103      	bne.n	8006ee4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006edc:	f04f 33ff 	mov.w	r3, #4294967295
 8006ee0:	60fb      	str	r3, [r7, #12]
 8006ee2:	e009      	b.n	8006ef8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d006      	beq.n	8006ef8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d101      	bne.n	8006ef8 <osSemaphoreWait+0x40>
      ticks = 1;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006ef8:	f7ff fe97 	bl	8006c2a <inHandlerMode>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d017      	beq.n	8006f32 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006f02:	f107 0308 	add.w	r3, r7, #8
 8006f06:	461a      	mov	r2, r3
 8006f08:	2100      	movs	r1, #0
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fd78 	bl	8007a00 <xQueueReceiveFromISR>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d001      	beq.n	8006f1a <osSemaphoreWait+0x62>
      return osErrorOS;
 8006f16:	23ff      	movs	r3, #255	@ 0xff
 8006f18:	e015      	b.n	8006f46 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d011      	beq.n	8006f44 <osSemaphoreWait+0x8c>
 8006f20:	4b0b      	ldr	r3, [pc, #44]	@ (8006f50 <osSemaphoreWait+0x98>)
 8006f22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f26:	601a      	str	r2, [r3, #0]
 8006f28:	f3bf 8f4f 	dsb	sy
 8006f2c:	f3bf 8f6f 	isb	sy
 8006f30:	e008      	b.n	8006f44 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006f32:	68f9      	ldr	r1, [r7, #12]
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 fc53 	bl	80077e0 <xQueueSemaphoreTake>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d001      	beq.n	8006f44 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006f40:	23ff      	movs	r3, #255	@ 0xff
 8006f42:	e000      	b.n	8006f46 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	e000ed04 	.word	0xe000ed04

08006f54 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006f60:	2300      	movs	r3, #0
 8006f62:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006f64:	f7ff fe61 	bl	8006c2a <inHandlerMode>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d016      	beq.n	8006f9c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006f6e:	f107 0308 	add.w	r3, r7, #8
 8006f72:	4619      	mov	r1, r3
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 fba3 	bl	80076c0 <xQueueGiveFromISR>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d001      	beq.n	8006f84 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006f80:	23ff      	movs	r3, #255	@ 0xff
 8006f82:	e017      	b.n	8006fb4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d013      	beq.n	8006fb2 <osSemaphoreRelease+0x5e>
 8006f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8006fbc <osSemaphoreRelease+0x68>)
 8006f8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f90:	601a      	str	r2, [r3, #0]
 8006f92:	f3bf 8f4f 	dsb	sy
 8006f96:	f3bf 8f6f 	isb	sy
 8006f9a:	e00a      	b.n	8006fb2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fa8a 	bl	80074bc <xQueueGenericSend>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d001      	beq.n	8006fb2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8006fae:	23ff      	movs	r3, #255	@ 0xff
 8006fb0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	e000ed04 	.word	0xe000ed04

08006fc0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006fc8:	f7ff fe2f 	bl	8006c2a <inHandlerMode>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8006fd2:	2382      	movs	r3, #130	@ 0x82
 8006fd4:	e003      	b.n	8006fde <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fd94 	bl	8007b04 <vQueueDelete>

  return osOK; 
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3708      	adds	r7, #8
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006fe6:	b590      	push	{r4, r7, lr}
 8006fe8:	b085      	sub	sp, #20
 8006fea:	af02      	add	r7, sp, #8
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d011      	beq.n	800701c <osMessageCreate+0x36>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00d      	beq.n	800701c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6818      	ldr	r0, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6859      	ldr	r1, [r3, #4]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	689a      	ldr	r2, [r3, #8]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	2400      	movs	r4, #0
 8007012:	9400      	str	r4, [sp, #0]
 8007014:	f000 f92e 	bl	8007274 <xQueueGenericCreateStatic>
 8007018:	4603      	mov	r3, r0
 800701a:	e008      	b.n	800702e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6818      	ldr	r0, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	4619      	mov	r1, r3
 8007028:	f000 f9a1 	bl	800736e <xQueueGenericCreate>
 800702c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800702e:	4618      	mov	r0, r3
 8007030:	370c      	adds	r7, #12
 8007032:	46bd      	mov	sp, r7
 8007034:	bd90      	pop	{r4, r7, pc}

08007036 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007036:	b480      	push	{r7}
 8007038:	b083      	sub	sp, #12
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f103 0208 	add.w	r2, r3, #8
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f04f 32ff 	mov.w	r2, #4294967295
 800704e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f103 0208 	add.w	r2, r3, #8
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f103 0208 	add.w	r2, r3, #8
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800706a:	bf00      	nop
 800706c:	370c      	adds	r7, #12
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007076:	b480      	push	{r7}
 8007078:	b083      	sub	sp, #12
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	689a      	ldr	r2, [r3, #8]
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	683a      	ldr	r2, [r7, #0]
 80070ba:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	1c5a      	adds	r2, r3, #1
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	601a      	str	r2, [r3, #0]
}
 80070cc:	bf00      	nop
 80070ce:	3714      	adds	r7, #20
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ee:	d103      	bne.n	80070f8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	60fb      	str	r3, [r7, #12]
 80070f6:	e00c      	b.n	8007112 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	3308      	adds	r3, #8
 80070fc:	60fb      	str	r3, [r7, #12]
 80070fe:	e002      	b.n	8007106 <vListInsert+0x2e>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	60fb      	str	r3, [r7, #12]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	429a      	cmp	r2, r3
 8007110:	d2f6      	bcs.n	8007100 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	685a      	ldr	r2, [r3, #4]
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	683a      	ldr	r2, [r7, #0]
 8007120:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	683a      	ldr	r2, [r7, #0]
 800712c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	1c5a      	adds	r2, r3, #1
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	601a      	str	r2, [r3, #0]
}
 800713e:	bf00      	nop
 8007140:	3714      	adds	r7, #20
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800714a:	b480      	push	{r7}
 800714c:	b085      	sub	sp, #20
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	6892      	ldr	r2, [r2, #8]
 8007160:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	6852      	ldr	r2, [r2, #4]
 800716a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	429a      	cmp	r2, r3
 8007174:	d103      	bne.n	800717e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	689a      	ldr	r2, [r3, #8]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	1e5a      	subs	r2, r3, #1
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
	...

080071a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d10b      	bne.n	80071cc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80071b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b8:	f383 8811 	msr	BASEPRI, r3
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80071c6:	bf00      	nop
 80071c8:	bf00      	nop
 80071ca:	e7fd      	b.n	80071c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80071cc:	f001 ff3c 	bl	8009048 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071d8:	68f9      	ldr	r1, [r7, #12]
 80071da:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80071dc:	fb01 f303 	mul.w	r3, r1, r3
 80071e0:	441a      	add	r2, r3
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071fc:	3b01      	subs	r3, #1
 80071fe:	68f9      	ldr	r1, [r7, #12]
 8007200:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007202:	fb01 f303 	mul.w	r3, r1, r3
 8007206:	441a      	add	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	22ff      	movs	r2, #255	@ 0xff
 8007210:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	22ff      	movs	r2, #255	@ 0xff
 8007218:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d114      	bne.n	800724c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d01a      	beq.n	8007260 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	3310      	adds	r3, #16
 800722e:	4618      	mov	r0, r3
 8007230:	f001 f9f6 	bl	8008620 <xTaskRemoveFromEventList>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d012      	beq.n	8007260 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800723a:	4b0d      	ldr	r3, [pc, #52]	@ (8007270 <xQueueGenericReset+0xd0>)
 800723c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007240:	601a      	str	r2, [r3, #0]
 8007242:	f3bf 8f4f 	dsb	sy
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	e009      	b.n	8007260 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	3310      	adds	r3, #16
 8007250:	4618      	mov	r0, r3
 8007252:	f7ff fef0 	bl	8007036 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	3324      	adds	r3, #36	@ 0x24
 800725a:	4618      	mov	r0, r3
 800725c:	f7ff feeb 	bl	8007036 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007260:	f001 ff24 	bl	80090ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007264:	2301      	movs	r3, #1
}
 8007266:	4618      	mov	r0, r3
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	e000ed04 	.word	0xe000ed04

08007274 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007274:	b580      	push	{r7, lr}
 8007276:	b08e      	sub	sp, #56	@ 0x38
 8007278:	af02      	add	r7, sp, #8
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]
 8007280:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10b      	bne.n	80072a0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800728c:	f383 8811 	msr	BASEPRI, r3
 8007290:	f3bf 8f6f 	isb	sy
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800729a:	bf00      	nop
 800729c:	bf00      	nop
 800729e:	e7fd      	b.n	800729c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10b      	bne.n	80072be <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80072a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072aa:	f383 8811 	msr	BASEPRI, r3
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	f3bf 8f4f 	dsb	sy
 80072b6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80072b8:	bf00      	nop
 80072ba:	bf00      	nop
 80072bc:	e7fd      	b.n	80072ba <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d002      	beq.n	80072ca <xQueueGenericCreateStatic+0x56>
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d001      	beq.n	80072ce <xQueueGenericCreateStatic+0x5a>
 80072ca:	2301      	movs	r3, #1
 80072cc:	e000      	b.n	80072d0 <xQueueGenericCreateStatic+0x5c>
 80072ce:	2300      	movs	r3, #0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10b      	bne.n	80072ec <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80072d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d8:	f383 8811 	msr	BASEPRI, r3
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	623b      	str	r3, [r7, #32]
}
 80072e6:	bf00      	nop
 80072e8:	bf00      	nop
 80072ea:	e7fd      	b.n	80072e8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d102      	bne.n	80072f8 <xQueueGenericCreateStatic+0x84>
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d101      	bne.n	80072fc <xQueueGenericCreateStatic+0x88>
 80072f8:	2301      	movs	r3, #1
 80072fa:	e000      	b.n	80072fe <xQueueGenericCreateStatic+0x8a>
 80072fc:	2300      	movs	r3, #0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10b      	bne.n	800731a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007306:	f383 8811 	msr	BASEPRI, r3
 800730a:	f3bf 8f6f 	isb	sy
 800730e:	f3bf 8f4f 	dsb	sy
 8007312:	61fb      	str	r3, [r7, #28]
}
 8007314:	bf00      	nop
 8007316:	bf00      	nop
 8007318:	e7fd      	b.n	8007316 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800731a:	2348      	movs	r3, #72	@ 0x48
 800731c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	2b48      	cmp	r3, #72	@ 0x48
 8007322:	d00b      	beq.n	800733c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007328:	f383 8811 	msr	BASEPRI, r3
 800732c:	f3bf 8f6f 	isb	sy
 8007330:	f3bf 8f4f 	dsb	sy
 8007334:	61bb      	str	r3, [r7, #24]
}
 8007336:	bf00      	nop
 8007338:	bf00      	nop
 800733a:	e7fd      	b.n	8007338 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800733c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00d      	beq.n	8007364 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800734a:	2201      	movs	r2, #1
 800734c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007350:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007356:	9300      	str	r3, [sp, #0]
 8007358:	4613      	mov	r3, r2
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	68b9      	ldr	r1, [r7, #8]
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f000 f840 	bl	80073e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007366:	4618      	mov	r0, r3
 8007368:	3730      	adds	r7, #48	@ 0x30
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800736e:	b580      	push	{r7, lr}
 8007370:	b08a      	sub	sp, #40	@ 0x28
 8007372:	af02      	add	r7, sp, #8
 8007374:	60f8      	str	r0, [r7, #12]
 8007376:	60b9      	str	r1, [r7, #8]
 8007378:	4613      	mov	r3, r2
 800737a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d10b      	bne.n	800739a <xQueueGenericCreate+0x2c>
	__asm volatile
 8007382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007386:	f383 8811 	msr	BASEPRI, r3
 800738a:	f3bf 8f6f 	isb	sy
 800738e:	f3bf 8f4f 	dsb	sy
 8007392:	613b      	str	r3, [r7, #16]
}
 8007394:	bf00      	nop
 8007396:	bf00      	nop
 8007398:	e7fd      	b.n	8007396 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	fb02 f303 	mul.w	r3, r2, r3
 80073a2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	3348      	adds	r3, #72	@ 0x48
 80073a8:	4618      	mov	r0, r3
 80073aa:	f001 ff6f 	bl	800928c <pvPortMalloc>
 80073ae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d011      	beq.n	80073da <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	3348      	adds	r3, #72	@ 0x48
 80073be:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073c8:	79fa      	ldrb	r2, [r7, #7]
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	9300      	str	r3, [sp, #0]
 80073ce:	4613      	mov	r3, r2
 80073d0:	697a      	ldr	r2, [r7, #20]
 80073d2:	68b9      	ldr	r1, [r7, #8]
 80073d4:	68f8      	ldr	r0, [r7, #12]
 80073d6:	f000 f805 	bl	80073e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80073da:	69bb      	ldr	r3, [r7, #24]
	}
 80073dc:	4618      	mov	r0, r3
 80073de:	3720      	adds	r7, #32
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
 80073f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d103      	bne.n	8007400 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	69ba      	ldr	r2, [r7, #24]
 80073fc:	601a      	str	r2, [r3, #0]
 80073fe:	e002      	b.n	8007406 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	68ba      	ldr	r2, [r7, #8]
 8007410:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007412:	2101      	movs	r1, #1
 8007414:	69b8      	ldr	r0, [r7, #24]
 8007416:	f7ff fec3 	bl	80071a0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800741a:	bf00      	nop
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007422:	b580      	push	{r7, lr}
 8007424:	b082      	sub	sp, #8
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00e      	beq.n	800744e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007442:	2300      	movs	r3, #0
 8007444:	2200      	movs	r2, #0
 8007446:	2100      	movs	r1, #0
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 f837 	bl	80074bc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800744e:	bf00      	nop
 8007450:	3708      	adds	r7, #8
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007456:	b580      	push	{r7, lr}
 8007458:	b086      	sub	sp, #24
 800745a:	af00      	add	r7, sp, #0
 800745c:	4603      	mov	r3, r0
 800745e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007460:	2301      	movs	r3, #1
 8007462:	617b      	str	r3, [r7, #20]
 8007464:	2300      	movs	r3, #0
 8007466:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007468:	79fb      	ldrb	r3, [r7, #7]
 800746a:	461a      	mov	r2, r3
 800746c:	6939      	ldr	r1, [r7, #16]
 800746e:	6978      	ldr	r0, [r7, #20]
 8007470:	f7ff ff7d 	bl	800736e <xQueueGenericCreate>
 8007474:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f7ff ffd3 	bl	8007422 <prvInitialiseMutex>

		return xNewQueue;
 800747c:	68fb      	ldr	r3, [r7, #12]
	}
 800747e:	4618      	mov	r0, r3
 8007480:	3718      	adds	r7, #24
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007486:	b580      	push	{r7, lr}
 8007488:	b088      	sub	sp, #32
 800748a:	af02      	add	r7, sp, #8
 800748c:	4603      	mov	r3, r0
 800748e:	6039      	str	r1, [r7, #0]
 8007490:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007492:	2301      	movs	r3, #1
 8007494:	617b      	str	r3, [r7, #20]
 8007496:	2300      	movs	r3, #0
 8007498:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800749a:	79fb      	ldrb	r3, [r7, #7]
 800749c:	9300      	str	r3, [sp, #0]
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	2200      	movs	r2, #0
 80074a2:	6939      	ldr	r1, [r7, #16]
 80074a4:	6978      	ldr	r0, [r7, #20]
 80074a6:	f7ff fee5 	bl	8007274 <xQueueGenericCreateStatic>
 80074aa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f7ff ffb8 	bl	8007422 <prvInitialiseMutex>

		return xNewQueue;
 80074b2:	68fb      	ldr	r3, [r7, #12]
	}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3718      	adds	r7, #24
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b08e      	sub	sp, #56	@ 0x38
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
 80074c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80074ca:	2300      	movs	r3, #0
 80074cc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80074d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d10b      	bne.n	80074f0 <xQueueGenericSend+0x34>
	__asm volatile
 80074d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074dc:	f383 8811 	msr	BASEPRI, r3
 80074e0:	f3bf 8f6f 	isb	sy
 80074e4:	f3bf 8f4f 	dsb	sy
 80074e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80074ea:	bf00      	nop
 80074ec:	bf00      	nop
 80074ee:	e7fd      	b.n	80074ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d103      	bne.n	80074fe <xQueueGenericSend+0x42>
 80074f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d101      	bne.n	8007502 <xQueueGenericSend+0x46>
 80074fe:	2301      	movs	r3, #1
 8007500:	e000      	b.n	8007504 <xQueueGenericSend+0x48>
 8007502:	2300      	movs	r3, #0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d10b      	bne.n	8007520 <xQueueGenericSend+0x64>
	__asm volatile
 8007508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800750c:	f383 8811 	msr	BASEPRI, r3
 8007510:	f3bf 8f6f 	isb	sy
 8007514:	f3bf 8f4f 	dsb	sy
 8007518:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800751a:	bf00      	nop
 800751c:	bf00      	nop
 800751e:	e7fd      	b.n	800751c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	2b02      	cmp	r3, #2
 8007524:	d103      	bne.n	800752e <xQueueGenericSend+0x72>
 8007526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800752a:	2b01      	cmp	r3, #1
 800752c:	d101      	bne.n	8007532 <xQueueGenericSend+0x76>
 800752e:	2301      	movs	r3, #1
 8007530:	e000      	b.n	8007534 <xQueueGenericSend+0x78>
 8007532:	2300      	movs	r3, #0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d10b      	bne.n	8007550 <xQueueGenericSend+0x94>
	__asm volatile
 8007538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800753c:	f383 8811 	msr	BASEPRI, r3
 8007540:	f3bf 8f6f 	isb	sy
 8007544:	f3bf 8f4f 	dsb	sy
 8007548:	623b      	str	r3, [r7, #32]
}
 800754a:	bf00      	nop
 800754c:	bf00      	nop
 800754e:	e7fd      	b.n	800754c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007550:	f001 fa26 	bl	80089a0 <xTaskGetSchedulerState>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d102      	bne.n	8007560 <xQueueGenericSend+0xa4>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d101      	bne.n	8007564 <xQueueGenericSend+0xa8>
 8007560:	2301      	movs	r3, #1
 8007562:	e000      	b.n	8007566 <xQueueGenericSend+0xaa>
 8007564:	2300      	movs	r3, #0
 8007566:	2b00      	cmp	r3, #0
 8007568:	d10b      	bne.n	8007582 <xQueueGenericSend+0xc6>
	__asm volatile
 800756a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800756e:	f383 8811 	msr	BASEPRI, r3
 8007572:	f3bf 8f6f 	isb	sy
 8007576:	f3bf 8f4f 	dsb	sy
 800757a:	61fb      	str	r3, [r7, #28]
}
 800757c:	bf00      	nop
 800757e:	bf00      	nop
 8007580:	e7fd      	b.n	800757e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007582:	f001 fd61 	bl	8009048 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007588:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800758a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800758e:	429a      	cmp	r2, r3
 8007590:	d302      	bcc.n	8007598 <xQueueGenericSend+0xdc>
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	2b02      	cmp	r3, #2
 8007596:	d129      	bne.n	80075ec <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007598:	683a      	ldr	r2, [r7, #0]
 800759a:	68b9      	ldr	r1, [r7, #8]
 800759c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800759e:	f000 faed 	bl	8007b7c <prvCopyDataToQueue>
 80075a2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d010      	beq.n	80075ce <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ae:	3324      	adds	r3, #36	@ 0x24
 80075b0:	4618      	mov	r0, r3
 80075b2:	f001 f835 	bl	8008620 <xTaskRemoveFromEventList>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d013      	beq.n	80075e4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80075bc:	4b3f      	ldr	r3, [pc, #252]	@ (80076bc <xQueueGenericSend+0x200>)
 80075be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075c2:	601a      	str	r2, [r3, #0]
 80075c4:	f3bf 8f4f 	dsb	sy
 80075c8:	f3bf 8f6f 	isb	sy
 80075cc:	e00a      	b.n	80075e4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80075ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d007      	beq.n	80075e4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80075d4:	4b39      	ldr	r3, [pc, #228]	@ (80076bc <xQueueGenericSend+0x200>)
 80075d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075da:	601a      	str	r2, [r3, #0]
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80075e4:	f001 fd62 	bl	80090ac <vPortExitCritical>
				return pdPASS;
 80075e8:	2301      	movs	r3, #1
 80075ea:	e063      	b.n	80076b4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d103      	bne.n	80075fa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80075f2:	f001 fd5b 	bl	80090ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80075f6:	2300      	movs	r3, #0
 80075f8:	e05c      	b.n	80076b4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80075fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d106      	bne.n	800760e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007600:	f107 0314 	add.w	r3, r7, #20
 8007604:	4618      	mov	r0, r3
 8007606:	f001 f86f 	bl	80086e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800760a:	2301      	movs	r3, #1
 800760c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800760e:	f001 fd4d 	bl	80090ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007612:	f000 fe1d 	bl	8008250 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007616:	f001 fd17 	bl	8009048 <vPortEnterCritical>
 800761a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800761c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007620:	b25b      	sxtb	r3, r3
 8007622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007626:	d103      	bne.n	8007630 <xQueueGenericSend+0x174>
 8007628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800762a:	2200      	movs	r2, #0
 800762c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007632:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007636:	b25b      	sxtb	r3, r3
 8007638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800763c:	d103      	bne.n	8007646 <xQueueGenericSend+0x18a>
 800763e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007640:	2200      	movs	r2, #0
 8007642:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007646:	f001 fd31 	bl	80090ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800764a:	1d3a      	adds	r2, r7, #4
 800764c:	f107 0314 	add.w	r3, r7, #20
 8007650:	4611      	mov	r1, r2
 8007652:	4618      	mov	r0, r3
 8007654:	f001 f85e 	bl	8008714 <xTaskCheckForTimeOut>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d124      	bne.n	80076a8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800765e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007660:	f000 fb84 	bl	8007d6c <prvIsQueueFull>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d018      	beq.n	800769c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800766a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800766c:	3310      	adds	r3, #16
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	4611      	mov	r1, r2
 8007672:	4618      	mov	r0, r3
 8007674:	f000 ffae 	bl	80085d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007678:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800767a:	f000 fb0f 	bl	8007c9c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800767e:	f000 fdf5 	bl	800826c <xTaskResumeAll>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	f47f af7c 	bne.w	8007582 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800768a:	4b0c      	ldr	r3, [pc, #48]	@ (80076bc <xQueueGenericSend+0x200>)
 800768c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007690:	601a      	str	r2, [r3, #0]
 8007692:	f3bf 8f4f 	dsb	sy
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	e772      	b.n	8007582 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800769c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800769e:	f000 fafd 	bl	8007c9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076a2:	f000 fde3 	bl	800826c <xTaskResumeAll>
 80076a6:	e76c      	b.n	8007582 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80076a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80076aa:	f000 faf7 	bl	8007c9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076ae:	f000 fddd 	bl	800826c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80076b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3738      	adds	r7, #56	@ 0x38
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	e000ed04 	.word	0xe000ed04

080076c0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b08e      	sub	sp, #56	@ 0x38
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80076ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d10b      	bne.n	80076ec <xQueueGiveFromISR+0x2c>
	__asm volatile
 80076d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d8:	f383 8811 	msr	BASEPRI, r3
 80076dc:	f3bf 8f6f 	isb	sy
 80076e0:	f3bf 8f4f 	dsb	sy
 80076e4:	623b      	str	r3, [r7, #32]
}
 80076e6:	bf00      	nop
 80076e8:	bf00      	nop
 80076ea:	e7fd      	b.n	80076e8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80076ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00b      	beq.n	800770c <xQueueGiveFromISR+0x4c>
	__asm volatile
 80076f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f8:	f383 8811 	msr	BASEPRI, r3
 80076fc:	f3bf 8f6f 	isb	sy
 8007700:	f3bf 8f4f 	dsb	sy
 8007704:	61fb      	str	r3, [r7, #28]
}
 8007706:	bf00      	nop
 8007708:	bf00      	nop
 800770a:	e7fd      	b.n	8007708 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800770c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d103      	bne.n	800771c <xQueueGiveFromISR+0x5c>
 8007714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d101      	bne.n	8007720 <xQueueGiveFromISR+0x60>
 800771c:	2301      	movs	r3, #1
 800771e:	e000      	b.n	8007722 <xQueueGiveFromISR+0x62>
 8007720:	2300      	movs	r3, #0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d10b      	bne.n	800773e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8007726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800772a:	f383 8811 	msr	BASEPRI, r3
 800772e:	f3bf 8f6f 	isb	sy
 8007732:	f3bf 8f4f 	dsb	sy
 8007736:	61bb      	str	r3, [r7, #24]
}
 8007738:	bf00      	nop
 800773a:	bf00      	nop
 800773c:	e7fd      	b.n	800773a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800773e:	f001 fd63 	bl	8009208 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007742:	f3ef 8211 	mrs	r2, BASEPRI
 8007746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800774a:	f383 8811 	msr	BASEPRI, r3
 800774e:	f3bf 8f6f 	isb	sy
 8007752:	f3bf 8f4f 	dsb	sy
 8007756:	617a      	str	r2, [r7, #20]
 8007758:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800775a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800775c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800775e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007762:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007768:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800776a:	429a      	cmp	r2, r3
 800776c:	d22b      	bcs.n	80077c6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800776e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007770:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007774:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800777a:	1c5a      	adds	r2, r3, #1
 800777c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800777e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007780:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007788:	d112      	bne.n	80077b0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800778a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800778c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800778e:	2b00      	cmp	r3, #0
 8007790:	d016      	beq.n	80077c0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007794:	3324      	adds	r3, #36	@ 0x24
 8007796:	4618      	mov	r0, r3
 8007798:	f000 ff42 	bl	8008620 <xTaskRemoveFromEventList>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00e      	beq.n	80077c0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00b      	beq.n	80077c0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	2201      	movs	r2, #1
 80077ac:	601a      	str	r2, [r3, #0]
 80077ae:	e007      	b.n	80077c0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80077b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077b4:	3301      	adds	r3, #1
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	b25a      	sxtb	r2, r3
 80077ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80077c0:	2301      	movs	r3, #1
 80077c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80077c4:	e001      	b.n	80077ca <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80077c6:	2300      	movs	r3, #0
 80077c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80077ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077cc:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80077d4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80077d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3738      	adds	r7, #56	@ 0x38
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b08e      	sub	sp, #56	@ 0x38
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80077ea:	2300      	movs	r3, #0
 80077ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80077f2:	2300      	movs	r3, #0
 80077f4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80077f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d10b      	bne.n	8007814 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80077fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007800:	f383 8811 	msr	BASEPRI, r3
 8007804:	f3bf 8f6f 	isb	sy
 8007808:	f3bf 8f4f 	dsb	sy
 800780c:	623b      	str	r3, [r7, #32]
}
 800780e:	bf00      	nop
 8007810:	bf00      	nop
 8007812:	e7fd      	b.n	8007810 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00b      	beq.n	8007834 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800781c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007820:	f383 8811 	msr	BASEPRI, r3
 8007824:	f3bf 8f6f 	isb	sy
 8007828:	f3bf 8f4f 	dsb	sy
 800782c:	61fb      	str	r3, [r7, #28]
}
 800782e:	bf00      	nop
 8007830:	bf00      	nop
 8007832:	e7fd      	b.n	8007830 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007834:	f001 f8b4 	bl	80089a0 <xTaskGetSchedulerState>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d102      	bne.n	8007844 <xQueueSemaphoreTake+0x64>
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d101      	bne.n	8007848 <xQueueSemaphoreTake+0x68>
 8007844:	2301      	movs	r3, #1
 8007846:	e000      	b.n	800784a <xQueueSemaphoreTake+0x6a>
 8007848:	2300      	movs	r3, #0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d10b      	bne.n	8007866 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800784e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007852:	f383 8811 	msr	BASEPRI, r3
 8007856:	f3bf 8f6f 	isb	sy
 800785a:	f3bf 8f4f 	dsb	sy
 800785e:	61bb      	str	r3, [r7, #24]
}
 8007860:	bf00      	nop
 8007862:	bf00      	nop
 8007864:	e7fd      	b.n	8007862 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007866:	f001 fbef 	bl	8009048 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800786a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800786c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800786e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007872:	2b00      	cmp	r3, #0
 8007874:	d024      	beq.n	80078c0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007878:	1e5a      	subs	r2, r3, #1
 800787a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800787c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800787e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d104      	bne.n	8007890 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007886:	f001 fa37 	bl	8008cf8 <pvTaskIncrementMutexHeldCount>
 800788a:	4602      	mov	r2, r0
 800788c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800788e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00f      	beq.n	80078b8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800789a:	3310      	adds	r3, #16
 800789c:	4618      	mov	r0, r3
 800789e:	f000 febf 	bl	8008620 <xTaskRemoveFromEventList>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d007      	beq.n	80078b8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80078a8:	4b54      	ldr	r3, [pc, #336]	@ (80079fc <xQueueSemaphoreTake+0x21c>)
 80078aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078ae:	601a      	str	r2, [r3, #0]
 80078b0:	f3bf 8f4f 	dsb	sy
 80078b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80078b8:	f001 fbf8 	bl	80090ac <vPortExitCritical>
				return pdPASS;
 80078bc:	2301      	movs	r3, #1
 80078be:	e098      	b.n	80079f2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d112      	bne.n	80078ec <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80078c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00b      	beq.n	80078e4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80078cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d0:	f383 8811 	msr	BASEPRI, r3
 80078d4:	f3bf 8f6f 	isb	sy
 80078d8:	f3bf 8f4f 	dsb	sy
 80078dc:	617b      	str	r3, [r7, #20]
}
 80078de:	bf00      	nop
 80078e0:	bf00      	nop
 80078e2:	e7fd      	b.n	80078e0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80078e4:	f001 fbe2 	bl	80090ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80078e8:	2300      	movs	r3, #0
 80078ea:	e082      	b.n	80079f2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d106      	bne.n	8007900 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078f2:	f107 030c 	add.w	r3, r7, #12
 80078f6:	4618      	mov	r0, r3
 80078f8:	f000 fef6 	bl	80086e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078fc:	2301      	movs	r3, #1
 80078fe:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007900:	f001 fbd4 	bl	80090ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007904:	f000 fca4 	bl	8008250 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007908:	f001 fb9e 	bl	8009048 <vPortEnterCritical>
 800790c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800790e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007912:	b25b      	sxtb	r3, r3
 8007914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007918:	d103      	bne.n	8007922 <xQueueSemaphoreTake+0x142>
 800791a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800791c:	2200      	movs	r2, #0
 800791e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007924:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007928:	b25b      	sxtb	r3, r3
 800792a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800792e:	d103      	bne.n	8007938 <xQueueSemaphoreTake+0x158>
 8007930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007932:	2200      	movs	r2, #0
 8007934:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007938:	f001 fbb8 	bl	80090ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800793c:	463a      	mov	r2, r7
 800793e:	f107 030c 	add.w	r3, r7, #12
 8007942:	4611      	mov	r1, r2
 8007944:	4618      	mov	r0, r3
 8007946:	f000 fee5 	bl	8008714 <xTaskCheckForTimeOut>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d132      	bne.n	80079b6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007950:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007952:	f000 f9f5 	bl	8007d40 <prvIsQueueEmpty>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d026      	beq.n	80079aa <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800795c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d109      	bne.n	8007978 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007964:	f001 fb70 	bl	8009048 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	4618      	mov	r0, r3
 800796e:	f001 f835 	bl	80089dc <xTaskPriorityInherit>
 8007972:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007974:	f001 fb9a 	bl	80090ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800797a:	3324      	adds	r3, #36	@ 0x24
 800797c:	683a      	ldr	r2, [r7, #0]
 800797e:	4611      	mov	r1, r2
 8007980:	4618      	mov	r0, r3
 8007982:	f000 fe27 	bl	80085d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007986:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007988:	f000 f988 	bl	8007c9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800798c:	f000 fc6e 	bl	800826c <xTaskResumeAll>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	f47f af67 	bne.w	8007866 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007998:	4b18      	ldr	r3, [pc, #96]	@ (80079fc <xQueueSemaphoreTake+0x21c>)
 800799a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800799e:	601a      	str	r2, [r3, #0]
 80079a0:	f3bf 8f4f 	dsb	sy
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	e75d      	b.n	8007866 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80079aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80079ac:	f000 f976 	bl	8007c9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079b0:	f000 fc5c 	bl	800826c <xTaskResumeAll>
 80079b4:	e757      	b.n	8007866 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80079b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80079b8:	f000 f970 	bl	8007c9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079bc:	f000 fc56 	bl	800826c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80079c2:	f000 f9bd 	bl	8007d40 <prvIsQueueEmpty>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f43f af4c 	beq.w	8007866 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80079ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00d      	beq.n	80079f0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80079d4:	f001 fb38 	bl	8009048 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80079d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80079da:	f000 f8b7 	bl	8007b4c <prvGetDisinheritPriorityAfterTimeout>
 80079de:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80079e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80079e6:	4618      	mov	r0, r3
 80079e8:	f001 f8f6 	bl	8008bd8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80079ec:	f001 fb5e 	bl	80090ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80079f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3738      	adds	r7, #56	@ 0x38
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	e000ed04 	.word	0xe000ed04

08007a00 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b08e      	sub	sp, #56	@ 0x38
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d10b      	bne.n	8007a2e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a1a:	f383 8811 	msr	BASEPRI, r3
 8007a1e:	f3bf 8f6f 	isb	sy
 8007a22:	f3bf 8f4f 	dsb	sy
 8007a26:	623b      	str	r3, [r7, #32]
}
 8007a28:	bf00      	nop
 8007a2a:	bf00      	nop
 8007a2c:	e7fd      	b.n	8007a2a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d103      	bne.n	8007a3c <xQueueReceiveFromISR+0x3c>
 8007a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d101      	bne.n	8007a40 <xQueueReceiveFromISR+0x40>
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	e000      	b.n	8007a42 <xQueueReceiveFromISR+0x42>
 8007a40:	2300      	movs	r3, #0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10b      	bne.n	8007a5e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a4a:	f383 8811 	msr	BASEPRI, r3
 8007a4e:	f3bf 8f6f 	isb	sy
 8007a52:	f3bf 8f4f 	dsb	sy
 8007a56:	61fb      	str	r3, [r7, #28]
}
 8007a58:	bf00      	nop
 8007a5a:	bf00      	nop
 8007a5c:	e7fd      	b.n	8007a5a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a5e:	f001 fbd3 	bl	8009208 <vPortValidateInterruptPriority>
	__asm volatile
 8007a62:	f3ef 8211 	mrs	r2, BASEPRI
 8007a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a6a:	f383 8811 	msr	BASEPRI, r3
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f3bf 8f4f 	dsb	sy
 8007a76:	61ba      	str	r2, [r7, #24]
 8007a78:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007a7a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a82:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d02f      	beq.n	8007aea <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007a94:	68b9      	ldr	r1, [r7, #8]
 8007a96:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a98:	f000 f8da 	bl	8007c50 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a9e:	1e5a      	subs	r2, r3, #1
 8007aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007aa4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aac:	d112      	bne.n	8007ad4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d016      	beq.n	8007ae4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab8:	3310      	adds	r3, #16
 8007aba:	4618      	mov	r0, r3
 8007abc:	f000 fdb0 	bl	8008620 <xTaskRemoveFromEventList>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00e      	beq.n	8007ae4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00b      	beq.n	8007ae4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	601a      	str	r2, [r3, #0]
 8007ad2:	e007      	b.n	8007ae4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ad8:	3301      	adds	r3, #1
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	b25a      	sxtb	r2, r3
 8007ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ae8:	e001      	b.n	8007aee <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007aea:	2300      	movs	r3, #0
 8007aec:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007af0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	f383 8811 	msr	BASEPRI, r3
}
 8007af8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3738      	adds	r7, #56	@ 0x38
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d10b      	bne.n	8007b2e <vQueueDelete+0x2a>
	__asm volatile
 8007b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b1a:	f383 8811 	msr	BASEPRI, r3
 8007b1e:	f3bf 8f6f 	isb	sy
 8007b22:	f3bf 8f4f 	dsb	sy
 8007b26:	60bb      	str	r3, [r7, #8]
}
 8007b28:	bf00      	nop
 8007b2a:	bf00      	nop
 8007b2c:	e7fd      	b.n	8007b2a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	f000 f934 	bl	8007d9c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d102      	bne.n	8007b44 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	f001 fc72 	bl	8009428 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007b44:	bf00      	nop
 8007b46:	3710      	adds	r7, #16
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d006      	beq.n	8007b6a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f1c3 0307 	rsb	r3, r3, #7
 8007b66:	60fb      	str	r3, [r7, #12]
 8007b68:	e001      	b.n	8007b6e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
	}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3714      	adds	r7, #20
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr

08007b7c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b086      	sub	sp, #24
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b90:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d10d      	bne.n	8007bb6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d14d      	bne.n	8007c3e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f000 ff8e 	bl	8008ac8 <xTaskPriorityDisinherit>
 8007bac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	609a      	str	r2, [r3, #8]
 8007bb4:	e043      	b.n	8007c3e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d119      	bne.n	8007bf0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6858      	ldr	r0, [r3, #4]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	68b9      	ldr	r1, [r7, #8]
 8007bc8:	f001 fe8a 	bl	80098e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	685a      	ldr	r2, [r3, #4]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bd4:	441a      	add	r2, r3
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	685a      	ldr	r2, [r3, #4]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d32b      	bcc.n	8007c3e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	605a      	str	r2, [r3, #4]
 8007bee:	e026      	b.n	8007c3e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	68d8      	ldr	r0, [r3, #12]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	68b9      	ldr	r1, [r7, #8]
 8007bfc:	f001 fe70 	bl	80098e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	68da      	ldr	r2, [r3, #12]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c08:	425b      	negs	r3, r3
 8007c0a:	441a      	add	r2, r3
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	68da      	ldr	r2, [r3, #12]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d207      	bcs.n	8007c2c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	689a      	ldr	r2, [r3, #8]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c24:	425b      	negs	r3, r3
 8007c26:	441a      	add	r2, r3
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	d105      	bne.n	8007c3e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d002      	beq.n	8007c3e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	1c5a      	adds	r2, r3, #1
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007c46:	697b      	ldr	r3, [r7, #20]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3718      	adds	r7, #24
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d018      	beq.n	8007c94 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	68da      	ldr	r2, [r3, #12]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c6a:	441a      	add	r2, r3
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	68da      	ldr	r2, [r3, #12]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d303      	bcc.n	8007c84 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	68d9      	ldr	r1, [r3, #12]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	6838      	ldr	r0, [r7, #0]
 8007c90:	f001 fe26 	bl	80098e0 <memcpy>
	}
}
 8007c94:	bf00      	nop
 8007c96:	3708      	adds	r7, #8
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007ca4:	f001 f9d0 	bl	8009048 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007cae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007cb0:	e011      	b.n	8007cd6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d012      	beq.n	8007ce0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	3324      	adds	r3, #36	@ 0x24
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f000 fcae 	bl	8008620 <xTaskRemoveFromEventList>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d001      	beq.n	8007cce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007cca:	f000 fd87 	bl	80087dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007cce:	7bfb      	ldrb	r3, [r7, #15]
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	dce9      	bgt.n	8007cb2 <prvUnlockQueue+0x16>
 8007cde:	e000      	b.n	8007ce2 <prvUnlockQueue+0x46>
					break;
 8007ce0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	22ff      	movs	r2, #255	@ 0xff
 8007ce6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007cea:	f001 f9df 	bl	80090ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007cee:	f001 f9ab 	bl	8009048 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007cf8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007cfa:	e011      	b.n	8007d20 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d012      	beq.n	8007d2a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	3310      	adds	r3, #16
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f000 fc89 	bl	8008620 <xTaskRemoveFromEventList>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d001      	beq.n	8007d18 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007d14:	f000 fd62 	bl	80087dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007d18:	7bbb      	ldrb	r3, [r7, #14]
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	dce9      	bgt.n	8007cfc <prvUnlockQueue+0x60>
 8007d28:	e000      	b.n	8007d2c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007d2a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	22ff      	movs	r2, #255	@ 0xff
 8007d30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007d34:	f001 f9ba 	bl	80090ac <vPortExitCritical>
}
 8007d38:	bf00      	nop
 8007d3a:	3710      	adds	r7, #16
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d48:	f001 f97e 	bl	8009048 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d102      	bne.n	8007d5a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007d54:	2301      	movs	r3, #1
 8007d56:	60fb      	str	r3, [r7, #12]
 8007d58:	e001      	b.n	8007d5e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d5e:	f001 f9a5 	bl	80090ac <vPortExitCritical>

	return xReturn;
 8007d62:	68fb      	ldr	r3, [r7, #12]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3710      	adds	r7, #16
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d74:	f001 f968 	bl	8009048 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d102      	bne.n	8007d8a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007d84:	2301      	movs	r3, #1
 8007d86:	60fb      	str	r3, [r7, #12]
 8007d88:	e001      	b.n	8007d8e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d8e:	f001 f98d 	bl	80090ac <vPortExitCritical>

	return xReturn;
 8007d92:	68fb      	ldr	r3, [r7, #12]
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b085      	sub	sp, #20
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007da4:	2300      	movs	r3, #0
 8007da6:	60fb      	str	r3, [r7, #12]
 8007da8:	e016      	b.n	8007dd8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007daa:	4a10      	ldr	r2, [pc, #64]	@ (8007dec <vQueueUnregisterQueue+0x50>)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	00db      	lsls	r3, r3, #3
 8007db0:	4413      	add	r3, r2
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d10b      	bne.n	8007dd2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007dba:	4a0c      	ldr	r2, [pc, #48]	@ (8007dec <vQueueUnregisterQueue+0x50>)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007dc4:	4a09      	ldr	r2, [pc, #36]	@ (8007dec <vQueueUnregisterQueue+0x50>)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	00db      	lsls	r3, r3, #3
 8007dca:	4413      	add	r3, r2
 8007dcc:	2200      	movs	r2, #0
 8007dce:	605a      	str	r2, [r3, #4]
				break;
 8007dd0:	e006      	b.n	8007de0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	60fb      	str	r3, [r7, #12]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2b07      	cmp	r3, #7
 8007ddc:	d9e5      	bls.n	8007daa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007dde:	bf00      	nop
 8007de0:	bf00      	nop
 8007de2:	3714      	adds	r7, #20
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr
 8007dec:	20000578 	.word	0x20000578

08007df0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b08e      	sub	sp, #56	@ 0x38
 8007df4:	af04      	add	r7, sp, #16
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
 8007dfc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d10b      	bne.n	8007e1c <xTaskCreateStatic+0x2c>
	__asm volatile
 8007e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e08:	f383 8811 	msr	BASEPRI, r3
 8007e0c:	f3bf 8f6f 	isb	sy
 8007e10:	f3bf 8f4f 	dsb	sy
 8007e14:	623b      	str	r3, [r7, #32]
}
 8007e16:	bf00      	nop
 8007e18:	bf00      	nop
 8007e1a:	e7fd      	b.n	8007e18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10b      	bne.n	8007e3a <xTaskCreateStatic+0x4a>
	__asm volatile
 8007e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e26:	f383 8811 	msr	BASEPRI, r3
 8007e2a:	f3bf 8f6f 	isb	sy
 8007e2e:	f3bf 8f4f 	dsb	sy
 8007e32:	61fb      	str	r3, [r7, #28]
}
 8007e34:	bf00      	nop
 8007e36:	bf00      	nop
 8007e38:	e7fd      	b.n	8007e36 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007e3a:	2354      	movs	r3, #84	@ 0x54
 8007e3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	2b54      	cmp	r3, #84	@ 0x54
 8007e42:	d00b      	beq.n	8007e5c <xTaskCreateStatic+0x6c>
	__asm volatile
 8007e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e48:	f383 8811 	msr	BASEPRI, r3
 8007e4c:	f3bf 8f6f 	isb	sy
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	61bb      	str	r3, [r7, #24]
}
 8007e56:	bf00      	nop
 8007e58:	bf00      	nop
 8007e5a:	e7fd      	b.n	8007e58 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007e5c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d01e      	beq.n	8007ea2 <xTaskCreateStatic+0xb2>
 8007e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d01b      	beq.n	8007ea2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e6c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007e72:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e76:	2202      	movs	r2, #2
 8007e78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	9303      	str	r3, [sp, #12]
 8007e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e82:	9302      	str	r3, [sp, #8]
 8007e84:	f107 0314 	add.w	r3, r7, #20
 8007e88:	9301      	str	r3, [sp, #4]
 8007e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e8c:	9300      	str	r3, [sp, #0]
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	68b9      	ldr	r1, [r7, #8]
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f000 f850 	bl	8007f3a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007e9c:	f000 f8d6 	bl	800804c <prvAddNewTaskToReadyList>
 8007ea0:	e001      	b.n	8007ea6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007ea6:	697b      	ldr	r3, [r7, #20]
	}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3728      	adds	r7, #40	@ 0x28
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b08c      	sub	sp, #48	@ 0x30
 8007eb4:	af04      	add	r7, sp, #16
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	603b      	str	r3, [r7, #0]
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007ec0:	88fb      	ldrh	r3, [r7, #6]
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f001 f9e1 	bl	800928c <pvPortMalloc>
 8007eca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00e      	beq.n	8007ef0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007ed2:	2054      	movs	r0, #84	@ 0x54
 8007ed4:	f001 f9da 	bl	800928c <pvPortMalloc>
 8007ed8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d003      	beq.n	8007ee8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	697a      	ldr	r2, [r7, #20]
 8007ee4:	631a      	str	r2, [r3, #48]	@ 0x30
 8007ee6:	e005      	b.n	8007ef4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007ee8:	6978      	ldr	r0, [r7, #20]
 8007eea:	f001 fa9d 	bl	8009428 <vPortFree>
 8007eee:	e001      	b.n	8007ef4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d017      	beq.n	8007f2a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007f02:	88fa      	ldrh	r2, [r7, #6]
 8007f04:	2300      	movs	r3, #0
 8007f06:	9303      	str	r3, [sp, #12]
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	9302      	str	r3, [sp, #8]
 8007f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f0e:	9301      	str	r3, [sp, #4]
 8007f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f12:	9300      	str	r3, [sp, #0]
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	68b9      	ldr	r1, [r7, #8]
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f000 f80e 	bl	8007f3a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f1e:	69f8      	ldr	r0, [r7, #28]
 8007f20:	f000 f894 	bl	800804c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007f24:	2301      	movs	r3, #1
 8007f26:	61bb      	str	r3, [r7, #24]
 8007f28:	e002      	b.n	8007f30 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f2e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007f30:	69bb      	ldr	r3, [r7, #24]
	}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3720      	adds	r7, #32
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b088      	sub	sp, #32
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	60f8      	str	r0, [r7, #12]
 8007f42:	60b9      	str	r1, [r7, #8]
 8007f44:	607a      	str	r2, [r7, #4]
 8007f46:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007f52:	3b01      	subs	r3, #1
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4413      	add	r3, r2
 8007f58:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	f023 0307 	bic.w	r3, r3, #7
 8007f60:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	f003 0307 	and.w	r3, r3, #7
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00b      	beq.n	8007f84 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f70:	f383 8811 	msr	BASEPRI, r3
 8007f74:	f3bf 8f6f 	isb	sy
 8007f78:	f3bf 8f4f 	dsb	sy
 8007f7c:	617b      	str	r3, [r7, #20]
}
 8007f7e:	bf00      	nop
 8007f80:	bf00      	nop
 8007f82:	e7fd      	b.n	8007f80 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d01f      	beq.n	8007fca <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	61fb      	str	r3, [r7, #28]
 8007f8e:	e012      	b.n	8007fb6 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007f90:	68ba      	ldr	r2, [r7, #8]
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	4413      	add	r3, r2
 8007f96:	7819      	ldrb	r1, [r3, #0]
 8007f98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	3334      	adds	r3, #52	@ 0x34
 8007fa0:	460a      	mov	r2, r1
 8007fa2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007fa4:	68ba      	ldr	r2, [r7, #8]
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	4413      	add	r3, r2
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d006      	beq.n	8007fbe <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	61fb      	str	r3, [r7, #28]
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	2b0f      	cmp	r3, #15
 8007fba:	d9e9      	bls.n	8007f90 <prvInitialiseNewTask+0x56>
 8007fbc:	e000      	b.n	8007fc0 <prvInitialiseNewTask+0x86>
			{
				break;
 8007fbe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007fc8:	e003      	b.n	8007fd2 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fd4:	2b06      	cmp	r3, #6
 8007fd6:	d901      	bls.n	8007fdc <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007fd8:	2306      	movs	r3, #6
 8007fda:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007fe0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007fe6:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fea:	2200      	movs	r2, #0
 8007fec:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff0:	3304      	adds	r3, #4
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7ff f83f 	bl	8007076 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ffa:	3318      	adds	r3, #24
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f7ff f83a 	bl	8007076 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008004:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008006:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800800a:	f1c3 0207 	rsb	r2, r3, #7
 800800e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008010:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008014:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008016:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800801a:	2200      	movs	r2, #0
 800801c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800801e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008020:	2200      	movs	r2, #0
 8008022:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008026:	683a      	ldr	r2, [r7, #0]
 8008028:	68f9      	ldr	r1, [r7, #12]
 800802a:	69b8      	ldr	r0, [r7, #24]
 800802c:	f000 fede 	bl	8008dec <pxPortInitialiseStack>
 8008030:	4602      	mov	r2, r0
 8008032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008034:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008038:	2b00      	cmp	r3, #0
 800803a:	d002      	beq.n	8008042 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800803c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800803e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008040:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008042:	bf00      	nop
 8008044:	3720      	adds	r7, #32
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
	...

0800804c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008054:	f000 fff8 	bl	8009048 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008058:	4b2a      	ldr	r3, [pc, #168]	@ (8008104 <prvAddNewTaskToReadyList+0xb8>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	3301      	adds	r3, #1
 800805e:	4a29      	ldr	r2, [pc, #164]	@ (8008104 <prvAddNewTaskToReadyList+0xb8>)
 8008060:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008062:	4b29      	ldr	r3, [pc, #164]	@ (8008108 <prvAddNewTaskToReadyList+0xbc>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d109      	bne.n	800807e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800806a:	4a27      	ldr	r2, [pc, #156]	@ (8008108 <prvAddNewTaskToReadyList+0xbc>)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008070:	4b24      	ldr	r3, [pc, #144]	@ (8008104 <prvAddNewTaskToReadyList+0xb8>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d110      	bne.n	800809a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008078:	f000 fbd4 	bl	8008824 <prvInitialiseTaskLists>
 800807c:	e00d      	b.n	800809a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800807e:	4b23      	ldr	r3, [pc, #140]	@ (800810c <prvAddNewTaskToReadyList+0xc0>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d109      	bne.n	800809a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008086:	4b20      	ldr	r3, [pc, #128]	@ (8008108 <prvAddNewTaskToReadyList+0xbc>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008090:	429a      	cmp	r2, r3
 8008092:	d802      	bhi.n	800809a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008094:	4a1c      	ldr	r2, [pc, #112]	@ (8008108 <prvAddNewTaskToReadyList+0xbc>)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800809a:	4b1d      	ldr	r3, [pc, #116]	@ (8008110 <prvAddNewTaskToReadyList+0xc4>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	3301      	adds	r3, #1
 80080a0:	4a1b      	ldr	r2, [pc, #108]	@ (8008110 <prvAddNewTaskToReadyList+0xc4>)
 80080a2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a8:	2201      	movs	r2, #1
 80080aa:	409a      	lsls	r2, r3
 80080ac:	4b19      	ldr	r3, [pc, #100]	@ (8008114 <prvAddNewTaskToReadyList+0xc8>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	4a18      	ldr	r2, [pc, #96]	@ (8008114 <prvAddNewTaskToReadyList+0xc8>)
 80080b4:	6013      	str	r3, [r2, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080ba:	4613      	mov	r3, r2
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	4413      	add	r3, r2
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	4a15      	ldr	r2, [pc, #84]	@ (8008118 <prvAddNewTaskToReadyList+0xcc>)
 80080c4:	441a      	add	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	3304      	adds	r3, #4
 80080ca:	4619      	mov	r1, r3
 80080cc:	4610      	mov	r0, r2
 80080ce:	f7fe ffdf 	bl	8007090 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80080d2:	f000 ffeb 	bl	80090ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80080d6:	4b0d      	ldr	r3, [pc, #52]	@ (800810c <prvAddNewTaskToReadyList+0xc0>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00e      	beq.n	80080fc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80080de:	4b0a      	ldr	r3, [pc, #40]	@ (8008108 <prvAddNewTaskToReadyList+0xbc>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d207      	bcs.n	80080fc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80080ec:	4b0b      	ldr	r3, [pc, #44]	@ (800811c <prvAddNewTaskToReadyList+0xd0>)
 80080ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080f2:	601a      	str	r2, [r3, #0]
 80080f4:	f3bf 8f4f 	dsb	sy
 80080f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080fc:	bf00      	nop
 80080fe:	3708      	adds	r7, #8
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	200006b8 	.word	0x200006b8
 8008108:	200005b8 	.word	0x200005b8
 800810c:	200006c4 	.word	0x200006c4
 8008110:	200006d4 	.word	0x200006d4
 8008114:	200006c0 	.word	0x200006c0
 8008118:	200005bc 	.word	0x200005bc
 800811c:	e000ed04 	.word	0xe000ed04

08008120 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008128:	2300      	movs	r3, #0
 800812a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d018      	beq.n	8008164 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008132:	4b14      	ldr	r3, [pc, #80]	@ (8008184 <vTaskDelay+0x64>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00b      	beq.n	8008152 <vTaskDelay+0x32>
	__asm volatile
 800813a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800813e:	f383 8811 	msr	BASEPRI, r3
 8008142:	f3bf 8f6f 	isb	sy
 8008146:	f3bf 8f4f 	dsb	sy
 800814a:	60bb      	str	r3, [r7, #8]
}
 800814c:	bf00      	nop
 800814e:	bf00      	nop
 8008150:	e7fd      	b.n	800814e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008152:	f000 f87d 	bl	8008250 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008156:	2100      	movs	r1, #0
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 fde1 	bl	8008d20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800815e:	f000 f885 	bl	800826c <xTaskResumeAll>
 8008162:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d107      	bne.n	800817a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800816a:	4b07      	ldr	r3, [pc, #28]	@ (8008188 <vTaskDelay+0x68>)
 800816c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008170:	601a      	str	r2, [r3, #0]
 8008172:	f3bf 8f4f 	dsb	sy
 8008176:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800817a:	bf00      	nop
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	200006e0 	.word	0x200006e0
 8008188:	e000ed04 	.word	0xe000ed04

0800818c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b08a      	sub	sp, #40	@ 0x28
 8008190:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008192:	2300      	movs	r3, #0
 8008194:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008196:	2300      	movs	r3, #0
 8008198:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800819a:	463a      	mov	r2, r7
 800819c:	1d39      	adds	r1, r7, #4
 800819e:	f107 0308 	add.w	r3, r7, #8
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7f8 fa04 	bl	80005b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80081a8:	6839      	ldr	r1, [r7, #0]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	68ba      	ldr	r2, [r7, #8]
 80081ae:	9202      	str	r2, [sp, #8]
 80081b0:	9301      	str	r3, [sp, #4]
 80081b2:	2300      	movs	r3, #0
 80081b4:	9300      	str	r3, [sp, #0]
 80081b6:	2300      	movs	r3, #0
 80081b8:	460a      	mov	r2, r1
 80081ba:	491f      	ldr	r1, [pc, #124]	@ (8008238 <vTaskStartScheduler+0xac>)
 80081bc:	481f      	ldr	r0, [pc, #124]	@ (800823c <vTaskStartScheduler+0xb0>)
 80081be:	f7ff fe17 	bl	8007df0 <xTaskCreateStatic>
 80081c2:	4603      	mov	r3, r0
 80081c4:	4a1e      	ldr	r2, [pc, #120]	@ (8008240 <vTaskStartScheduler+0xb4>)
 80081c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80081c8:	4b1d      	ldr	r3, [pc, #116]	@ (8008240 <vTaskStartScheduler+0xb4>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d002      	beq.n	80081d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80081d0:	2301      	movs	r3, #1
 80081d2:	617b      	str	r3, [r7, #20]
 80081d4:	e001      	b.n	80081da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80081d6:	2300      	movs	r3, #0
 80081d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d116      	bne.n	800820e <vTaskStartScheduler+0x82>
	__asm volatile
 80081e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	613b      	str	r3, [r7, #16]
}
 80081f2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80081f4:	4b13      	ldr	r3, [pc, #76]	@ (8008244 <vTaskStartScheduler+0xb8>)
 80081f6:	f04f 32ff 	mov.w	r2, #4294967295
 80081fa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80081fc:	4b12      	ldr	r3, [pc, #72]	@ (8008248 <vTaskStartScheduler+0xbc>)
 80081fe:	2201      	movs	r2, #1
 8008200:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008202:	4b12      	ldr	r3, [pc, #72]	@ (800824c <vTaskStartScheduler+0xc0>)
 8008204:	2200      	movs	r2, #0
 8008206:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008208:	f000 fe7a 	bl	8008f00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800820c:	e00f      	b.n	800822e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008214:	d10b      	bne.n	800822e <vTaskStartScheduler+0xa2>
	__asm volatile
 8008216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800821a:	f383 8811 	msr	BASEPRI, r3
 800821e:	f3bf 8f6f 	isb	sy
 8008222:	f3bf 8f4f 	dsb	sy
 8008226:	60fb      	str	r3, [r7, #12]
}
 8008228:	bf00      	nop
 800822a:	bf00      	nop
 800822c:	e7fd      	b.n	800822a <vTaskStartScheduler+0x9e>
}
 800822e:	bf00      	nop
 8008230:	3718      	adds	r7, #24
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	0800a704 	.word	0x0800a704
 800823c:	080087f5 	.word	0x080087f5
 8008240:	200006dc 	.word	0x200006dc
 8008244:	200006d8 	.word	0x200006d8
 8008248:	200006c4 	.word	0x200006c4
 800824c:	200006bc 	.word	0x200006bc

08008250 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008250:	b480      	push	{r7}
 8008252:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008254:	4b04      	ldr	r3, [pc, #16]	@ (8008268 <vTaskSuspendAll+0x18>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	3301      	adds	r3, #1
 800825a:	4a03      	ldr	r2, [pc, #12]	@ (8008268 <vTaskSuspendAll+0x18>)
 800825c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800825e:	bf00      	nop
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr
 8008268:	200006e0 	.word	0x200006e0

0800826c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008272:	2300      	movs	r3, #0
 8008274:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008276:	2300      	movs	r3, #0
 8008278:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800827a:	4b42      	ldr	r3, [pc, #264]	@ (8008384 <xTaskResumeAll+0x118>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d10b      	bne.n	800829a <xTaskResumeAll+0x2e>
	__asm volatile
 8008282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008286:	f383 8811 	msr	BASEPRI, r3
 800828a:	f3bf 8f6f 	isb	sy
 800828e:	f3bf 8f4f 	dsb	sy
 8008292:	603b      	str	r3, [r7, #0]
}
 8008294:	bf00      	nop
 8008296:	bf00      	nop
 8008298:	e7fd      	b.n	8008296 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800829a:	f000 fed5 	bl	8009048 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800829e:	4b39      	ldr	r3, [pc, #228]	@ (8008384 <xTaskResumeAll+0x118>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	3b01      	subs	r3, #1
 80082a4:	4a37      	ldr	r2, [pc, #220]	@ (8008384 <xTaskResumeAll+0x118>)
 80082a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082a8:	4b36      	ldr	r3, [pc, #216]	@ (8008384 <xTaskResumeAll+0x118>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d161      	bne.n	8008374 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80082b0:	4b35      	ldr	r3, [pc, #212]	@ (8008388 <xTaskResumeAll+0x11c>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d05d      	beq.n	8008374 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082b8:	e02e      	b.n	8008318 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082ba:	4b34      	ldr	r3, [pc, #208]	@ (800838c <xTaskResumeAll+0x120>)
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	3318      	adds	r3, #24
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7fe ff3f 	bl	800714a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	3304      	adds	r3, #4
 80082d0:	4618      	mov	r0, r3
 80082d2:	f7fe ff3a 	bl	800714a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082da:	2201      	movs	r2, #1
 80082dc:	409a      	lsls	r2, r3
 80082de:	4b2c      	ldr	r3, [pc, #176]	@ (8008390 <xTaskResumeAll+0x124>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	4a2a      	ldr	r2, [pc, #168]	@ (8008390 <xTaskResumeAll+0x124>)
 80082e6:	6013      	str	r3, [r2, #0]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ec:	4613      	mov	r3, r2
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	4413      	add	r3, r2
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	4a27      	ldr	r2, [pc, #156]	@ (8008394 <xTaskResumeAll+0x128>)
 80082f6:	441a      	add	r2, r3
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	3304      	adds	r3, #4
 80082fc:	4619      	mov	r1, r3
 80082fe:	4610      	mov	r0, r2
 8008300:	f7fe fec6 	bl	8007090 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008308:	4b23      	ldr	r3, [pc, #140]	@ (8008398 <xTaskResumeAll+0x12c>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800830e:	429a      	cmp	r2, r3
 8008310:	d302      	bcc.n	8008318 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008312:	4b22      	ldr	r3, [pc, #136]	@ (800839c <xTaskResumeAll+0x130>)
 8008314:	2201      	movs	r2, #1
 8008316:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008318:	4b1c      	ldr	r3, [pc, #112]	@ (800838c <xTaskResumeAll+0x120>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d1cc      	bne.n	80082ba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d001      	beq.n	800832a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008326:	f000 fb1b 	bl	8008960 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800832a:	4b1d      	ldr	r3, [pc, #116]	@ (80083a0 <xTaskResumeAll+0x134>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d010      	beq.n	8008358 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008336:	f000 f837 	bl	80083a8 <xTaskIncrementTick>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d002      	beq.n	8008346 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008340:	4b16      	ldr	r3, [pc, #88]	@ (800839c <xTaskResumeAll+0x130>)
 8008342:	2201      	movs	r2, #1
 8008344:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	3b01      	subs	r3, #1
 800834a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1f1      	bne.n	8008336 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008352:	4b13      	ldr	r3, [pc, #76]	@ (80083a0 <xTaskResumeAll+0x134>)
 8008354:	2200      	movs	r2, #0
 8008356:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008358:	4b10      	ldr	r3, [pc, #64]	@ (800839c <xTaskResumeAll+0x130>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d009      	beq.n	8008374 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008360:	2301      	movs	r3, #1
 8008362:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008364:	4b0f      	ldr	r3, [pc, #60]	@ (80083a4 <xTaskResumeAll+0x138>)
 8008366:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800836a:	601a      	str	r2, [r3, #0]
 800836c:	f3bf 8f4f 	dsb	sy
 8008370:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008374:	f000 fe9a 	bl	80090ac <vPortExitCritical>

	return xAlreadyYielded;
 8008378:	68bb      	ldr	r3, [r7, #8]
}
 800837a:	4618      	mov	r0, r3
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	200006e0 	.word	0x200006e0
 8008388:	200006b8 	.word	0x200006b8
 800838c:	20000678 	.word	0x20000678
 8008390:	200006c0 	.word	0x200006c0
 8008394:	200005bc 	.word	0x200005bc
 8008398:	200005b8 	.word	0x200005b8
 800839c:	200006cc 	.word	0x200006cc
 80083a0:	200006c8 	.word	0x200006c8
 80083a4:	e000ed04 	.word	0xe000ed04

080083a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b086      	sub	sp, #24
 80083ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80083ae:	2300      	movs	r3, #0
 80083b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083b2:	4b4f      	ldr	r3, [pc, #316]	@ (80084f0 <xTaskIncrementTick+0x148>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f040 808f 	bne.w	80084da <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80083bc:	4b4d      	ldr	r3, [pc, #308]	@ (80084f4 <xTaskIncrementTick+0x14c>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	3301      	adds	r3, #1
 80083c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80083c4:	4a4b      	ldr	r2, [pc, #300]	@ (80084f4 <xTaskIncrementTick+0x14c>)
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d121      	bne.n	8008414 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80083d0:	4b49      	ldr	r3, [pc, #292]	@ (80084f8 <xTaskIncrementTick+0x150>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00b      	beq.n	80083f2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80083da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083de:	f383 8811 	msr	BASEPRI, r3
 80083e2:	f3bf 8f6f 	isb	sy
 80083e6:	f3bf 8f4f 	dsb	sy
 80083ea:	603b      	str	r3, [r7, #0]
}
 80083ec:	bf00      	nop
 80083ee:	bf00      	nop
 80083f0:	e7fd      	b.n	80083ee <xTaskIncrementTick+0x46>
 80083f2:	4b41      	ldr	r3, [pc, #260]	@ (80084f8 <xTaskIncrementTick+0x150>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	60fb      	str	r3, [r7, #12]
 80083f8:	4b40      	ldr	r3, [pc, #256]	@ (80084fc <xTaskIncrementTick+0x154>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a3e      	ldr	r2, [pc, #248]	@ (80084f8 <xTaskIncrementTick+0x150>)
 80083fe:	6013      	str	r3, [r2, #0]
 8008400:	4a3e      	ldr	r2, [pc, #248]	@ (80084fc <xTaskIncrementTick+0x154>)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	6013      	str	r3, [r2, #0]
 8008406:	4b3e      	ldr	r3, [pc, #248]	@ (8008500 <xTaskIncrementTick+0x158>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	3301      	adds	r3, #1
 800840c:	4a3c      	ldr	r2, [pc, #240]	@ (8008500 <xTaskIncrementTick+0x158>)
 800840e:	6013      	str	r3, [r2, #0]
 8008410:	f000 faa6 	bl	8008960 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008414:	4b3b      	ldr	r3, [pc, #236]	@ (8008504 <xTaskIncrementTick+0x15c>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	693a      	ldr	r2, [r7, #16]
 800841a:	429a      	cmp	r2, r3
 800841c:	d348      	bcc.n	80084b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800841e:	4b36      	ldr	r3, [pc, #216]	@ (80084f8 <xTaskIncrementTick+0x150>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d104      	bne.n	8008432 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008428:	4b36      	ldr	r3, [pc, #216]	@ (8008504 <xTaskIncrementTick+0x15c>)
 800842a:	f04f 32ff 	mov.w	r2, #4294967295
 800842e:	601a      	str	r2, [r3, #0]
					break;
 8008430:	e03e      	b.n	80084b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008432:	4b31      	ldr	r3, [pc, #196]	@ (80084f8 <xTaskIncrementTick+0x150>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008442:	693a      	ldr	r2, [r7, #16]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	429a      	cmp	r2, r3
 8008448:	d203      	bcs.n	8008452 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800844a:	4a2e      	ldr	r2, [pc, #184]	@ (8008504 <xTaskIncrementTick+0x15c>)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008450:	e02e      	b.n	80084b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	3304      	adds	r3, #4
 8008456:	4618      	mov	r0, r3
 8008458:	f7fe fe77 	bl	800714a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008460:	2b00      	cmp	r3, #0
 8008462:	d004      	beq.n	800846e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	3318      	adds	r3, #24
 8008468:	4618      	mov	r0, r3
 800846a:	f7fe fe6e 	bl	800714a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008472:	2201      	movs	r2, #1
 8008474:	409a      	lsls	r2, r3
 8008476:	4b24      	ldr	r3, [pc, #144]	@ (8008508 <xTaskIncrementTick+0x160>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4313      	orrs	r3, r2
 800847c:	4a22      	ldr	r2, [pc, #136]	@ (8008508 <xTaskIncrementTick+0x160>)
 800847e:	6013      	str	r3, [r2, #0]
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008484:	4613      	mov	r3, r2
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	4413      	add	r3, r2
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	4a1f      	ldr	r2, [pc, #124]	@ (800850c <xTaskIncrementTick+0x164>)
 800848e:	441a      	add	r2, r3
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	3304      	adds	r3, #4
 8008494:	4619      	mov	r1, r3
 8008496:	4610      	mov	r0, r2
 8008498:	f7fe fdfa 	bl	8007090 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084a0:	4b1b      	ldr	r3, [pc, #108]	@ (8008510 <xTaskIncrementTick+0x168>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d3b9      	bcc.n	800841e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80084aa:	2301      	movs	r3, #1
 80084ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084ae:	e7b6      	b.n	800841e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80084b0:	4b17      	ldr	r3, [pc, #92]	@ (8008510 <xTaskIncrementTick+0x168>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084b6:	4915      	ldr	r1, [pc, #84]	@ (800850c <xTaskIncrementTick+0x164>)
 80084b8:	4613      	mov	r3, r2
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	4413      	add	r3, r2
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	440b      	add	r3, r1
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d901      	bls.n	80084cc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80084c8:	2301      	movs	r3, #1
 80084ca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80084cc:	4b11      	ldr	r3, [pc, #68]	@ (8008514 <xTaskIncrementTick+0x16c>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d007      	beq.n	80084e4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80084d4:	2301      	movs	r3, #1
 80084d6:	617b      	str	r3, [r7, #20]
 80084d8:	e004      	b.n	80084e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80084da:	4b0f      	ldr	r3, [pc, #60]	@ (8008518 <xTaskIncrementTick+0x170>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	3301      	adds	r3, #1
 80084e0:	4a0d      	ldr	r2, [pc, #52]	@ (8008518 <xTaskIncrementTick+0x170>)
 80084e2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80084e4:	697b      	ldr	r3, [r7, #20]
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3718      	adds	r7, #24
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	200006e0 	.word	0x200006e0
 80084f4:	200006bc 	.word	0x200006bc
 80084f8:	20000670 	.word	0x20000670
 80084fc:	20000674 	.word	0x20000674
 8008500:	200006d0 	.word	0x200006d0
 8008504:	200006d8 	.word	0x200006d8
 8008508:	200006c0 	.word	0x200006c0
 800850c:	200005bc 	.word	0x200005bc
 8008510:	200005b8 	.word	0x200005b8
 8008514:	200006cc 	.word	0x200006cc
 8008518:	200006c8 	.word	0x200006c8

0800851c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800851c:	b480      	push	{r7}
 800851e:	b087      	sub	sp, #28
 8008520:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008522:	4b27      	ldr	r3, [pc, #156]	@ (80085c0 <vTaskSwitchContext+0xa4>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d003      	beq.n	8008532 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800852a:	4b26      	ldr	r3, [pc, #152]	@ (80085c4 <vTaskSwitchContext+0xa8>)
 800852c:	2201      	movs	r2, #1
 800852e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008530:	e040      	b.n	80085b4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8008532:	4b24      	ldr	r3, [pc, #144]	@ (80085c4 <vTaskSwitchContext+0xa8>)
 8008534:	2200      	movs	r2, #0
 8008536:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008538:	4b23      	ldr	r3, [pc, #140]	@ (80085c8 <vTaskSwitchContext+0xac>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	fab3 f383 	clz	r3, r3
 8008544:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008546:	7afb      	ldrb	r3, [r7, #11]
 8008548:	f1c3 031f 	rsb	r3, r3, #31
 800854c:	617b      	str	r3, [r7, #20]
 800854e:	491f      	ldr	r1, [pc, #124]	@ (80085cc <vTaskSwitchContext+0xb0>)
 8008550:	697a      	ldr	r2, [r7, #20]
 8008552:	4613      	mov	r3, r2
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	4413      	add	r3, r2
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	440b      	add	r3, r1
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d10b      	bne.n	800857a <vTaskSwitchContext+0x5e>
	__asm volatile
 8008562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008566:	f383 8811 	msr	BASEPRI, r3
 800856a:	f3bf 8f6f 	isb	sy
 800856e:	f3bf 8f4f 	dsb	sy
 8008572:	607b      	str	r3, [r7, #4]
}
 8008574:	bf00      	nop
 8008576:	bf00      	nop
 8008578:	e7fd      	b.n	8008576 <vTaskSwitchContext+0x5a>
 800857a:	697a      	ldr	r2, [r7, #20]
 800857c:	4613      	mov	r3, r2
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	4413      	add	r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	4a11      	ldr	r2, [pc, #68]	@ (80085cc <vTaskSwitchContext+0xb0>)
 8008586:	4413      	add	r3, r2
 8008588:	613b      	str	r3, [r7, #16]
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	685a      	ldr	r2, [r3, #4]
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	605a      	str	r2, [r3, #4]
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	685a      	ldr	r2, [r3, #4]
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	3308      	adds	r3, #8
 800859c:	429a      	cmp	r2, r3
 800859e:	d104      	bne.n	80085aa <vTaskSwitchContext+0x8e>
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	685a      	ldr	r2, [r3, #4]
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	605a      	str	r2, [r3, #4]
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	4a07      	ldr	r2, [pc, #28]	@ (80085d0 <vTaskSwitchContext+0xb4>)
 80085b2:	6013      	str	r3, [r2, #0]
}
 80085b4:	bf00      	nop
 80085b6:	371c      	adds	r7, #28
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr
 80085c0:	200006e0 	.word	0x200006e0
 80085c4:	200006cc 	.word	0x200006cc
 80085c8:	200006c0 	.word	0x200006c0
 80085cc:	200005bc 	.word	0x200005bc
 80085d0:	200005b8 	.word	0x200005b8

080085d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d10b      	bne.n	80085fc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80085e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e8:	f383 8811 	msr	BASEPRI, r3
 80085ec:	f3bf 8f6f 	isb	sy
 80085f0:	f3bf 8f4f 	dsb	sy
 80085f4:	60fb      	str	r3, [r7, #12]
}
 80085f6:	bf00      	nop
 80085f8:	bf00      	nop
 80085fa:	e7fd      	b.n	80085f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80085fc:	4b07      	ldr	r3, [pc, #28]	@ (800861c <vTaskPlaceOnEventList+0x48>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	3318      	adds	r3, #24
 8008602:	4619      	mov	r1, r3
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f7fe fd67 	bl	80070d8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800860a:	2101      	movs	r1, #1
 800860c:	6838      	ldr	r0, [r7, #0]
 800860e:	f000 fb87 	bl	8008d20 <prvAddCurrentTaskToDelayedList>
}
 8008612:	bf00      	nop
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	200005b8 	.word	0x200005b8

08008620 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b086      	sub	sp, #24
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d10b      	bne.n	800864e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800863a:	f383 8811 	msr	BASEPRI, r3
 800863e:	f3bf 8f6f 	isb	sy
 8008642:	f3bf 8f4f 	dsb	sy
 8008646:	60fb      	str	r3, [r7, #12]
}
 8008648:	bf00      	nop
 800864a:	bf00      	nop
 800864c:	e7fd      	b.n	800864a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	3318      	adds	r3, #24
 8008652:	4618      	mov	r0, r3
 8008654:	f7fe fd79 	bl	800714a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008658:	4b1d      	ldr	r3, [pc, #116]	@ (80086d0 <xTaskRemoveFromEventList+0xb0>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d11c      	bne.n	800869a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	3304      	adds	r3, #4
 8008664:	4618      	mov	r0, r3
 8008666:	f7fe fd70 	bl	800714a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800866e:	2201      	movs	r2, #1
 8008670:	409a      	lsls	r2, r3
 8008672:	4b18      	ldr	r3, [pc, #96]	@ (80086d4 <xTaskRemoveFromEventList+0xb4>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4313      	orrs	r3, r2
 8008678:	4a16      	ldr	r2, [pc, #88]	@ (80086d4 <xTaskRemoveFromEventList+0xb4>)
 800867a:	6013      	str	r3, [r2, #0]
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008680:	4613      	mov	r3, r2
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	4413      	add	r3, r2
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	4a13      	ldr	r2, [pc, #76]	@ (80086d8 <xTaskRemoveFromEventList+0xb8>)
 800868a:	441a      	add	r2, r3
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	3304      	adds	r3, #4
 8008690:	4619      	mov	r1, r3
 8008692:	4610      	mov	r0, r2
 8008694:	f7fe fcfc 	bl	8007090 <vListInsertEnd>
 8008698:	e005      	b.n	80086a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	3318      	adds	r3, #24
 800869e:	4619      	mov	r1, r3
 80086a0:	480e      	ldr	r0, [pc, #56]	@ (80086dc <xTaskRemoveFromEventList+0xbc>)
 80086a2:	f7fe fcf5 	bl	8007090 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086aa:	4b0d      	ldr	r3, [pc, #52]	@ (80086e0 <xTaskRemoveFromEventList+0xc0>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d905      	bls.n	80086c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80086b4:	2301      	movs	r3, #1
 80086b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80086b8:	4b0a      	ldr	r3, [pc, #40]	@ (80086e4 <xTaskRemoveFromEventList+0xc4>)
 80086ba:	2201      	movs	r2, #1
 80086bc:	601a      	str	r2, [r3, #0]
 80086be:	e001      	b.n	80086c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80086c0:	2300      	movs	r3, #0
 80086c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80086c4:	697b      	ldr	r3, [r7, #20]
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3718      	adds	r7, #24
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	200006e0 	.word	0x200006e0
 80086d4:	200006c0 	.word	0x200006c0
 80086d8:	200005bc 	.word	0x200005bc
 80086dc:	20000678 	.word	0x20000678
 80086e0:	200005b8 	.word	0x200005b8
 80086e4:	200006cc 	.word	0x200006cc

080086e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80086f0:	4b06      	ldr	r3, [pc, #24]	@ (800870c <vTaskInternalSetTimeOutState+0x24>)
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80086f8:	4b05      	ldr	r3, [pc, #20]	@ (8008710 <vTaskInternalSetTimeOutState+0x28>)
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	605a      	str	r2, [r3, #4]
}
 8008700:	bf00      	nop
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr
 800870c:	200006d0 	.word	0x200006d0
 8008710:	200006bc 	.word	0x200006bc

08008714 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b088      	sub	sp, #32
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d10b      	bne.n	800873c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008728:	f383 8811 	msr	BASEPRI, r3
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	613b      	str	r3, [r7, #16]
}
 8008736:	bf00      	nop
 8008738:	bf00      	nop
 800873a:	e7fd      	b.n	8008738 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d10b      	bne.n	800875a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008746:	f383 8811 	msr	BASEPRI, r3
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	60fb      	str	r3, [r7, #12]
}
 8008754:	bf00      	nop
 8008756:	bf00      	nop
 8008758:	e7fd      	b.n	8008756 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800875a:	f000 fc75 	bl	8009048 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800875e:	4b1d      	ldr	r3, [pc, #116]	@ (80087d4 <xTaskCheckForTimeOut+0xc0>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	69ba      	ldr	r2, [r7, #24]
 800876a:	1ad3      	subs	r3, r2, r3
 800876c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008776:	d102      	bne.n	800877e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008778:	2300      	movs	r3, #0
 800877a:	61fb      	str	r3, [r7, #28]
 800877c:	e023      	b.n	80087c6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	4b15      	ldr	r3, [pc, #84]	@ (80087d8 <xTaskCheckForTimeOut+0xc4>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	429a      	cmp	r2, r3
 8008788:	d007      	beq.n	800879a <xTaskCheckForTimeOut+0x86>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	69ba      	ldr	r2, [r7, #24]
 8008790:	429a      	cmp	r2, r3
 8008792:	d302      	bcc.n	800879a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008794:	2301      	movs	r3, #1
 8008796:	61fb      	str	r3, [r7, #28]
 8008798:	e015      	b.n	80087c6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	697a      	ldr	r2, [r7, #20]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d20b      	bcs.n	80087bc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	1ad2      	subs	r2, r2, r3
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f7ff ff99 	bl	80086e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80087b6:	2300      	movs	r3, #0
 80087b8:	61fb      	str	r3, [r7, #28]
 80087ba:	e004      	b.n	80087c6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	2200      	movs	r2, #0
 80087c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80087c2:	2301      	movs	r3, #1
 80087c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80087c6:	f000 fc71 	bl	80090ac <vPortExitCritical>

	return xReturn;
 80087ca:	69fb      	ldr	r3, [r7, #28]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3720      	adds	r7, #32
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	200006bc 	.word	0x200006bc
 80087d8:	200006d0 	.word	0x200006d0

080087dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80087dc:	b480      	push	{r7}
 80087de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80087e0:	4b03      	ldr	r3, [pc, #12]	@ (80087f0 <vTaskMissedYield+0x14>)
 80087e2:	2201      	movs	r2, #1
 80087e4:	601a      	str	r2, [r3, #0]
}
 80087e6:	bf00      	nop
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr
 80087f0:	200006cc 	.word	0x200006cc

080087f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80087fc:	f000 f852 	bl	80088a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008800:	4b06      	ldr	r3, [pc, #24]	@ (800881c <prvIdleTask+0x28>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2b01      	cmp	r3, #1
 8008806:	d9f9      	bls.n	80087fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8008808:	4b05      	ldr	r3, [pc, #20]	@ (8008820 <prvIdleTask+0x2c>)
 800880a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800880e:	601a      	str	r2, [r3, #0]
 8008810:	f3bf 8f4f 	dsb	sy
 8008814:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008818:	e7f0      	b.n	80087fc <prvIdleTask+0x8>
 800881a:	bf00      	nop
 800881c:	200005bc 	.word	0x200005bc
 8008820:	e000ed04 	.word	0xe000ed04

08008824 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800882a:	2300      	movs	r3, #0
 800882c:	607b      	str	r3, [r7, #4]
 800882e:	e00c      	b.n	800884a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	4613      	mov	r3, r2
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	4413      	add	r3, r2
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	4a12      	ldr	r2, [pc, #72]	@ (8008884 <prvInitialiseTaskLists+0x60>)
 800883c:	4413      	add	r3, r2
 800883e:	4618      	mov	r0, r3
 8008840:	f7fe fbf9 	bl	8007036 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	3301      	adds	r3, #1
 8008848:	607b      	str	r3, [r7, #4]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2b06      	cmp	r3, #6
 800884e:	d9ef      	bls.n	8008830 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008850:	480d      	ldr	r0, [pc, #52]	@ (8008888 <prvInitialiseTaskLists+0x64>)
 8008852:	f7fe fbf0 	bl	8007036 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008856:	480d      	ldr	r0, [pc, #52]	@ (800888c <prvInitialiseTaskLists+0x68>)
 8008858:	f7fe fbed 	bl	8007036 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800885c:	480c      	ldr	r0, [pc, #48]	@ (8008890 <prvInitialiseTaskLists+0x6c>)
 800885e:	f7fe fbea 	bl	8007036 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008862:	480c      	ldr	r0, [pc, #48]	@ (8008894 <prvInitialiseTaskLists+0x70>)
 8008864:	f7fe fbe7 	bl	8007036 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008868:	480b      	ldr	r0, [pc, #44]	@ (8008898 <prvInitialiseTaskLists+0x74>)
 800886a:	f7fe fbe4 	bl	8007036 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800886e:	4b0b      	ldr	r3, [pc, #44]	@ (800889c <prvInitialiseTaskLists+0x78>)
 8008870:	4a05      	ldr	r2, [pc, #20]	@ (8008888 <prvInitialiseTaskLists+0x64>)
 8008872:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008874:	4b0a      	ldr	r3, [pc, #40]	@ (80088a0 <prvInitialiseTaskLists+0x7c>)
 8008876:	4a05      	ldr	r2, [pc, #20]	@ (800888c <prvInitialiseTaskLists+0x68>)
 8008878:	601a      	str	r2, [r3, #0]
}
 800887a:	bf00      	nop
 800887c:	3708      	adds	r7, #8
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	200005bc 	.word	0x200005bc
 8008888:	20000648 	.word	0x20000648
 800888c:	2000065c 	.word	0x2000065c
 8008890:	20000678 	.word	0x20000678
 8008894:	2000068c 	.word	0x2000068c
 8008898:	200006a4 	.word	0x200006a4
 800889c:	20000670 	.word	0x20000670
 80088a0:	20000674 	.word	0x20000674

080088a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088aa:	e019      	b.n	80088e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80088ac:	f000 fbcc 	bl	8009048 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088b0:	4b10      	ldr	r3, [pc, #64]	@ (80088f4 <prvCheckTasksWaitingTermination+0x50>)
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	3304      	adds	r3, #4
 80088bc:	4618      	mov	r0, r3
 80088be:	f7fe fc44 	bl	800714a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80088c2:	4b0d      	ldr	r3, [pc, #52]	@ (80088f8 <prvCheckTasksWaitingTermination+0x54>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	3b01      	subs	r3, #1
 80088c8:	4a0b      	ldr	r2, [pc, #44]	@ (80088f8 <prvCheckTasksWaitingTermination+0x54>)
 80088ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80088cc:	4b0b      	ldr	r3, [pc, #44]	@ (80088fc <prvCheckTasksWaitingTermination+0x58>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	3b01      	subs	r3, #1
 80088d2:	4a0a      	ldr	r2, [pc, #40]	@ (80088fc <prvCheckTasksWaitingTermination+0x58>)
 80088d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80088d6:	f000 fbe9 	bl	80090ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 f810 	bl	8008900 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088e0:	4b06      	ldr	r3, [pc, #24]	@ (80088fc <prvCheckTasksWaitingTermination+0x58>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1e1      	bne.n	80088ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80088e8:	bf00      	nop
 80088ea:	bf00      	nop
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	2000068c 	.word	0x2000068c
 80088f8:	200006b8 	.word	0x200006b8
 80088fc:	200006a0 	.word	0x200006a0

08008900 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800890e:	2b00      	cmp	r3, #0
 8008910:	d108      	bne.n	8008924 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008916:	4618      	mov	r0, r3
 8008918:	f000 fd86 	bl	8009428 <vPortFree>
				vPortFree( pxTCB );
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 fd83 	bl	8009428 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008922:	e019      	b.n	8008958 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800892a:	2b01      	cmp	r3, #1
 800892c:	d103      	bne.n	8008936 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 fd7a 	bl	8009428 <vPortFree>
	}
 8008934:	e010      	b.n	8008958 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800893c:	2b02      	cmp	r3, #2
 800893e:	d00b      	beq.n	8008958 <prvDeleteTCB+0x58>
	__asm volatile
 8008940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008944:	f383 8811 	msr	BASEPRI, r3
 8008948:	f3bf 8f6f 	isb	sy
 800894c:	f3bf 8f4f 	dsb	sy
 8008950:	60fb      	str	r3, [r7, #12]
}
 8008952:	bf00      	nop
 8008954:	bf00      	nop
 8008956:	e7fd      	b.n	8008954 <prvDeleteTCB+0x54>
	}
 8008958:	bf00      	nop
 800895a:	3710      	adds	r7, #16
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008966:	4b0c      	ldr	r3, [pc, #48]	@ (8008998 <prvResetNextTaskUnblockTime+0x38>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d104      	bne.n	800897a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008970:	4b0a      	ldr	r3, [pc, #40]	@ (800899c <prvResetNextTaskUnblockTime+0x3c>)
 8008972:	f04f 32ff 	mov.w	r2, #4294967295
 8008976:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008978:	e008      	b.n	800898c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800897a:	4b07      	ldr	r3, [pc, #28]	@ (8008998 <prvResetNextTaskUnblockTime+0x38>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	4a04      	ldr	r2, [pc, #16]	@ (800899c <prvResetNextTaskUnblockTime+0x3c>)
 800898a:	6013      	str	r3, [r2, #0]
}
 800898c:	bf00      	nop
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr
 8008998:	20000670 	.word	0x20000670
 800899c:	200006d8 	.word	0x200006d8

080089a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80089a6:	4b0b      	ldr	r3, [pc, #44]	@ (80089d4 <xTaskGetSchedulerState+0x34>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d102      	bne.n	80089b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80089ae:	2301      	movs	r3, #1
 80089b0:	607b      	str	r3, [r7, #4]
 80089b2:	e008      	b.n	80089c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089b4:	4b08      	ldr	r3, [pc, #32]	@ (80089d8 <xTaskGetSchedulerState+0x38>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d102      	bne.n	80089c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80089bc:	2302      	movs	r3, #2
 80089be:	607b      	str	r3, [r7, #4]
 80089c0:	e001      	b.n	80089c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80089c2:	2300      	movs	r3, #0
 80089c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80089c6:	687b      	ldr	r3, [r7, #4]
	}
 80089c8:	4618      	mov	r0, r3
 80089ca:	370c      	adds	r7, #12
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr
 80089d4:	200006c4 	.word	0x200006c4
 80089d8:	200006e0 	.word	0x200006e0

080089dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80089e8:	2300      	movs	r3, #0
 80089ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d05e      	beq.n	8008ab0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089f6:	4b31      	ldr	r3, [pc, #196]	@ (8008abc <xTaskPriorityInherit+0xe0>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d24e      	bcs.n	8008a9e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	699b      	ldr	r3, [r3, #24]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	db06      	blt.n	8008a16 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a08:	4b2c      	ldr	r3, [pc, #176]	@ (8008abc <xTaskPriorityInherit+0xe0>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a0e:	f1c3 0207 	rsb	r2, r3, #7
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	6959      	ldr	r1, [r3, #20]
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a1e:	4613      	mov	r3, r2
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	4413      	add	r3, r2
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	4a26      	ldr	r2, [pc, #152]	@ (8008ac0 <xTaskPriorityInherit+0xe4>)
 8008a28:	4413      	add	r3, r2
 8008a2a:	4299      	cmp	r1, r3
 8008a2c:	d12f      	bne.n	8008a8e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	3304      	adds	r3, #4
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7fe fb89 	bl	800714a <uxListRemove>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d10a      	bne.n	8008a54 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a42:	2201      	movs	r2, #1
 8008a44:	fa02 f303 	lsl.w	r3, r2, r3
 8008a48:	43da      	mvns	r2, r3
 8008a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8008ac4 <xTaskPriorityInherit+0xe8>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4013      	ands	r3, r2
 8008a50:	4a1c      	ldr	r2, [pc, #112]	@ (8008ac4 <xTaskPriorityInherit+0xe8>)
 8008a52:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008a54:	4b19      	ldr	r3, [pc, #100]	@ (8008abc <xTaskPriorityInherit+0xe0>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a62:	2201      	movs	r2, #1
 8008a64:	409a      	lsls	r2, r3
 8008a66:	4b17      	ldr	r3, [pc, #92]	@ (8008ac4 <xTaskPriorityInherit+0xe8>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	4a15      	ldr	r2, [pc, #84]	@ (8008ac4 <xTaskPriorityInherit+0xe8>)
 8008a6e:	6013      	str	r3, [r2, #0]
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a74:	4613      	mov	r3, r2
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	4413      	add	r3, r2
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	4a10      	ldr	r2, [pc, #64]	@ (8008ac0 <xTaskPriorityInherit+0xe4>)
 8008a7e:	441a      	add	r2, r3
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	3304      	adds	r3, #4
 8008a84:	4619      	mov	r1, r3
 8008a86:	4610      	mov	r0, r2
 8008a88:	f7fe fb02 	bl	8007090 <vListInsertEnd>
 8008a8c:	e004      	b.n	8008a98 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8008abc <xTaskPriorityInherit+0xe0>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	60fb      	str	r3, [r7, #12]
 8008a9c:	e008      	b.n	8008ab0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008aa2:	4b06      	ldr	r3, [pc, #24]	@ (8008abc <xTaskPriorityInherit+0xe0>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d201      	bcs.n	8008ab0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008aac:	2301      	movs	r3, #1
 8008aae:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
	}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3710      	adds	r7, #16
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	200005b8 	.word	0x200005b8
 8008ac0:	200005bc 	.word	0x200005bc
 8008ac4:	200006c0 	.word	0x200006c0

08008ac8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b086      	sub	sp, #24
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d070      	beq.n	8008bc0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008ade:	4b3b      	ldr	r3, [pc, #236]	@ (8008bcc <xTaskPriorityDisinherit+0x104>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	693a      	ldr	r2, [r7, #16]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d00b      	beq.n	8008b00 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aec:	f383 8811 	msr	BASEPRI, r3
 8008af0:	f3bf 8f6f 	isb	sy
 8008af4:	f3bf 8f4f 	dsb	sy
 8008af8:	60fb      	str	r3, [r7, #12]
}
 8008afa:	bf00      	nop
 8008afc:	bf00      	nop
 8008afe:	e7fd      	b.n	8008afc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d10b      	bne.n	8008b20 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b0c:	f383 8811 	msr	BASEPRI, r3
 8008b10:	f3bf 8f6f 	isb	sy
 8008b14:	f3bf 8f4f 	dsb	sy
 8008b18:	60bb      	str	r3, [r7, #8]
}
 8008b1a:	bf00      	nop
 8008b1c:	bf00      	nop
 8008b1e:	e7fd      	b.n	8008b1c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b24:	1e5a      	subs	r2, r3, #1
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d044      	beq.n	8008bc0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d140      	bne.n	8008bc0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	3304      	adds	r3, #4
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7fe fb01 	bl	800714a <uxListRemove>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d115      	bne.n	8008b7a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b52:	491f      	ldr	r1, [pc, #124]	@ (8008bd0 <xTaskPriorityDisinherit+0x108>)
 8008b54:	4613      	mov	r3, r2
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	4413      	add	r3, r2
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	440b      	add	r3, r1
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d10a      	bne.n	8008b7a <xTaskPriorityDisinherit+0xb2>
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b68:	2201      	movs	r2, #1
 8008b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b6e:	43da      	mvns	r2, r3
 8008b70:	4b18      	ldr	r3, [pc, #96]	@ (8008bd4 <xTaskPriorityDisinherit+0x10c>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4013      	ands	r3, r2
 8008b76:	4a17      	ldr	r2, [pc, #92]	@ (8008bd4 <xTaskPriorityDisinherit+0x10c>)
 8008b78:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b86:	f1c3 0207 	rsb	r2, r3, #7
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b92:	2201      	movs	r2, #1
 8008b94:	409a      	lsls	r2, r3
 8008b96:	4b0f      	ldr	r3, [pc, #60]	@ (8008bd4 <xTaskPriorityDisinherit+0x10c>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8008bd4 <xTaskPriorityDisinherit+0x10c>)
 8008b9e:	6013      	str	r3, [r2, #0]
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	4413      	add	r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	4a08      	ldr	r2, [pc, #32]	@ (8008bd0 <xTaskPriorityDisinherit+0x108>)
 8008bae:	441a      	add	r2, r3
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	3304      	adds	r3, #4
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	4610      	mov	r0, r2
 8008bb8:	f7fe fa6a 	bl	8007090 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008bc0:	697b      	ldr	r3, [r7, #20]
	}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3718      	adds	r7, #24
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	200005b8 	.word	0x200005b8
 8008bd0:	200005bc 	.word	0x200005bc
 8008bd4:	200006c0 	.word	0x200006c0

08008bd8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b088      	sub	sp, #32
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008be6:	2301      	movs	r3, #1
 8008be8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d079      	beq.n	8008ce4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d10b      	bne.n	8008c10 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bfc:	f383 8811 	msr	BASEPRI, r3
 8008c00:	f3bf 8f6f 	isb	sy
 8008c04:	f3bf 8f4f 	dsb	sy
 8008c08:	60fb      	str	r3, [r7, #12]
}
 8008c0a:	bf00      	nop
 8008c0c:	bf00      	nop
 8008c0e:	e7fd      	b.n	8008c0c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c14:	683a      	ldr	r2, [r7, #0]
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d902      	bls.n	8008c20 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	61fb      	str	r3, [r7, #28]
 8008c1e:	e002      	b.n	8008c26 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c24:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c2a:	69fa      	ldr	r2, [r7, #28]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d059      	beq.n	8008ce4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c34:	697a      	ldr	r2, [r7, #20]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d154      	bne.n	8008ce4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008c3a:	4b2c      	ldr	r3, [pc, #176]	@ (8008cec <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	69ba      	ldr	r2, [r7, #24]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d10b      	bne.n	8008c5c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c48:	f383 8811 	msr	BASEPRI, r3
 8008c4c:	f3bf 8f6f 	isb	sy
 8008c50:	f3bf 8f4f 	dsb	sy
 8008c54:	60bb      	str	r3, [r7, #8]
}
 8008c56:	bf00      	nop
 8008c58:	bf00      	nop
 8008c5a:	e7fd      	b.n	8008c58 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c60:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008c62:	69bb      	ldr	r3, [r7, #24]
 8008c64:	69fa      	ldr	r2, [r7, #28]
 8008c66:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	699b      	ldr	r3, [r3, #24]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	db04      	blt.n	8008c7a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	f1c3 0207 	rsb	r2, r3, #7
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	6959      	ldr	r1, [r3, #20]
 8008c7e:	693a      	ldr	r2, [r7, #16]
 8008c80:	4613      	mov	r3, r2
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	4413      	add	r3, r2
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	4a19      	ldr	r2, [pc, #100]	@ (8008cf0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008c8a:	4413      	add	r3, r2
 8008c8c:	4299      	cmp	r1, r3
 8008c8e:	d129      	bne.n	8008ce4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	3304      	adds	r3, #4
 8008c94:	4618      	mov	r0, r3
 8008c96:	f7fe fa58 	bl	800714a <uxListRemove>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d10a      	bne.n	8008cb6 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8008caa:	43da      	mvns	r2, r3
 8008cac:	4b11      	ldr	r3, [pc, #68]	@ (8008cf4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4013      	ands	r3, r2
 8008cb2:	4a10      	ldr	r2, [pc, #64]	@ (8008cf4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008cb4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cba:	2201      	movs	r2, #1
 8008cbc:	409a      	lsls	r2, r3
 8008cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8008cf4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	4a0b      	ldr	r2, [pc, #44]	@ (8008cf4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008cc6:	6013      	str	r3, [r2, #0]
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ccc:	4613      	mov	r3, r2
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	4413      	add	r3, r2
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	4a06      	ldr	r2, [pc, #24]	@ (8008cf0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008cd6:	441a      	add	r2, r3
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	3304      	adds	r3, #4
 8008cdc:	4619      	mov	r1, r3
 8008cde:	4610      	mov	r0, r2
 8008ce0:	f7fe f9d6 	bl	8007090 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ce4:	bf00      	nop
 8008ce6:	3720      	adds	r7, #32
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	200005b8 	.word	0x200005b8
 8008cf0:	200005bc 	.word	0x200005bc
 8008cf4:	200006c0 	.word	0x200006c0

08008cf8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008cf8:	b480      	push	{r7}
 8008cfa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008cfc:	4b07      	ldr	r3, [pc, #28]	@ (8008d1c <pvTaskIncrementMutexHeldCount+0x24>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d004      	beq.n	8008d0e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008d04:	4b05      	ldr	r3, [pc, #20]	@ (8008d1c <pvTaskIncrementMutexHeldCount+0x24>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008d0a:	3201      	adds	r2, #1
 8008d0c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8008d0e:	4b03      	ldr	r3, [pc, #12]	@ (8008d1c <pvTaskIncrementMutexHeldCount+0x24>)
 8008d10:	681b      	ldr	r3, [r3, #0]
	}
 8008d12:	4618      	mov	r0, r3
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr
 8008d1c:	200005b8 	.word	0x200005b8

08008d20 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d2a:	4b29      	ldr	r3, [pc, #164]	@ (8008dd0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d30:	4b28      	ldr	r3, [pc, #160]	@ (8008dd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	3304      	adds	r3, #4
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7fe fa07 	bl	800714a <uxListRemove>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d10b      	bne.n	8008d5a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008d42:	4b24      	ldr	r3, [pc, #144]	@ (8008dd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d48:	2201      	movs	r2, #1
 8008d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d4e:	43da      	mvns	r2, r3
 8008d50:	4b21      	ldr	r3, [pc, #132]	@ (8008dd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4013      	ands	r3, r2
 8008d56:	4a20      	ldr	r2, [pc, #128]	@ (8008dd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008d58:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d60:	d10a      	bne.n	8008d78 <prvAddCurrentTaskToDelayedList+0x58>
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d007      	beq.n	8008d78 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d68:	4b1a      	ldr	r3, [pc, #104]	@ (8008dd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	3304      	adds	r3, #4
 8008d6e:	4619      	mov	r1, r3
 8008d70:	481a      	ldr	r0, [pc, #104]	@ (8008ddc <prvAddCurrentTaskToDelayedList+0xbc>)
 8008d72:	f7fe f98d 	bl	8007090 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d76:	e026      	b.n	8008dc6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d80:	4b14      	ldr	r3, [pc, #80]	@ (8008dd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	68ba      	ldr	r2, [r7, #8]
 8008d86:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d88:	68ba      	ldr	r2, [r7, #8]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d209      	bcs.n	8008da4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d90:	4b13      	ldr	r3, [pc, #76]	@ (8008de0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	4b0f      	ldr	r3, [pc, #60]	@ (8008dd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	3304      	adds	r3, #4
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	4610      	mov	r0, r2
 8008d9e:	f7fe f99b 	bl	80070d8 <vListInsert>
}
 8008da2:	e010      	b.n	8008dc6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008da4:	4b0f      	ldr	r3, [pc, #60]	@ (8008de4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	4b0a      	ldr	r3, [pc, #40]	@ (8008dd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	3304      	adds	r3, #4
 8008dae:	4619      	mov	r1, r3
 8008db0:	4610      	mov	r0, r2
 8008db2:	f7fe f991 	bl	80070d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008db6:	4b0c      	ldr	r3, [pc, #48]	@ (8008de8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	68ba      	ldr	r2, [r7, #8]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d202      	bcs.n	8008dc6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008dc0:	4a09      	ldr	r2, [pc, #36]	@ (8008de8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	6013      	str	r3, [r2, #0]
}
 8008dc6:	bf00      	nop
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	200006bc 	.word	0x200006bc
 8008dd4:	200005b8 	.word	0x200005b8
 8008dd8:	200006c0 	.word	0x200006c0
 8008ddc:	200006a4 	.word	0x200006a4
 8008de0:	20000674 	.word	0x20000674
 8008de4:	20000670 	.word	0x20000670
 8008de8:	200006d8 	.word	0x200006d8

08008dec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008dec:	b480      	push	{r7}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	3b04      	subs	r3, #4
 8008dfc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008e04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	3b04      	subs	r3, #4
 8008e0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	f023 0201 	bic.w	r2, r3, #1
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	3b04      	subs	r3, #4
 8008e1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e1c:	4a0c      	ldr	r2, [pc, #48]	@ (8008e50 <pxPortInitialiseStack+0x64>)
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	3b14      	subs	r3, #20
 8008e26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	3b04      	subs	r3, #4
 8008e32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f06f 0202 	mvn.w	r2, #2
 8008e3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	3b20      	subs	r3, #32
 8008e40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e42:	68fb      	ldr	r3, [r7, #12]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3714      	adds	r7, #20
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr
 8008e50:	08008e55 	.word	0x08008e55

08008e54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e54:	b480      	push	{r7}
 8008e56:	b085      	sub	sp, #20
 8008e58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e5e:	4b13      	ldr	r3, [pc, #76]	@ (8008eac <prvTaskExitError+0x58>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e66:	d00b      	beq.n	8008e80 <prvTaskExitError+0x2c>
	__asm volatile
 8008e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e6c:	f383 8811 	msr	BASEPRI, r3
 8008e70:	f3bf 8f6f 	isb	sy
 8008e74:	f3bf 8f4f 	dsb	sy
 8008e78:	60fb      	str	r3, [r7, #12]
}
 8008e7a:	bf00      	nop
 8008e7c:	bf00      	nop
 8008e7e:	e7fd      	b.n	8008e7c <prvTaskExitError+0x28>
	__asm volatile
 8008e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e84:	f383 8811 	msr	BASEPRI, r3
 8008e88:	f3bf 8f6f 	isb	sy
 8008e8c:	f3bf 8f4f 	dsb	sy
 8008e90:	60bb      	str	r3, [r7, #8]
}
 8008e92:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008e94:	bf00      	nop
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d0fc      	beq.n	8008e96 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008e9c:	bf00      	nop
 8008e9e:	bf00      	nop
 8008ea0:	3714      	adds	r7, #20
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr
 8008eaa:	bf00      	nop
 8008eac:	20000024 	.word	0x20000024

08008eb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008eb0:	4b07      	ldr	r3, [pc, #28]	@ (8008ed0 <pxCurrentTCBConst2>)
 8008eb2:	6819      	ldr	r1, [r3, #0]
 8008eb4:	6808      	ldr	r0, [r1, #0]
 8008eb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eba:	f380 8809 	msr	PSP, r0
 8008ebe:	f3bf 8f6f 	isb	sy
 8008ec2:	f04f 0000 	mov.w	r0, #0
 8008ec6:	f380 8811 	msr	BASEPRI, r0
 8008eca:	4770      	bx	lr
 8008ecc:	f3af 8000 	nop.w

08008ed0 <pxCurrentTCBConst2>:
 8008ed0:	200005b8 	.word	0x200005b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ed4:	bf00      	nop
 8008ed6:	bf00      	nop

08008ed8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008ed8:	4808      	ldr	r0, [pc, #32]	@ (8008efc <prvPortStartFirstTask+0x24>)
 8008eda:	6800      	ldr	r0, [r0, #0]
 8008edc:	6800      	ldr	r0, [r0, #0]
 8008ede:	f380 8808 	msr	MSP, r0
 8008ee2:	f04f 0000 	mov.w	r0, #0
 8008ee6:	f380 8814 	msr	CONTROL, r0
 8008eea:	b662      	cpsie	i
 8008eec:	b661      	cpsie	f
 8008eee:	f3bf 8f4f 	dsb	sy
 8008ef2:	f3bf 8f6f 	isb	sy
 8008ef6:	df00      	svc	0
 8008ef8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008efa:	bf00      	nop
 8008efc:	e000ed08 	.word	0xe000ed08

08008f00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b086      	sub	sp, #24
 8008f04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008f06:	4b47      	ldr	r3, [pc, #284]	@ (8009024 <xPortStartScheduler+0x124>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a47      	ldr	r2, [pc, #284]	@ (8009028 <xPortStartScheduler+0x128>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d10b      	bne.n	8008f28 <xPortStartScheduler+0x28>
	__asm volatile
 8008f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f14:	f383 8811 	msr	BASEPRI, r3
 8008f18:	f3bf 8f6f 	isb	sy
 8008f1c:	f3bf 8f4f 	dsb	sy
 8008f20:	613b      	str	r3, [r7, #16]
}
 8008f22:	bf00      	nop
 8008f24:	bf00      	nop
 8008f26:	e7fd      	b.n	8008f24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008f28:	4b3e      	ldr	r3, [pc, #248]	@ (8009024 <xPortStartScheduler+0x124>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a3f      	ldr	r2, [pc, #252]	@ (800902c <xPortStartScheduler+0x12c>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d10b      	bne.n	8008f4a <xPortStartScheduler+0x4a>
	__asm volatile
 8008f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f36:	f383 8811 	msr	BASEPRI, r3
 8008f3a:	f3bf 8f6f 	isb	sy
 8008f3e:	f3bf 8f4f 	dsb	sy
 8008f42:	60fb      	str	r3, [r7, #12]
}
 8008f44:	bf00      	nop
 8008f46:	bf00      	nop
 8008f48:	e7fd      	b.n	8008f46 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f4a:	4b39      	ldr	r3, [pc, #228]	@ (8009030 <xPortStartScheduler+0x130>)
 8008f4c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	22ff      	movs	r2, #255	@ 0xff
 8008f5a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f64:	78fb      	ldrb	r3, [r7, #3]
 8008f66:	b2db      	uxtb	r3, r3
 8008f68:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008f6c:	b2da      	uxtb	r2, r3
 8008f6e:	4b31      	ldr	r3, [pc, #196]	@ (8009034 <xPortStartScheduler+0x134>)
 8008f70:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f72:	4b31      	ldr	r3, [pc, #196]	@ (8009038 <xPortStartScheduler+0x138>)
 8008f74:	2207      	movs	r2, #7
 8008f76:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f78:	e009      	b.n	8008f8e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008f7a:	4b2f      	ldr	r3, [pc, #188]	@ (8009038 <xPortStartScheduler+0x138>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	3b01      	subs	r3, #1
 8008f80:	4a2d      	ldr	r2, [pc, #180]	@ (8009038 <xPortStartScheduler+0x138>)
 8008f82:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f84:	78fb      	ldrb	r3, [r7, #3]
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	005b      	lsls	r3, r3, #1
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f8e:	78fb      	ldrb	r3, [r7, #3]
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f96:	2b80      	cmp	r3, #128	@ 0x80
 8008f98:	d0ef      	beq.n	8008f7a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f9a:	4b27      	ldr	r3, [pc, #156]	@ (8009038 <xPortStartScheduler+0x138>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f1c3 0307 	rsb	r3, r3, #7
 8008fa2:	2b04      	cmp	r3, #4
 8008fa4:	d00b      	beq.n	8008fbe <xPortStartScheduler+0xbe>
	__asm volatile
 8008fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008faa:	f383 8811 	msr	BASEPRI, r3
 8008fae:	f3bf 8f6f 	isb	sy
 8008fb2:	f3bf 8f4f 	dsb	sy
 8008fb6:	60bb      	str	r3, [r7, #8]
}
 8008fb8:	bf00      	nop
 8008fba:	bf00      	nop
 8008fbc:	e7fd      	b.n	8008fba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008fbe:	4b1e      	ldr	r3, [pc, #120]	@ (8009038 <xPortStartScheduler+0x138>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	021b      	lsls	r3, r3, #8
 8008fc4:	4a1c      	ldr	r2, [pc, #112]	@ (8009038 <xPortStartScheduler+0x138>)
 8008fc6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8009038 <xPortStartScheduler+0x138>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008fd0:	4a19      	ldr	r2, [pc, #100]	@ (8009038 <xPortStartScheduler+0x138>)
 8008fd2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	b2da      	uxtb	r2, r3
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008fdc:	4b17      	ldr	r3, [pc, #92]	@ (800903c <xPortStartScheduler+0x13c>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a16      	ldr	r2, [pc, #88]	@ (800903c <xPortStartScheduler+0x13c>)
 8008fe2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008fe6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008fe8:	4b14      	ldr	r3, [pc, #80]	@ (800903c <xPortStartScheduler+0x13c>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a13      	ldr	r2, [pc, #76]	@ (800903c <xPortStartScheduler+0x13c>)
 8008fee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008ff2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ff4:	f000 f8da 	bl	80091ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ff8:	4b11      	ldr	r3, [pc, #68]	@ (8009040 <xPortStartScheduler+0x140>)
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008ffe:	f000 f8f9 	bl	80091f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009002:	4b10      	ldr	r3, [pc, #64]	@ (8009044 <xPortStartScheduler+0x144>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a0f      	ldr	r2, [pc, #60]	@ (8009044 <xPortStartScheduler+0x144>)
 8009008:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800900c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800900e:	f7ff ff63 	bl	8008ed8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009012:	f7ff fa83 	bl	800851c <vTaskSwitchContext>
	prvTaskExitError();
 8009016:	f7ff ff1d 	bl	8008e54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800901a:	2300      	movs	r3, #0
}
 800901c:	4618      	mov	r0, r3
 800901e:	3718      	adds	r7, #24
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}
 8009024:	e000ed00 	.word	0xe000ed00
 8009028:	410fc271 	.word	0x410fc271
 800902c:	410fc270 	.word	0x410fc270
 8009030:	e000e400 	.word	0xe000e400
 8009034:	200006e4 	.word	0x200006e4
 8009038:	200006e8 	.word	0x200006e8
 800903c:	e000ed20 	.word	0xe000ed20
 8009040:	20000024 	.word	0x20000024
 8009044:	e000ef34 	.word	0xe000ef34

08009048 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
	__asm volatile
 800904e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009052:	f383 8811 	msr	BASEPRI, r3
 8009056:	f3bf 8f6f 	isb	sy
 800905a:	f3bf 8f4f 	dsb	sy
 800905e:	607b      	str	r3, [r7, #4]
}
 8009060:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009062:	4b10      	ldr	r3, [pc, #64]	@ (80090a4 <vPortEnterCritical+0x5c>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	3301      	adds	r3, #1
 8009068:	4a0e      	ldr	r2, [pc, #56]	@ (80090a4 <vPortEnterCritical+0x5c>)
 800906a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800906c:	4b0d      	ldr	r3, [pc, #52]	@ (80090a4 <vPortEnterCritical+0x5c>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2b01      	cmp	r3, #1
 8009072:	d110      	bne.n	8009096 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009074:	4b0c      	ldr	r3, [pc, #48]	@ (80090a8 <vPortEnterCritical+0x60>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	b2db      	uxtb	r3, r3
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00b      	beq.n	8009096 <vPortEnterCritical+0x4e>
	__asm volatile
 800907e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009082:	f383 8811 	msr	BASEPRI, r3
 8009086:	f3bf 8f6f 	isb	sy
 800908a:	f3bf 8f4f 	dsb	sy
 800908e:	603b      	str	r3, [r7, #0]
}
 8009090:	bf00      	nop
 8009092:	bf00      	nop
 8009094:	e7fd      	b.n	8009092 <vPortEnterCritical+0x4a>
	}
}
 8009096:	bf00      	nop
 8009098:	370c      	adds	r7, #12
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	20000024 	.word	0x20000024
 80090a8:	e000ed04 	.word	0xe000ed04

080090ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80090b2:	4b12      	ldr	r3, [pc, #72]	@ (80090fc <vPortExitCritical+0x50>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d10b      	bne.n	80090d2 <vPortExitCritical+0x26>
	__asm volatile
 80090ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090be:	f383 8811 	msr	BASEPRI, r3
 80090c2:	f3bf 8f6f 	isb	sy
 80090c6:	f3bf 8f4f 	dsb	sy
 80090ca:	607b      	str	r3, [r7, #4]
}
 80090cc:	bf00      	nop
 80090ce:	bf00      	nop
 80090d0:	e7fd      	b.n	80090ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80090d2:	4b0a      	ldr	r3, [pc, #40]	@ (80090fc <vPortExitCritical+0x50>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	3b01      	subs	r3, #1
 80090d8:	4a08      	ldr	r2, [pc, #32]	@ (80090fc <vPortExitCritical+0x50>)
 80090da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80090dc:	4b07      	ldr	r3, [pc, #28]	@ (80090fc <vPortExitCritical+0x50>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d105      	bne.n	80090f0 <vPortExitCritical+0x44>
 80090e4:	2300      	movs	r3, #0
 80090e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	f383 8811 	msr	BASEPRI, r3
}
 80090ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80090f0:	bf00      	nop
 80090f2:	370c      	adds	r7, #12
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr
 80090fc:	20000024 	.word	0x20000024

08009100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009100:	f3ef 8009 	mrs	r0, PSP
 8009104:	f3bf 8f6f 	isb	sy
 8009108:	4b15      	ldr	r3, [pc, #84]	@ (8009160 <pxCurrentTCBConst>)
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	f01e 0f10 	tst.w	lr, #16
 8009110:	bf08      	it	eq
 8009112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800911a:	6010      	str	r0, [r2, #0]
 800911c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009120:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009124:	f380 8811 	msr	BASEPRI, r0
 8009128:	f3bf 8f4f 	dsb	sy
 800912c:	f3bf 8f6f 	isb	sy
 8009130:	f7ff f9f4 	bl	800851c <vTaskSwitchContext>
 8009134:	f04f 0000 	mov.w	r0, #0
 8009138:	f380 8811 	msr	BASEPRI, r0
 800913c:	bc09      	pop	{r0, r3}
 800913e:	6819      	ldr	r1, [r3, #0]
 8009140:	6808      	ldr	r0, [r1, #0]
 8009142:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009146:	f01e 0f10 	tst.w	lr, #16
 800914a:	bf08      	it	eq
 800914c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009150:	f380 8809 	msr	PSP, r0
 8009154:	f3bf 8f6f 	isb	sy
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	f3af 8000 	nop.w

08009160 <pxCurrentTCBConst>:
 8009160:	200005b8 	.word	0x200005b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009164:	bf00      	nop
 8009166:	bf00      	nop

08009168 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
	__asm volatile
 800916e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009172:	f383 8811 	msr	BASEPRI, r3
 8009176:	f3bf 8f6f 	isb	sy
 800917a:	f3bf 8f4f 	dsb	sy
 800917e:	607b      	str	r3, [r7, #4]
}
 8009180:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009182:	f7ff f911 	bl	80083a8 <xTaskIncrementTick>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d003      	beq.n	8009194 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800918c:	4b06      	ldr	r3, [pc, #24]	@ (80091a8 <SysTick_Handler+0x40>)
 800918e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009192:	601a      	str	r2, [r3, #0]
 8009194:	2300      	movs	r3, #0
 8009196:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	f383 8811 	msr	BASEPRI, r3
}
 800919e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80091a0:	bf00      	nop
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	e000ed04 	.word	0xe000ed04

080091ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80091ac:	b480      	push	{r7}
 80091ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80091b0:	4b0b      	ldr	r3, [pc, #44]	@ (80091e0 <vPortSetupTimerInterrupt+0x34>)
 80091b2:	2200      	movs	r2, #0
 80091b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80091b6:	4b0b      	ldr	r3, [pc, #44]	@ (80091e4 <vPortSetupTimerInterrupt+0x38>)
 80091b8:	2200      	movs	r2, #0
 80091ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80091bc:	4b0a      	ldr	r3, [pc, #40]	@ (80091e8 <vPortSetupTimerInterrupt+0x3c>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a0a      	ldr	r2, [pc, #40]	@ (80091ec <vPortSetupTimerInterrupt+0x40>)
 80091c2:	fba2 2303 	umull	r2, r3, r2, r3
 80091c6:	099b      	lsrs	r3, r3, #6
 80091c8:	4a09      	ldr	r2, [pc, #36]	@ (80091f0 <vPortSetupTimerInterrupt+0x44>)
 80091ca:	3b01      	subs	r3, #1
 80091cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80091ce:	4b04      	ldr	r3, [pc, #16]	@ (80091e0 <vPortSetupTimerInterrupt+0x34>)
 80091d0:	2207      	movs	r2, #7
 80091d2:	601a      	str	r2, [r3, #0]
}
 80091d4:	bf00      	nop
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr
 80091de:	bf00      	nop
 80091e0:	e000e010 	.word	0xe000e010
 80091e4:	e000e018 	.word	0xe000e018
 80091e8:	20000000 	.word	0x20000000
 80091ec:	10624dd3 	.word	0x10624dd3
 80091f0:	e000e014 	.word	0xe000e014

080091f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80091f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009204 <vPortEnableVFP+0x10>
 80091f8:	6801      	ldr	r1, [r0, #0]
 80091fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80091fe:	6001      	str	r1, [r0, #0]
 8009200:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009202:	bf00      	nop
 8009204:	e000ed88 	.word	0xe000ed88

08009208 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009208:	b480      	push	{r7}
 800920a:	b085      	sub	sp, #20
 800920c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800920e:	f3ef 8305 	mrs	r3, IPSR
 8009212:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2b0f      	cmp	r3, #15
 8009218:	d915      	bls.n	8009246 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800921a:	4a18      	ldr	r2, [pc, #96]	@ (800927c <vPortValidateInterruptPriority+0x74>)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	4413      	add	r3, r2
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009224:	4b16      	ldr	r3, [pc, #88]	@ (8009280 <vPortValidateInterruptPriority+0x78>)
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	7afa      	ldrb	r2, [r7, #11]
 800922a:	429a      	cmp	r2, r3
 800922c:	d20b      	bcs.n	8009246 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800922e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009232:	f383 8811 	msr	BASEPRI, r3
 8009236:	f3bf 8f6f 	isb	sy
 800923a:	f3bf 8f4f 	dsb	sy
 800923e:	607b      	str	r3, [r7, #4]
}
 8009240:	bf00      	nop
 8009242:	bf00      	nop
 8009244:	e7fd      	b.n	8009242 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009246:	4b0f      	ldr	r3, [pc, #60]	@ (8009284 <vPortValidateInterruptPriority+0x7c>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800924e:	4b0e      	ldr	r3, [pc, #56]	@ (8009288 <vPortValidateInterruptPriority+0x80>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	429a      	cmp	r2, r3
 8009254:	d90b      	bls.n	800926e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800925a:	f383 8811 	msr	BASEPRI, r3
 800925e:	f3bf 8f6f 	isb	sy
 8009262:	f3bf 8f4f 	dsb	sy
 8009266:	603b      	str	r3, [r7, #0]
}
 8009268:	bf00      	nop
 800926a:	bf00      	nop
 800926c:	e7fd      	b.n	800926a <vPortValidateInterruptPriority+0x62>
	}
 800926e:	bf00      	nop
 8009270:	3714      	adds	r7, #20
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr
 800927a:	bf00      	nop
 800927c:	e000e3f0 	.word	0xe000e3f0
 8009280:	200006e4 	.word	0x200006e4
 8009284:	e000ed0c 	.word	0xe000ed0c
 8009288:	200006e8 	.word	0x200006e8

0800928c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b08a      	sub	sp, #40	@ 0x28
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009294:	2300      	movs	r3, #0
 8009296:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009298:	f7fe ffda 	bl	8008250 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800929c:	4b5c      	ldr	r3, [pc, #368]	@ (8009410 <pvPortMalloc+0x184>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d101      	bne.n	80092a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80092a4:	f000 f924 	bl	80094f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80092a8:	4b5a      	ldr	r3, [pc, #360]	@ (8009414 <pvPortMalloc+0x188>)
 80092aa:	681a      	ldr	r2, [r3, #0]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	4013      	ands	r3, r2
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	f040 8095 	bne.w	80093e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d01e      	beq.n	80092fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80092bc:	2208      	movs	r2, #8
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	4413      	add	r3, r2
 80092c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f003 0307 	and.w	r3, r3, #7
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d015      	beq.n	80092fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f023 0307 	bic.w	r3, r3, #7
 80092d4:	3308      	adds	r3, #8
 80092d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f003 0307 	and.w	r3, r3, #7
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d00b      	beq.n	80092fa <pvPortMalloc+0x6e>
	__asm volatile
 80092e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e6:	f383 8811 	msr	BASEPRI, r3
 80092ea:	f3bf 8f6f 	isb	sy
 80092ee:	f3bf 8f4f 	dsb	sy
 80092f2:	617b      	str	r3, [r7, #20]
}
 80092f4:	bf00      	nop
 80092f6:	bf00      	nop
 80092f8:	e7fd      	b.n	80092f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d06f      	beq.n	80093e0 <pvPortMalloc+0x154>
 8009300:	4b45      	ldr	r3, [pc, #276]	@ (8009418 <pvPortMalloc+0x18c>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	429a      	cmp	r2, r3
 8009308:	d86a      	bhi.n	80093e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800930a:	4b44      	ldr	r3, [pc, #272]	@ (800941c <pvPortMalloc+0x190>)
 800930c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800930e:	4b43      	ldr	r3, [pc, #268]	@ (800941c <pvPortMalloc+0x190>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009314:	e004      	b.n	8009320 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009318:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800931a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	429a      	cmp	r2, r3
 8009328:	d903      	bls.n	8009332 <pvPortMalloc+0xa6>
 800932a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d1f1      	bne.n	8009316 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009332:	4b37      	ldr	r3, [pc, #220]	@ (8009410 <pvPortMalloc+0x184>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009338:	429a      	cmp	r2, r3
 800933a:	d051      	beq.n	80093e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800933c:	6a3b      	ldr	r3, [r7, #32]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2208      	movs	r2, #8
 8009342:	4413      	add	r3, r2
 8009344:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	6a3b      	ldr	r3, [r7, #32]
 800934c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800934e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009350:	685a      	ldr	r2, [r3, #4]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	1ad2      	subs	r2, r2, r3
 8009356:	2308      	movs	r3, #8
 8009358:	005b      	lsls	r3, r3, #1
 800935a:	429a      	cmp	r2, r3
 800935c:	d920      	bls.n	80093a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800935e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4413      	add	r3, r2
 8009364:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009366:	69bb      	ldr	r3, [r7, #24]
 8009368:	f003 0307 	and.w	r3, r3, #7
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00b      	beq.n	8009388 <pvPortMalloc+0xfc>
	__asm volatile
 8009370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009374:	f383 8811 	msr	BASEPRI, r3
 8009378:	f3bf 8f6f 	isb	sy
 800937c:	f3bf 8f4f 	dsb	sy
 8009380:	613b      	str	r3, [r7, #16]
}
 8009382:	bf00      	nop
 8009384:	bf00      	nop
 8009386:	e7fd      	b.n	8009384 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800938a:	685a      	ldr	r2, [r3, #4]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	1ad2      	subs	r2, r2, r3
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800939a:	69b8      	ldr	r0, [r7, #24]
 800939c:	f000 f90a 	bl	80095b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80093a0:	4b1d      	ldr	r3, [pc, #116]	@ (8009418 <pvPortMalloc+0x18c>)
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	1ad3      	subs	r3, r2, r3
 80093aa:	4a1b      	ldr	r2, [pc, #108]	@ (8009418 <pvPortMalloc+0x18c>)
 80093ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80093ae:	4b1a      	ldr	r3, [pc, #104]	@ (8009418 <pvPortMalloc+0x18c>)
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	4b1b      	ldr	r3, [pc, #108]	@ (8009420 <pvPortMalloc+0x194>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d203      	bcs.n	80093c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80093ba:	4b17      	ldr	r3, [pc, #92]	@ (8009418 <pvPortMalloc+0x18c>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a18      	ldr	r2, [pc, #96]	@ (8009420 <pvPortMalloc+0x194>)
 80093c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80093c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c4:	685a      	ldr	r2, [r3, #4]
 80093c6:	4b13      	ldr	r3, [pc, #76]	@ (8009414 <pvPortMalloc+0x188>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	431a      	orrs	r2, r3
 80093cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80093d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d2:	2200      	movs	r2, #0
 80093d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80093d6:	4b13      	ldr	r3, [pc, #76]	@ (8009424 <pvPortMalloc+0x198>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	3301      	adds	r3, #1
 80093dc:	4a11      	ldr	r2, [pc, #68]	@ (8009424 <pvPortMalloc+0x198>)
 80093de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80093e0:	f7fe ff44 	bl	800826c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	f003 0307 	and.w	r3, r3, #7
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d00b      	beq.n	8009406 <pvPortMalloc+0x17a>
	__asm volatile
 80093ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093f2:	f383 8811 	msr	BASEPRI, r3
 80093f6:	f3bf 8f6f 	isb	sy
 80093fa:	f3bf 8f4f 	dsb	sy
 80093fe:	60fb      	str	r3, [r7, #12]
}
 8009400:	bf00      	nop
 8009402:	bf00      	nop
 8009404:	e7fd      	b.n	8009402 <pvPortMalloc+0x176>
	return pvReturn;
 8009406:	69fb      	ldr	r3, [r7, #28]
}
 8009408:	4618      	mov	r0, r3
 800940a:	3728      	adds	r7, #40	@ 0x28
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}
 8009410:	200042f4 	.word	0x200042f4
 8009414:	20004308 	.word	0x20004308
 8009418:	200042f8 	.word	0x200042f8
 800941c:	200042ec 	.word	0x200042ec
 8009420:	200042fc 	.word	0x200042fc
 8009424:	20004300 	.word	0x20004300

08009428 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b086      	sub	sp, #24
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d04f      	beq.n	80094da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800943a:	2308      	movs	r3, #8
 800943c:	425b      	negs	r3, r3
 800943e:	697a      	ldr	r2, [r7, #20]
 8009440:	4413      	add	r3, r2
 8009442:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	685a      	ldr	r2, [r3, #4]
 800944c:	4b25      	ldr	r3, [pc, #148]	@ (80094e4 <vPortFree+0xbc>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4013      	ands	r3, r2
 8009452:	2b00      	cmp	r3, #0
 8009454:	d10b      	bne.n	800946e <vPortFree+0x46>
	__asm volatile
 8009456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800945a:	f383 8811 	msr	BASEPRI, r3
 800945e:	f3bf 8f6f 	isb	sy
 8009462:	f3bf 8f4f 	dsb	sy
 8009466:	60fb      	str	r3, [r7, #12]
}
 8009468:	bf00      	nop
 800946a:	bf00      	nop
 800946c:	e7fd      	b.n	800946a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00b      	beq.n	800948e <vPortFree+0x66>
	__asm volatile
 8009476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800947a:	f383 8811 	msr	BASEPRI, r3
 800947e:	f3bf 8f6f 	isb	sy
 8009482:	f3bf 8f4f 	dsb	sy
 8009486:	60bb      	str	r3, [r7, #8]
}
 8009488:	bf00      	nop
 800948a:	bf00      	nop
 800948c:	e7fd      	b.n	800948a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	685a      	ldr	r2, [r3, #4]
 8009492:	4b14      	ldr	r3, [pc, #80]	@ (80094e4 <vPortFree+0xbc>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4013      	ands	r3, r2
 8009498:	2b00      	cmp	r3, #0
 800949a:	d01e      	beq.n	80094da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d11a      	bne.n	80094da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	685a      	ldr	r2, [r3, #4]
 80094a8:	4b0e      	ldr	r3, [pc, #56]	@ (80094e4 <vPortFree+0xbc>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	43db      	mvns	r3, r3
 80094ae:	401a      	ands	r2, r3
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80094b4:	f7fe fecc 	bl	8008250 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	685a      	ldr	r2, [r3, #4]
 80094bc:	4b0a      	ldr	r3, [pc, #40]	@ (80094e8 <vPortFree+0xc0>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4413      	add	r3, r2
 80094c2:	4a09      	ldr	r2, [pc, #36]	@ (80094e8 <vPortFree+0xc0>)
 80094c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80094c6:	6938      	ldr	r0, [r7, #16]
 80094c8:	f000 f874 	bl	80095b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80094cc:	4b07      	ldr	r3, [pc, #28]	@ (80094ec <vPortFree+0xc4>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	3301      	adds	r3, #1
 80094d2:	4a06      	ldr	r2, [pc, #24]	@ (80094ec <vPortFree+0xc4>)
 80094d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80094d6:	f7fe fec9 	bl	800826c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80094da:	bf00      	nop
 80094dc:	3718      	adds	r7, #24
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	20004308 	.word	0x20004308
 80094e8:	200042f8 	.word	0x200042f8
 80094ec:	20004304 	.word	0x20004304

080094f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80094f0:	b480      	push	{r7}
 80094f2:	b085      	sub	sp, #20
 80094f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80094f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80094fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80094fc:	4b27      	ldr	r3, [pc, #156]	@ (800959c <prvHeapInit+0xac>)
 80094fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f003 0307 	and.w	r3, r3, #7
 8009506:	2b00      	cmp	r3, #0
 8009508:	d00c      	beq.n	8009524 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	3307      	adds	r3, #7
 800950e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f023 0307 	bic.w	r3, r3, #7
 8009516:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009518:	68ba      	ldr	r2, [r7, #8]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	1ad3      	subs	r3, r2, r3
 800951e:	4a1f      	ldr	r2, [pc, #124]	@ (800959c <prvHeapInit+0xac>)
 8009520:	4413      	add	r3, r2
 8009522:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009528:	4a1d      	ldr	r2, [pc, #116]	@ (80095a0 <prvHeapInit+0xb0>)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800952e:	4b1c      	ldr	r3, [pc, #112]	@ (80095a0 <prvHeapInit+0xb0>)
 8009530:	2200      	movs	r2, #0
 8009532:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	68ba      	ldr	r2, [r7, #8]
 8009538:	4413      	add	r3, r2
 800953a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800953c:	2208      	movs	r2, #8
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	1a9b      	subs	r3, r3, r2
 8009542:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f023 0307 	bic.w	r3, r3, #7
 800954a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	4a15      	ldr	r2, [pc, #84]	@ (80095a4 <prvHeapInit+0xb4>)
 8009550:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009552:	4b14      	ldr	r3, [pc, #80]	@ (80095a4 <prvHeapInit+0xb4>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2200      	movs	r2, #0
 8009558:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800955a:	4b12      	ldr	r3, [pc, #72]	@ (80095a4 <prvHeapInit+0xb4>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2200      	movs	r2, #0
 8009560:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	68fa      	ldr	r2, [r7, #12]
 800956a:	1ad2      	subs	r2, r2, r3
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009570:	4b0c      	ldr	r3, [pc, #48]	@ (80095a4 <prvHeapInit+0xb4>)
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	4a0a      	ldr	r2, [pc, #40]	@ (80095a8 <prvHeapInit+0xb8>)
 800957e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	4a09      	ldr	r2, [pc, #36]	@ (80095ac <prvHeapInit+0xbc>)
 8009586:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009588:	4b09      	ldr	r3, [pc, #36]	@ (80095b0 <prvHeapInit+0xc0>)
 800958a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800958e:	601a      	str	r2, [r3, #0]
}
 8009590:	bf00      	nop
 8009592:	3714      	adds	r7, #20
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr
 800959c:	200006ec 	.word	0x200006ec
 80095a0:	200042ec 	.word	0x200042ec
 80095a4:	200042f4 	.word	0x200042f4
 80095a8:	200042fc 	.word	0x200042fc
 80095ac:	200042f8 	.word	0x200042f8
 80095b0:	20004308 	.word	0x20004308

080095b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80095b4:	b480      	push	{r7}
 80095b6:	b085      	sub	sp, #20
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80095bc:	4b28      	ldr	r3, [pc, #160]	@ (8009660 <prvInsertBlockIntoFreeList+0xac>)
 80095be:	60fb      	str	r3, [r7, #12]
 80095c0:	e002      	b.n	80095c8 <prvInsertBlockIntoFreeList+0x14>
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	60fb      	str	r3, [r7, #12]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d8f7      	bhi.n	80095c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	68ba      	ldr	r2, [r7, #8]
 80095dc:	4413      	add	r3, r2
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d108      	bne.n	80095f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	685a      	ldr	r2, [r3, #4]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	441a      	add	r2, r3
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	68ba      	ldr	r2, [r7, #8]
 8009600:	441a      	add	r2, r3
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	429a      	cmp	r2, r3
 8009608:	d118      	bne.n	800963c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	4b15      	ldr	r3, [pc, #84]	@ (8009664 <prvInsertBlockIntoFreeList+0xb0>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	429a      	cmp	r2, r3
 8009614:	d00d      	beq.n	8009632 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	685a      	ldr	r2, [r3, #4]
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	441a      	add	r2, r3
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	601a      	str	r2, [r3, #0]
 8009630:	e008      	b.n	8009644 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009632:	4b0c      	ldr	r3, [pc, #48]	@ (8009664 <prvInsertBlockIntoFreeList+0xb0>)
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	601a      	str	r2, [r3, #0]
 800963a:	e003      	b.n	8009644 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009644:	68fa      	ldr	r2, [r7, #12]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	429a      	cmp	r2, r3
 800964a:	d002      	beq.n	8009652 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009652:	bf00      	nop
 8009654:	3714      	adds	r7, #20
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr
 800965e:	bf00      	nop
 8009660:	200042ec 	.word	0x200042ec
 8009664:	200042f4 	.word	0x200042f4

08009668 <malloc>:
 8009668:	4b02      	ldr	r3, [pc, #8]	@ (8009674 <malloc+0xc>)
 800966a:	4601      	mov	r1, r0
 800966c:	6818      	ldr	r0, [r3, #0]
 800966e:	f000 b82d 	b.w	80096cc <_malloc_r>
 8009672:	bf00      	nop
 8009674:	20000028 	.word	0x20000028

08009678 <free>:
 8009678:	4b02      	ldr	r3, [pc, #8]	@ (8009684 <free+0xc>)
 800967a:	4601      	mov	r1, r0
 800967c:	6818      	ldr	r0, [r3, #0]
 800967e:	f000 b93d 	b.w	80098fc <_free_r>
 8009682:	bf00      	nop
 8009684:	20000028 	.word	0x20000028

08009688 <sbrk_aligned>:
 8009688:	b570      	push	{r4, r5, r6, lr}
 800968a:	4e0f      	ldr	r6, [pc, #60]	@ (80096c8 <sbrk_aligned+0x40>)
 800968c:	460c      	mov	r4, r1
 800968e:	6831      	ldr	r1, [r6, #0]
 8009690:	4605      	mov	r5, r0
 8009692:	b911      	cbnz	r1, 800969a <sbrk_aligned+0x12>
 8009694:	f000 f8e8 	bl	8009868 <_sbrk_r>
 8009698:	6030      	str	r0, [r6, #0]
 800969a:	4621      	mov	r1, r4
 800969c:	4628      	mov	r0, r5
 800969e:	f000 f8e3 	bl	8009868 <_sbrk_r>
 80096a2:	1c43      	adds	r3, r0, #1
 80096a4:	d103      	bne.n	80096ae <sbrk_aligned+0x26>
 80096a6:	f04f 34ff 	mov.w	r4, #4294967295
 80096aa:	4620      	mov	r0, r4
 80096ac:	bd70      	pop	{r4, r5, r6, pc}
 80096ae:	1cc4      	adds	r4, r0, #3
 80096b0:	f024 0403 	bic.w	r4, r4, #3
 80096b4:	42a0      	cmp	r0, r4
 80096b6:	d0f8      	beq.n	80096aa <sbrk_aligned+0x22>
 80096b8:	1a21      	subs	r1, r4, r0
 80096ba:	4628      	mov	r0, r5
 80096bc:	f000 f8d4 	bl	8009868 <_sbrk_r>
 80096c0:	3001      	adds	r0, #1
 80096c2:	d1f2      	bne.n	80096aa <sbrk_aligned+0x22>
 80096c4:	e7ef      	b.n	80096a6 <sbrk_aligned+0x1e>
 80096c6:	bf00      	nop
 80096c8:	2000430c 	.word	0x2000430c

080096cc <_malloc_r>:
 80096cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096d0:	1ccd      	adds	r5, r1, #3
 80096d2:	f025 0503 	bic.w	r5, r5, #3
 80096d6:	3508      	adds	r5, #8
 80096d8:	2d0c      	cmp	r5, #12
 80096da:	bf38      	it	cc
 80096dc:	250c      	movcc	r5, #12
 80096de:	2d00      	cmp	r5, #0
 80096e0:	4606      	mov	r6, r0
 80096e2:	db01      	blt.n	80096e8 <_malloc_r+0x1c>
 80096e4:	42a9      	cmp	r1, r5
 80096e6:	d904      	bls.n	80096f2 <_malloc_r+0x26>
 80096e8:	230c      	movs	r3, #12
 80096ea:	6033      	str	r3, [r6, #0]
 80096ec:	2000      	movs	r0, #0
 80096ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80097c8 <_malloc_r+0xfc>
 80096f6:	f000 f869 	bl	80097cc <__malloc_lock>
 80096fa:	f8d8 3000 	ldr.w	r3, [r8]
 80096fe:	461c      	mov	r4, r3
 8009700:	bb44      	cbnz	r4, 8009754 <_malloc_r+0x88>
 8009702:	4629      	mov	r1, r5
 8009704:	4630      	mov	r0, r6
 8009706:	f7ff ffbf 	bl	8009688 <sbrk_aligned>
 800970a:	1c43      	adds	r3, r0, #1
 800970c:	4604      	mov	r4, r0
 800970e:	d158      	bne.n	80097c2 <_malloc_r+0xf6>
 8009710:	f8d8 4000 	ldr.w	r4, [r8]
 8009714:	4627      	mov	r7, r4
 8009716:	2f00      	cmp	r7, #0
 8009718:	d143      	bne.n	80097a2 <_malloc_r+0xd6>
 800971a:	2c00      	cmp	r4, #0
 800971c:	d04b      	beq.n	80097b6 <_malloc_r+0xea>
 800971e:	6823      	ldr	r3, [r4, #0]
 8009720:	4639      	mov	r1, r7
 8009722:	4630      	mov	r0, r6
 8009724:	eb04 0903 	add.w	r9, r4, r3
 8009728:	f000 f89e 	bl	8009868 <_sbrk_r>
 800972c:	4581      	cmp	r9, r0
 800972e:	d142      	bne.n	80097b6 <_malloc_r+0xea>
 8009730:	6821      	ldr	r1, [r4, #0]
 8009732:	1a6d      	subs	r5, r5, r1
 8009734:	4629      	mov	r1, r5
 8009736:	4630      	mov	r0, r6
 8009738:	f7ff ffa6 	bl	8009688 <sbrk_aligned>
 800973c:	3001      	adds	r0, #1
 800973e:	d03a      	beq.n	80097b6 <_malloc_r+0xea>
 8009740:	6823      	ldr	r3, [r4, #0]
 8009742:	442b      	add	r3, r5
 8009744:	6023      	str	r3, [r4, #0]
 8009746:	f8d8 3000 	ldr.w	r3, [r8]
 800974a:	685a      	ldr	r2, [r3, #4]
 800974c:	bb62      	cbnz	r2, 80097a8 <_malloc_r+0xdc>
 800974e:	f8c8 7000 	str.w	r7, [r8]
 8009752:	e00f      	b.n	8009774 <_malloc_r+0xa8>
 8009754:	6822      	ldr	r2, [r4, #0]
 8009756:	1b52      	subs	r2, r2, r5
 8009758:	d420      	bmi.n	800979c <_malloc_r+0xd0>
 800975a:	2a0b      	cmp	r2, #11
 800975c:	d917      	bls.n	800978e <_malloc_r+0xc2>
 800975e:	1961      	adds	r1, r4, r5
 8009760:	42a3      	cmp	r3, r4
 8009762:	6025      	str	r5, [r4, #0]
 8009764:	bf18      	it	ne
 8009766:	6059      	strne	r1, [r3, #4]
 8009768:	6863      	ldr	r3, [r4, #4]
 800976a:	bf08      	it	eq
 800976c:	f8c8 1000 	streq.w	r1, [r8]
 8009770:	5162      	str	r2, [r4, r5]
 8009772:	604b      	str	r3, [r1, #4]
 8009774:	4630      	mov	r0, r6
 8009776:	f000 f82f 	bl	80097d8 <__malloc_unlock>
 800977a:	f104 000b 	add.w	r0, r4, #11
 800977e:	1d23      	adds	r3, r4, #4
 8009780:	f020 0007 	bic.w	r0, r0, #7
 8009784:	1ac2      	subs	r2, r0, r3
 8009786:	bf1c      	itt	ne
 8009788:	1a1b      	subne	r3, r3, r0
 800978a:	50a3      	strne	r3, [r4, r2]
 800978c:	e7af      	b.n	80096ee <_malloc_r+0x22>
 800978e:	6862      	ldr	r2, [r4, #4]
 8009790:	42a3      	cmp	r3, r4
 8009792:	bf0c      	ite	eq
 8009794:	f8c8 2000 	streq.w	r2, [r8]
 8009798:	605a      	strne	r2, [r3, #4]
 800979a:	e7eb      	b.n	8009774 <_malloc_r+0xa8>
 800979c:	4623      	mov	r3, r4
 800979e:	6864      	ldr	r4, [r4, #4]
 80097a0:	e7ae      	b.n	8009700 <_malloc_r+0x34>
 80097a2:	463c      	mov	r4, r7
 80097a4:	687f      	ldr	r7, [r7, #4]
 80097a6:	e7b6      	b.n	8009716 <_malloc_r+0x4a>
 80097a8:	461a      	mov	r2, r3
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	42a3      	cmp	r3, r4
 80097ae:	d1fb      	bne.n	80097a8 <_malloc_r+0xdc>
 80097b0:	2300      	movs	r3, #0
 80097b2:	6053      	str	r3, [r2, #4]
 80097b4:	e7de      	b.n	8009774 <_malloc_r+0xa8>
 80097b6:	230c      	movs	r3, #12
 80097b8:	6033      	str	r3, [r6, #0]
 80097ba:	4630      	mov	r0, r6
 80097bc:	f000 f80c 	bl	80097d8 <__malloc_unlock>
 80097c0:	e794      	b.n	80096ec <_malloc_r+0x20>
 80097c2:	6005      	str	r5, [r0, #0]
 80097c4:	e7d6      	b.n	8009774 <_malloc_r+0xa8>
 80097c6:	bf00      	nop
 80097c8:	20004310 	.word	0x20004310

080097cc <__malloc_lock>:
 80097cc:	4801      	ldr	r0, [pc, #4]	@ (80097d4 <__malloc_lock+0x8>)
 80097ce:	f000 b885 	b.w	80098dc <__retarget_lock_acquire_recursive>
 80097d2:	bf00      	nop
 80097d4:	20004450 	.word	0x20004450

080097d8 <__malloc_unlock>:
 80097d8:	4801      	ldr	r0, [pc, #4]	@ (80097e0 <__malloc_unlock+0x8>)
 80097da:	f000 b880 	b.w	80098de <__retarget_lock_release_recursive>
 80097de:	bf00      	nop
 80097e0:	20004450 	.word	0x20004450

080097e4 <_vsniprintf_r>:
 80097e4:	b530      	push	{r4, r5, lr}
 80097e6:	4614      	mov	r4, r2
 80097e8:	2c00      	cmp	r4, #0
 80097ea:	b09b      	sub	sp, #108	@ 0x6c
 80097ec:	4605      	mov	r5, r0
 80097ee:	461a      	mov	r2, r3
 80097f0:	da05      	bge.n	80097fe <_vsniprintf_r+0x1a>
 80097f2:	238b      	movs	r3, #139	@ 0x8b
 80097f4:	6003      	str	r3, [r0, #0]
 80097f6:	f04f 30ff 	mov.w	r0, #4294967295
 80097fa:	b01b      	add	sp, #108	@ 0x6c
 80097fc:	bd30      	pop	{r4, r5, pc}
 80097fe:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009802:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009806:	bf14      	ite	ne
 8009808:	f104 33ff 	addne.w	r3, r4, #4294967295
 800980c:	4623      	moveq	r3, r4
 800980e:	9302      	str	r3, [sp, #8]
 8009810:	9305      	str	r3, [sp, #20]
 8009812:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009816:	9100      	str	r1, [sp, #0]
 8009818:	9104      	str	r1, [sp, #16]
 800981a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800981e:	4669      	mov	r1, sp
 8009820:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009822:	f000 f911 	bl	8009a48 <_svfiprintf_r>
 8009826:	1c43      	adds	r3, r0, #1
 8009828:	bfbc      	itt	lt
 800982a:	238b      	movlt	r3, #139	@ 0x8b
 800982c:	602b      	strlt	r3, [r5, #0]
 800982e:	2c00      	cmp	r4, #0
 8009830:	d0e3      	beq.n	80097fa <_vsniprintf_r+0x16>
 8009832:	9b00      	ldr	r3, [sp, #0]
 8009834:	2200      	movs	r2, #0
 8009836:	701a      	strb	r2, [r3, #0]
 8009838:	e7df      	b.n	80097fa <_vsniprintf_r+0x16>
	...

0800983c <vsniprintf>:
 800983c:	b507      	push	{r0, r1, r2, lr}
 800983e:	9300      	str	r3, [sp, #0]
 8009840:	4613      	mov	r3, r2
 8009842:	460a      	mov	r2, r1
 8009844:	4601      	mov	r1, r0
 8009846:	4803      	ldr	r0, [pc, #12]	@ (8009854 <vsniprintf+0x18>)
 8009848:	6800      	ldr	r0, [r0, #0]
 800984a:	f7ff ffcb 	bl	80097e4 <_vsniprintf_r>
 800984e:	b003      	add	sp, #12
 8009850:	f85d fb04 	ldr.w	pc, [sp], #4
 8009854:	20000028 	.word	0x20000028

08009858 <memset>:
 8009858:	4402      	add	r2, r0
 800985a:	4603      	mov	r3, r0
 800985c:	4293      	cmp	r3, r2
 800985e:	d100      	bne.n	8009862 <memset+0xa>
 8009860:	4770      	bx	lr
 8009862:	f803 1b01 	strb.w	r1, [r3], #1
 8009866:	e7f9      	b.n	800985c <memset+0x4>

08009868 <_sbrk_r>:
 8009868:	b538      	push	{r3, r4, r5, lr}
 800986a:	4d06      	ldr	r5, [pc, #24]	@ (8009884 <_sbrk_r+0x1c>)
 800986c:	2300      	movs	r3, #0
 800986e:	4604      	mov	r4, r0
 8009870:	4608      	mov	r0, r1
 8009872:	602b      	str	r3, [r5, #0]
 8009874:	f7f7 fbdc 	bl	8001030 <_sbrk>
 8009878:	1c43      	adds	r3, r0, #1
 800987a:	d102      	bne.n	8009882 <_sbrk_r+0x1a>
 800987c:	682b      	ldr	r3, [r5, #0]
 800987e:	b103      	cbz	r3, 8009882 <_sbrk_r+0x1a>
 8009880:	6023      	str	r3, [r4, #0]
 8009882:	bd38      	pop	{r3, r4, r5, pc}
 8009884:	2000444c 	.word	0x2000444c

08009888 <__errno>:
 8009888:	4b01      	ldr	r3, [pc, #4]	@ (8009890 <__errno+0x8>)
 800988a:	6818      	ldr	r0, [r3, #0]
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	20000028 	.word	0x20000028

08009894 <__libc_init_array>:
 8009894:	b570      	push	{r4, r5, r6, lr}
 8009896:	4d0d      	ldr	r5, [pc, #52]	@ (80098cc <__libc_init_array+0x38>)
 8009898:	4c0d      	ldr	r4, [pc, #52]	@ (80098d0 <__libc_init_array+0x3c>)
 800989a:	1b64      	subs	r4, r4, r5
 800989c:	10a4      	asrs	r4, r4, #2
 800989e:	2600      	movs	r6, #0
 80098a0:	42a6      	cmp	r6, r4
 80098a2:	d109      	bne.n	80098b8 <__libc_init_array+0x24>
 80098a4:	4d0b      	ldr	r5, [pc, #44]	@ (80098d4 <__libc_init_array+0x40>)
 80098a6:	4c0c      	ldr	r4, [pc, #48]	@ (80098d8 <__libc_init_array+0x44>)
 80098a8:	f000 fba8 	bl	8009ffc <_init>
 80098ac:	1b64      	subs	r4, r4, r5
 80098ae:	10a4      	asrs	r4, r4, #2
 80098b0:	2600      	movs	r6, #0
 80098b2:	42a6      	cmp	r6, r4
 80098b4:	d105      	bne.n	80098c2 <__libc_init_array+0x2e>
 80098b6:	bd70      	pop	{r4, r5, r6, pc}
 80098b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80098bc:	4798      	blx	r3
 80098be:	3601      	adds	r6, #1
 80098c0:	e7ee      	b.n	80098a0 <__libc_init_array+0xc>
 80098c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80098c6:	4798      	blx	r3
 80098c8:	3601      	adds	r6, #1
 80098ca:	e7f2      	b.n	80098b2 <__libc_init_array+0x1e>
 80098cc:	0800a7e0 	.word	0x0800a7e0
 80098d0:	0800a7e0 	.word	0x0800a7e0
 80098d4:	0800a7e0 	.word	0x0800a7e0
 80098d8:	0800a7e4 	.word	0x0800a7e4

080098dc <__retarget_lock_acquire_recursive>:
 80098dc:	4770      	bx	lr

080098de <__retarget_lock_release_recursive>:
 80098de:	4770      	bx	lr

080098e0 <memcpy>:
 80098e0:	440a      	add	r2, r1
 80098e2:	4291      	cmp	r1, r2
 80098e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80098e8:	d100      	bne.n	80098ec <memcpy+0xc>
 80098ea:	4770      	bx	lr
 80098ec:	b510      	push	{r4, lr}
 80098ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098f6:	4291      	cmp	r1, r2
 80098f8:	d1f9      	bne.n	80098ee <memcpy+0xe>
 80098fa:	bd10      	pop	{r4, pc}

080098fc <_free_r>:
 80098fc:	b538      	push	{r3, r4, r5, lr}
 80098fe:	4605      	mov	r5, r0
 8009900:	2900      	cmp	r1, #0
 8009902:	d041      	beq.n	8009988 <_free_r+0x8c>
 8009904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009908:	1f0c      	subs	r4, r1, #4
 800990a:	2b00      	cmp	r3, #0
 800990c:	bfb8      	it	lt
 800990e:	18e4      	addlt	r4, r4, r3
 8009910:	f7ff ff5c 	bl	80097cc <__malloc_lock>
 8009914:	4a1d      	ldr	r2, [pc, #116]	@ (800998c <_free_r+0x90>)
 8009916:	6813      	ldr	r3, [r2, #0]
 8009918:	b933      	cbnz	r3, 8009928 <_free_r+0x2c>
 800991a:	6063      	str	r3, [r4, #4]
 800991c:	6014      	str	r4, [r2, #0]
 800991e:	4628      	mov	r0, r5
 8009920:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009924:	f7ff bf58 	b.w	80097d8 <__malloc_unlock>
 8009928:	42a3      	cmp	r3, r4
 800992a:	d908      	bls.n	800993e <_free_r+0x42>
 800992c:	6820      	ldr	r0, [r4, #0]
 800992e:	1821      	adds	r1, r4, r0
 8009930:	428b      	cmp	r3, r1
 8009932:	bf01      	itttt	eq
 8009934:	6819      	ldreq	r1, [r3, #0]
 8009936:	685b      	ldreq	r3, [r3, #4]
 8009938:	1809      	addeq	r1, r1, r0
 800993a:	6021      	streq	r1, [r4, #0]
 800993c:	e7ed      	b.n	800991a <_free_r+0x1e>
 800993e:	461a      	mov	r2, r3
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	b10b      	cbz	r3, 8009948 <_free_r+0x4c>
 8009944:	42a3      	cmp	r3, r4
 8009946:	d9fa      	bls.n	800993e <_free_r+0x42>
 8009948:	6811      	ldr	r1, [r2, #0]
 800994a:	1850      	adds	r0, r2, r1
 800994c:	42a0      	cmp	r0, r4
 800994e:	d10b      	bne.n	8009968 <_free_r+0x6c>
 8009950:	6820      	ldr	r0, [r4, #0]
 8009952:	4401      	add	r1, r0
 8009954:	1850      	adds	r0, r2, r1
 8009956:	4283      	cmp	r3, r0
 8009958:	6011      	str	r1, [r2, #0]
 800995a:	d1e0      	bne.n	800991e <_free_r+0x22>
 800995c:	6818      	ldr	r0, [r3, #0]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	6053      	str	r3, [r2, #4]
 8009962:	4408      	add	r0, r1
 8009964:	6010      	str	r0, [r2, #0]
 8009966:	e7da      	b.n	800991e <_free_r+0x22>
 8009968:	d902      	bls.n	8009970 <_free_r+0x74>
 800996a:	230c      	movs	r3, #12
 800996c:	602b      	str	r3, [r5, #0]
 800996e:	e7d6      	b.n	800991e <_free_r+0x22>
 8009970:	6820      	ldr	r0, [r4, #0]
 8009972:	1821      	adds	r1, r4, r0
 8009974:	428b      	cmp	r3, r1
 8009976:	bf04      	itt	eq
 8009978:	6819      	ldreq	r1, [r3, #0]
 800997a:	685b      	ldreq	r3, [r3, #4]
 800997c:	6063      	str	r3, [r4, #4]
 800997e:	bf04      	itt	eq
 8009980:	1809      	addeq	r1, r1, r0
 8009982:	6021      	streq	r1, [r4, #0]
 8009984:	6054      	str	r4, [r2, #4]
 8009986:	e7ca      	b.n	800991e <_free_r+0x22>
 8009988:	bd38      	pop	{r3, r4, r5, pc}
 800998a:	bf00      	nop
 800998c:	20004310 	.word	0x20004310

08009990 <__ssputs_r>:
 8009990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009994:	688e      	ldr	r6, [r1, #8]
 8009996:	461f      	mov	r7, r3
 8009998:	42be      	cmp	r6, r7
 800999a:	680b      	ldr	r3, [r1, #0]
 800999c:	4682      	mov	sl, r0
 800999e:	460c      	mov	r4, r1
 80099a0:	4690      	mov	r8, r2
 80099a2:	d82d      	bhi.n	8009a00 <__ssputs_r+0x70>
 80099a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80099a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80099ac:	d026      	beq.n	80099fc <__ssputs_r+0x6c>
 80099ae:	6965      	ldr	r5, [r4, #20]
 80099b0:	6909      	ldr	r1, [r1, #16]
 80099b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099b6:	eba3 0901 	sub.w	r9, r3, r1
 80099ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099be:	1c7b      	adds	r3, r7, #1
 80099c0:	444b      	add	r3, r9
 80099c2:	106d      	asrs	r5, r5, #1
 80099c4:	429d      	cmp	r5, r3
 80099c6:	bf38      	it	cc
 80099c8:	461d      	movcc	r5, r3
 80099ca:	0553      	lsls	r3, r2, #21
 80099cc:	d527      	bpl.n	8009a1e <__ssputs_r+0x8e>
 80099ce:	4629      	mov	r1, r5
 80099d0:	f7ff fe7c 	bl	80096cc <_malloc_r>
 80099d4:	4606      	mov	r6, r0
 80099d6:	b360      	cbz	r0, 8009a32 <__ssputs_r+0xa2>
 80099d8:	6921      	ldr	r1, [r4, #16]
 80099da:	464a      	mov	r2, r9
 80099dc:	f7ff ff80 	bl	80098e0 <memcpy>
 80099e0:	89a3      	ldrh	r3, [r4, #12]
 80099e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80099e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099ea:	81a3      	strh	r3, [r4, #12]
 80099ec:	6126      	str	r6, [r4, #16]
 80099ee:	6165      	str	r5, [r4, #20]
 80099f0:	444e      	add	r6, r9
 80099f2:	eba5 0509 	sub.w	r5, r5, r9
 80099f6:	6026      	str	r6, [r4, #0]
 80099f8:	60a5      	str	r5, [r4, #8]
 80099fa:	463e      	mov	r6, r7
 80099fc:	42be      	cmp	r6, r7
 80099fe:	d900      	bls.n	8009a02 <__ssputs_r+0x72>
 8009a00:	463e      	mov	r6, r7
 8009a02:	6820      	ldr	r0, [r4, #0]
 8009a04:	4632      	mov	r2, r6
 8009a06:	4641      	mov	r1, r8
 8009a08:	f000 faa8 	bl	8009f5c <memmove>
 8009a0c:	68a3      	ldr	r3, [r4, #8]
 8009a0e:	1b9b      	subs	r3, r3, r6
 8009a10:	60a3      	str	r3, [r4, #8]
 8009a12:	6823      	ldr	r3, [r4, #0]
 8009a14:	4433      	add	r3, r6
 8009a16:	6023      	str	r3, [r4, #0]
 8009a18:	2000      	movs	r0, #0
 8009a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a1e:	462a      	mov	r2, r5
 8009a20:	f000 fab6 	bl	8009f90 <_realloc_r>
 8009a24:	4606      	mov	r6, r0
 8009a26:	2800      	cmp	r0, #0
 8009a28:	d1e0      	bne.n	80099ec <__ssputs_r+0x5c>
 8009a2a:	6921      	ldr	r1, [r4, #16]
 8009a2c:	4650      	mov	r0, sl
 8009a2e:	f7ff ff65 	bl	80098fc <_free_r>
 8009a32:	230c      	movs	r3, #12
 8009a34:	f8ca 3000 	str.w	r3, [sl]
 8009a38:	89a3      	ldrh	r3, [r4, #12]
 8009a3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a3e:	81a3      	strh	r3, [r4, #12]
 8009a40:	f04f 30ff 	mov.w	r0, #4294967295
 8009a44:	e7e9      	b.n	8009a1a <__ssputs_r+0x8a>
	...

08009a48 <_svfiprintf_r>:
 8009a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a4c:	4698      	mov	r8, r3
 8009a4e:	898b      	ldrh	r3, [r1, #12]
 8009a50:	061b      	lsls	r3, r3, #24
 8009a52:	b09d      	sub	sp, #116	@ 0x74
 8009a54:	4607      	mov	r7, r0
 8009a56:	460d      	mov	r5, r1
 8009a58:	4614      	mov	r4, r2
 8009a5a:	d510      	bpl.n	8009a7e <_svfiprintf_r+0x36>
 8009a5c:	690b      	ldr	r3, [r1, #16]
 8009a5e:	b973      	cbnz	r3, 8009a7e <_svfiprintf_r+0x36>
 8009a60:	2140      	movs	r1, #64	@ 0x40
 8009a62:	f7ff fe33 	bl	80096cc <_malloc_r>
 8009a66:	6028      	str	r0, [r5, #0]
 8009a68:	6128      	str	r0, [r5, #16]
 8009a6a:	b930      	cbnz	r0, 8009a7a <_svfiprintf_r+0x32>
 8009a6c:	230c      	movs	r3, #12
 8009a6e:	603b      	str	r3, [r7, #0]
 8009a70:	f04f 30ff 	mov.w	r0, #4294967295
 8009a74:	b01d      	add	sp, #116	@ 0x74
 8009a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a7a:	2340      	movs	r3, #64	@ 0x40
 8009a7c:	616b      	str	r3, [r5, #20]
 8009a7e:	2300      	movs	r3, #0
 8009a80:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a82:	2320      	movs	r3, #32
 8009a84:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a88:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a8c:	2330      	movs	r3, #48	@ 0x30
 8009a8e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009c2c <_svfiprintf_r+0x1e4>
 8009a92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a96:	f04f 0901 	mov.w	r9, #1
 8009a9a:	4623      	mov	r3, r4
 8009a9c:	469a      	mov	sl, r3
 8009a9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009aa2:	b10a      	cbz	r2, 8009aa8 <_svfiprintf_r+0x60>
 8009aa4:	2a25      	cmp	r2, #37	@ 0x25
 8009aa6:	d1f9      	bne.n	8009a9c <_svfiprintf_r+0x54>
 8009aa8:	ebba 0b04 	subs.w	fp, sl, r4
 8009aac:	d00b      	beq.n	8009ac6 <_svfiprintf_r+0x7e>
 8009aae:	465b      	mov	r3, fp
 8009ab0:	4622      	mov	r2, r4
 8009ab2:	4629      	mov	r1, r5
 8009ab4:	4638      	mov	r0, r7
 8009ab6:	f7ff ff6b 	bl	8009990 <__ssputs_r>
 8009aba:	3001      	adds	r0, #1
 8009abc:	f000 80a7 	beq.w	8009c0e <_svfiprintf_r+0x1c6>
 8009ac0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ac2:	445a      	add	r2, fp
 8009ac4:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ac6:	f89a 3000 	ldrb.w	r3, [sl]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	f000 809f 	beq.w	8009c0e <_svfiprintf_r+0x1c6>
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ad6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ada:	f10a 0a01 	add.w	sl, sl, #1
 8009ade:	9304      	str	r3, [sp, #16]
 8009ae0:	9307      	str	r3, [sp, #28]
 8009ae2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009ae6:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ae8:	4654      	mov	r4, sl
 8009aea:	2205      	movs	r2, #5
 8009aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009af0:	484e      	ldr	r0, [pc, #312]	@ (8009c2c <_svfiprintf_r+0x1e4>)
 8009af2:	f7f6 fb95 	bl	8000220 <memchr>
 8009af6:	9a04      	ldr	r2, [sp, #16]
 8009af8:	b9d8      	cbnz	r0, 8009b32 <_svfiprintf_r+0xea>
 8009afa:	06d0      	lsls	r0, r2, #27
 8009afc:	bf44      	itt	mi
 8009afe:	2320      	movmi	r3, #32
 8009b00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b04:	0711      	lsls	r1, r2, #28
 8009b06:	bf44      	itt	mi
 8009b08:	232b      	movmi	r3, #43	@ 0x2b
 8009b0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b0e:	f89a 3000 	ldrb.w	r3, [sl]
 8009b12:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b14:	d015      	beq.n	8009b42 <_svfiprintf_r+0xfa>
 8009b16:	9a07      	ldr	r2, [sp, #28]
 8009b18:	4654      	mov	r4, sl
 8009b1a:	2000      	movs	r0, #0
 8009b1c:	f04f 0c0a 	mov.w	ip, #10
 8009b20:	4621      	mov	r1, r4
 8009b22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b26:	3b30      	subs	r3, #48	@ 0x30
 8009b28:	2b09      	cmp	r3, #9
 8009b2a:	d94b      	bls.n	8009bc4 <_svfiprintf_r+0x17c>
 8009b2c:	b1b0      	cbz	r0, 8009b5c <_svfiprintf_r+0x114>
 8009b2e:	9207      	str	r2, [sp, #28]
 8009b30:	e014      	b.n	8009b5c <_svfiprintf_r+0x114>
 8009b32:	eba0 0308 	sub.w	r3, r0, r8
 8009b36:	fa09 f303 	lsl.w	r3, r9, r3
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	9304      	str	r3, [sp, #16]
 8009b3e:	46a2      	mov	sl, r4
 8009b40:	e7d2      	b.n	8009ae8 <_svfiprintf_r+0xa0>
 8009b42:	9b03      	ldr	r3, [sp, #12]
 8009b44:	1d19      	adds	r1, r3, #4
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	9103      	str	r1, [sp, #12]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	bfbb      	ittet	lt
 8009b4e:	425b      	neglt	r3, r3
 8009b50:	f042 0202 	orrlt.w	r2, r2, #2
 8009b54:	9307      	strge	r3, [sp, #28]
 8009b56:	9307      	strlt	r3, [sp, #28]
 8009b58:	bfb8      	it	lt
 8009b5a:	9204      	strlt	r2, [sp, #16]
 8009b5c:	7823      	ldrb	r3, [r4, #0]
 8009b5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b60:	d10a      	bne.n	8009b78 <_svfiprintf_r+0x130>
 8009b62:	7863      	ldrb	r3, [r4, #1]
 8009b64:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b66:	d132      	bne.n	8009bce <_svfiprintf_r+0x186>
 8009b68:	9b03      	ldr	r3, [sp, #12]
 8009b6a:	1d1a      	adds	r2, r3, #4
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	9203      	str	r2, [sp, #12]
 8009b70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b74:	3402      	adds	r4, #2
 8009b76:	9305      	str	r3, [sp, #20]
 8009b78:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009c3c <_svfiprintf_r+0x1f4>
 8009b7c:	7821      	ldrb	r1, [r4, #0]
 8009b7e:	2203      	movs	r2, #3
 8009b80:	4650      	mov	r0, sl
 8009b82:	f7f6 fb4d 	bl	8000220 <memchr>
 8009b86:	b138      	cbz	r0, 8009b98 <_svfiprintf_r+0x150>
 8009b88:	9b04      	ldr	r3, [sp, #16]
 8009b8a:	eba0 000a 	sub.w	r0, r0, sl
 8009b8e:	2240      	movs	r2, #64	@ 0x40
 8009b90:	4082      	lsls	r2, r0
 8009b92:	4313      	orrs	r3, r2
 8009b94:	3401      	adds	r4, #1
 8009b96:	9304      	str	r3, [sp, #16]
 8009b98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b9c:	4824      	ldr	r0, [pc, #144]	@ (8009c30 <_svfiprintf_r+0x1e8>)
 8009b9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ba2:	2206      	movs	r2, #6
 8009ba4:	f7f6 fb3c 	bl	8000220 <memchr>
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	d036      	beq.n	8009c1a <_svfiprintf_r+0x1d2>
 8009bac:	4b21      	ldr	r3, [pc, #132]	@ (8009c34 <_svfiprintf_r+0x1ec>)
 8009bae:	bb1b      	cbnz	r3, 8009bf8 <_svfiprintf_r+0x1b0>
 8009bb0:	9b03      	ldr	r3, [sp, #12]
 8009bb2:	3307      	adds	r3, #7
 8009bb4:	f023 0307 	bic.w	r3, r3, #7
 8009bb8:	3308      	adds	r3, #8
 8009bba:	9303      	str	r3, [sp, #12]
 8009bbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bbe:	4433      	add	r3, r6
 8009bc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bc2:	e76a      	b.n	8009a9a <_svfiprintf_r+0x52>
 8009bc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bc8:	460c      	mov	r4, r1
 8009bca:	2001      	movs	r0, #1
 8009bcc:	e7a8      	b.n	8009b20 <_svfiprintf_r+0xd8>
 8009bce:	2300      	movs	r3, #0
 8009bd0:	3401      	adds	r4, #1
 8009bd2:	9305      	str	r3, [sp, #20]
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	f04f 0c0a 	mov.w	ip, #10
 8009bda:	4620      	mov	r0, r4
 8009bdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009be0:	3a30      	subs	r2, #48	@ 0x30
 8009be2:	2a09      	cmp	r2, #9
 8009be4:	d903      	bls.n	8009bee <_svfiprintf_r+0x1a6>
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d0c6      	beq.n	8009b78 <_svfiprintf_r+0x130>
 8009bea:	9105      	str	r1, [sp, #20]
 8009bec:	e7c4      	b.n	8009b78 <_svfiprintf_r+0x130>
 8009bee:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bf2:	4604      	mov	r4, r0
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	e7f0      	b.n	8009bda <_svfiprintf_r+0x192>
 8009bf8:	ab03      	add	r3, sp, #12
 8009bfa:	9300      	str	r3, [sp, #0]
 8009bfc:	462a      	mov	r2, r5
 8009bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8009c38 <_svfiprintf_r+0x1f0>)
 8009c00:	a904      	add	r1, sp, #16
 8009c02:	4638      	mov	r0, r7
 8009c04:	f3af 8000 	nop.w
 8009c08:	1c42      	adds	r2, r0, #1
 8009c0a:	4606      	mov	r6, r0
 8009c0c:	d1d6      	bne.n	8009bbc <_svfiprintf_r+0x174>
 8009c0e:	89ab      	ldrh	r3, [r5, #12]
 8009c10:	065b      	lsls	r3, r3, #25
 8009c12:	f53f af2d 	bmi.w	8009a70 <_svfiprintf_r+0x28>
 8009c16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c18:	e72c      	b.n	8009a74 <_svfiprintf_r+0x2c>
 8009c1a:	ab03      	add	r3, sp, #12
 8009c1c:	9300      	str	r3, [sp, #0]
 8009c1e:	462a      	mov	r2, r5
 8009c20:	4b05      	ldr	r3, [pc, #20]	@ (8009c38 <_svfiprintf_r+0x1f0>)
 8009c22:	a904      	add	r1, sp, #16
 8009c24:	4638      	mov	r0, r7
 8009c26:	f000 f879 	bl	8009d1c <_printf_i>
 8009c2a:	e7ed      	b.n	8009c08 <_svfiprintf_r+0x1c0>
 8009c2c:	0800a7a4 	.word	0x0800a7a4
 8009c30:	0800a7ae 	.word	0x0800a7ae
 8009c34:	00000000 	.word	0x00000000
 8009c38:	08009991 	.word	0x08009991
 8009c3c:	0800a7aa 	.word	0x0800a7aa

08009c40 <_printf_common>:
 8009c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c44:	4616      	mov	r6, r2
 8009c46:	4698      	mov	r8, r3
 8009c48:	688a      	ldr	r2, [r1, #8]
 8009c4a:	690b      	ldr	r3, [r1, #16]
 8009c4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009c50:	4293      	cmp	r3, r2
 8009c52:	bfb8      	it	lt
 8009c54:	4613      	movlt	r3, r2
 8009c56:	6033      	str	r3, [r6, #0]
 8009c58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009c5c:	4607      	mov	r7, r0
 8009c5e:	460c      	mov	r4, r1
 8009c60:	b10a      	cbz	r2, 8009c66 <_printf_common+0x26>
 8009c62:	3301      	adds	r3, #1
 8009c64:	6033      	str	r3, [r6, #0]
 8009c66:	6823      	ldr	r3, [r4, #0]
 8009c68:	0699      	lsls	r1, r3, #26
 8009c6a:	bf42      	ittt	mi
 8009c6c:	6833      	ldrmi	r3, [r6, #0]
 8009c6e:	3302      	addmi	r3, #2
 8009c70:	6033      	strmi	r3, [r6, #0]
 8009c72:	6825      	ldr	r5, [r4, #0]
 8009c74:	f015 0506 	ands.w	r5, r5, #6
 8009c78:	d106      	bne.n	8009c88 <_printf_common+0x48>
 8009c7a:	f104 0a19 	add.w	sl, r4, #25
 8009c7e:	68e3      	ldr	r3, [r4, #12]
 8009c80:	6832      	ldr	r2, [r6, #0]
 8009c82:	1a9b      	subs	r3, r3, r2
 8009c84:	42ab      	cmp	r3, r5
 8009c86:	dc26      	bgt.n	8009cd6 <_printf_common+0x96>
 8009c88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009c8c:	6822      	ldr	r2, [r4, #0]
 8009c8e:	3b00      	subs	r3, #0
 8009c90:	bf18      	it	ne
 8009c92:	2301      	movne	r3, #1
 8009c94:	0692      	lsls	r2, r2, #26
 8009c96:	d42b      	bmi.n	8009cf0 <_printf_common+0xb0>
 8009c98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009c9c:	4641      	mov	r1, r8
 8009c9e:	4638      	mov	r0, r7
 8009ca0:	47c8      	blx	r9
 8009ca2:	3001      	adds	r0, #1
 8009ca4:	d01e      	beq.n	8009ce4 <_printf_common+0xa4>
 8009ca6:	6823      	ldr	r3, [r4, #0]
 8009ca8:	6922      	ldr	r2, [r4, #16]
 8009caa:	f003 0306 	and.w	r3, r3, #6
 8009cae:	2b04      	cmp	r3, #4
 8009cb0:	bf02      	ittt	eq
 8009cb2:	68e5      	ldreq	r5, [r4, #12]
 8009cb4:	6833      	ldreq	r3, [r6, #0]
 8009cb6:	1aed      	subeq	r5, r5, r3
 8009cb8:	68a3      	ldr	r3, [r4, #8]
 8009cba:	bf0c      	ite	eq
 8009cbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009cc0:	2500      	movne	r5, #0
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	bfc4      	itt	gt
 8009cc6:	1a9b      	subgt	r3, r3, r2
 8009cc8:	18ed      	addgt	r5, r5, r3
 8009cca:	2600      	movs	r6, #0
 8009ccc:	341a      	adds	r4, #26
 8009cce:	42b5      	cmp	r5, r6
 8009cd0:	d11a      	bne.n	8009d08 <_printf_common+0xc8>
 8009cd2:	2000      	movs	r0, #0
 8009cd4:	e008      	b.n	8009ce8 <_printf_common+0xa8>
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	4652      	mov	r2, sl
 8009cda:	4641      	mov	r1, r8
 8009cdc:	4638      	mov	r0, r7
 8009cde:	47c8      	blx	r9
 8009ce0:	3001      	adds	r0, #1
 8009ce2:	d103      	bne.n	8009cec <_printf_common+0xac>
 8009ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cec:	3501      	adds	r5, #1
 8009cee:	e7c6      	b.n	8009c7e <_printf_common+0x3e>
 8009cf0:	18e1      	adds	r1, r4, r3
 8009cf2:	1c5a      	adds	r2, r3, #1
 8009cf4:	2030      	movs	r0, #48	@ 0x30
 8009cf6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009cfa:	4422      	add	r2, r4
 8009cfc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009d00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009d04:	3302      	adds	r3, #2
 8009d06:	e7c7      	b.n	8009c98 <_printf_common+0x58>
 8009d08:	2301      	movs	r3, #1
 8009d0a:	4622      	mov	r2, r4
 8009d0c:	4641      	mov	r1, r8
 8009d0e:	4638      	mov	r0, r7
 8009d10:	47c8      	blx	r9
 8009d12:	3001      	adds	r0, #1
 8009d14:	d0e6      	beq.n	8009ce4 <_printf_common+0xa4>
 8009d16:	3601      	adds	r6, #1
 8009d18:	e7d9      	b.n	8009cce <_printf_common+0x8e>
	...

08009d1c <_printf_i>:
 8009d1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d20:	7e0f      	ldrb	r7, [r1, #24]
 8009d22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009d24:	2f78      	cmp	r7, #120	@ 0x78
 8009d26:	4691      	mov	r9, r2
 8009d28:	4680      	mov	r8, r0
 8009d2a:	460c      	mov	r4, r1
 8009d2c:	469a      	mov	sl, r3
 8009d2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009d32:	d807      	bhi.n	8009d44 <_printf_i+0x28>
 8009d34:	2f62      	cmp	r7, #98	@ 0x62
 8009d36:	d80a      	bhi.n	8009d4e <_printf_i+0x32>
 8009d38:	2f00      	cmp	r7, #0
 8009d3a:	f000 80d2 	beq.w	8009ee2 <_printf_i+0x1c6>
 8009d3e:	2f58      	cmp	r7, #88	@ 0x58
 8009d40:	f000 80b9 	beq.w	8009eb6 <_printf_i+0x19a>
 8009d44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009d4c:	e03a      	b.n	8009dc4 <_printf_i+0xa8>
 8009d4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009d52:	2b15      	cmp	r3, #21
 8009d54:	d8f6      	bhi.n	8009d44 <_printf_i+0x28>
 8009d56:	a101      	add	r1, pc, #4	@ (adr r1, 8009d5c <_printf_i+0x40>)
 8009d58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d5c:	08009db5 	.word	0x08009db5
 8009d60:	08009dc9 	.word	0x08009dc9
 8009d64:	08009d45 	.word	0x08009d45
 8009d68:	08009d45 	.word	0x08009d45
 8009d6c:	08009d45 	.word	0x08009d45
 8009d70:	08009d45 	.word	0x08009d45
 8009d74:	08009dc9 	.word	0x08009dc9
 8009d78:	08009d45 	.word	0x08009d45
 8009d7c:	08009d45 	.word	0x08009d45
 8009d80:	08009d45 	.word	0x08009d45
 8009d84:	08009d45 	.word	0x08009d45
 8009d88:	08009ec9 	.word	0x08009ec9
 8009d8c:	08009df3 	.word	0x08009df3
 8009d90:	08009e83 	.word	0x08009e83
 8009d94:	08009d45 	.word	0x08009d45
 8009d98:	08009d45 	.word	0x08009d45
 8009d9c:	08009eeb 	.word	0x08009eeb
 8009da0:	08009d45 	.word	0x08009d45
 8009da4:	08009df3 	.word	0x08009df3
 8009da8:	08009d45 	.word	0x08009d45
 8009dac:	08009d45 	.word	0x08009d45
 8009db0:	08009e8b 	.word	0x08009e8b
 8009db4:	6833      	ldr	r3, [r6, #0]
 8009db6:	1d1a      	adds	r2, r3, #4
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	6032      	str	r2, [r6, #0]
 8009dbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009dc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	e09d      	b.n	8009f04 <_printf_i+0x1e8>
 8009dc8:	6833      	ldr	r3, [r6, #0]
 8009dca:	6820      	ldr	r0, [r4, #0]
 8009dcc:	1d19      	adds	r1, r3, #4
 8009dce:	6031      	str	r1, [r6, #0]
 8009dd0:	0606      	lsls	r6, r0, #24
 8009dd2:	d501      	bpl.n	8009dd8 <_printf_i+0xbc>
 8009dd4:	681d      	ldr	r5, [r3, #0]
 8009dd6:	e003      	b.n	8009de0 <_printf_i+0xc4>
 8009dd8:	0645      	lsls	r5, r0, #25
 8009dda:	d5fb      	bpl.n	8009dd4 <_printf_i+0xb8>
 8009ddc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009de0:	2d00      	cmp	r5, #0
 8009de2:	da03      	bge.n	8009dec <_printf_i+0xd0>
 8009de4:	232d      	movs	r3, #45	@ 0x2d
 8009de6:	426d      	negs	r5, r5
 8009de8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009dec:	4859      	ldr	r0, [pc, #356]	@ (8009f54 <_printf_i+0x238>)
 8009dee:	230a      	movs	r3, #10
 8009df0:	e011      	b.n	8009e16 <_printf_i+0xfa>
 8009df2:	6821      	ldr	r1, [r4, #0]
 8009df4:	6833      	ldr	r3, [r6, #0]
 8009df6:	0608      	lsls	r0, r1, #24
 8009df8:	f853 5b04 	ldr.w	r5, [r3], #4
 8009dfc:	d402      	bmi.n	8009e04 <_printf_i+0xe8>
 8009dfe:	0649      	lsls	r1, r1, #25
 8009e00:	bf48      	it	mi
 8009e02:	b2ad      	uxthmi	r5, r5
 8009e04:	2f6f      	cmp	r7, #111	@ 0x6f
 8009e06:	4853      	ldr	r0, [pc, #332]	@ (8009f54 <_printf_i+0x238>)
 8009e08:	6033      	str	r3, [r6, #0]
 8009e0a:	bf14      	ite	ne
 8009e0c:	230a      	movne	r3, #10
 8009e0e:	2308      	moveq	r3, #8
 8009e10:	2100      	movs	r1, #0
 8009e12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009e16:	6866      	ldr	r6, [r4, #4]
 8009e18:	60a6      	str	r6, [r4, #8]
 8009e1a:	2e00      	cmp	r6, #0
 8009e1c:	bfa2      	ittt	ge
 8009e1e:	6821      	ldrge	r1, [r4, #0]
 8009e20:	f021 0104 	bicge.w	r1, r1, #4
 8009e24:	6021      	strge	r1, [r4, #0]
 8009e26:	b90d      	cbnz	r5, 8009e2c <_printf_i+0x110>
 8009e28:	2e00      	cmp	r6, #0
 8009e2a:	d04b      	beq.n	8009ec4 <_printf_i+0x1a8>
 8009e2c:	4616      	mov	r6, r2
 8009e2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009e32:	fb03 5711 	mls	r7, r3, r1, r5
 8009e36:	5dc7      	ldrb	r7, [r0, r7]
 8009e38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009e3c:	462f      	mov	r7, r5
 8009e3e:	42bb      	cmp	r3, r7
 8009e40:	460d      	mov	r5, r1
 8009e42:	d9f4      	bls.n	8009e2e <_printf_i+0x112>
 8009e44:	2b08      	cmp	r3, #8
 8009e46:	d10b      	bne.n	8009e60 <_printf_i+0x144>
 8009e48:	6823      	ldr	r3, [r4, #0]
 8009e4a:	07df      	lsls	r7, r3, #31
 8009e4c:	d508      	bpl.n	8009e60 <_printf_i+0x144>
 8009e4e:	6923      	ldr	r3, [r4, #16]
 8009e50:	6861      	ldr	r1, [r4, #4]
 8009e52:	4299      	cmp	r1, r3
 8009e54:	bfde      	ittt	le
 8009e56:	2330      	movle	r3, #48	@ 0x30
 8009e58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009e5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009e60:	1b92      	subs	r2, r2, r6
 8009e62:	6122      	str	r2, [r4, #16]
 8009e64:	f8cd a000 	str.w	sl, [sp]
 8009e68:	464b      	mov	r3, r9
 8009e6a:	aa03      	add	r2, sp, #12
 8009e6c:	4621      	mov	r1, r4
 8009e6e:	4640      	mov	r0, r8
 8009e70:	f7ff fee6 	bl	8009c40 <_printf_common>
 8009e74:	3001      	adds	r0, #1
 8009e76:	d14a      	bne.n	8009f0e <_printf_i+0x1f2>
 8009e78:	f04f 30ff 	mov.w	r0, #4294967295
 8009e7c:	b004      	add	sp, #16
 8009e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e82:	6823      	ldr	r3, [r4, #0]
 8009e84:	f043 0320 	orr.w	r3, r3, #32
 8009e88:	6023      	str	r3, [r4, #0]
 8009e8a:	4833      	ldr	r0, [pc, #204]	@ (8009f58 <_printf_i+0x23c>)
 8009e8c:	2778      	movs	r7, #120	@ 0x78
 8009e8e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009e92:	6823      	ldr	r3, [r4, #0]
 8009e94:	6831      	ldr	r1, [r6, #0]
 8009e96:	061f      	lsls	r7, r3, #24
 8009e98:	f851 5b04 	ldr.w	r5, [r1], #4
 8009e9c:	d402      	bmi.n	8009ea4 <_printf_i+0x188>
 8009e9e:	065f      	lsls	r7, r3, #25
 8009ea0:	bf48      	it	mi
 8009ea2:	b2ad      	uxthmi	r5, r5
 8009ea4:	6031      	str	r1, [r6, #0]
 8009ea6:	07d9      	lsls	r1, r3, #31
 8009ea8:	bf44      	itt	mi
 8009eaa:	f043 0320 	orrmi.w	r3, r3, #32
 8009eae:	6023      	strmi	r3, [r4, #0]
 8009eb0:	b11d      	cbz	r5, 8009eba <_printf_i+0x19e>
 8009eb2:	2310      	movs	r3, #16
 8009eb4:	e7ac      	b.n	8009e10 <_printf_i+0xf4>
 8009eb6:	4827      	ldr	r0, [pc, #156]	@ (8009f54 <_printf_i+0x238>)
 8009eb8:	e7e9      	b.n	8009e8e <_printf_i+0x172>
 8009eba:	6823      	ldr	r3, [r4, #0]
 8009ebc:	f023 0320 	bic.w	r3, r3, #32
 8009ec0:	6023      	str	r3, [r4, #0]
 8009ec2:	e7f6      	b.n	8009eb2 <_printf_i+0x196>
 8009ec4:	4616      	mov	r6, r2
 8009ec6:	e7bd      	b.n	8009e44 <_printf_i+0x128>
 8009ec8:	6833      	ldr	r3, [r6, #0]
 8009eca:	6825      	ldr	r5, [r4, #0]
 8009ecc:	6961      	ldr	r1, [r4, #20]
 8009ece:	1d18      	adds	r0, r3, #4
 8009ed0:	6030      	str	r0, [r6, #0]
 8009ed2:	062e      	lsls	r6, r5, #24
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	d501      	bpl.n	8009edc <_printf_i+0x1c0>
 8009ed8:	6019      	str	r1, [r3, #0]
 8009eda:	e002      	b.n	8009ee2 <_printf_i+0x1c6>
 8009edc:	0668      	lsls	r0, r5, #25
 8009ede:	d5fb      	bpl.n	8009ed8 <_printf_i+0x1bc>
 8009ee0:	8019      	strh	r1, [r3, #0]
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	6123      	str	r3, [r4, #16]
 8009ee6:	4616      	mov	r6, r2
 8009ee8:	e7bc      	b.n	8009e64 <_printf_i+0x148>
 8009eea:	6833      	ldr	r3, [r6, #0]
 8009eec:	1d1a      	adds	r2, r3, #4
 8009eee:	6032      	str	r2, [r6, #0]
 8009ef0:	681e      	ldr	r6, [r3, #0]
 8009ef2:	6862      	ldr	r2, [r4, #4]
 8009ef4:	2100      	movs	r1, #0
 8009ef6:	4630      	mov	r0, r6
 8009ef8:	f7f6 f992 	bl	8000220 <memchr>
 8009efc:	b108      	cbz	r0, 8009f02 <_printf_i+0x1e6>
 8009efe:	1b80      	subs	r0, r0, r6
 8009f00:	6060      	str	r0, [r4, #4]
 8009f02:	6863      	ldr	r3, [r4, #4]
 8009f04:	6123      	str	r3, [r4, #16]
 8009f06:	2300      	movs	r3, #0
 8009f08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f0c:	e7aa      	b.n	8009e64 <_printf_i+0x148>
 8009f0e:	6923      	ldr	r3, [r4, #16]
 8009f10:	4632      	mov	r2, r6
 8009f12:	4649      	mov	r1, r9
 8009f14:	4640      	mov	r0, r8
 8009f16:	47d0      	blx	sl
 8009f18:	3001      	adds	r0, #1
 8009f1a:	d0ad      	beq.n	8009e78 <_printf_i+0x15c>
 8009f1c:	6823      	ldr	r3, [r4, #0]
 8009f1e:	079b      	lsls	r3, r3, #30
 8009f20:	d413      	bmi.n	8009f4a <_printf_i+0x22e>
 8009f22:	68e0      	ldr	r0, [r4, #12]
 8009f24:	9b03      	ldr	r3, [sp, #12]
 8009f26:	4298      	cmp	r0, r3
 8009f28:	bfb8      	it	lt
 8009f2a:	4618      	movlt	r0, r3
 8009f2c:	e7a6      	b.n	8009e7c <_printf_i+0x160>
 8009f2e:	2301      	movs	r3, #1
 8009f30:	4632      	mov	r2, r6
 8009f32:	4649      	mov	r1, r9
 8009f34:	4640      	mov	r0, r8
 8009f36:	47d0      	blx	sl
 8009f38:	3001      	adds	r0, #1
 8009f3a:	d09d      	beq.n	8009e78 <_printf_i+0x15c>
 8009f3c:	3501      	adds	r5, #1
 8009f3e:	68e3      	ldr	r3, [r4, #12]
 8009f40:	9903      	ldr	r1, [sp, #12]
 8009f42:	1a5b      	subs	r3, r3, r1
 8009f44:	42ab      	cmp	r3, r5
 8009f46:	dcf2      	bgt.n	8009f2e <_printf_i+0x212>
 8009f48:	e7eb      	b.n	8009f22 <_printf_i+0x206>
 8009f4a:	2500      	movs	r5, #0
 8009f4c:	f104 0619 	add.w	r6, r4, #25
 8009f50:	e7f5      	b.n	8009f3e <_printf_i+0x222>
 8009f52:	bf00      	nop
 8009f54:	0800a7b5 	.word	0x0800a7b5
 8009f58:	0800a7c6 	.word	0x0800a7c6

08009f5c <memmove>:
 8009f5c:	4288      	cmp	r0, r1
 8009f5e:	b510      	push	{r4, lr}
 8009f60:	eb01 0402 	add.w	r4, r1, r2
 8009f64:	d902      	bls.n	8009f6c <memmove+0x10>
 8009f66:	4284      	cmp	r4, r0
 8009f68:	4623      	mov	r3, r4
 8009f6a:	d807      	bhi.n	8009f7c <memmove+0x20>
 8009f6c:	1e43      	subs	r3, r0, #1
 8009f6e:	42a1      	cmp	r1, r4
 8009f70:	d008      	beq.n	8009f84 <memmove+0x28>
 8009f72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f7a:	e7f8      	b.n	8009f6e <memmove+0x12>
 8009f7c:	4402      	add	r2, r0
 8009f7e:	4601      	mov	r1, r0
 8009f80:	428a      	cmp	r2, r1
 8009f82:	d100      	bne.n	8009f86 <memmove+0x2a>
 8009f84:	bd10      	pop	{r4, pc}
 8009f86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f8e:	e7f7      	b.n	8009f80 <memmove+0x24>

08009f90 <_realloc_r>:
 8009f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f94:	4680      	mov	r8, r0
 8009f96:	4615      	mov	r5, r2
 8009f98:	460c      	mov	r4, r1
 8009f9a:	b921      	cbnz	r1, 8009fa6 <_realloc_r+0x16>
 8009f9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fa0:	4611      	mov	r1, r2
 8009fa2:	f7ff bb93 	b.w	80096cc <_malloc_r>
 8009fa6:	b92a      	cbnz	r2, 8009fb4 <_realloc_r+0x24>
 8009fa8:	f7ff fca8 	bl	80098fc <_free_r>
 8009fac:	2400      	movs	r4, #0
 8009fae:	4620      	mov	r0, r4
 8009fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fb4:	f000 f81a 	bl	8009fec <_malloc_usable_size_r>
 8009fb8:	4285      	cmp	r5, r0
 8009fba:	4606      	mov	r6, r0
 8009fbc:	d802      	bhi.n	8009fc4 <_realloc_r+0x34>
 8009fbe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009fc2:	d8f4      	bhi.n	8009fae <_realloc_r+0x1e>
 8009fc4:	4629      	mov	r1, r5
 8009fc6:	4640      	mov	r0, r8
 8009fc8:	f7ff fb80 	bl	80096cc <_malloc_r>
 8009fcc:	4607      	mov	r7, r0
 8009fce:	2800      	cmp	r0, #0
 8009fd0:	d0ec      	beq.n	8009fac <_realloc_r+0x1c>
 8009fd2:	42b5      	cmp	r5, r6
 8009fd4:	462a      	mov	r2, r5
 8009fd6:	4621      	mov	r1, r4
 8009fd8:	bf28      	it	cs
 8009fda:	4632      	movcs	r2, r6
 8009fdc:	f7ff fc80 	bl	80098e0 <memcpy>
 8009fe0:	4621      	mov	r1, r4
 8009fe2:	4640      	mov	r0, r8
 8009fe4:	f7ff fc8a 	bl	80098fc <_free_r>
 8009fe8:	463c      	mov	r4, r7
 8009fea:	e7e0      	b.n	8009fae <_realloc_r+0x1e>

08009fec <_malloc_usable_size_r>:
 8009fec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ff0:	1f18      	subs	r0, r3, #4
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	bfbc      	itt	lt
 8009ff6:	580b      	ldrlt	r3, [r1, r0]
 8009ff8:	18c0      	addlt	r0, r0, r3
 8009ffa:	4770      	bx	lr

08009ffc <_init>:
 8009ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ffe:	bf00      	nop
 800a000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a002:	bc08      	pop	{r3}
 800a004:	469e      	mov	lr, r3
 800a006:	4770      	bx	lr

0800a008 <_fini>:
 800a008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a00a:	bf00      	nop
 800a00c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a00e:	bc08      	pop	{r3}
 800a010:	469e      	mov	lr, r3
 800a012:	4770      	bx	lr
