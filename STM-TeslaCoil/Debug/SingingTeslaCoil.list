
SingingTeslaCoil.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9bc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000868  0800cb90  0800cb90  0000db90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3f8  0800d3f8  0000f088  2**0
                  CONTENTS
  4 .ARM          00000008  0800d3f8  0800d3f8  0000e3f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d400  0800d400  0000f088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d400  0800d400  0000e400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d404  0800d404  0000e404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800d408  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043d8  20000088  0800d490  0000f088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004460  0800d490  0000f460  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c4ac  00000000  00000000  0000f0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046b7  00000000  00000000  0002b564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001930  00000000  00000000  0002fc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001377  00000000  00000000  00031550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002791e  00000000  00000000  000328c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021294  00000000  00000000  0005a1e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e000b  00000000  00000000  0007b479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015b484  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007390  00000000  00000000  0015b4c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00162858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cb74 	.word	0x0800cb74

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	0800cb74 	.word	0x0800cb74

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b96a 	b.w	8000f24 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	460c      	mov	r4, r1
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d14e      	bne.n	8000d12 <__udivmoddi4+0xaa>
 8000c74:	4694      	mov	ip, r2
 8000c76:	458c      	cmp	ip, r1
 8000c78:	4686      	mov	lr, r0
 8000c7a:	fab2 f282 	clz	r2, r2
 8000c7e:	d962      	bls.n	8000d46 <__udivmoddi4+0xde>
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0320 	rsb	r3, r2, #32
 8000c86:	4091      	lsls	r1, r2
 8000c88:	fa20 f303 	lsr.w	r3, r0, r3
 8000c8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c90:	4319      	orrs	r1, r3
 8000c92:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9a:	fa1f f68c 	uxth.w	r6, ip
 8000c9e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ca2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ca6:	fb07 1114 	mls	r1, r7, r4, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb04 f106 	mul.w	r1, r4, r6
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x64>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cbe:	f080 8112 	bcs.w	8000ee6 <__udivmoddi4+0x27e>
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	f240 810f 	bls.w	8000ee6 <__udivmoddi4+0x27e>
 8000cc8:	3c02      	subs	r4, #2
 8000cca:	4463      	add	r3, ip
 8000ccc:	1a59      	subs	r1, r3, r1
 8000cce:	fa1f f38e 	uxth.w	r3, lr
 8000cd2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cd6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb00 f606 	mul.w	r6, r0, r6
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x94>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cee:	f080 80fc 	bcs.w	8000eea <__udivmoddi4+0x282>
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	f240 80f9 	bls.w	8000eea <__udivmoddi4+0x282>
 8000cf8:	4463      	add	r3, ip
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d02:	2100      	movs	r1, #0
 8000d04:	b11d      	cbz	r5, 8000d0e <__udivmoddi4+0xa6>
 8000d06:	40d3      	lsrs	r3, r2
 8000d08:	2200      	movs	r2, #0
 8000d0a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d905      	bls.n	8000d22 <__udivmoddi4+0xba>
 8000d16:	b10d      	cbz	r5, 8000d1c <__udivmoddi4+0xb4>
 8000d18:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e7f5      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000d22:	fab3 f183 	clz	r1, r3
 8000d26:	2900      	cmp	r1, #0
 8000d28:	d146      	bne.n	8000db8 <__udivmoddi4+0x150>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d302      	bcc.n	8000d34 <__udivmoddi4+0xcc>
 8000d2e:	4290      	cmp	r0, r2
 8000d30:	f0c0 80f0 	bcc.w	8000f14 <__udivmoddi4+0x2ac>
 8000d34:	1a86      	subs	r6, r0, r2
 8000d36:	eb64 0303 	sbc.w	r3, r4, r3
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	2d00      	cmp	r5, #0
 8000d3e:	d0e6      	beq.n	8000d0e <__udivmoddi4+0xa6>
 8000d40:	e9c5 6300 	strd	r6, r3, [r5]
 8000d44:	e7e3      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	f040 8090 	bne.w	8000e6c <__udivmoddi4+0x204>
 8000d4c:	eba1 040c 	sub.w	r4, r1, ip
 8000d50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d54:	fa1f f78c 	uxth.w	r7, ip
 8000d58:	2101      	movs	r1, #1
 8000d5a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb08 4416 	mls	r4, r8, r6, r4
 8000d66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6a:	fb07 f006 	mul.w	r0, r7, r6
 8000d6e:	4298      	cmp	r0, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x11c>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x11a>
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	f200 80cd 	bhi.w	8000f1c <__udivmoddi4+0x2b4>
 8000d82:	4626      	mov	r6, r4
 8000d84:	1a1c      	subs	r4, r3, r0
 8000d86:	fa1f f38e 	uxth.w	r3, lr
 8000d8a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d8e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d96:	fb00 f707 	mul.w	r7, r0, r7
 8000d9a:	429f      	cmp	r7, r3
 8000d9c:	d908      	bls.n	8000db0 <__udivmoddi4+0x148>
 8000d9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000da2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x146>
 8000da8:	429f      	cmp	r7, r3
 8000daa:	f200 80b0 	bhi.w	8000f0e <__udivmoddi4+0x2a6>
 8000dae:	4620      	mov	r0, r4
 8000db0:	1bdb      	subs	r3, r3, r7
 8000db2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db6:	e7a5      	b.n	8000d04 <__udivmoddi4+0x9c>
 8000db8:	f1c1 0620 	rsb	r6, r1, #32
 8000dbc:	408b      	lsls	r3, r1
 8000dbe:	fa22 f706 	lsr.w	r7, r2, r6
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dc8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dcc:	ea43 030c 	orr.w	r3, r3, ip
 8000dd0:	40f4      	lsrs	r4, r6
 8000dd2:	fa00 f801 	lsl.w	r8, r0, r1
 8000dd6:	0c38      	lsrs	r0, r7, #16
 8000dd8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ddc:	fbb4 fef0 	udiv	lr, r4, r0
 8000de0:	fa1f fc87 	uxth.w	ip, r7
 8000de4:	fb00 441e 	mls	r4, r0, lr, r4
 8000de8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dec:	fb0e f90c 	mul.w	r9, lr, ip
 8000df0:	45a1      	cmp	r9, r4
 8000df2:	fa02 f201 	lsl.w	r2, r2, r1
 8000df6:	d90a      	bls.n	8000e0e <__udivmoddi4+0x1a6>
 8000df8:	193c      	adds	r4, r7, r4
 8000dfa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dfe:	f080 8084 	bcs.w	8000f0a <__udivmoddi4+0x2a2>
 8000e02:	45a1      	cmp	r9, r4
 8000e04:	f240 8081 	bls.w	8000f0a <__udivmoddi4+0x2a2>
 8000e08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e0c:	443c      	add	r4, r7
 8000e0e:	eba4 0409 	sub.w	r4, r4, r9
 8000e12:	fa1f f983 	uxth.w	r9, r3
 8000e16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e26:	45a4      	cmp	ip, r4
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x1d2>
 8000e2a:	193c      	adds	r4, r7, r4
 8000e2c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e30:	d267      	bcs.n	8000f02 <__udivmoddi4+0x29a>
 8000e32:	45a4      	cmp	ip, r4
 8000e34:	d965      	bls.n	8000f02 <__udivmoddi4+0x29a>
 8000e36:	3b02      	subs	r3, #2
 8000e38:	443c      	add	r4, r7
 8000e3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e42:	eba4 040c 	sub.w	r4, r4, ip
 8000e46:	429c      	cmp	r4, r3
 8000e48:	46ce      	mov	lr, r9
 8000e4a:	469c      	mov	ip, r3
 8000e4c:	d351      	bcc.n	8000ef2 <__udivmoddi4+0x28a>
 8000e4e:	d04e      	beq.n	8000eee <__udivmoddi4+0x286>
 8000e50:	b155      	cbz	r5, 8000e68 <__udivmoddi4+0x200>
 8000e52:	ebb8 030e 	subs.w	r3, r8, lr
 8000e56:	eb64 040c 	sbc.w	r4, r4, ip
 8000e5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e5e:	40cb      	lsrs	r3, r1
 8000e60:	431e      	orrs	r6, r3
 8000e62:	40cc      	lsrs	r4, r1
 8000e64:	e9c5 6400 	strd	r6, r4, [r5]
 8000e68:	2100      	movs	r1, #0
 8000e6a:	e750      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000e6c:	f1c2 0320 	rsb	r3, r2, #32
 8000e70:	fa20 f103 	lsr.w	r1, r0, r3
 8000e74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e78:	fa24 f303 	lsr.w	r3, r4, r3
 8000e7c:	4094      	lsls	r4, r2
 8000e7e:	430c      	orrs	r4, r1
 8000e80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e88:	fa1f f78c 	uxth.w	r7, ip
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3110 	mls	r1, r8, r0, r3
 8000e94:	0c23      	lsrs	r3, r4, #16
 8000e96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e9a:	fb00 f107 	mul.w	r1, r0, r7
 8000e9e:	4299      	cmp	r1, r3
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x24c>
 8000ea2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eaa:	d22c      	bcs.n	8000f06 <__udivmoddi4+0x29e>
 8000eac:	4299      	cmp	r1, r3
 8000eae:	d92a      	bls.n	8000f06 <__udivmoddi4+0x29e>
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	4463      	add	r3, ip
 8000eb4:	1a5b      	subs	r3, r3, r1
 8000eb6:	b2a4      	uxth	r4, r4
 8000eb8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ebc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ec0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ec4:	fb01 f307 	mul.w	r3, r1, r7
 8000ec8:	42a3      	cmp	r3, r4
 8000eca:	d908      	bls.n	8000ede <__udivmoddi4+0x276>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ed4:	d213      	bcs.n	8000efe <__udivmoddi4+0x296>
 8000ed6:	42a3      	cmp	r3, r4
 8000ed8:	d911      	bls.n	8000efe <__udivmoddi4+0x296>
 8000eda:	3902      	subs	r1, #2
 8000edc:	4464      	add	r4, ip
 8000ede:	1ae4      	subs	r4, r4, r3
 8000ee0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ee4:	e739      	b.n	8000d5a <__udivmoddi4+0xf2>
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	e6f0      	b.n	8000ccc <__udivmoddi4+0x64>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e706      	b.n	8000cfc <__udivmoddi4+0x94>
 8000eee:	45c8      	cmp	r8, r9
 8000ef0:	d2ae      	bcs.n	8000e50 <__udivmoddi4+0x1e8>
 8000ef2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ef6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000efa:	3801      	subs	r0, #1
 8000efc:	e7a8      	b.n	8000e50 <__udivmoddi4+0x1e8>
 8000efe:	4631      	mov	r1, r6
 8000f00:	e7ed      	b.n	8000ede <__udivmoddi4+0x276>
 8000f02:	4603      	mov	r3, r0
 8000f04:	e799      	b.n	8000e3a <__udivmoddi4+0x1d2>
 8000f06:	4630      	mov	r0, r6
 8000f08:	e7d4      	b.n	8000eb4 <__udivmoddi4+0x24c>
 8000f0a:	46d6      	mov	lr, sl
 8000f0c:	e77f      	b.n	8000e0e <__udivmoddi4+0x1a6>
 8000f0e:	4463      	add	r3, ip
 8000f10:	3802      	subs	r0, #2
 8000f12:	e74d      	b.n	8000db0 <__udivmoddi4+0x148>
 8000f14:	4606      	mov	r6, r0
 8000f16:	4623      	mov	r3, r4
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e70f      	b.n	8000d3c <__udivmoddi4+0xd4>
 8000f1c:	3e02      	subs	r6, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	e730      	b.n	8000d84 <__udivmoddi4+0x11c>
 8000f22:	bf00      	nop

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4a07      	ldr	r2, [pc, #28]	@ (8000f54 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	4a06      	ldr	r2, [pc, #24]	@ (8000f58 <vApplicationGetIdleTaskMemory+0x30>)
 8000f3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2280      	movs	r2, #128	@ 0x80
 8000f44:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f46:	bf00      	nop
 8000f48:	3714      	adds	r7, #20
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	200000a4 	.word	0x200000a4
 8000f58:	200000f8 	.word	0x200000f8

08000f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f5e:	f2ad 4dd4 	subw	sp, sp, #1236	@ 0x4d4
 8000f62:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f64:	f001 fb80 	bl	8002668 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f68:	f000 f8c8 	bl	80010fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f6c:	f000 fa16 	bl	800139c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f70:	f000 f9ea 	bl	8001348 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000f74:	f004 fa6e 	bl	8005454 <MX_FATFS_Init>
  MX_SPI1_Init();
 8000f78:	f000 f92c 	bl	80011d4 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000f7c:	f000 f960 	bl	8001240 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  myprintf("start of program ");
 8000f80:	4853      	ldr	r0, [pc, #332]	@ (80010d0 <main+0x174>)
 8000f82:	f001 fb21 	bl	80025c8 <myprintf>

  FIL fp;        // for midi file operation
  FATFS FatFs; 	//Fatfs handle
  MIDI_header_chunk hdr; // to container header info
  FRESULT res;
  MIDI_controller *ctrl = malloc(sizeof(MIDI_controller));
 8000f86:	2014      	movs	r0, #20
 8000f88:	f00a f986 	bl	800b298 <malloc>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4


  // uint8_t i = 0;

  osDelay(1000);
 8000f92:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f96:	f007 fb71 	bl	800867c <osDelay>

  res = f_mount(&FatFs, "/", 1); //1=mount now
 8000f9a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	494c      	ldr	r1, [pc, #304]	@ (80010d4 <main+0x178>)
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f006 fc60 	bl	8007868 <f_mount>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	f887 34c3 	strb.w	r3, [r7, #1219]	@ 0x4c3
       if (res != FR_OK) {
 8000fae:	f897 34c3 	ldrb.w	r3, [r7, #1219]	@ 0x4c3
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d007      	beq.n	8000fc6 <main+0x6a>
     	myprintf("f_mount error (%i)\r\n", res);
 8000fb6:	f897 34c3 	ldrb.w	r3, [r7, #1219]	@ 0x4c3
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4846      	ldr	r0, [pc, #280]	@ (80010d8 <main+0x17c>)
 8000fbe:	f001 fb03 	bl	80025c8 <myprintf>
     	while(1);
 8000fc2:	bf00      	nop
 8000fc4:	e7fd      	b.n	8000fc2 <main+0x66>
   * twinkle.mid --> no chords && format 0
   * gerudo.mid --> TONS of chords (3 notes) && format 1
   * mario.mid --> unkown midi event 10
   * shoveit.mid --> broken as well
   * */
  res = f_open(&fp, "twinkle.mid", FA_READ | FA_WRITE);
 8000fc6:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8000fca:	2203      	movs	r2, #3
 8000fcc:	4943      	ldr	r1, [pc, #268]	@ (80010dc <main+0x180>)
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f006 fcae 	bl	8007930 <f_open>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	f887 34c3 	strb.w	r3, [r7, #1219]	@ 0x4c3

  if (res != FR_OK)
 8000fda:	f897 34c3 	ldrb.w	r3, [r7, #1219]	@ 0x4c3
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d007      	beq.n	8000ff2 <main+0x96>
  {
      myprintf("fopen error: %d\n", res);
 8000fe2:	f897 34c3 	ldrb.w	r3, [r7, #1219]	@ 0x4c3
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	483d      	ldr	r0, [pc, #244]	@ (80010e0 <main+0x184>)
 8000fea:	f001 faed 	bl	80025c8 <myprintf>
      while(1);
 8000fee:	bf00      	nop
 8000ff0:	e7fd      	b.n	8000fee <main+0x92>
  }


  hdr = parse_midi_header(&fp, hdr); // grabs header info
 8000ff2:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8000ff6:	f2a3 447c 	subw	r4, r3, #1148	@ 0x47c
 8000ffa:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8000ffe:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8001002:	f507 7524 	add.w	r5, r7, #656	@ 0x290
 8001006:	466e      	mov	r6, sp
 8001008:	f103 0208 	add.w	r2, r3, #8
 800100c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001010:	e886 0003 	stmia.w	r6, {r0, r1}
 8001014:	cb0c      	ldmia	r3, {r2, r3}
 8001016:	4629      	mov	r1, r5
 8001018:	4620      	mov	r0, r4
 800101a:	f000 ff9b 	bl	8001f54 <parse_midi_header>

  ctrl->format = hdr.format;
 800101e:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8001022:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8001026:	891b      	ldrh	r3, [r3, #8]
 8001028:	b2da      	uxtb	r2, r3
 800102a:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 800102e:	741a      	strb	r2, [r3, #16]
  if(hdr.format == 0){
 8001030:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8001034:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8001038:	891b      	ldrh	r3, [r3, #8]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d104      	bne.n	8001048 <main+0xec>
	  ctrl->trk_buf = &fp;
 800103e:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 8001042:	f507 7224 	add.w	r2, r7, #656	@ 0x290
 8001046:	609a      	str	r2, [r3, #8]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of NoteQueue1 */
  osMessageQDef(NoteQueue1, 16, note);
 8001048:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800104c:	f2a3 438c 	subw	r3, r3, #1164	@ 0x48c
 8001050:	4a24      	ldr	r2, [pc, #144]	@ (80010e4 <main+0x188>)
 8001052:	461c      	mov	r4, r3
 8001054:	4613      	mov	r3, r2
 8001056:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001058:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  NoteQueue1Handle = osMessageCreate(osMessageQ(NoteQueue1), NULL);
 800105c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f007 fbe7 	bl	8008836 <osMessageCreate>
 8001068:	4603      	mov	r3, r0
 800106a:	4a1f      	ldr	r2, [pc, #124]	@ (80010e8 <main+0x18c>)
 800106c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ParseMidi */
  osThreadDef(ParseMidi, StartParseMidi, osPriorityNormal, 0, 128);
 800106e:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8001072:	f5a3 6395 	sub.w	r3, r3, #1192	@ 0x4a8
 8001076:	4a1d      	ldr	r2, [pc, #116]	@ (80010ec <main+0x190>)
 8001078:	461c      	mov	r4, r3
 800107a:	4615      	mov	r5, r2
 800107c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800107e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001080:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001084:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ParseMidiHandle = osThreadCreate(osThread(ParseMidi), (void*) ctrl);
 8001088:	f107 0320 	add.w	r3, r7, #32
 800108c:	f8d7 14c4 	ldr.w	r1, [r7, #1220]	@ 0x4c4
 8001090:	4618      	mov	r0, r3
 8001092:	f007 faa7 	bl	80085e4 <osThreadCreate>
 8001096:	4603      	mov	r3, r0
 8001098:	4a15      	ldr	r2, [pc, #84]	@ (80010f0 <main+0x194>)
 800109a:	6013      	str	r3, [r2, #0]

  /* definition and creation of AudioOutput */
  osThreadDef(AudioOutput, StartAudioOutput, osPriorityNormal, 0, 128);
 800109c:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 80010a0:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 80010a4:	4a13      	ldr	r2, [pc, #76]	@ (80010f4 <main+0x198>)
 80010a6:	461c      	mov	r4, r3
 80010a8:	4615      	mov	r5, r2
 80010aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AudioOutputHandle = osThreadCreate(osThread(AudioOutput), (void*) ctrl);
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	f8d7 14c4 	ldr.w	r1, [r7, #1220]	@ 0x4c4
 80010bc:	4618      	mov	r0, r3
 80010be:	f007 fa91 	bl	80085e4 <osThreadCreate>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4a0c      	ldr	r2, [pc, #48]	@ (80010f8 <main+0x19c>)
 80010c6:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80010c8:	f007 fa85 	bl	80085d6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <main+0x170>
 80010d0:	0800cb90 	.word	0x0800cb90
 80010d4:	0800cba4 	.word	0x0800cba4
 80010d8:	0800cba8 	.word	0x0800cba8
 80010dc:	0800cbc0 	.word	0x0800cbc0
 80010e0:	0800cbcc 	.word	0x0800cbcc
 80010e4:	0800cbe0 	.word	0x0800cbe0
 80010e8:	200003e8 	.word	0x200003e8
 80010ec:	0800cbfc 	.word	0x0800cbfc
 80010f0:	200003e0 	.word	0x200003e0
 80010f4:	0800cc24 	.word	0x0800cc24
 80010f8:	200003e4 	.word	0x200003e4

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b094      	sub	sp, #80	@ 0x50
 8001100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	f107 031c 	add.w	r3, r7, #28
 8001106:	2234      	movs	r2, #52	@ 0x34
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f00a f9bc 	bl	800b488 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001110:	f107 0308 	add.w	r3, r7, #8
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001120:	2300      	movs	r3, #0
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	4b29      	ldr	r3, [pc, #164]	@ (80011cc <SystemClock_Config+0xd0>)
 8001126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001128:	4a28      	ldr	r2, [pc, #160]	@ (80011cc <SystemClock_Config+0xd0>)
 800112a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800112e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001130:	4b26      	ldr	r3, [pc, #152]	@ (80011cc <SystemClock_Config+0xd0>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001134:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800113c:	2300      	movs	r3, #0
 800113e:	603b      	str	r3, [r7, #0]
 8001140:	4b23      	ldr	r3, [pc, #140]	@ (80011d0 <SystemClock_Config+0xd4>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001148:	4a21      	ldr	r2, [pc, #132]	@ (80011d0 <SystemClock_Config+0xd4>)
 800114a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	4b1f      	ldr	r3, [pc, #124]	@ (80011d0 <SystemClock_Config+0xd4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001158:	603b      	str	r3, [r7, #0]
 800115a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800115c:	2302      	movs	r3, #2
 800115e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001160:	2301      	movs	r3, #1
 8001162:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001164:	2310      	movs	r3, #16
 8001166:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001168:	2302      	movs	r3, #2
 800116a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800116c:	2300      	movs	r3, #0
 800116e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001170:	2308      	movs	r3, #8
 8001172:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001174:	2348      	movs	r3, #72	@ 0x48
 8001176:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001178:	2302      	movs	r3, #2
 800117a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800117c:	2302      	movs	r3, #2
 800117e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001180:	2302      	movs	r3, #2
 8001182:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001184:	f107 031c 	add.w	r3, r7, #28
 8001188:	4618      	mov	r0, r3
 800118a:	f002 f835 	bl	80031f8 <HAL_RCC_OscConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001194:	f000 f9ba 	bl	800150c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001198:	230f      	movs	r3, #15
 800119a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800119c:	2302      	movs	r3, #2
 800119e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80011a0:	2380      	movs	r3, #128	@ 0x80
 80011a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011ae:	f107 0308 	add.w	r3, r7, #8
 80011b2:	2101      	movs	r1, #1
 80011b4:	4618      	mov	r0, r3
 80011b6:	f001 fd29 	bl	8002c0c <HAL_RCC_ClockConfig>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80011c0:	f000 f9a4 	bl	800150c <Error_Handler>
  }
}
 80011c4:	bf00      	nop
 80011c6:	3750      	adds	r7, #80	@ 0x50
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40007000 	.word	0x40007000

080011d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011d8:	4b17      	ldr	r3, [pc, #92]	@ (8001238 <MX_SPI1_Init+0x64>)
 80011da:	4a18      	ldr	r2, [pc, #96]	@ (800123c <MX_SPI1_Init+0x68>)
 80011dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011de:	4b16      	ldr	r3, [pc, #88]	@ (8001238 <MX_SPI1_Init+0x64>)
 80011e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011e6:	4b14      	ldr	r3, [pc, #80]	@ (8001238 <MX_SPI1_Init+0x64>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011ec:	4b12      	ldr	r3, [pc, #72]	@ (8001238 <MX_SPI1_Init+0x64>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f2:	4b11      	ldr	r3, [pc, #68]	@ (8001238 <MX_SPI1_Init+0x64>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001238 <MX_SPI1_Init+0x64>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001238 <MX_SPI1_Init+0x64>)
 8001200:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001204:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001206:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <MX_SPI1_Init+0x64>)
 8001208:	2210      	movs	r2, #16
 800120a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800120c:	4b0a      	ldr	r3, [pc, #40]	@ (8001238 <MX_SPI1_Init+0x64>)
 800120e:	2200      	movs	r2, #0
 8001210:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001212:	4b09      	ldr	r3, [pc, #36]	@ (8001238 <MX_SPI1_Init+0x64>)
 8001214:	2200      	movs	r2, #0
 8001216:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001218:	4b07      	ldr	r3, [pc, #28]	@ (8001238 <MX_SPI1_Init+0x64>)
 800121a:	2200      	movs	r2, #0
 800121c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800121e:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <MX_SPI1_Init+0x64>)
 8001220:	220a      	movs	r2, #10
 8001222:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001224:	4804      	ldr	r0, [pc, #16]	@ (8001238 <MX_SPI1_Init+0x64>)
 8001226:	f002 fa85 	bl	8003734 <HAL_SPI_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001230:	f000 f96c 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	200002f8 	.word	0x200002f8
 800123c:	40013000 	.word	0x40013000

08001240 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b092      	sub	sp, #72	@ 0x48
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001246:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001250:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
 8001260:	615a      	str	r2, [r3, #20]
 8001262:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	2220      	movs	r2, #32
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f00a f90c 	bl	800b488 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001270:	4b33      	ldr	r3, [pc, #204]	@ (8001340 <MX_TIM1_Init+0x100>)
 8001272:	4a34      	ldr	r2, [pc, #208]	@ (8001344 <MX_TIM1_Init+0x104>)
 8001274:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 18000;
 8001276:	4b32      	ldr	r3, [pc, #200]	@ (8001340 <MX_TIM1_Init+0x100>)
 8001278:	f244 6250 	movw	r2, #18000	@ 0x4650
 800127c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127e:	4b30      	ldr	r3, [pc, #192]	@ (8001340 <MX_TIM1_Init+0x100>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001284:	4b2e      	ldr	r3, [pc, #184]	@ (8001340 <MX_TIM1_Init+0x100>)
 8001286:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800128a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128c:	4b2c      	ldr	r3, [pc, #176]	@ (8001340 <MX_TIM1_Init+0x100>)
 800128e:	2200      	movs	r2, #0
 8001290:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001292:	4b2b      	ldr	r3, [pc, #172]	@ (8001340 <MX_TIM1_Init+0x100>)
 8001294:	2200      	movs	r2, #0
 8001296:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001298:	4b29      	ldr	r3, [pc, #164]	@ (8001340 <MX_TIM1_Init+0x100>)
 800129a:	2200      	movs	r2, #0
 800129c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800129e:	4828      	ldr	r0, [pc, #160]	@ (8001340 <MX_TIM1_Init+0x100>)
 80012a0:	f002 ff64 	bl	800416c <HAL_TIM_PWM_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80012aa:	f000 f92f 	bl	800150c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ae:	2300      	movs	r3, #0
 80012b0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012b6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012ba:	4619      	mov	r1, r3
 80012bc:	4820      	ldr	r0, [pc, #128]	@ (8001340 <MX_TIM1_Init+0x100>)
 80012be:	f003 fbdb 	bl	8004a78 <HAL_TIMEx_MasterConfigSynchronization>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80012c8:	f000 f920 	bl	800150c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012cc:	2360      	movs	r3, #96	@ 0x60
 80012ce:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012d8:	2300      	movs	r3, #0
 80012da:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012dc:	2300      	movs	r3, #0
 80012de:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012e0:	2300      	movs	r3, #0
 80012e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012e4:	2300      	movs	r3, #0
 80012e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ec:	2200      	movs	r2, #0
 80012ee:	4619      	mov	r1, r3
 80012f0:	4813      	ldr	r0, [pc, #76]	@ (8001340 <MX_TIM1_Init+0x100>)
 80012f2:	f003 f87b 	bl	80043ec <HAL_TIM_PWM_ConfigChannel>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80012fc:	f000 f906 	bl	800150c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001314:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001318:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800131a:	2300      	movs	r3, #0
 800131c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	4619      	mov	r1, r3
 8001322:	4807      	ldr	r0, [pc, #28]	@ (8001340 <MX_TIM1_Init+0x100>)
 8001324:	f003 fc24 	bl	8004b70 <HAL_TIMEx_ConfigBreakDeadTime>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 800132e:	f000 f8ed 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001332:	4803      	ldr	r0, [pc, #12]	@ (8001340 <MX_TIM1_Init+0x100>)
 8001334:	f000 ff68 	bl	8002208 <HAL_TIM_MspPostInit>

}
 8001338:	bf00      	nop
 800133a:	3748      	adds	r7, #72	@ 0x48
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000350 	.word	0x20000350
 8001344:	40010000 	.word	0x40010000

08001348 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800134c:	4b11      	ldr	r3, [pc, #68]	@ (8001394 <MX_USART2_UART_Init+0x4c>)
 800134e:	4a12      	ldr	r2, [pc, #72]	@ (8001398 <MX_USART2_UART_Init+0x50>)
 8001350:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001352:	4b10      	ldr	r3, [pc, #64]	@ (8001394 <MX_USART2_UART_Init+0x4c>)
 8001354:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001358:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800135a:	4b0e      	ldr	r3, [pc, #56]	@ (8001394 <MX_USART2_UART_Init+0x4c>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001360:	4b0c      	ldr	r3, [pc, #48]	@ (8001394 <MX_USART2_UART_Init+0x4c>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001366:	4b0b      	ldr	r3, [pc, #44]	@ (8001394 <MX_USART2_UART_Init+0x4c>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800136c:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <MX_USART2_UART_Init+0x4c>)
 800136e:	220c      	movs	r2, #12
 8001370:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001372:	4b08      	ldr	r3, [pc, #32]	@ (8001394 <MX_USART2_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001378:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <MX_USART2_UART_Init+0x4c>)
 800137a:	2200      	movs	r2, #0
 800137c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800137e:	4805      	ldr	r0, [pc, #20]	@ (8001394 <MX_USART2_UART_Init+0x4c>)
 8001380:	f003 fc5c 	bl	8004c3c <HAL_UART_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800138a:	f000 f8bf 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000398 	.word	0x20000398
 8001398:	40004400 	.word	0x40004400

0800139c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b0:	2300      	movs	r3, #0
 80013b2:	603b      	str	r3, [r7, #0]
 80013b4:	4b10      	ldr	r3, [pc, #64]	@ (80013f8 <MX_GPIO_Init+0x5c>)
 80013b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b8:	4a0f      	ldr	r2, [pc, #60]	@ (80013f8 <MX_GPIO_Init+0x5c>)
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c0:	4b0d      	ldr	r3, [pc, #52]	@ (80013f8 <MX_GPIO_Init+0x5c>)
 80013c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	603b      	str	r3, [r7, #0]
 80013ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2110      	movs	r1, #16
 80013d0:	480a      	ldr	r0, [pc, #40]	@ (80013fc <MX_GPIO_Init+0x60>)
 80013d2:	f001 fc01 	bl	8002bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin;
 80013d6:	2310      	movs	r3, #16
 80013d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013da:	2301      	movs	r3, #1
 80013dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CS_PIN_GPIO_Port, &GPIO_InitStruct);
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	4619      	mov	r1, r3
 80013ea:	4804      	ldr	r0, [pc, #16]	@ (80013fc <MX_GPIO_Init+0x60>)
 80013ec:	f001 fa60 	bl	80028b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013f0:	bf00      	nop
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40020000 	.word	0x40020000

08001400 <StartParseMidi>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartParseMidi */
void StartParseMidi(void const * argument)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	  MIDI_controller* ctrl = (MIDI_controller*)argument;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	60bb      	str	r3, [r7, #8]
    switch(ctrl->format){
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	7c1b      	ldrb	r3, [r3, #16]
 8001410:	2b02      	cmp	r3, #2
 8001412:	d011      	beq.n	8001438 <StartParseMidi+0x38>
 8001414:	2b02      	cmp	r3, #2
 8001416:	dc13      	bgt.n	8001440 <StartParseMidi+0x40>
 8001418:	2b00      	cmp	r3, #0
 800141a:	d002      	beq.n	8001422 <StartParseMidi+0x22>
 800141c:	2b01      	cmp	r3, #1
 800141e:	d007      	beq.n	8001430 <StartParseMidi+0x30>
 8001420:	e00e      	b.n	8001440 <StartParseMidi+0x40>
    case 0:
    	play_one_track(ctrl->trk_buf, ctrl);
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	68b9      	ldr	r1, [r7, #8]
 8001428:	4618      	mov	r0, r3
 800142a:	f000 fceb 	bl	8001e04 <play_one_track>
    	break;
 800142e:	e007      	b.n	8001440 <StartParseMidi+0x40>
    case 1:
    	myprintf("CASE 1 NOT SUPPORTED...yet\n");
 8001430:	480b      	ldr	r0, [pc, #44]	@ (8001460 <StartParseMidi+0x60>)
 8001432:	f001 f8c9 	bl	80025c8 <myprintf>
    	break;
 8001436:	e003      	b.n	8001440 <StartParseMidi+0x40>
    case 2:
    	myprintf("CASE 2 NOT SUPPORTED <3\n");
 8001438:	480a      	ldr	r0, [pc, #40]	@ (8001464 <StartParseMidi+0x64>)
 800143a:	f001 f8c5 	bl	80025c8 <myprintf>
    	break;
 800143e:	bf00      	nop
    }

    uint8_t cnt = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
    for(;;)
    {

    	myprintf("in parse %d\n", cnt);
 8001444:	7bfb      	ldrb	r3, [r7, #15]
 8001446:	4619      	mov	r1, r3
 8001448:	4807      	ldr	r0, [pc, #28]	@ (8001468 <StartParseMidi+0x68>)
 800144a:	f001 f8bd 	bl	80025c8 <myprintf>
    	osDelay(1000);
 800144e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001452:	f007 f913 	bl	800867c <osDelay>
    	cnt++;
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	3301      	adds	r3, #1
 800145a:	73fb      	strb	r3, [r7, #15]
    	myprintf("in parse %d\n", cnt);
 800145c:	bf00      	nop
 800145e:	e7f1      	b.n	8001444 <StartParseMidi+0x44>
 8001460:	0800cc40 	.word	0x0800cc40
 8001464:	0800cc5c 	.word	0x0800cc5c
 8001468:	0800cc78 	.word	0x0800cc78

0800146c <StartAudioOutput>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAudioOutput */
void StartAudioOutput(void const * argument)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAudioOutput */

	myprintf("start of audio output\n");
 8001474:	4818      	ldr	r0, [pc, #96]	@ (80014d8 <StartAudioOutput+0x6c>)
 8001476:	f001 f8a7 	bl	80025c8 <myprintf>
	MIDI_controller* ctrl = (MIDI_controller*)argument;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	61bb      	str	r3, [r7, #24]

	note* recieved_note = malloc(sizeof(note));
 800147e:	200c      	movs	r0, #12
 8001480:	f009 ff0a 	bl	800b298 <malloc>
 8001484:	4603      	mov	r3, r0
 8001486:	617b      	str	r3, [r7, #20]
	uint8_t cnt = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	77fb      	strb	r3, [r7, #31]

  /* Infinite loop */
  for(;;)
  {
	  osEvent res;
	  res = osMessageGet(ctrl->queue, osWaitForever);
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	68d9      	ldr	r1, [r3, #12]
 8001490:	f107 0308 	add.w	r3, r7, #8
 8001494:	f04f 32ff 	mov.w	r2, #4294967295
 8001498:	4618      	mov	r0, r3
 800149a:	f007 fa35 	bl	8008908 <osMessageGet>

	  recieved_note = (note*)res.value.p;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	617b      	str	r3, [r7, #20]

	  myprintf("note # %d recieved \n", recieved_note->number);
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	4619      	mov	r1, r3
 80014a8:	480c      	ldr	r0, [pc, #48]	@ (80014dc <StartAudioOutput+0x70>)
 80014aa:	f001 f88d 	bl	80025c8 <myprintf>


	  if(res.status != osOK){
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d004      	beq.n	80014be <StartAudioOutput+0x52>
		  myprintf("osMessageGet error with code %x\n", res.status);
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	4619      	mov	r1, r3
 80014b8:	4809      	ldr	r0, [pc, #36]	@ (80014e0 <StartAudioOutput+0x74>)
 80014ba:	f001 f885 	bl	80025c8 <myprintf>
	  }

			myprintf("in output %d\n", cnt);
 80014be:	7ffb      	ldrb	r3, [r7, #31]
 80014c0:	4619      	mov	r1, r3
 80014c2:	4808      	ldr	r0, [pc, #32]	@ (80014e4 <StartAudioOutput+0x78>)
 80014c4:	f001 f880 	bl	80025c8 <myprintf>
	    	osDelay(1000);
 80014c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014cc:	f007 f8d6 	bl	800867c <osDelay>
	    	cnt++;
 80014d0:	7ffb      	ldrb	r3, [r7, #31]
 80014d2:	3301      	adds	r3, #1
 80014d4:	77fb      	strb	r3, [r7, #31]
  {
 80014d6:	e7d9      	b.n	800148c <StartAudioOutput+0x20>
 80014d8:	0800cc88 	.word	0x0800cc88
 80014dc:	0800cca0 	.word	0x0800cca0
 80014e0:	0800ccb8 	.word	0x0800ccb8
 80014e4:	0800ccdc 	.word	0x0800ccdc

080014e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a04      	ldr	r2, [pc, #16]	@ (8001508 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d101      	bne.n	80014fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014fa:	f001 f8d7 	bl	80026ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40002000 	.word	0x40002000

0800150c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001510:	b672      	cpsid	i
}
 8001512:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001514:	bf00      	nop
 8001516:	e7fd      	b.n	8001514 <Error_Handler+0x8>

08001518 <note_on_event>:
#include <stdlib.h>
#include <math.h>



void note_on_event(struct note* note, FIL* fp, uint32_t delta_time, MIDI_controller *ctrl){
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
 8001524:	603b      	str	r3, [r7, #0]

      uint16_t ms;
      note = malloc(sizeof(note));
 8001526:	2004      	movs	r0, #4
 8001528:	f009 feb6 	bl	800b298 <malloc>
 800152c:	4603      	mov	r3, r0
 800152e:	60fb      	str	r3, [r7, #12]
      ms = delta_time_to_ms(delta_time, ctrl);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	b2db      	uxtb	r3, r3
 8001534:	6839      	ldr	r1, [r7, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f001 f813 	bl	8002562 <delta_time_to_ms>
 800153c:	4603      	mov	r3, r0
 800153e:	82fb      	strh	r3, [r7, #22]
      osStatus res;

      note->on_off = true;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2201      	movs	r2, #1
 8001544:	721a      	strb	r2, [r3, #8]
      note->ms = ms;
 8001546:	8afb      	ldrh	r3, [r7, #22]
 8001548:	b2da      	uxtb	r2, r3
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	725a      	strb	r2, [r3, #9]




      f_read(fp, note->number, 1, NULL);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	4619      	mov	r1, r3
 8001554:	2300      	movs	r3, #0
 8001556:	2201      	movs	r2, #1
 8001558:	68b8      	ldr	r0, [r7, #8]
 800155a:	f006 fbaa 	bl	8007cb2 <f_read>
      f_read(fp, note->velocity, 1, NULL);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	785b      	ldrb	r3, [r3, #1]
 8001562:	4619      	mov	r1, r3
 8001564:	2300      	movs	r3, #0
 8001566:	2201      	movs	r2, #1
 8001568:	68b8      	ldr	r0, [r7, #8]
 800156a:	f006 fba2 	bl	8007cb2 <f_read>
      note->frequency = 440 * pow(2.0, (note->number - 69) / 12.0);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	3b45      	subs	r3, #69	@ 0x45
 8001574:	4618      	mov	r0, r3
 8001576:	f7fe fff5 	bl	8000564 <__aeabi_i2d>
 800157a:	f04f 0200 	mov.w	r2, #0
 800157e:	4b22      	ldr	r3, [pc, #136]	@ (8001608 <note_on_event+0xf0>)
 8001580:	f7ff f984 	bl	800088c <__aeabi_ddiv>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	ec43 2b17 	vmov	d7, r2, r3
 800158c:	eeb0 1a47 	vmov.f32	s2, s14
 8001590:	eef0 1a67 	vmov.f32	s3, s15
 8001594:	ed9f 0b1a 	vldr	d0, [pc, #104]	@ 8001600 <note_on_event+0xe8>
 8001598:	f00a fb8c 	bl	800bcb4 <pow>
 800159c:	ec51 0b10 	vmov	r0, r1, d0
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	4b19      	ldr	r3, [pc, #100]	@ (800160c <note_on_event+0xf4>)
 80015a6:	f7ff f847 	bl	8000638 <__aeabi_dmul>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4610      	mov	r0, r2
 80015b0:	4619      	mov	r1, r3
 80015b2:	f7ff faf1 	bl	8000b98 <__aeabi_d2f>
 80015b6:	4602      	mov	r2, r0
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	605a      	str	r2, [r3, #4]

//      myprintf("Note On @ Channel: 0x%x\n", channel);
//      myprintf("note frequency %f Hz\n", note->frequency);
//      myprintf("note timing in ms %x\n\n", ms);

      myprintf("before message put in note on");
 80015bc:	4814      	ldr	r0, [pc, #80]	@ (8001610 <note_on_event+0xf8>)
 80015be:	f001 f803 	bl	80025c8 <myprintf>
      	  res = osMessagePut(ctrl->queue, note, osWaitForever);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	68f9      	ldr	r1, [r7, #12]
 80015c8:	f04f 32ff 	mov.w	r2, #4294967295
 80015cc:	4618      	mov	r0, r3
 80015ce:	f007 f95b 	bl	8008888 <osMessagePut>
 80015d2:	6138      	str	r0, [r7, #16]
      	myprintf("before message after put");
 80015d4:	480f      	ldr	r0, [pc, #60]	@ (8001614 <note_on_event+0xfc>)
 80015d6:	f000 fff7 	bl	80025c8 <myprintf>
          if(res != osOK){
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <note_on_event+0xd0>
          	myprintf("error in osMessagePut %d\n", res);
 80015e0:	6939      	ldr	r1, [r7, #16]
 80015e2:	480d      	ldr	r0, [pc, #52]	@ (8001618 <note_on_event+0x100>)
 80015e4:	f000 fff0 	bl	80025c8 <myprintf>
          }

          myprintf("note number in PARSE %x\n", note->number);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	4619      	mov	r1, r3
 80015ee:	480b      	ldr	r0, [pc, #44]	@ (800161c <note_on_event+0x104>)
 80015f0:	f000 ffea 	bl	80025c8 <myprintf>

      //play note
//     free(note);

      // skip_midi_event(fp, midi_type);
}
 80015f4:	bf00      	nop
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	f3af 8000 	nop.w
 8001600:	00000000 	.word	0x00000000
 8001604:	40000000 	.word	0x40000000
 8001608:	40280000 	.word	0x40280000
 800160c:	407b8000 	.word	0x407b8000
 8001610:	0800ccec 	.word	0x0800ccec
 8001614:	0800cd0c 	.word	0x0800cd0c
 8001618:	0800cd28 	.word	0x0800cd28
 800161c:	0800cd44 	.word	0x0800cd44

08001620 <note_off_event>:

void note_off_event(struct note* note, FIL* fp, uint32_t delta_time, MIDI_controller *ctrl){
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
 800162c:	603b      	str	r3, [r7, #0]


    uint16_t ms;
    ms = delta_time_to_ms(delta_time, ctrl);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	6839      	ldr	r1, [r7, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f000 ff94 	bl	8002562 <delta_time_to_ms>
 800163a:	4603      	mov	r3, r0
 800163c:	82fb      	strh	r3, [r7, #22]
    note = malloc(sizeof(note));
 800163e:	2004      	movs	r0, #4
 8001640:	f009 fe2a 	bl	800b298 <malloc>
 8001644:	4603      	mov	r3, r0
 8001646:	60fb      	str	r3, [r7, #12]
    osStatus res;

    note->on_off = false;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2200      	movs	r2, #0
 800164c:	721a      	strb	r2, [r3, #8]
    note->ms = ms;
 800164e:	8afb      	ldrh	r3, [r7, #22]
 8001650:	b2da      	uxtb	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	725a      	strb	r2, [r3, #9]

    f_read(fp,note->number, 1, NULL);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	4619      	mov	r1, r3
 800165c:	2300      	movs	r3, #0
 800165e:	2201      	movs	r2, #1
 8001660:	68b8      	ldr	r0, [r7, #8]
 8001662:	f006 fb26 	bl	8007cb2 <f_read>
    f_read(fp,note->velocity, 1, NULL);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	785b      	ldrb	r3, [r3, #1]
 800166a:	4619      	mov	r1, r3
 800166c:	2300      	movs	r3, #0
 800166e:	2201      	movs	r2, #1
 8001670:	68b8      	ldr	r0, [r7, #8]
 8001672:	f006 fb1e 	bl	8007cb2 <f_read>
    note->frequency = 440 * pow(2.0, (note->number - 69) / 12.0);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	3b45      	subs	r3, #69	@ 0x45
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe ff71 	bl	8000564 <__aeabi_i2d>
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	4b20      	ldr	r3, [pc, #128]	@ (8001708 <note_off_event+0xe8>)
 8001688:	f7ff f900 	bl	800088c <__aeabi_ddiv>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	ec43 2b17 	vmov	d7, r2, r3
 8001694:	eeb0 1a47 	vmov.f32	s2, s14
 8001698:	eef0 1a67 	vmov.f32	s3, s15
 800169c:	ed9f 0b18 	vldr	d0, [pc, #96]	@ 8001700 <note_off_event+0xe0>
 80016a0:	f00a fb08 	bl	800bcb4 <pow>
 80016a4:	ec51 0b10 	vmov	r0, r1, d0
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	4b17      	ldr	r3, [pc, #92]	@ (800170c <note_off_event+0xec>)
 80016ae:	f7fe ffc3 	bl	8000638 <__aeabi_dmul>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4610      	mov	r0, r2
 80016b8:	4619      	mov	r1, r3
 80016ba:	f7ff fa6d 	bl	8000b98 <__aeabi_d2f>
 80016be:	4602      	mov	r2, r0
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	605a      	str	r2, [r3, #4]

    //is there space?

    //send note to queue

    myprintf("before message put in note off");
 80016c4:	4812      	ldr	r0, [pc, #72]	@ (8001710 <note_off_event+0xf0>)
 80016c6:	f000 ff7f 	bl	80025c8 <myprintf>
    // skip_midi_event(fp, midi_type);
    res = osMessagePut(ctrl->queue, (uint32_t)note, osWaitForever);
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	68f9      	ldr	r1, [r7, #12]
 80016d0:	f04f 32ff 	mov.w	r2, #4294967295
 80016d4:	4618      	mov	r0, r3
 80016d6:	f007 f8d7 	bl	8008888 <osMessagePut>
 80016da:	6138      	str	r0, [r7, #16]
    if(res != osOK){
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <note_off_event+0xca>
    	myprintf("error in osMessagePut %d\n", res);
 80016e2:	6939      	ldr	r1, [r7, #16]
 80016e4:	480b      	ldr	r0, [pc, #44]	@ (8001714 <note_off_event+0xf4>)
 80016e6:	f000 ff6f 	bl	80025c8 <myprintf>
    }

    myprintf("note number in PARSE %x\n", note->number);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	4619      	mov	r1, r3
 80016f0:	4809      	ldr	r0, [pc, #36]	@ (8001718 <note_off_event+0xf8>)
 80016f2:	f000 ff69 	bl	80025c8 <myprintf>


}
 80016f6:	bf00      	nop
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	00000000 	.word	0x00000000
 8001704:	40000000 	.word	0x40000000
 8001708:	40280000 	.word	0x40280000
 800170c:	407b8000 	.word	0x407b8000
 8001710:	0800cd60 	.word	0x0800cd60
 8001714:	0800cd28 	.word	0x0800cd28
 8001718:	0800cd44 	.word	0x0800cd44

0800171c <midi_event_handler>:
 * @param fp FIL pointer to midi FIL
 * @param delta_time time before next event is read in ticks
 * @param event handle for event type
 * @param ctrl contains system information for controls*/
void midi_event_handler(FIL *fp, uint32_t delta_time, uint8_t event, MIDI_controller *ctrl)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	4613      	mov	r3, r2
 800172a:	71fb      	strb	r3, [r7, #7]
    uint8_t midi_type;
    uint8_t channel;
    struct note* note;

    midi_type = 0xF0 & event; // event name
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	f023 030f 	bic.w	r3, r3, #15
 8001732:	75fb      	strb	r3, [r7, #23]
    channel = 0x0F & event;   // where the event gets sent *** for polyphonic music
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	75bb      	strb	r3, [r7, #22]

    // myprintf("Midi Type: 0x%x\n", midi_type);

    switch (midi_type)
 800173c:	7dfb      	ldrb	r3, [r7, #23]
 800173e:	2be0      	cmp	r3, #224	@ 0xe0
 8001740:	d03f      	beq.n	80017c2 <midi_event_handler+0xa6>
 8001742:	2be0      	cmp	r3, #224	@ 0xe0
 8001744:	dc43      	bgt.n	80017ce <midi_event_handler+0xb2>
 8001746:	2bd0      	cmp	r3, #208	@ 0xd0
 8001748:	d035      	beq.n	80017b6 <midi_event_handler+0x9a>
 800174a:	2bd0      	cmp	r3, #208	@ 0xd0
 800174c:	dc3f      	bgt.n	80017ce <midi_event_handler+0xb2>
 800174e:	2bc0      	cmp	r3, #192	@ 0xc0
 8001750:	d02b      	beq.n	80017aa <midi_event_handler+0x8e>
 8001752:	2bc0      	cmp	r3, #192	@ 0xc0
 8001754:	dc3b      	bgt.n	80017ce <midi_event_handler+0xb2>
 8001756:	2bb0      	cmp	r3, #176	@ 0xb0
 8001758:	d021      	beq.n	800179e <midi_event_handler+0x82>
 800175a:	2bb0      	cmp	r3, #176	@ 0xb0
 800175c:	dc37      	bgt.n	80017ce <midi_event_handler+0xb2>
 800175e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001760:	d014      	beq.n	800178c <midi_event_handler+0x70>
 8001762:	2ba0      	cmp	r3, #160	@ 0xa0
 8001764:	dc33      	bgt.n	80017ce <midi_event_handler+0xb2>
 8001766:	2b80      	cmp	r3, #128	@ 0x80
 8001768:	d002      	beq.n	8001770 <midi_event_handler+0x54>
 800176a:	2b90      	cmp	r3, #144	@ 0x90
 800176c:	d007      	beq.n	800177e <midi_event_handler+0x62>
 800176e:	e02e      	b.n	80017ce <midi_event_handler+0xb2>
    {
    case 0x80: // Note Off
    	note_off_event(note, fp, delta_time, ctrl);
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	68f9      	ldr	r1, [r7, #12]
 8001776:	6938      	ldr	r0, [r7, #16]
 8001778:	f7ff ff52 	bl	8001620 <note_off_event>
        break;
 800177c:	e032      	b.n	80017e4 <midi_event_handler+0xc8>

    case 0x90: // Note On
    	note_on_event(note, fp, delta_time, ctrl);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	68ba      	ldr	r2, [r7, #8]
 8001782:	68f9      	ldr	r1, [r7, #12]
 8001784:	6938      	ldr	r0, [r7, #16]
 8001786:	f7ff fec7 	bl	8001518 <note_on_event>
        break;
 800178a:	e02b      	b.n	80017e4 <midi_event_handler+0xc8>

    case 0xA0: // Polyphonic Key Pressure (Aftertouch)
        myprintf("Polyphonic Key Pressure\n");
 800178c:	4817      	ldr	r0, [pc, #92]	@ (80017ec <midi_event_handler+0xd0>)
 800178e:	f000 ff1b 	bl	80025c8 <myprintf>
        skip_midi_event(fp, midi_type);
 8001792:	7dfb      	ldrb	r3, [r7, #23]
 8001794:	4619      	mov	r1, r3
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f000 fa5e 	bl	8001c58 <skip_midi_event>
        break;
 800179c:	e022      	b.n	80017e4 <midi_event_handler+0xc8>

    case 0xB0: // Control Change
        skip_midi_event(fp, midi_type);
 800179e:	7dfb      	ldrb	r3, [r7, #23]
 80017a0:	4619      	mov	r1, r3
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f000 fa58 	bl	8001c58 <skip_midi_event>
        break;
 80017a8:	e01c      	b.n	80017e4 <midi_event_handler+0xc8>

    case 0xC0: // Program Change
        // changes instrument type
        skip_midi_event(fp, midi_type);
 80017aa:	7dfb      	ldrb	r3, [r7, #23]
 80017ac:	4619      	mov	r1, r3
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f000 fa52 	bl	8001c58 <skip_midi_event>
        break;
 80017b4:	e016      	b.n	80017e4 <midi_event_handler+0xc8>

    case 0xD0: // Channel Pressure (Aftertouch)
        skip_midi_event(fp, midi_type);
 80017b6:	7dfb      	ldrb	r3, [r7, #23]
 80017b8:	4619      	mov	r1, r3
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f000 fa4c 	bl	8001c58 <skip_midi_event>
        break;
 80017c0:	e010      	b.n	80017e4 <midi_event_handler+0xc8>

    case 0xE0: // Pitch Bend Change

        skip_midi_event(fp, midi_type);
 80017c2:	7dfb      	ldrb	r3, [r7, #23]
 80017c4:	4619      	mov	r1, r3
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f000 fa46 	bl	8001c58 <skip_midi_event>
        break;
 80017cc:	e00a      	b.n	80017e4 <midi_event_handler+0xc8>

    default:
        myprintf("Unknown MIDI Type Handler: 0x%x\n", midi_type);
 80017ce:	7dfb      	ldrb	r3, [r7, #23]
 80017d0:	4619      	mov	r1, r3
 80017d2:	4807      	ldr	r0, [pc, #28]	@ (80017f0 <midi_event_handler+0xd4>)
 80017d4:	f000 fef8 	bl	80025c8 <myprintf>
        skip_midi_event(fp, midi_type);
 80017d8:	7dfb      	ldrb	r3, [r7, #23]
 80017da:	4619      	mov	r1, r3
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f000 fa3b 	bl	8001c58 <skip_midi_event>
        break;
 80017e2:	bf00      	nop
    }
}
 80017e4:	bf00      	nop
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	0800cd80 	.word	0x0800cd80
 80017f0:	0800cd9c 	.word	0x0800cd9c

080017f4 <meta_event_handler>:
 * @param delta_time time before next event is read in ticks
 * @param event handle for event type
 * @param ctrl contains system information for controls
 * @return 0 on success -1 if failure*/
uint8_t meta_event_handler(FIL *fp, uint32_t delta_time, MIDI_controller *ctrl)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08c      	sub	sp, #48	@ 0x30
 80017f8:	af02      	add	r7, sp, #8
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
    Delta time
    FF (signifies meta event)
    Event Code (1 byte)
    */

    f_read(fp, &meta_type, 1, NULL);
 8001800:	f107 011b 	add.w	r1, r7, #27
 8001804:	2300      	movs	r3, #0
 8001806:	2201      	movs	r2, #1
 8001808:	68f8      	ldr	r0, [r7, #12]
 800180a:	f006 fa52 	bl	8007cb2 <f_read>

    switch (meta_type)
 800180e:	7efb      	ldrb	r3, [r7, #27]
 8001810:	2b59      	cmp	r3, #89	@ 0x59
 8001812:	f300 80bd 	bgt.w	8001990 <meta_event_handler+0x19c>
 8001816:	2b00      	cmp	r3, #0
 8001818:	f2c0 81ca 	blt.w	8001bb0 <meta_event_handler+0x3bc>
 800181c:	2b59      	cmp	r3, #89	@ 0x59
 800181e:	f200 81c7 	bhi.w	8001bb0 <meta_event_handler+0x3bc>
 8001822:	a201      	add	r2, pc, #4	@ (adr r2, 8001828 <meta_event_handler+0x34>)
 8001824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001828:	08001999 	.word	0x08001999
 800182c:	080019a7 	.word	0x080019a7
 8001830:	080019b5 	.word	0x080019b5
 8001834:	080019c3 	.word	0x080019c3
 8001838:	08001a27 	.word	0x08001a27
 800183c:	08001a35 	.word	0x08001a35
 8001840:	08001a43 	.word	0x08001a43
 8001844:	08001a51 	.word	0x08001a51
 8001848:	08001bb1 	.word	0x08001bb1
 800184c:	08001bb1 	.word	0x08001bb1
 8001850:	08001bb1 	.word	0x08001bb1
 8001854:	08001bb1 	.word	0x08001bb1
 8001858:	08001bb1 	.word	0x08001bb1
 800185c:	08001bb1 	.word	0x08001bb1
 8001860:	08001bb1 	.word	0x08001bb1
 8001864:	08001bb1 	.word	0x08001bb1
 8001868:	08001bb1 	.word	0x08001bb1
 800186c:	08001bb1 	.word	0x08001bb1
 8001870:	08001bb1 	.word	0x08001bb1
 8001874:	08001bb1 	.word	0x08001bb1
 8001878:	08001bb1 	.word	0x08001bb1
 800187c:	08001bb1 	.word	0x08001bb1
 8001880:	08001bb1 	.word	0x08001bb1
 8001884:	08001bb1 	.word	0x08001bb1
 8001888:	08001bb1 	.word	0x08001bb1
 800188c:	08001bb1 	.word	0x08001bb1
 8001890:	08001bb1 	.word	0x08001bb1
 8001894:	08001bb1 	.word	0x08001bb1
 8001898:	08001bb1 	.word	0x08001bb1
 800189c:	08001bb1 	.word	0x08001bb1
 80018a0:	08001bb1 	.word	0x08001bb1
 80018a4:	08001bb1 	.word	0x08001bb1
 80018a8:	08001a5f 	.word	0x08001a5f
 80018ac:	08001bb1 	.word	0x08001bb1
 80018b0:	08001bb1 	.word	0x08001bb1
 80018b4:	08001bb1 	.word	0x08001bb1
 80018b8:	08001bb1 	.word	0x08001bb1
 80018bc:	08001bb1 	.word	0x08001bb1
 80018c0:	08001bb1 	.word	0x08001bb1
 80018c4:	08001bb1 	.word	0x08001bb1
 80018c8:	08001bb1 	.word	0x08001bb1
 80018cc:	08001bb1 	.word	0x08001bb1
 80018d0:	08001bb1 	.word	0x08001bb1
 80018d4:	08001bb1 	.word	0x08001bb1
 80018d8:	08001bb1 	.word	0x08001bb1
 80018dc:	08001bb1 	.word	0x08001bb1
 80018e0:	08001bb1 	.word	0x08001bb1
 80018e4:	08001a6d 	.word	0x08001a6d
 80018e8:	08001bb1 	.word	0x08001bb1
 80018ec:	08001bb1 	.word	0x08001bb1
 80018f0:	08001bb1 	.word	0x08001bb1
 80018f4:	08001bb1 	.word	0x08001bb1
 80018f8:	08001bb1 	.word	0x08001bb1
 80018fc:	08001bb1 	.word	0x08001bb1
 8001900:	08001bb1 	.word	0x08001bb1
 8001904:	08001bb1 	.word	0x08001bb1
 8001908:	08001bb1 	.word	0x08001bb1
 800190c:	08001bb1 	.word	0x08001bb1
 8001910:	08001bb1 	.word	0x08001bb1
 8001914:	08001bb1 	.word	0x08001bb1
 8001918:	08001bb1 	.word	0x08001bb1
 800191c:	08001bb1 	.word	0x08001bb1
 8001920:	08001bb1 	.word	0x08001bb1
 8001924:	08001bb1 	.word	0x08001bb1
 8001928:	08001bb1 	.word	0x08001bb1
 800192c:	08001bb1 	.word	0x08001bb1
 8001930:	08001bb1 	.word	0x08001bb1
 8001934:	08001bb1 	.word	0x08001bb1
 8001938:	08001bb1 	.word	0x08001bb1
 800193c:	08001bb1 	.word	0x08001bb1
 8001940:	08001bb1 	.word	0x08001bb1
 8001944:	08001bb1 	.word	0x08001bb1
 8001948:	08001bb1 	.word	0x08001bb1
 800194c:	08001bb1 	.word	0x08001bb1
 8001950:	08001bb1 	.word	0x08001bb1
 8001954:	08001bb1 	.word	0x08001bb1
 8001958:	08001bb1 	.word	0x08001bb1
 800195c:	08001bb1 	.word	0x08001bb1
 8001960:	08001bb1 	.word	0x08001bb1
 8001964:	08001bb1 	.word	0x08001bb1
 8001968:	08001bb1 	.word	0x08001bb1
 800196c:	08001a83 	.word	0x08001a83
 8001970:	08001bb1 	.word	0x08001bb1
 8001974:	08001bb1 	.word	0x08001bb1
 8001978:	08001aff 	.word	0x08001aff
 800197c:	08001bb1 	.word	0x08001bb1
 8001980:	08001bb1 	.word	0x08001bb1
 8001984:	08001bb1 	.word	0x08001bb1
 8001988:	08001b0d 	.word	0x08001b0d
 800198c:	08001b69 	.word	0x08001b69
 8001990:	2b7f      	cmp	r3, #127	@ 0x7f
 8001992:	f000 8109 	beq.w	8001ba8 <meta_event_handler+0x3b4>
 8001996:	e10b      	b.n	8001bb0 <meta_event_handler+0x3bc>
    {
    case 0x00:
        myprintf("Handle Sequence Number event\n");
 8001998:	488d      	ldr	r0, [pc, #564]	@ (8001bd0 <meta_event_handler+0x3dc>)
 800199a:	f000 fe15 	bl	80025c8 <myprintf>
        skip_meta_event(fp);
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f000 f942 	bl	8001c28 <skip_meta_event>

        break;
 80019a4:	e10e      	b.n	8001bc4 <meta_event_handler+0x3d0>
    case 0x01:
        myprintf("Handle Text Event\n");
 80019a6:	488b      	ldr	r0, [pc, #556]	@ (8001bd4 <meta_event_handler+0x3e0>)
 80019a8:	f000 fe0e 	bl	80025c8 <myprintf>
        skip_meta_event(fp);
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f000 f93b 	bl	8001c28 <skip_meta_event>
        break;
 80019b2:	e107      	b.n	8001bc4 <meta_event_handler+0x3d0>
    case 0x02:
        myprintf("Handle Copyright Notice\n");
 80019b4:	4888      	ldr	r0, [pc, #544]	@ (8001bd8 <meta_event_handler+0x3e4>)
 80019b6:	f000 fe07 	bl	80025c8 <myprintf>
        skip_meta_event(fp);
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f000 f934 	bl	8001c28 <skip_meta_event>
        break;
 80019c0:	e100      	b.n	8001bc4 <meta_event_handler+0x3d0>
    case 0x03:
        myprintf("Track Name\n");
 80019c2:	4886      	ldr	r0, [pc, #536]	@ (8001bdc <meta_event_handler+0x3e8>)
 80019c4:	f000 fe00 	bl	80025c8 <myprintf>
        event_len = decode_vlq(fp);
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f000 fdad 	bl	8002528 <decode_vlq>
 80019ce:	4603      	mov	r3, r0
 80019d0:	617b      	str	r3, [r7, #20]
        int i = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	627b      	str	r3, [r7, #36]	@ 0x24

        buf = malloc(sizeof(uint8_t) * event_len);
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	4618      	mov	r0, r3
 80019da:	f009 fc5d 	bl	800b298 <malloc>
 80019de:	4603      	mov	r3, r0
 80019e0:	623b      	str	r3, [r7, #32]
        if (!buf)
 80019e2:	6a3b      	ldr	r3, [r7, #32]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d104      	bne.n	80019f2 <meta_event_handler+0x1fe>
        {
            myprintf("Malloc Failed in track name\n");
 80019e8:	487d      	ldr	r0, [pc, #500]	@ (8001be0 <meta_event_handler+0x3ec>)
 80019ea:	f000 fded 	bl	80025c8 <myprintf>
            return -1;
 80019ee:	23ff      	movs	r3, #255	@ 0xff
 80019f0:	e0e9      	b.n	8001bc6 <meta_event_handler+0x3d2>
        }

        f_read(fp, buf, event_len, NULL);
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	2300      	movs	r3, #0
 80019f6:	6a39      	ldr	r1, [r7, #32]
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f006 f95a 	bl	8007cb2 <f_read>

        // prints track name
        while (i < event_len)
 80019fe:	e00a      	b.n	8001a16 <meta_event_handler+0x222>
        {
            myprintf("%c", buf[i]);
 8001a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a02:	6a3a      	ldr	r2, [r7, #32]
 8001a04:	4413      	add	r3, r2
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4876      	ldr	r0, [pc, #472]	@ (8001be4 <meta_event_handler+0x3f0>)
 8001a0c:	f000 fddc 	bl	80025c8 <myprintf>
            i++;
 8001a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a12:	3301      	adds	r3, #1
 8001a14:	627b      	str	r3, [r7, #36]	@ 0x24
        while (i < event_len)
 8001a16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d3f0      	bcc.n	8001a00 <meta_event_handler+0x20c>
        }

        myprintf("\n\n");
 8001a1e:	4872      	ldr	r0, [pc, #456]	@ (8001be8 <meta_event_handler+0x3f4>)
 8001a20:	f000 fdd2 	bl	80025c8 <myprintf>

        // skip_meta_event(fp);
        break;
 8001a24:	e0ce      	b.n	8001bc4 <meta_event_handler+0x3d0>
    case 0x04:
        myprintf("Handle Instrument Name\n");
 8001a26:	4871      	ldr	r0, [pc, #452]	@ (8001bec <meta_event_handler+0x3f8>)
 8001a28:	f000 fdce 	bl	80025c8 <myprintf>
        skip_meta_event(fp);
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f000 f8fb 	bl	8001c28 <skip_meta_event>
        break;
 8001a32:	e0c7      	b.n	8001bc4 <meta_event_handler+0x3d0>
    case 0x05:
        myprintf("Handle Lyric Text\n");
 8001a34:	486e      	ldr	r0, [pc, #440]	@ (8001bf0 <meta_event_handler+0x3fc>)
 8001a36:	f000 fdc7 	bl	80025c8 <myprintf>
        skip_meta_event(fp);
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 f8f4 	bl	8001c28 <skip_meta_event>
        break;
 8001a40:	e0c0      	b.n	8001bc4 <meta_event_handler+0x3d0>
    case 0x06:
        myprintf("Handle Marker Text\n");
 8001a42:	486c      	ldr	r0, [pc, #432]	@ (8001bf4 <meta_event_handler+0x400>)
 8001a44:	f000 fdc0 	bl	80025c8 <myprintf>
        skip_meta_event(fp);
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	f000 f8ed 	bl	8001c28 <skip_meta_event>
        break;
 8001a4e:	e0b9      	b.n	8001bc4 <meta_event_handler+0x3d0>
    case 0x07:
        myprintf("Handle Cue Point\n");
 8001a50:	4869      	ldr	r0, [pc, #420]	@ (8001bf8 <meta_event_handler+0x404>)
 8001a52:	f000 fdb9 	bl	80025c8 <myprintf>
        skip_meta_event(fp);
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f000 f8e6 	bl	8001c28 <skip_meta_event>
        break;
 8001a5c:	e0b2      	b.n	8001bc4 <meta_event_handler+0x3d0>
    case 0x20:
        myprintf("Handle MIDI Channel Prefix Assignment\n");
 8001a5e:	4867      	ldr	r0, [pc, #412]	@ (8001bfc <meta_event_handler+0x408>)
 8001a60:	f000 fdb2 	bl	80025c8 <myprintf>
        skip_meta_event(fp);
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f000 f8df 	bl	8001c28 <skip_meta_event>
        break;
 8001a6a:	e0ab      	b.n	8001bc4 <meta_event_handler+0x3d0>
    case 0x2F:
        myprintf("Handle End of Track\n\n\n");
 8001a6c:	4864      	ldr	r0, [pc, #400]	@ (8001c00 <meta_event_handler+0x40c>)
 8001a6e:	f000 fdab 	bl	80025c8 <myprintf>
        f_read(fp, NULL, 1, NULL);; // skips final value
 8001a72:	2300      	movs	r3, #0
 8001a74:	2201      	movs	r2, #1
 8001a76:	2100      	movs	r1, #0
 8001a78:	68f8      	ldr	r0, [r7, #12]
 8001a7a:	f006 f91a 	bl	8007cb2 <f_read>

        return 1; // success!!
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e0a1      	b.n	8001bc6 <meta_event_handler+0x3d2>
    case 0x51:
        myprintf("Sets Tempo\n");
 8001a82:	4860      	ldr	r0, [pc, #384]	@ (8001c04 <meta_event_handler+0x410>)
 8001a84:	f000 fda0 	bl	80025c8 <myprintf>

        uint32_t num_micro = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61fb      	str	r3, [r7, #28]

        buf = malloc(sizeof(uint8_t) * 3);
 8001a8c:	2003      	movs	r0, #3
 8001a8e:	f009 fc03 	bl	800b298 <malloc>
 8001a92:	4603      	mov	r3, r0
 8001a94:	623b      	str	r3, [r7, #32]
        if (!buf)
 8001a96:	6a3b      	ldr	r3, [r7, #32]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d104      	bne.n	8001aa6 <meta_event_handler+0x2b2>
        {
            myprintf("Malloc Failed in Time Signiture");
 8001a9c:	485a      	ldr	r0, [pc, #360]	@ (8001c08 <meta_event_handler+0x414>)
 8001a9e:	f000 fd93 	bl	80025c8 <myprintf>
            return -1;
 8001aa2:	23ff      	movs	r3, #255	@ 0xff
 8001aa4:	e08f      	b.n	8001bc6 <meta_event_handler+0x3d2>
        }
        f_read(fp, &event_len, 1, NULL);
 8001aa6:	f107 0114 	add.w	r1, r7, #20
 8001aaa:	2300      	movs	r3, #0
 8001aac:	2201      	movs	r2, #1
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	f006 f8ff 	bl	8007cb2 <f_read>
        f_read(fp, buf, 3, NULL);
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	6a39      	ldr	r1, [r7, #32]
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f006 f8f9 	bl	8007cb2 <f_read>
        num_micro = (buf[0] << 16) | (buf[1] << 8) | (buf[2]);
 8001ac0:	6a3b      	ldr	r3, [r7, #32]
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	041a      	lsls	r2, r3, #16
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	021b      	lsls	r3, r3, #8
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	6a3a      	ldr	r2, [r7, #32]
 8001ad2:	3202      	adds	r2, #2
 8001ad4:	7812      	ldrb	r2, [r2, #0]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61fb      	str	r3, [r7, #28]
        myprintf("Microseconds per quarter note: %d\n", num_micro);
 8001ada:	69f9      	ldr	r1, [r7, #28]
 8001adc:	484b      	ldr	r0, [pc, #300]	@ (8001c0c <meta_event_handler+0x418>)
 8001ade:	f000 fd73 	bl	80025c8 <myprintf>

        ctrl->tempo = 60000000 / num_micro; // tempo in bpm
 8001ae2:	4a4b      	ldr	r2, [pc, #300]	@ (8001c10 <meta_event_handler+0x41c>)
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	719a      	strb	r2, [r3, #6]

        myprintf("tempo in BPM: %d\n", ctrl->tempo);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	799b      	ldrb	r3, [r3, #6]
 8001af4:	4619      	mov	r1, r3
 8001af6:	4847      	ldr	r0, [pc, #284]	@ (8001c14 <meta_event_handler+0x420>)
 8001af8:	f000 fd66 	bl	80025c8 <myprintf>

        // skip_meta_event(fp);
        break;
 8001afc:	e062      	b.n	8001bc4 <meta_event_handler+0x3d0>
    case 0x54:
        myprintf("Handle SMPTE Offset\n");
 8001afe:	4846      	ldr	r0, [pc, #280]	@ (8001c18 <meta_event_handler+0x424>)
 8001b00:	f000 fd62 	bl	80025c8 <myprintf>
        skip_meta_event(fp);
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f000 f88f 	bl	8001c28 <skip_meta_event>
        break;
 8001b0a:	e05b      	b.n	8001bc4 <meta_event_handler+0x3d0>
    case 0x58: // time signiture

        f_read(fp, &event_len, 1, NULL);; // gets length byte (always 0x04)
 8001b0c:	f107 0114 	add.w	r1, r7, #20
 8001b10:	2300      	movs	r3, #0
 8001b12:	2201      	movs	r2, #1
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f006 f8cc 	bl	8007cb2 <f_read>

        buf = malloc(sizeof(uint8_t) * 4);
 8001b1a:	2004      	movs	r0, #4
 8001b1c:	f009 fbbc 	bl	800b298 <malloc>
 8001b20:	4603      	mov	r3, r0
 8001b22:	623b      	str	r3, [r7, #32]
        if (!buf)
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d104      	bne.n	8001b34 <meta_event_handler+0x340>
        {
            myprintf("Malloc Failed in Time Signiture");
 8001b2a:	4837      	ldr	r0, [pc, #220]	@ (8001c08 <meta_event_handler+0x414>)
 8001b2c:	f000 fd4c 	bl	80025c8 <myprintf>
            return -1;
 8001b30:	23ff      	movs	r3, #255	@ 0xff
 8001b32:	e048      	b.n	8001bc6 <meta_event_handler+0x3d2>
        denominator
        metrinome clicks
        32nd notes per quarter
        */

        f_read(fp,buf,4,NULL);
 8001b34:	2300      	movs	r3, #0
 8001b36:	2204      	movs	r2, #4
 8001b38:	6a39      	ldr	r1, [r7, #32]
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f006 f8b9 	bl	8007cb2 <f_read>

        myprintf("Time signiture: \n num:%x\n denom:%x\n clocks per beat:%x\n 32nds per quarter:%x\n\n", buf[0], buf[1], buf[2], buf[3]);
 8001b40:	6a3b      	ldr	r3, [r7, #32]
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	4619      	mov	r1, r3
 8001b46:	6a3b      	ldr	r3, [r7, #32]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	3302      	adds	r3, #2
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	6a3b      	ldr	r3, [r7, #32]
 8001b58:	3303      	adds	r3, #3
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	4603      	mov	r3, r0
 8001b60:	482e      	ldr	r0, [pc, #184]	@ (8001c1c <meta_event_handler+0x428>)
 8001b62:	f000 fd31 	bl	80025c8 <myprintf>

        break;
 8001b66:	e02d      	b.n	8001bc4 <meta_event_handler+0x3d0>
    case 0x59:
        myprintf("Handle Key Signature\n");
 8001b68:	482d      	ldr	r0, [pc, #180]	@ (8001c20 <meta_event_handler+0x42c>)
 8001b6a:	f000 fd2d 	bl	80025c8 <myprintf>
        uint8_t tone;
        uint8_t key_sig;

        f_lseek(fp, f_tell(fp) + 1); // shifts past length byte 0x02
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	3301      	adds	r3, #1
 8001b74:	4619      	mov	r1, r3
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f006 fa09 	bl	8007f8e <f_lseek>

        f_read(fp, &key_sig, 1, NULL);; // number of sharps or flats
 8001b7c:	f107 0112 	add.w	r1, r7, #18
 8001b80:	2300      	movs	r3, #0
 8001b82:	2201      	movs	r2, #1
 8001b84:	68f8      	ldr	r0, [r7, #12]
 8001b86:	f006 f894 	bl	8007cb2 <f_read>
        f_read(fp, &tone, 1, NULL);;    // major(1) / minor(0)
 8001b8a:	f107 0113 	add.w	r1, r7, #19
 8001b8e:	2300      	movs	r3, #0
 8001b90:	2201      	movs	r2, #1
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f006 f88d 	bl	8007cb2 <f_read>

        find_key(key_sig, tone, ctrl);
 8001b98:	7cbb      	ldrb	r3, [r7, #18]
 8001b9a:	b25b      	sxtb	r3, r3
 8001b9c:	7cf9      	ldrb	r1, [r7, #19]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f000 f8db 	bl	8001d5c <find_key>

        break;
 8001ba6:	e00d      	b.n	8001bc4 <meta_event_handler+0x3d0>
        //     return -1;
        // }

        // fread(buf, 1, event_len, fp);

        skip_meta_event(fp);
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f000 f83d 	bl	8001c28 <skip_meta_event>
        break;
 8001bae:	e009      	b.n	8001bc4 <meta_event_handler+0x3d0>
    default:
        myprintf("Unknown meta event type: 0x%02X\n", meta_type);
 8001bb0:	7efb      	ldrb	r3, [r7, #27]
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	481b      	ldr	r0, [pc, #108]	@ (8001c24 <meta_event_handler+0x430>)
 8001bb6:	f000 fd07 	bl	80025c8 <myprintf>
        skip_meta_event(fp);
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f000 f834 	bl	8001c28 <skip_meta_event>
        return -1;
 8001bc0:	23ff      	movs	r3, #255	@ 0xff
 8001bc2:	e000      	b.n	8001bc6 <meta_event_handler+0x3d2>
    }

    return 0;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3728      	adds	r7, #40	@ 0x28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	0800cdc0 	.word	0x0800cdc0
 8001bd4:	0800cde0 	.word	0x0800cde0
 8001bd8:	0800cdf4 	.word	0x0800cdf4
 8001bdc:	0800ce10 	.word	0x0800ce10
 8001be0:	0800ce1c 	.word	0x0800ce1c
 8001be4:	0800ce3c 	.word	0x0800ce3c
 8001be8:	0800ce40 	.word	0x0800ce40
 8001bec:	0800ce44 	.word	0x0800ce44
 8001bf0:	0800ce5c 	.word	0x0800ce5c
 8001bf4:	0800ce70 	.word	0x0800ce70
 8001bf8:	0800ce84 	.word	0x0800ce84
 8001bfc:	0800ce98 	.word	0x0800ce98
 8001c00:	0800cec0 	.word	0x0800cec0
 8001c04:	0800ced8 	.word	0x0800ced8
 8001c08:	0800cee4 	.word	0x0800cee4
 8001c0c:	0800cf04 	.word	0x0800cf04
 8001c10:	03938700 	.word	0x03938700
 8001c14:	0800cf28 	.word	0x0800cf28
 8001c18:	0800cf3c 	.word	0x0800cf3c
 8001c1c:	0800cf54 	.word	0x0800cf54
 8001c20:	0800cfa4 	.word	0x0800cfa4
 8001c24:	0800cfbc 	.word	0x0800cfbc

08001c28 <skip_meta_event>:
 *  @brief skips meta events
 * @param fp FIL pointe to midi FIL
 * @return 0 on sucess -1 on failure
 * */
uint8_t skip_meta_event(FIL *fp)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

    uint32_t event_len;
    uint8_t err;

    event_len = decode_vlq(fp);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 fc79 	bl	8002528 <decode_vlq>
 8001c36:	60f8      	str	r0, [r7, #12]

    err = f_lseek(fp, f_tell(fp) + event_len);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	699a      	ldr	r2, [r3, #24]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4413      	add	r3, r2
 8001c40:	4619      	mov	r1, r3
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f006 f9a3 	bl	8007f8e <f_lseek>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	72fb      	strb	r3, [r7, #11]
    {
        myprintf("f_lseek in skip event failed");
        return -1;
    }

    return 0;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <skip_midi_event>:
 * @param fp FIL pointe to midi FIL
 * @param type 8-bit handle of midi type
 * @return 0 on sucess -1 on failure
 * */
uint8_t skip_midi_event(FIL *fp, uint8_t type)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	70fb      	strb	r3, [r7, #3]

    switch (type)
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	2be0      	cmp	r3, #224	@ 0xe0
 8001c68:	d058      	beq.n	8001d1c <skip_midi_event+0xc4>
 8001c6a:	2be0      	cmp	r3, #224	@ 0xe0
 8001c6c:	dc61      	bgt.n	8001d32 <skip_midi_event+0xda>
 8001c6e:	2bd0      	cmp	r3, #208	@ 0xd0
 8001c70:	d049      	beq.n	8001d06 <skip_midi_event+0xae>
 8001c72:	2bd0      	cmp	r3, #208	@ 0xd0
 8001c74:	dc5d      	bgt.n	8001d32 <skip_midi_event+0xda>
 8001c76:	2bc0      	cmp	r3, #192	@ 0xc0
 8001c78:	d03a      	beq.n	8001cf0 <skip_midi_event+0x98>
 8001c7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8001c7c:	dc59      	bgt.n	8001d32 <skip_midi_event+0xda>
 8001c7e:	2bb0      	cmp	r3, #176	@ 0xb0
 8001c80:	d02b      	beq.n	8001cda <skip_midi_event+0x82>
 8001c82:	2bb0      	cmp	r3, #176	@ 0xb0
 8001c84:	dc55      	bgt.n	8001d32 <skip_midi_event+0xda>
 8001c86:	2ba0      	cmp	r3, #160	@ 0xa0
 8001c88:	d01c      	beq.n	8001cc4 <skip_midi_event+0x6c>
 8001c8a:	2ba0      	cmp	r3, #160	@ 0xa0
 8001c8c:	dc51      	bgt.n	8001d32 <skip_midi_event+0xda>
 8001c8e:	2b80      	cmp	r3, #128	@ 0x80
 8001c90:	d002      	beq.n	8001c98 <skip_midi_event+0x40>
 8001c92:	2b90      	cmp	r3, #144	@ 0x90
 8001c94:	d00b      	beq.n	8001cae <skip_midi_event+0x56>
 8001c96:	e04c      	b.n	8001d32 <skip_midi_event+0xda>
    {

    case 0x80: // Note Off
        myprintf("Skip Note Off\n");
 8001c98:	4829      	ldr	r0, [pc, #164]	@ (8001d40 <skip_midi_event+0xe8>)
 8001c9a:	f000 fc95 	bl	80025c8 <myprintf>
        f_lseek(fp, f_tell(fp) + 2);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f006 f971 	bl	8007f8e <f_lseek>
        break;
 8001cac:	e043      	b.n	8001d36 <skip_midi_event+0xde>

    case 0x90: // Note On
        myprintf("Skip Note On\n");
 8001cae:	4825      	ldr	r0, [pc, #148]	@ (8001d44 <skip_midi_event+0xec>)
 8001cb0:	f000 fc8a 	bl	80025c8 <myprintf>
        f_lseek(fp, f_tell(fp) + 2);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	3302      	adds	r3, #2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f006 f966 	bl	8007f8e <f_lseek>
        break;
 8001cc2:	e038      	b.n	8001d36 <skip_midi_event+0xde>

    case 0xA0: // Polyphonic Key Pressure (Aftertouch)
        myprintf("Skip Polyphonic Key Pressure\n");
 8001cc4:	4820      	ldr	r0, [pc, #128]	@ (8001d48 <skip_midi_event+0xf0>)
 8001cc6:	f000 fc7f 	bl	80025c8 <myprintf>
        f_lseek(fp, f_tell(fp) + 2);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	3302      	adds	r3, #2
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f006 f95b 	bl	8007f8e <f_lseek>
        break;
 8001cd8:	e02d      	b.n	8001d36 <skip_midi_event+0xde>

    case 0xB0: // Control Change
        myprintf("Skip Control Change\n");
 8001cda:	481c      	ldr	r0, [pc, #112]	@ (8001d4c <skip_midi_event+0xf4>)
 8001cdc:	f000 fc74 	bl	80025c8 <myprintf>
        f_lseek(fp, f_tell(fp) + 2);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	3302      	adds	r3, #2
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f006 f950 	bl	8007f8e <f_lseek>
        break;
 8001cee:	e022      	b.n	8001d36 <skip_midi_event+0xde>

    case 0xC0: // Program Change // 1 byte
        myprintf("Skip Program Change\n");
 8001cf0:	4817      	ldr	r0, [pc, #92]	@ (8001d50 <skip_midi_event+0xf8>)
 8001cf2:	f000 fc69 	bl	80025c8 <myprintf>
        f_lseek(fp, f_tell(fp) + 1);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f006 f945 	bl	8007f8e <f_lseek>
        break;
 8001d04:	e017      	b.n	8001d36 <skip_midi_event+0xde>

    case 0xD0: // Channel Pressure (Aftertouch) // 1 byte
        myprintf("Skip Channel Pressure\n");
 8001d06:	4813      	ldr	r0, [pc, #76]	@ (8001d54 <skip_midi_event+0xfc>)
 8001d08:	f000 fc5e 	bl	80025c8 <myprintf>
        f_lseek(fp, f_tell(fp) + 1);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	3301      	adds	r3, #1
 8001d12:	4619      	mov	r1, r3
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f006 f93a 	bl	8007f8e <f_lseek>
        break;
 8001d1a:	e00c      	b.n	8001d36 <skip_midi_event+0xde>

    case 0xE0: // Pitch Bend Change
        myprintf("Skip Pitch Bend Change\n");
 8001d1c:	480e      	ldr	r0, [pc, #56]	@ (8001d58 <skip_midi_event+0x100>)
 8001d1e:	f000 fc53 	bl	80025c8 <myprintf>
        f_lseek(fp, f_tell(fp) + 2);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	3302      	adds	r3, #2
 8001d28:	4619      	mov	r1, r3
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f006 f92f 	bl	8007f8e <f_lseek>
        break;
 8001d30:	e001      	b.n	8001d36 <skip_midi_event+0xde>

    default:
        abort();
 8001d32:	f009 faa9 	bl	800b288 <abort>
        myprintf("Skip Unknown MIDI Type: 0x%x\n", type);
        f_lseek(fp, f_tell(fp) + 2);
        break;
    }

    return 0;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	0800cfe0 	.word	0x0800cfe0
 8001d44:	0800cff0 	.word	0x0800cff0
 8001d48:	0800d000 	.word	0x0800d000
 8001d4c:	0800d020 	.word	0x0800d020
 8001d50:	0800d038 	.word	0x0800d038
 8001d54:	0800d050 	.word	0x0800d050
 8001d58:	0800d068 	.word	0x0800d068

08001d5c <find_key>:
 * @param tone meow
 * @param controller pointer to control structure
 * @return 0 on sucess -1 on failure
 * */
uint8_t find_key(int8_t key, uint8_t tone, MIDI_controller *controller)
{
 8001d5c:	b590      	push	{r4, r7, lr}
 8001d5e:	b08b      	sub	sp, #44	@ 0x2c
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	603a      	str	r2, [r7, #0]
 8001d66:	71fb      	strb	r3, [r7, #7]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	71bb      	strb	r3, [r7, #6]

    uint8_t major_keys[15] = {
 8001d6c:	4b21      	ldr	r3, [pc, #132]	@ (8001df4 <find_key+0x98>)
 8001d6e:	f107 0418 	add.w	r4, r7, #24
 8001d72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d74:	c407      	stmia	r4!, {r0, r1, r2}
 8001d76:	8023      	strh	r3, [r4, #0]
 8001d78:	3402      	adds	r4, #2
 8001d7a:	0c1b      	lsrs	r3, r3, #16
 8001d7c:	7023      	strb	r3, [r4, #0]
        B_MAJOR,       // 0x0C
        F_SHARP_MAJOR, // 0x0D
        C_SHARP_MAJOR  // 0x0E
    };

    uint8_t minor_keys[15] = {
 8001d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001df8 <find_key+0x9c>)
 8001d80:	f107 0408 	add.w	r4, r7, #8
 8001d84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d86:	c407      	stmia	r4!, {r0, r1, r2}
 8001d88:	8023      	strh	r3, [r4, #0]
 8001d8a:	3402      	adds	r4, #2
 8001d8c:	0c1b      	lsrs	r3, r3, #16
 8001d8e:	7023      	strb	r3, [r4, #0]
        D_SHARP_MINOR, // D♯ Minor: 6 sharps
        A_SHARP_MINOR  // A♯ Minor: 7 sharps
    };

    // minor
    if (tone == 0x00)
 8001d90:	79bb      	ldrb	r3, [r7, #6]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10f      	bne.n	8001db6 <find_key+0x5a>
    {
        controller->key_sig = minor_keys[(sizeof(minor_keys) / 2) + key];
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	3307      	adds	r3, #7
 8001d9c:	3328      	adds	r3, #40	@ 0x28
 8001d9e:	443b      	add	r3, r7
 8001da0:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	709a      	strb	r2, [r3, #2]
        myprintf("Key Signiture: 0x%x\n", controller->key_sig);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	789b      	ldrb	r3, [r3, #2]
 8001dac:	4619      	mov	r1, r3
 8001dae:	4813      	ldr	r0, [pc, #76]	@ (8001dfc <find_key+0xa0>)
 8001db0:	f000 fc0a 	bl	80025c8 <myprintf>
 8001db4:	e019      	b.n	8001dea <find_key+0x8e>
    }
    // major
    else if (tone == 0x01)
 8001db6:	79bb      	ldrb	r3, [r7, #6]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d10f      	bne.n	8001ddc <find_key+0x80>
    {
        controller->key_sig = major_keys[(sizeof(minor_keys) / 2) + key];
 8001dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc0:	3307      	adds	r3, #7
 8001dc2:	3328      	adds	r3, #40	@ 0x28
 8001dc4:	443b      	add	r3, r7
 8001dc6:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	709a      	strb	r2, [r3, #2]
        myprintf("Key Signiture: 0x%x\n", controller->key_sig);
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	789b      	ldrb	r3, [r3, #2]
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4809      	ldr	r0, [pc, #36]	@ (8001dfc <find_key+0xa0>)
 8001dd6:	f000 fbf7 	bl	80025c8 <myprintf>
 8001dda:	e006      	b.n	8001dea <find_key+0x8e>
    }

    else
    {
        myprintf("invalid tone: 0x%x\n", tone);
 8001ddc:	79bb      	ldrb	r3, [r7, #6]
 8001dde:	4619      	mov	r1, r3
 8001de0:	4807      	ldr	r0, [pc, #28]	@ (8001e00 <find_key+0xa4>)
 8001de2:	f000 fbf1 	bl	80025c8 <myprintf>
        return -1;
 8001de6:	23ff      	movs	r3, #255	@ 0xff
 8001de8:	e000      	b.n	8001dec <find_key+0x90>
    }

    return 0;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	372c      	adds	r7, #44	@ 0x2c
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd90      	pop	{r4, r7, pc}
 8001df4:	0800d0ac 	.word	0x0800d0ac
 8001df8:	0800d0bc 	.word	0x0800d0bc
 8001dfc:	0800d080 	.word	0x0800d080
 8001e00:	0800d098 	.word	0x0800d098

08001e04 <play_one_track>:
 * @param fp FIL pointer to music
 * @param controller pointer to control structure
 * @return returns 0 on sucess other on failure
 * */
uint8_t play_one_track(FIL *fp, MIDI_controller *ctrl)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b088      	sub	sp, #32
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
    uint8_t end;

    uint8_t event_type;
    uint32_t delta_time;

    buf = (uint8_t *)malloc(sizeof(uint8_t) * 8);
 8001e0e:	2008      	movs	r0, #8
 8001e10:	f009 fa42 	bl	800b298 <malloc>
 8001e14:	4603      	mov	r3, r0
 8001e16:	61bb      	str	r3, [r7, #24]
    if (!buf)
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d104      	bne.n	8001e28 <play_one_track+0x24>
    {
        myprintf("Buffer in parse_midi is null\n");
 8001e1e:	4845      	ldr	r0, [pc, #276]	@ (8001f34 <play_one_track+0x130>)
 8001e20:	f000 fbd2 	bl	80025c8 <myprintf>
        return -1;
 8001e24:	23ff      	movs	r3, #255	@ 0xff
 8001e26:	e080      	b.n	8001f2a <play_one_track+0x126>
    }

    f_read(fp,buf,8,NULL);
 8001e28:	2300      	movs	r3, #0
 8001e2a:	2208      	movs	r2, #8
 8001e2c:	69b9      	ldr	r1, [r7, #24]
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f005 ff3f 	bl	8007cb2 <f_read>

    trk_hdr = (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	061a      	lsls	r2, r3, #24
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	041b      	lsls	r3, r3, #16
 8001e42:	431a      	orrs	r2, r3
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	3302      	adds	r3, #2
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	021b      	lsls	r3, r3, #8
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	3203      	adds	r2, #3
 8001e52:	7812      	ldrb	r2, [r2, #0]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	617b      	str	r3, [r7, #20]
    if (trk_hdr != 0x4D54726B)
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	4a37      	ldr	r2, [pc, #220]	@ (8001f38 <play_one_track+0x134>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d005      	beq.n	8001e6c <play_one_track+0x68>
    { // verifies the track start is valid
        myprintf("Invalid track header recieved: %x\n", trk_hdr);
 8001e60:	6979      	ldr	r1, [r7, #20]
 8001e62:	4836      	ldr	r0, [pc, #216]	@ (8001f3c <play_one_track+0x138>)
 8001e64:	f000 fbb0 	bl	80025c8 <myprintf>
        return -1;
 8001e68:	23ff      	movs	r3, #255	@ 0xff
 8001e6a:	e05e      	b.n	8001f2a <play_one_track+0x126>
    }

    trk_len = (buf[4] << 24) | (buf[5] << 16) | (buf[6] << 8) | buf[7]; //  track length
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	3304      	adds	r3, #4
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	061a      	lsls	r2, r3, #24
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	3305      	adds	r3, #5
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	041b      	lsls	r3, r3, #16
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	3306      	adds	r3, #6
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	021b      	lsls	r3, r3, #8
 8001e86:	4313      	orrs	r3, r2
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	3207      	adds	r2, #7
 8001e8c:	7812      	ldrb	r2, [r2, #0]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]

    free(buf);
 8001e92:	69b8      	ldr	r0, [r7, #24]
 8001e94:	f009 fa08 	bl	800b2a8 <free>

    buf = (uint8_t *)malloc(sizeof(uint8_t) * trk_len);
 8001e98:	6938      	ldr	r0, [r7, #16]
 8001e9a:	f009 f9fd 	bl	800b298 <malloc>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	61bb      	str	r3, [r7, #24]
    if (!buf)
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d104      	bne.n	8001eb2 <play_one_track+0xae>
    {
        myprintf("Buffer in parse_midi is null");
 8001ea8:	4825      	ldr	r0, [pc, #148]	@ (8001f40 <play_one_track+0x13c>)
 8001eaa:	f000 fb8d 	bl	80025c8 <myprintf>
        return -1;
 8001eae:	23ff      	movs	r3, #255	@ 0xff
 8001eb0:	e03b      	b.n	8001f2a <play_one_track+0x126>
    }

    // for debug
    myprintf("Track header: %x\n", trk_hdr);
 8001eb2:	6979      	ldr	r1, [r7, #20]
 8001eb4:	4823      	ldr	r0, [pc, #140]	@ (8001f44 <play_one_track+0x140>)
 8001eb6:	f000 fb87 	bl	80025c8 <myprintf>
    myprintf("Track length: %x\n", trk_len);
 8001eba:	6939      	ldr	r1, [r7, #16]
 8001ebc:	4822      	ldr	r0, [pc, #136]	@ (8001f48 <play_one_track+0x144>)
 8001ebe:	f000 fb83 	bl	80025c8 <myprintf>

    do
    {

        delta_time = decode_vlq(fp);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 fb30 	bl	8002528 <decode_vlq>
 8001ec8:	60f8      	str	r0, [r7, #12]

        f_read(fp, &event_type, 1, NULL);
 8001eca:	f107 010b 	add.w	r1, r7, #11
 8001ece:	2300      	movs	r3, #0
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f005 feed 	bl	8007cb2 <f_read>

        myprintf("event type %d\n", event_type);
 8001ed8:	7afb      	ldrb	r3, [r7, #11]
 8001eda:	4619      	mov	r1, r3
 8001edc:	481b      	ldr	r0, [pc, #108]	@ (8001f4c <play_one_track+0x148>)
 8001ede:	f000 fb73 	bl	80025c8 <myprintf>

        if (event_type == 0xFF)
 8001ee2:	7afb      	ldrb	r3, [r7, #11]
 8001ee4:	2bff      	cmp	r3, #255	@ 0xff
 8001ee6:	d107      	bne.n	8001ef8 <play_one_track+0xf4>
        {
            end = meta_event_handler(fp, delta_time, ctrl);
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	68f9      	ldr	r1, [r7, #12]
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7ff fc81 	bl	80017f4 <meta_event_handler>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	77fb      	strb	r3, [r7, #31]
 8001ef6:	e011      	b.n	8001f1c <play_one_track+0x118>
        }
        else if ((event_type >= 0xF0) && (event_type != 0xFF))
 8001ef8:	7afb      	ldrb	r3, [r7, #11]
 8001efa:	2bef      	cmp	r3, #239	@ 0xef
 8001efc:	d908      	bls.n	8001f10 <play_one_track+0x10c>
 8001efe:	7afb      	ldrb	r3, [r7, #11]
 8001f00:	2bff      	cmp	r3, #255	@ 0xff
 8001f02:	d005      	beq.n	8001f10 <play_one_track+0x10c>
        {
            myprintf("sysex event called: 0x%x\n", event_type);
 8001f04:	7afb      	ldrb	r3, [r7, #11]
 8001f06:	4619      	mov	r1, r3
 8001f08:	4811      	ldr	r0, [pc, #68]	@ (8001f50 <play_one_track+0x14c>)
 8001f0a:	f000 fb5d 	bl	80025c8 <myprintf>
 8001f0e:	e005      	b.n	8001f1c <play_one_track+0x118>
            // skip_meta_event(fp);
            // sysex_event_handler(fp, delta_time);
        }
        else
        {
            midi_event_handler(fp, delta_time, event_type, ctrl);
 8001f10:	7afa      	ldrb	r2, [r7, #11]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	68f9      	ldr	r1, [r7, #12]
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff fc00 	bl	800171c <midi_event_handler>
        }

    } while (end != 1);
 8001f1c:	7ffb      	ldrb	r3, [r7, #31]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d1cf      	bne.n	8001ec2 <play_one_track+0xbe>

    free(buf);
 8001f22:	69b8      	ldr	r0, [r7, #24]
 8001f24:	f009 f9c0 	bl	800b2a8 <free>

    return 0;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3720      	adds	r7, #32
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	0800d138 	.word	0x0800d138
 8001f38:	4d54726b 	.word	0x4d54726b
 8001f3c:	0800d0ec 	.word	0x0800d0ec
 8001f40:	0800d158 	.word	0x0800d158
 8001f44:	0800d178 	.word	0x0800d178
 8001f48:	0800d18c 	.word	0x0800d18c
 8001f4c:	0800d1a0 	.word	0x0800d1a0
 8001f50:	0800d1b0 	.word	0x0800d1b0

08001f54 <parse_midi_header>:
 * @param fp FIL pointer to music
 * @param hdr pointer to header structure
 * @return returns 0 on sucess other on failure
 * */
MIDI_header_chunk parse_midi_header(FIL *fp, MIDI_header_chunk hdr)
{
 8001f54:	b082      	sub	sp, #8
 8001f56:	b590      	push	{r4, r7, lr}
 8001f58:	b085      	sub	sp, #20
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	6039      	str	r1, [r7, #0]
 8001f60:	f107 0120 	add.w	r1, r7, #32
 8001f64:	e881 000c 	stmia.w	r1, {r2, r3}

    uint8_t *buf;

    buf = (uint8_t *)malloc(14);
 8001f68:	200e      	movs	r0, #14
 8001f6a:	f009 f995 	bl	800b298 <malloc>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	60fb      	str	r3, [r7, #12]
    if (!buf)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d102      	bne.n	8001f7e <parse_midi_header+0x2a>
    {
        myprintf("Buffer in parse_midi is null");
 8001f78:	484e      	ldr	r0, [pc, #312]	@ (80020b4 <parse_midi_header+0x160>)
 8001f7a:	f000 fb25 	bl	80025c8 <myprintf>
    }

    f_read(fp, buf, 14, NULL);
 8001f7e:	2300      	movs	r3, #0
 8001f80:	220e      	movs	r2, #14
 8001f82:	68f9      	ldr	r1, [r7, #12]
 8001f84:	6838      	ldr	r0, [r7, #0]
 8001f86:	f005 fe94 	bl	8007cb2 <f_read>

    // all big endian
    hdr.MThd = (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	061a      	lsls	r2, r3, #24
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	3301      	adds	r3, #1
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	041b      	lsls	r3, r3, #16
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	021b      	lsls	r3, r3, #8
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	3203      	adds	r2, #3
 8001fa8:	7812      	ldrb	r2, [r2, #0]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	623b      	str	r3, [r7, #32]
    if (hdr.MThd != 0x4D546864)
 8001fae:	6a3b      	ldr	r3, [r7, #32]
 8001fb0:	4a41      	ldr	r2, [pc, #260]	@ (80020b8 <parse_midi_header+0x164>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d004      	beq.n	8001fc0 <parse_midi_header+0x6c>
    {                                                           // string of MThd
        myprintf("Unexpected Header - Recieved: %c\n", hdr.MThd); // return characters for easy read
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4840      	ldr	r0, [pc, #256]	@ (80020bc <parse_midi_header+0x168>)
 8001fbc:	f000 fb04 	bl	80025c8 <myprintf>
    }

    hdr.hdr_len = (buf[4] << 24) | (buf[5] << 16) | (buf[6] << 8) | buf[7];
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	3304      	adds	r3, #4
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	061a      	lsls	r2, r3, #24
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	3305      	adds	r3, #5
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	041b      	lsls	r3, r3, #16
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	3306      	adds	r3, #6
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	021b      	lsls	r3, r3, #8
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	3207      	adds	r2, #7
 8001fe0:	7812      	ldrb	r2, [r2, #0]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (hdr.hdr_len != 0x0006)
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe8:	2b06      	cmp	r3, #6
 8001fea:	d004      	beq.n	8001ff6 <parse_midi_header+0xa2>
    { // always 6 bytes
        myprintf("Unexpected Header Length - Recieved: %u\n", hdr.hdr_len);
 8001fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4833      	ldr	r0, [pc, #204]	@ (80020c0 <parse_midi_header+0x16c>)
 8001ff2:	f000 fae9 	bl	80025c8 <myprintf>
    }

    hdr.format = (buf[8] << 8) | buf[9];
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	3308      	adds	r3, #8
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	b21a      	sxth	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	3309      	adds	r3, #9
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	b21b      	sxth	r3, r3
 8002008:	4313      	orrs	r3, r2
 800200a:	b21b      	sxth	r3, r3
 800200c:	b29b      	uxth	r3, r3
 800200e:	853b      	strh	r3, [r7, #40]	@ 0x28
    if (hdr.format != 0x00 && hdr.format != 0x01 && hdr.format != 0x02)
 8002010:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00a      	beq.n	800202c <parse_midi_header+0xd8>
 8002016:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002018:	2b01      	cmp	r3, #1
 800201a:	d007      	beq.n	800202c <parse_midi_header+0xd8>
 800201c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800201e:	2b02      	cmp	r3, #2
 8002020:	d004      	beq.n	800202c <parse_midi_header+0xd8>
    {
        myprintf("Unexpected Header Format - Recieved: %u\n", hdr.format);
 8002022:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002024:	4619      	mov	r1, r3
 8002026:	4827      	ldr	r0, [pc, #156]	@ (80020c4 <parse_midi_header+0x170>)
 8002028:	f000 face 	bl	80025c8 <myprintf>
    }

    hdr.num_tracks = (buf[10] << 8) | buf[11];
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	330a      	adds	r3, #10
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	021b      	lsls	r3, r3, #8
 8002034:	b21a      	sxth	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	330b      	adds	r3, #11
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	b21b      	sxth	r3, r3
 800203e:	4313      	orrs	r3, r2
 8002040:	b21b      	sxth	r3, r3
 8002042:	b29b      	uxth	r3, r3
 8002044:	857b      	strh	r3, [r7, #42]	@ 0x2a
    hdr.division = (buf[12] << 8) | buf[13];
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	330c      	adds	r3, #12
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	021b      	lsls	r3, r3, #8
 800204e:	b21a      	sxth	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	330d      	adds	r3, #13
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	b21b      	sxth	r3, r3
 8002058:	4313      	orrs	r3, r2
 800205a:	b21b      	sxth	r3, r3
 800205c:	b29b      	uxth	r3, r3
 800205e:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    // to check all header info
    myprintf("Header string is: %x\n", hdr.MThd);
 8002060:	6a3b      	ldr	r3, [r7, #32]
 8002062:	4619      	mov	r1, r3
 8002064:	4818      	ldr	r0, [pc, #96]	@ (80020c8 <parse_midi_header+0x174>)
 8002066:	f000 faaf 	bl	80025c8 <myprintf>
    myprintf("Length is: %x\n", hdr.hdr_len);
 800206a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206c:	4619      	mov	r1, r3
 800206e:	4817      	ldr	r0, [pc, #92]	@ (80020cc <parse_midi_header+0x178>)
 8002070:	f000 faaa 	bl	80025c8 <myprintf>
    myprintf("Format is:%x \n", hdr.format);
 8002074:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002076:	4619      	mov	r1, r3
 8002078:	4815      	ldr	r0, [pc, #84]	@ (80020d0 <parse_midi_header+0x17c>)
 800207a:	f000 faa5 	bl	80025c8 <myprintf>
    myprintf("Number of tracks is: %x\n", hdr.num_tracks);
 800207e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002080:	4619      	mov	r1, r3
 8002082:	4814      	ldr	r0, [pc, #80]	@ (80020d4 <parse_midi_header+0x180>)
 8002084:	f000 faa0 	bl	80025c8 <myprintf>
    myprintf("Division is: %x\n", hdr.division);
 8002088:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800208a:	4619      	mov	r1, r3
 800208c:	4812      	ldr	r0, [pc, #72]	@ (80020d8 <parse_midi_header+0x184>)
 800208e:	f000 fa9b 	bl	80025c8 <myprintf>

    free(buf);
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f009 f908 	bl	800b2a8 <free>

    return hdr;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	461c      	mov	r4, r3
 800209c:	f107 0320 	add.w	r3, r7, #32
 80020a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80020b0:	b002      	add	sp, #8
 80020b2:	4770      	bx	lr
 80020b4:	0800d158 	.word	0x0800d158
 80020b8:	4d546864 	.word	0x4d546864
 80020bc:	0800d1cc 	.word	0x0800d1cc
 80020c0:	0800d1f0 	.word	0x0800d1f0
 80020c4:	0800d21c 	.word	0x0800d21c
 80020c8:	0800d248 	.word	0x0800d248
 80020cc:	0800d260 	.word	0x0800d260
 80020d0:	0800d270 	.word	0x0800d270
 80020d4:	0800d280 	.word	0x0800d280
 80020d8:	0800d29c 	.word	0x0800d29c

080020dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	607b      	str	r3, [r7, #4]
 80020e6:	4b12      	ldr	r3, [pc, #72]	@ (8002130 <HAL_MspInit+0x54>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ea:	4a11      	ldr	r2, [pc, #68]	@ (8002130 <HAL_MspInit+0x54>)
 80020ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80020f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002130 <HAL_MspInit+0x54>)
 80020f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020fa:	607b      	str	r3, [r7, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	603b      	str	r3, [r7, #0]
 8002102:	4b0b      	ldr	r3, [pc, #44]	@ (8002130 <HAL_MspInit+0x54>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002106:	4a0a      	ldr	r2, [pc, #40]	@ (8002130 <HAL_MspInit+0x54>)
 8002108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800210c:	6413      	str	r3, [r2, #64]	@ 0x40
 800210e:	4b08      	ldr	r3, [pc, #32]	@ (8002130 <HAL_MspInit+0x54>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002116:	603b      	str	r3, [r7, #0]
 8002118:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	210f      	movs	r1, #15
 800211e:	f06f 0001 	mvn.w	r0, #1
 8002122:	f000 fb9b 	bl	800285c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40023800 	.word	0x40023800

08002134 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08a      	sub	sp, #40	@ 0x28
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800213c:	f107 0314 	add.w	r3, r7, #20
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	60da      	str	r2, [r3, #12]
 800214a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a19      	ldr	r2, [pc, #100]	@ (80021b8 <HAL_SPI_MspInit+0x84>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d12b      	bne.n	80021ae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	4b18      	ldr	r3, [pc, #96]	@ (80021bc <HAL_SPI_MspInit+0x88>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215e:	4a17      	ldr	r2, [pc, #92]	@ (80021bc <HAL_SPI_MspInit+0x88>)
 8002160:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002164:	6453      	str	r3, [r2, #68]	@ 0x44
 8002166:	4b15      	ldr	r3, [pc, #84]	@ (80021bc <HAL_SPI_MspInit+0x88>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800216e:	613b      	str	r3, [r7, #16]
 8002170:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	4b11      	ldr	r3, [pc, #68]	@ (80021bc <HAL_SPI_MspInit+0x88>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217a:	4a10      	ldr	r2, [pc, #64]	@ (80021bc <HAL_SPI_MspInit+0x88>)
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	6313      	str	r3, [r2, #48]	@ 0x30
 8002182:	4b0e      	ldr	r3, [pc, #56]	@ (80021bc <HAL_SPI_MspInit+0x88>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800218e:	23e0      	movs	r3, #224	@ 0xe0
 8002190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002192:	2302      	movs	r3, #2
 8002194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219a:	2303      	movs	r3, #3
 800219c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800219e:	2305      	movs	r3, #5
 80021a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a2:	f107 0314 	add.w	r3, r7, #20
 80021a6:	4619      	mov	r1, r3
 80021a8:	4805      	ldr	r0, [pc, #20]	@ (80021c0 <HAL_SPI_MspInit+0x8c>)
 80021aa:	f000 fb81 	bl	80028b0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80021ae:	bf00      	nop
 80021b0:	3728      	adds	r7, #40	@ 0x28
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40013000 	.word	0x40013000
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40020000 	.word	0x40020000

080021c4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002200 <HAL_TIM_PWM_MspInit+0x3c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d10d      	bne.n	80021f2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	4b0a      	ldr	r3, [pc, #40]	@ (8002204 <HAL_TIM_PWM_MspInit+0x40>)
 80021dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021de:	4a09      	ldr	r2, [pc, #36]	@ (8002204 <HAL_TIM_PWM_MspInit+0x40>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80021e6:	4b07      	ldr	r3, [pc, #28]	@ (8002204 <HAL_TIM_PWM_MspInit+0x40>)
 80021e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80021f2:	bf00      	nop
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40010000 	.word	0x40010000
 8002204:	40023800 	.word	0x40023800

08002208 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002210:	f107 030c 	add.w	r3, r7, #12
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a12      	ldr	r2, [pc, #72]	@ (8002270 <HAL_TIM_MspPostInit+0x68>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d11e      	bne.n	8002268 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	4b11      	ldr	r3, [pc, #68]	@ (8002274 <HAL_TIM_MspPostInit+0x6c>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	4a10      	ldr	r2, [pc, #64]	@ (8002274 <HAL_TIM_MspPostInit+0x6c>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6313      	str	r3, [r2, #48]	@ 0x30
 800223a:	4b0e      	ldr	r3, [pc, #56]	@ (8002274 <HAL_TIM_MspPostInit+0x6c>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002246:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800224a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224c:	2302      	movs	r3, #2
 800224e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002254:	2300      	movs	r3, #0
 8002256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002258:	2301      	movs	r3, #1
 800225a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225c:	f107 030c 	add.w	r3, r7, #12
 8002260:	4619      	mov	r1, r3
 8002262:	4805      	ldr	r0, [pc, #20]	@ (8002278 <HAL_TIM_MspPostInit+0x70>)
 8002264:	f000 fb24 	bl	80028b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002268:	bf00      	nop
 800226a:	3720      	adds	r7, #32
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40010000 	.word	0x40010000
 8002274:	40023800 	.word	0x40023800
 8002278:	40020000 	.word	0x40020000

0800227c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08a      	sub	sp, #40	@ 0x28
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	f107 0314 	add.w	r3, r7, #20
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a19      	ldr	r2, [pc, #100]	@ (8002300 <HAL_UART_MspInit+0x84>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d12b      	bne.n	80022f6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	4b18      	ldr	r3, [pc, #96]	@ (8002304 <HAL_UART_MspInit+0x88>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a6:	4a17      	ldr	r2, [pc, #92]	@ (8002304 <HAL_UART_MspInit+0x88>)
 80022a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ae:	4b15      	ldr	r3, [pc, #84]	@ (8002304 <HAL_UART_MspInit+0x88>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	4b11      	ldr	r3, [pc, #68]	@ (8002304 <HAL_UART_MspInit+0x88>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	4a10      	ldr	r2, [pc, #64]	@ (8002304 <HAL_UART_MspInit+0x88>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002304 <HAL_UART_MspInit+0x88>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022d6:	230c      	movs	r3, #12
 80022d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022da:	2302      	movs	r3, #2
 80022dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e2:	2303      	movs	r3, #3
 80022e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022e6:	2307      	movs	r3, #7
 80022e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ea:	f107 0314 	add.w	r3, r7, #20
 80022ee:	4619      	mov	r1, r3
 80022f0:	4805      	ldr	r0, [pc, #20]	@ (8002308 <HAL_UART_MspInit+0x8c>)
 80022f2:	f000 fadd 	bl	80028b0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80022f6:	bf00      	nop
 80022f8:	3728      	adds	r7, #40	@ 0x28
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40004400 	.word	0x40004400
 8002304:	40023800 	.word	0x40023800
 8002308:	40020000 	.word	0x40020000

0800230c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08e      	sub	sp, #56	@ 0x38
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800231c:	2300      	movs	r3, #0
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	4b33      	ldr	r3, [pc, #204]	@ (80023f0 <HAL_InitTick+0xe4>)
 8002322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002324:	4a32      	ldr	r2, [pc, #200]	@ (80023f0 <HAL_InitTick+0xe4>)
 8002326:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800232a:	6413      	str	r3, [r2, #64]	@ 0x40
 800232c:	4b30      	ldr	r3, [pc, #192]	@ (80023f0 <HAL_InitTick+0xe4>)
 800232e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002338:	f107 0210 	add.w	r2, r7, #16
 800233c:	f107 0314 	add.w	r3, r7, #20
 8002340:	4611      	mov	r1, r2
 8002342:	4618      	mov	r0, r3
 8002344:	f000 fd7c 	bl	8002e40 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800234c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800234e:	2b00      	cmp	r3, #0
 8002350:	d103      	bne.n	800235a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002352:	f000 fd4d 	bl	8002df0 <HAL_RCC_GetPCLK1Freq>
 8002356:	6378      	str	r0, [r7, #52]	@ 0x34
 8002358:	e004      	b.n	8002364 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800235a:	f000 fd49 	bl	8002df0 <HAL_RCC_GetPCLK1Freq>
 800235e:	4603      	mov	r3, r0
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002366:	4a23      	ldr	r2, [pc, #140]	@ (80023f4 <HAL_InitTick+0xe8>)
 8002368:	fba2 2303 	umull	r2, r3, r2, r3
 800236c:	0c9b      	lsrs	r3, r3, #18
 800236e:	3b01      	subs	r3, #1
 8002370:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8002372:	4b21      	ldr	r3, [pc, #132]	@ (80023f8 <HAL_InitTick+0xec>)
 8002374:	4a21      	ldr	r2, [pc, #132]	@ (80023fc <HAL_InitTick+0xf0>)
 8002376:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8002378:	4b1f      	ldr	r3, [pc, #124]	@ (80023f8 <HAL_InitTick+0xec>)
 800237a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800237e:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8002380:	4a1d      	ldr	r2, [pc, #116]	@ (80023f8 <HAL_InitTick+0xec>)
 8002382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002384:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8002386:	4b1c      	ldr	r3, [pc, #112]	@ (80023f8 <HAL_InitTick+0xec>)
 8002388:	2200      	movs	r2, #0
 800238a:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800238c:	4b1a      	ldr	r3, [pc, #104]	@ (80023f8 <HAL_InitTick+0xec>)
 800238e:	2200      	movs	r2, #0
 8002390:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002392:	4b19      	ldr	r3, [pc, #100]	@ (80023f8 <HAL_InitTick+0xec>)
 8002394:	2200      	movs	r2, #0
 8002396:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8002398:	4817      	ldr	r0, [pc, #92]	@ (80023f8 <HAL_InitTick+0xec>)
 800239a:	f001 fe1d 	bl	8003fd8 <HAL_TIM_Base_Init>
 800239e:	4603      	mov	r3, r0
 80023a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80023a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d11b      	bne.n	80023e4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 80023ac:	4812      	ldr	r0, [pc, #72]	@ (80023f8 <HAL_InitTick+0xec>)
 80023ae:	f001 fe6d 	bl	800408c <HAL_TIM_Base_Start_IT>
 80023b2:	4603      	mov	r3, r0
 80023b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80023b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d111      	bne.n	80023e4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80023c0:	202d      	movs	r0, #45	@ 0x2d
 80023c2:	f000 fa67 	bl	8002894 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b0f      	cmp	r3, #15
 80023ca:	d808      	bhi.n	80023de <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 80023cc:	2200      	movs	r2, #0
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	202d      	movs	r0, #45	@ 0x2d
 80023d2:	f000 fa43 	bl	800285c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002400 <HAL_InitTick+0xf4>)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	e002      	b.n	80023e4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80023e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3738      	adds	r7, #56	@ 0x38
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40023800 	.word	0x40023800
 80023f4:	431bde83 	.word	0x431bde83
 80023f8:	200003ec 	.word	0x200003ec
 80023fc:	40002000 	.word	0x40002000
 8002400:	20000004 	.word	0x20000004

08002404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002408:	bf00      	nop
 800240a:	e7fd      	b.n	8002408 <NMI_Handler+0x4>

0800240c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002410:	bf00      	nop
 8002412:	e7fd      	b.n	8002410 <HardFault_Handler+0x4>

08002414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002418:	bf00      	nop
 800241a:	e7fd      	b.n	8002418 <MemManage_Handler+0x4>

0800241c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002420:	bf00      	nop
 8002422:	e7fd      	b.n	8002420 <BusFault_Handler+0x4>

08002424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002428:	bf00      	nop
 800242a:	e7fd      	b.n	8002428 <UsageFault_Handler+0x4>

0800242c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
	...

0800243c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002440:	4802      	ldr	r0, [pc, #8]	@ (800244c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002442:	f001 fee2 	bl	800420a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	200003ec 	.word	0x200003ec

08002450 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return 1;
 8002454:	2301      	movs	r3, #1
}
 8002456:	4618      	mov	r0, r3
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <_kill>:

int _kill(int pid, int sig)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800246a:	f009 f869 	bl	800b540 <__errno>
 800246e:	4603      	mov	r3, r0
 8002470:	2216      	movs	r2, #22
 8002472:	601a      	str	r2, [r3, #0]
  return -1;
 8002474:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002478:	4618      	mov	r0, r3
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <_exit>:

void _exit (int status)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002488:	f04f 31ff 	mov.w	r1, #4294967295
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff ffe7 	bl	8002460 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002492:	bf00      	nop
 8002494:	e7fd      	b.n	8002492 <_exit+0x12>
	...

08002498 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024a0:	4a14      	ldr	r2, [pc, #80]	@ (80024f4 <_sbrk+0x5c>)
 80024a2:	4b15      	ldr	r3, [pc, #84]	@ (80024f8 <_sbrk+0x60>)
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024ac:	4b13      	ldr	r3, [pc, #76]	@ (80024fc <_sbrk+0x64>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d102      	bne.n	80024ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024b4:	4b11      	ldr	r3, [pc, #68]	@ (80024fc <_sbrk+0x64>)
 80024b6:	4a12      	ldr	r2, [pc, #72]	@ (8002500 <_sbrk+0x68>)
 80024b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ba:	4b10      	ldr	r3, [pc, #64]	@ (80024fc <_sbrk+0x64>)
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4413      	add	r3, r2
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d207      	bcs.n	80024d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024c8:	f009 f83a 	bl	800b540 <__errno>
 80024cc:	4603      	mov	r3, r0
 80024ce:	220c      	movs	r2, #12
 80024d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024d2:	f04f 33ff 	mov.w	r3, #4294967295
 80024d6:	e009      	b.n	80024ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024d8:	4b08      	ldr	r3, [pc, #32]	@ (80024fc <_sbrk+0x64>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024de:	4b07      	ldr	r3, [pc, #28]	@ (80024fc <_sbrk+0x64>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4413      	add	r3, r2
 80024e6:	4a05      	ldr	r2, [pc, #20]	@ (80024fc <_sbrk+0x64>)
 80024e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024ea:	68fb      	ldr	r3, [r7, #12]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20020000 	.word	0x20020000
 80024f8:	00000400 	.word	0x00000400
 80024fc:	20000434 	.word	0x20000434
 8002500:	20004460 	.word	0x20004460

08002504 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002508:	4b06      	ldr	r3, [pc, #24]	@ (8002524 <SystemInit+0x20>)
 800250a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800250e:	4a05      	ldr	r2, [pc, #20]	@ (8002524 <SystemInit+0x20>)
 8002510:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002514:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	e000ed00 	.word	0xe000ed00

08002528 <decode_vlq>:
/**
 *  @brief Processes variable length quantity (VLQ) values from a file pointer 
 * @param fp File pointer to midi file
 * @param vlq_value decoded vlq value*/
uint32_t decode_vlq(FIL *fp)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
     * each byte containing 7 bits of data and an 8th bit(MSB) as a continuation flag. 
     * if the bit is 1 the number continues into the next byte
     * if the bit is 0 the number does not continue
     *  */
    uint8_t byte;
    uint32_t vlq_value = 0;
 8002530:	2300      	movs	r3, #0
 8002532:	60fb      	str	r3, [r7, #12]

    do
    {
        f_read(fp, &byte, 1, NULL);
 8002534:	f107 010b 	add.w	r1, r7, #11
 8002538:	2300      	movs	r3, #0
 800253a:	2201      	movs	r2, #1
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f005 fbb8 	bl	8007cb2 <f_read>
        vlq_value = (vlq_value << 7) | (byte & 0x7F); // ignores msb for read byte and shifts over 7
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	01da      	lsls	r2, r3, #7
 8002546:	7afb      	ldrb	r3, [r7, #11]
 8002548:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800254c:	4313      	orrs	r3, r2
 800254e:	60fb      	str	r3, [r7, #12]
    } while (byte & 0x80);
 8002550:	7afb      	ldrb	r3, [r7, #11]
 8002552:	b25b      	sxtb	r3, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	dbed      	blt.n	8002534 <decode_vlq+0xc>

    return vlq_value;
 8002558:	68fb      	ldr	r3, [r7, #12]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <delta_time_to_ms>:
/**
 *  @brief takes the delta time value for the given event and converts it to ms
 * @param delta_time delta time in ticks of event 
 * @param ctrl pointer to system timing info*/
uint16_t delta_time_to_ms(uint8_t delta_time, MIDI_controller *ctrl)
{
 8002562:	b480      	push	{r7}
 8002564:	b085      	sub	sp, #20
 8002566:	af00      	add	r7, sp, #0
 8002568:	4603      	mov	r3, r0
 800256a:	6039      	str	r1, [r7, #0]
 800256c:	71fb      	strb	r3, [r7, #7]
    float ms = 0;
 800256e:	f04f 0300 	mov.w	r3, #0
 8002572:	60fb      	str	r3, [r7, #12]
    // printf("delta time: %d\n", delta_time);
    // printf("tick per q note: %d\n", ctrl->tick_per_q_note);
    // printf("tempo: %d\n", ctrl->tempo);

    // needs to be a float to do the division or else returns 0
    ms = ((float)delta_time / ctrl->tick_per_q_note) * (60000 / ctrl->tempo);
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	ee07 3a90 	vmov	s15, r3
 800257a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	889b      	ldrh	r3, [r3, #4]
 8002582:	ee07 3a90 	vmov	s15, r3
 8002586:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800258a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	799b      	ldrb	r3, [r3, #6]
 8002592:	461a      	mov	r2, r3
 8002594:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8002598:	fb93 f3f2 	sdiv	r3, r3, r2
 800259c:	ee07 3a90 	vmov	s15, r3
 80025a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025a8:	edc7 7a03 	vstr	s15, [r7, #12]

    return ms;
 80025ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80025b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025b4:	ee17 3a90 	vmov	r3, s15
 80025b8:	b29b      	uxth	r3, r3
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
	...

080025c8 <myprintf>:

void myprintf(const char *fmt, ...) {
 80025c8:	b40f      	push	{r0, r1, r2, r3}
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80025d0:	f107 0314 	add.w	r3, r7, #20
 80025d4:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025de:	480b      	ldr	r0, [pc, #44]	@ (800260c <myprintf+0x44>)
 80025e0:	f008 ff44 	bl	800b46c <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80025e4:	4809      	ldr	r0, [pc, #36]	@ (800260c <myprintf+0x44>)
 80025e6:	f7fd fe13 	bl	8000210 <strlen>
 80025ea:	4603      	mov	r3, r0
 80025ec:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	f04f 33ff 	mov.w	r3, #4294967295
 80025f6:	4905      	ldr	r1, [pc, #20]	@ (800260c <myprintf+0x44>)
 80025f8:	4805      	ldr	r0, [pc, #20]	@ (8002610 <myprintf+0x48>)
 80025fa:	f002 fb6f 	bl	8004cdc <HAL_UART_Transmit>

}
 80025fe:	bf00      	nop
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002608:	b004      	add	sp, #16
 800260a:	4770      	bx	lr
 800260c:	20000438 	.word	0x20000438
 8002610:	20000398 	.word	0x20000398

08002614 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002614:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800264c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002618:	f7ff ff74 	bl	8002504 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800261c:	480c      	ldr	r0, [pc, #48]	@ (8002650 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800261e:	490d      	ldr	r1, [pc, #52]	@ (8002654 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002620:	4a0d      	ldr	r2, [pc, #52]	@ (8002658 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002624:	e002      	b.n	800262c <LoopCopyDataInit>

08002626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800262a:	3304      	adds	r3, #4

0800262c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800262c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800262e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002630:	d3f9      	bcc.n	8002626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002632:	4a0a      	ldr	r2, [pc, #40]	@ (800265c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002634:	4c0a      	ldr	r4, [pc, #40]	@ (8002660 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002638:	e001      	b.n	800263e <LoopFillZerobss>

0800263a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800263a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800263c:	3204      	adds	r2, #4

0800263e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800263e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002640:	d3fb      	bcc.n	800263a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002642:	f008 ff83 	bl	800b54c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002646:	f7fe fc89 	bl	8000f5c <main>
  bx  lr    
 800264a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800264c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002654:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002658:	0800d408 	.word	0x0800d408
  ldr r2, =_sbss
 800265c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002660:	20004460 	.word	0x20004460

08002664 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002664:	e7fe      	b.n	8002664 <ADC_IRQHandler>
	...

08002668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800266c:	4b0e      	ldr	r3, [pc, #56]	@ (80026a8 <HAL_Init+0x40>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a0d      	ldr	r2, [pc, #52]	@ (80026a8 <HAL_Init+0x40>)
 8002672:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002676:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002678:	4b0b      	ldr	r3, [pc, #44]	@ (80026a8 <HAL_Init+0x40>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a0a      	ldr	r2, [pc, #40]	@ (80026a8 <HAL_Init+0x40>)
 800267e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002682:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002684:	4b08      	ldr	r3, [pc, #32]	@ (80026a8 <HAL_Init+0x40>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a07      	ldr	r2, [pc, #28]	@ (80026a8 <HAL_Init+0x40>)
 800268a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800268e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002690:	2003      	movs	r0, #3
 8002692:	f000 f8d8 	bl	8002846 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002696:	200f      	movs	r0, #15
 8002698:	f7ff fe38 	bl	800230c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800269c:	f7ff fd1e 	bl	80020dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40023c00 	.word	0x40023c00

080026ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026b0:	4b06      	ldr	r3, [pc, #24]	@ (80026cc <HAL_IncTick+0x20>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	461a      	mov	r2, r3
 80026b6:	4b06      	ldr	r3, [pc, #24]	@ (80026d0 <HAL_IncTick+0x24>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4413      	add	r3, r2
 80026bc:	4a04      	ldr	r2, [pc, #16]	@ (80026d0 <HAL_IncTick+0x24>)
 80026be:	6013      	str	r3, [r2, #0]
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	20000008 	.word	0x20000008
 80026d0:	20000538 	.word	0x20000538

080026d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  return uwTick;
 80026d8:	4b03      	ldr	r3, [pc, #12]	@ (80026e8 <HAL_GetTick+0x14>)
 80026da:	681b      	ldr	r3, [r3, #0]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	20000538 	.word	0x20000538

080026ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002730 <__NVIC_SetPriorityGrouping+0x44>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002708:	4013      	ands	r3, r2
 800270a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002714:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002718:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800271c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800271e:	4a04      	ldr	r2, [pc, #16]	@ (8002730 <__NVIC_SetPriorityGrouping+0x44>)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	60d3      	str	r3, [r2, #12]
}
 8002724:	bf00      	nop
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002738:	4b04      	ldr	r3, [pc, #16]	@ (800274c <__NVIC_GetPriorityGrouping+0x18>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	0a1b      	lsrs	r3, r3, #8
 800273e:	f003 0307 	and.w	r3, r3, #7
}
 8002742:	4618      	mov	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800275a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275e:	2b00      	cmp	r3, #0
 8002760:	db0b      	blt.n	800277a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	f003 021f 	and.w	r2, r3, #31
 8002768:	4907      	ldr	r1, [pc, #28]	@ (8002788 <__NVIC_EnableIRQ+0x38>)
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	2001      	movs	r0, #1
 8002772:	fa00 f202 	lsl.w	r2, r0, r2
 8002776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	e000e100 	.word	0xe000e100

0800278c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	6039      	str	r1, [r7, #0]
 8002796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279c:	2b00      	cmp	r3, #0
 800279e:	db0a      	blt.n	80027b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	490c      	ldr	r1, [pc, #48]	@ (80027d8 <__NVIC_SetPriority+0x4c>)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	0112      	lsls	r2, r2, #4
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	440b      	add	r3, r1
 80027b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027b4:	e00a      	b.n	80027cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	4908      	ldr	r1, [pc, #32]	@ (80027dc <__NVIC_SetPriority+0x50>)
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	3b04      	subs	r3, #4
 80027c4:	0112      	lsls	r2, r2, #4
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	440b      	add	r3, r1
 80027ca:	761a      	strb	r2, [r3, #24]
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	e000e100 	.word	0xe000e100
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b089      	sub	sp, #36	@ 0x24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f1c3 0307 	rsb	r3, r3, #7
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	bf28      	it	cs
 80027fe:	2304      	movcs	r3, #4
 8002800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	3304      	adds	r3, #4
 8002806:	2b06      	cmp	r3, #6
 8002808:	d902      	bls.n	8002810 <NVIC_EncodePriority+0x30>
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	3b03      	subs	r3, #3
 800280e:	e000      	b.n	8002812 <NVIC_EncodePriority+0x32>
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002814:	f04f 32ff 	mov.w	r2, #4294967295
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43da      	mvns	r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	401a      	ands	r2, r3
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002828:	f04f 31ff 	mov.w	r1, #4294967295
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	fa01 f303 	lsl.w	r3, r1, r3
 8002832:	43d9      	mvns	r1, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002838:	4313      	orrs	r3, r2
         );
}
 800283a:	4618      	mov	r0, r3
 800283c:	3724      	adds	r7, #36	@ 0x24
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b082      	sub	sp, #8
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7ff ff4c 	bl	80026ec <__NVIC_SetPriorityGrouping>
}
 8002854:	bf00      	nop
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
 8002868:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800286a:	2300      	movs	r3, #0
 800286c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800286e:	f7ff ff61 	bl	8002734 <__NVIC_GetPriorityGrouping>
 8002872:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	68b9      	ldr	r1, [r7, #8]
 8002878:	6978      	ldr	r0, [r7, #20]
 800287a:	f7ff ffb1 	bl	80027e0 <NVIC_EncodePriority>
 800287e:	4602      	mov	r2, r0
 8002880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002884:	4611      	mov	r1, r2
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff ff80 	bl	800278c <__NVIC_SetPriority>
}
 800288c:	bf00      	nop
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800289e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff ff54 	bl	8002750 <__NVIC_EnableIRQ>
}
 80028a8:	bf00      	nop
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b089      	sub	sp, #36	@ 0x24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028be:	2300      	movs	r3, #0
 80028c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028c6:	2300      	movs	r3, #0
 80028c8:	61fb      	str	r3, [r7, #28]
 80028ca:	e165      	b.n	8002b98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028cc:	2201      	movs	r2, #1
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	4013      	ands	r3, r2
 80028de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	f040 8154 	bne.w	8002b92 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d005      	beq.n	8002902 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d130      	bne.n	8002964 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	2203      	movs	r2, #3
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43db      	mvns	r3, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4013      	ands	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4313      	orrs	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002938:	2201      	movs	r2, #1
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	091b      	lsrs	r3, r3, #4
 800294e:	f003 0201 	and.w	r2, r3, #1
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4313      	orrs	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 0303 	and.w	r3, r3, #3
 800296c:	2b03      	cmp	r3, #3
 800296e:	d017      	beq.n	80029a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	2203      	movs	r2, #3
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4013      	ands	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d123      	bne.n	80029f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	08da      	lsrs	r2, r3, #3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3208      	adds	r2, #8
 80029b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	220f      	movs	r2, #15
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	691a      	ldr	r2, [r3, #16]
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	08da      	lsrs	r2, r3, #3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	3208      	adds	r2, #8
 80029ee:	69b9      	ldr	r1, [r7, #24]
 80029f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	2203      	movs	r2, #3
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 0203 	and.w	r2, r3, #3
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 80ae 	beq.w	8002b92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	4b5d      	ldr	r3, [pc, #372]	@ (8002bb0 <HAL_GPIO_Init+0x300>)
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3e:	4a5c      	ldr	r2, [pc, #368]	@ (8002bb0 <HAL_GPIO_Init+0x300>)
 8002a40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a44:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a46:	4b5a      	ldr	r3, [pc, #360]	@ (8002bb0 <HAL_GPIO_Init+0x300>)
 8002a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a52:	4a58      	ldr	r2, [pc, #352]	@ (8002bb4 <HAL_GPIO_Init+0x304>)
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	089b      	lsrs	r3, r3, #2
 8002a58:	3302      	adds	r3, #2
 8002a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	220f      	movs	r2, #15
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4013      	ands	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a4f      	ldr	r2, [pc, #316]	@ (8002bb8 <HAL_GPIO_Init+0x308>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d025      	beq.n	8002aca <HAL_GPIO_Init+0x21a>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a4e      	ldr	r2, [pc, #312]	@ (8002bbc <HAL_GPIO_Init+0x30c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d01f      	beq.n	8002ac6 <HAL_GPIO_Init+0x216>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a4d      	ldr	r2, [pc, #308]	@ (8002bc0 <HAL_GPIO_Init+0x310>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d019      	beq.n	8002ac2 <HAL_GPIO_Init+0x212>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a4c      	ldr	r2, [pc, #304]	@ (8002bc4 <HAL_GPIO_Init+0x314>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d013      	beq.n	8002abe <HAL_GPIO_Init+0x20e>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a4b      	ldr	r2, [pc, #300]	@ (8002bc8 <HAL_GPIO_Init+0x318>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d00d      	beq.n	8002aba <HAL_GPIO_Init+0x20a>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a4a      	ldr	r2, [pc, #296]	@ (8002bcc <HAL_GPIO_Init+0x31c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d007      	beq.n	8002ab6 <HAL_GPIO_Init+0x206>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a49      	ldr	r2, [pc, #292]	@ (8002bd0 <HAL_GPIO_Init+0x320>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d101      	bne.n	8002ab2 <HAL_GPIO_Init+0x202>
 8002aae:	2306      	movs	r3, #6
 8002ab0:	e00c      	b.n	8002acc <HAL_GPIO_Init+0x21c>
 8002ab2:	2307      	movs	r3, #7
 8002ab4:	e00a      	b.n	8002acc <HAL_GPIO_Init+0x21c>
 8002ab6:	2305      	movs	r3, #5
 8002ab8:	e008      	b.n	8002acc <HAL_GPIO_Init+0x21c>
 8002aba:	2304      	movs	r3, #4
 8002abc:	e006      	b.n	8002acc <HAL_GPIO_Init+0x21c>
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e004      	b.n	8002acc <HAL_GPIO_Init+0x21c>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e002      	b.n	8002acc <HAL_GPIO_Init+0x21c>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <HAL_GPIO_Init+0x21c>
 8002aca:	2300      	movs	r3, #0
 8002acc:	69fa      	ldr	r2, [r7, #28]
 8002ace:	f002 0203 	and.w	r2, r2, #3
 8002ad2:	0092      	lsls	r2, r2, #2
 8002ad4:	4093      	lsls	r3, r2
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002adc:	4935      	ldr	r1, [pc, #212]	@ (8002bb4 <HAL_GPIO_Init+0x304>)
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	089b      	lsrs	r3, r3, #2
 8002ae2:	3302      	adds	r3, #2
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aea:	4b3a      	ldr	r3, [pc, #232]	@ (8002bd4 <HAL_GPIO_Init+0x324>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	43db      	mvns	r3, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4013      	ands	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b0e:	4a31      	ldr	r2, [pc, #196]	@ (8002bd4 <HAL_GPIO_Init+0x324>)
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b14:	4b2f      	ldr	r3, [pc, #188]	@ (8002bd4 <HAL_GPIO_Init+0x324>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4013      	ands	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b38:	4a26      	ldr	r2, [pc, #152]	@ (8002bd4 <HAL_GPIO_Init+0x324>)
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b3e:	4b25      	ldr	r3, [pc, #148]	@ (8002bd4 <HAL_GPIO_Init+0x324>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	43db      	mvns	r3, r3
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b62:	4a1c      	ldr	r2, [pc, #112]	@ (8002bd4 <HAL_GPIO_Init+0x324>)
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b68:	4b1a      	ldr	r3, [pc, #104]	@ (8002bd4 <HAL_GPIO_Init+0x324>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	43db      	mvns	r3, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4013      	ands	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b8c:	4a11      	ldr	r2, [pc, #68]	@ (8002bd4 <HAL_GPIO_Init+0x324>)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3301      	adds	r3, #1
 8002b96:	61fb      	str	r3, [r7, #28]
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	2b0f      	cmp	r3, #15
 8002b9c:	f67f ae96 	bls.w	80028cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ba0:	bf00      	nop
 8002ba2:	bf00      	nop
 8002ba4:	3724      	adds	r7, #36	@ 0x24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	40013800 	.word	0x40013800
 8002bb8:	40020000 	.word	0x40020000
 8002bbc:	40020400 	.word	0x40020400
 8002bc0:	40020800 	.word	0x40020800
 8002bc4:	40020c00 	.word	0x40020c00
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	40021400 	.word	0x40021400
 8002bd0:	40021800 	.word	0x40021800
 8002bd4:	40013c00 	.word	0x40013c00

08002bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	807b      	strh	r3, [r7, #2]
 8002be4:	4613      	mov	r3, r2
 8002be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002be8:	787b      	ldrb	r3, [r7, #1]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bee:	887a      	ldrh	r2, [r7, #2]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bf4:	e003      	b.n	8002bfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bf6:	887b      	ldrh	r3, [r7, #2]
 8002bf8:	041a      	lsls	r2, r3, #16
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	619a      	str	r2, [r3, #24]
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
	...

08002c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e0cc      	b.n	8002dba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c20:	4b68      	ldr	r3, [pc, #416]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 030f 	and.w	r3, r3, #15
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d90c      	bls.n	8002c48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2e:	4b65      	ldr	r3, [pc, #404]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c36:	4b63      	ldr	r3, [pc, #396]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e0b8      	b.n	8002dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d020      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c60:	4b59      	ldr	r3, [pc, #356]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	4a58      	ldr	r2, [pc, #352]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c78:	4b53      	ldr	r3, [pc, #332]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	4a52      	ldr	r2, [pc, #328]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c84:	4b50      	ldr	r3, [pc, #320]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	494d      	ldr	r1, [pc, #308]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d044      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d107      	bne.n	8002cba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002caa:	4b47      	ldr	r3, [pc, #284]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d119      	bne.n	8002cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e07f      	b.n	8002dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d003      	beq.n	8002cca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cc6:	2b03      	cmp	r3, #3
 8002cc8:	d107      	bne.n	8002cda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cca:	4b3f      	ldr	r3, [pc, #252]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d109      	bne.n	8002cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e06f      	b.n	8002dba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cda:	4b3b      	ldr	r3, [pc, #236]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e067      	b.n	8002dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cea:	4b37      	ldr	r3, [pc, #220]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f023 0203 	bic.w	r2, r3, #3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	4934      	ldr	r1, [pc, #208]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cfc:	f7ff fcea 	bl	80026d4 <HAL_GetTick>
 8002d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d02:	e00a      	b.n	8002d1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d04:	f7ff fce6 	bl	80026d4 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e04f      	b.n	8002dba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1a:	4b2b      	ldr	r3, [pc, #172]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 020c 	and.w	r2, r3, #12
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d1eb      	bne.n	8002d04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d2c:	4b25      	ldr	r3, [pc, #148]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 030f 	and.w	r3, r3, #15
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d20c      	bcs.n	8002d54 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3a:	4b22      	ldr	r3, [pc, #136]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d42:	4b20      	ldr	r3, [pc, #128]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e032      	b.n	8002dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d008      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d60:	4b19      	ldr	r3, [pc, #100]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	4916      	ldr	r1, [pc, #88]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d009      	beq.n	8002d92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d7e:	4b12      	ldr	r3, [pc, #72]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	490e      	ldr	r1, [pc, #56]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d92:	f000 f887 	bl	8002ea4 <HAL_RCC_GetSysClockFreq>
 8002d96:	4602      	mov	r2, r0
 8002d98:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	091b      	lsrs	r3, r3, #4
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	490a      	ldr	r1, [pc, #40]	@ (8002dcc <HAL_RCC_ClockConfig+0x1c0>)
 8002da4:	5ccb      	ldrb	r3, [r1, r3]
 8002da6:	fa22 f303 	lsr.w	r3, r2, r3
 8002daa:	4a09      	ldr	r2, [pc, #36]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002dae:	4b09      	ldr	r3, [pc, #36]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff faaa 	bl	800230c <HAL_InitTick>

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40023c00 	.word	0x40023c00
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	0800d2fc 	.word	0x0800d2fc
 8002dd0:	20000000 	.word	0x20000000
 8002dd4:	20000004 	.word	0x20000004

08002dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ddc:	4b03      	ldr	r3, [pc, #12]	@ (8002dec <HAL_RCC_GetHCLKFreq+0x14>)
 8002dde:	681b      	ldr	r3, [r3, #0]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	20000000 	.word	0x20000000

08002df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002df4:	f7ff fff0 	bl	8002dd8 <HAL_RCC_GetHCLKFreq>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	4b05      	ldr	r3, [pc, #20]	@ (8002e10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	0a9b      	lsrs	r3, r3, #10
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	4903      	ldr	r1, [pc, #12]	@ (8002e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e06:	5ccb      	ldrb	r3, [r1, r3]
 8002e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40023800 	.word	0x40023800
 8002e14:	0800d30c 	.word	0x0800d30c

08002e18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e1c:	f7ff ffdc 	bl	8002dd8 <HAL_RCC_GetHCLKFreq>
 8002e20:	4602      	mov	r2, r0
 8002e22:	4b05      	ldr	r3, [pc, #20]	@ (8002e38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	0b5b      	lsrs	r3, r3, #13
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	4903      	ldr	r1, [pc, #12]	@ (8002e3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e2e:	5ccb      	ldrb	r3, [r1, r3]
 8002e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	0800d30c 	.word	0x0800d30c

08002e40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	220f      	movs	r2, #15
 8002e4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e50:	4b12      	ldr	r3, [pc, #72]	@ (8002e9c <HAL_RCC_GetClockConfig+0x5c>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 0203 	and.w	r2, r3, #3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8002e9c <HAL_RCC_GetClockConfig+0x5c>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e68:	4b0c      	ldr	r3, [pc, #48]	@ (8002e9c <HAL_RCC_GetClockConfig+0x5c>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e74:	4b09      	ldr	r3, [pc, #36]	@ (8002e9c <HAL_RCC_GetClockConfig+0x5c>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	08db      	lsrs	r3, r3, #3
 8002e7a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e82:	4b07      	ldr	r3, [pc, #28]	@ (8002ea0 <HAL_RCC_GetClockConfig+0x60>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 020f 	and.w	r2, r3, #15
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	601a      	str	r2, [r3, #0]
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	40023c00 	.word	0x40023c00

08002ea4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ea8:	b0a6      	sub	sp, #152	@ 0x98
 8002eaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eca:	4bc8      	ldr	r3, [pc, #800]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x348>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 030c 	and.w	r3, r3, #12
 8002ed2:	2b0c      	cmp	r3, #12
 8002ed4:	f200 817e 	bhi.w	80031d4 <HAL_RCC_GetSysClockFreq+0x330>
 8002ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8002ee0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ede:	bf00      	nop
 8002ee0:	08002f15 	.word	0x08002f15
 8002ee4:	080031d5 	.word	0x080031d5
 8002ee8:	080031d5 	.word	0x080031d5
 8002eec:	080031d5 	.word	0x080031d5
 8002ef0:	08002f1d 	.word	0x08002f1d
 8002ef4:	080031d5 	.word	0x080031d5
 8002ef8:	080031d5 	.word	0x080031d5
 8002efc:	080031d5 	.word	0x080031d5
 8002f00:	08002f25 	.word	0x08002f25
 8002f04:	080031d5 	.word	0x080031d5
 8002f08:	080031d5 	.word	0x080031d5
 8002f0c:	080031d5 	.word	0x080031d5
 8002f10:	0800308f 	.word	0x0800308f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f14:	4bb6      	ldr	r3, [pc, #728]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002f16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002f1a:	e15f      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f1c:	4bb5      	ldr	r3, [pc, #724]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x350>)
 8002f1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002f22:	e15b      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f24:	4bb1      	ldr	r3, [pc, #708]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x348>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f30:	4bae      	ldr	r3, [pc, #696]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x348>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d031      	beq.n	8002fa0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f3c:	4bab      	ldr	r3, [pc, #684]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x348>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	099b      	lsrs	r3, r3, #6
 8002f42:	2200      	movs	r2, #0
 8002f44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002f48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f4e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f50:	2300      	movs	r3, #0
 8002f52:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f54:	4ba7      	ldr	r3, [pc, #668]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x350>)
 8002f56:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002f5a:	462a      	mov	r2, r5
 8002f5c:	fb03 f202 	mul.w	r2, r3, r2
 8002f60:	2300      	movs	r3, #0
 8002f62:	4621      	mov	r1, r4
 8002f64:	fb01 f303 	mul.w	r3, r1, r3
 8002f68:	4413      	add	r3, r2
 8002f6a:	4aa2      	ldr	r2, [pc, #648]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x350>)
 8002f6c:	4621      	mov	r1, r4
 8002f6e:	fba1 1202 	umull	r1, r2, r1, r2
 8002f72:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002f74:	460a      	mov	r2, r1
 8002f76:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002f78:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002f7a:	4413      	add	r3, r2
 8002f7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002f7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f82:	2200      	movs	r2, #0
 8002f84:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002f86:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002f88:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f8c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002f90:	f7fd fe52 	bl	8000c38 <__aeabi_uldivmod>
 8002f94:	4602      	mov	r2, r0
 8002f96:	460b      	mov	r3, r1
 8002f98:	4613      	mov	r3, r2
 8002f9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002f9e:	e064      	b.n	800306a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa0:	4b92      	ldr	r3, [pc, #584]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x348>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	099b      	lsrs	r3, r3, #6
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	653b      	str	r3, [r7, #80]	@ 0x50
 8002faa:	657a      	str	r2, [r7, #84]	@ 0x54
 8002fac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fb8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002fbc:	4622      	mov	r2, r4
 8002fbe:	462b      	mov	r3, r5
 8002fc0:	f04f 0000 	mov.w	r0, #0
 8002fc4:	f04f 0100 	mov.w	r1, #0
 8002fc8:	0159      	lsls	r1, r3, #5
 8002fca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fce:	0150      	lsls	r0, r2, #5
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4621      	mov	r1, r4
 8002fd6:	1a51      	subs	r1, r2, r1
 8002fd8:	6139      	str	r1, [r7, #16]
 8002fda:	4629      	mov	r1, r5
 8002fdc:	eb63 0301 	sbc.w	r3, r3, r1
 8002fe0:	617b      	str	r3, [r7, #20]
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	f04f 0300 	mov.w	r3, #0
 8002fea:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fee:	4659      	mov	r1, fp
 8002ff0:	018b      	lsls	r3, r1, #6
 8002ff2:	4651      	mov	r1, sl
 8002ff4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ff8:	4651      	mov	r1, sl
 8002ffa:	018a      	lsls	r2, r1, #6
 8002ffc:	4651      	mov	r1, sl
 8002ffe:	ebb2 0801 	subs.w	r8, r2, r1
 8003002:	4659      	mov	r1, fp
 8003004:	eb63 0901 	sbc.w	r9, r3, r1
 8003008:	f04f 0200 	mov.w	r2, #0
 800300c:	f04f 0300 	mov.w	r3, #0
 8003010:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003014:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003018:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800301c:	4690      	mov	r8, r2
 800301e:	4699      	mov	r9, r3
 8003020:	4623      	mov	r3, r4
 8003022:	eb18 0303 	adds.w	r3, r8, r3
 8003026:	60bb      	str	r3, [r7, #8]
 8003028:	462b      	mov	r3, r5
 800302a:	eb49 0303 	adc.w	r3, r9, r3
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	f04f 0300 	mov.w	r3, #0
 8003038:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800303c:	4629      	mov	r1, r5
 800303e:	028b      	lsls	r3, r1, #10
 8003040:	4621      	mov	r1, r4
 8003042:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003046:	4621      	mov	r1, r4
 8003048:	028a      	lsls	r2, r1, #10
 800304a:	4610      	mov	r0, r2
 800304c:	4619      	mov	r1, r3
 800304e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003052:	2200      	movs	r2, #0
 8003054:	643b      	str	r3, [r7, #64]	@ 0x40
 8003056:	647a      	str	r2, [r7, #68]	@ 0x44
 8003058:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800305c:	f7fd fdec 	bl	8000c38 <__aeabi_uldivmod>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	4613      	mov	r3, r2
 8003066:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800306a:	4b60      	ldr	r3, [pc, #384]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x348>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	0c1b      	lsrs	r3, r3, #16
 8003070:	f003 0303 	and.w	r3, r3, #3
 8003074:	3301      	adds	r3, #1
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 800307c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003080:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003084:	fbb2 f3f3 	udiv	r3, r2, r3
 8003088:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800308c:	e0a6      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800308e:	4b57      	ldr	r3, [pc, #348]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x348>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003096:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800309a:	4b54      	ldr	r3, [pc, #336]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x348>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d02a      	beq.n	80030fc <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030a6:	4b51      	ldr	r3, [pc, #324]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x348>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	099b      	lsrs	r3, r3, #6
 80030ac:	2200      	movs	r2, #0
 80030ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80030b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80030b8:	2100      	movs	r1, #0
 80030ba:	4b4e      	ldr	r3, [pc, #312]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x350>)
 80030bc:	fb03 f201 	mul.w	r2, r3, r1
 80030c0:	2300      	movs	r3, #0
 80030c2:	fb00 f303 	mul.w	r3, r0, r3
 80030c6:	4413      	add	r3, r2
 80030c8:	4a4a      	ldr	r2, [pc, #296]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x350>)
 80030ca:	fba0 1202 	umull	r1, r2, r0, r2
 80030ce:	677a      	str	r2, [r7, #116]	@ 0x74
 80030d0:	460a      	mov	r2, r1
 80030d2:	673a      	str	r2, [r7, #112]	@ 0x70
 80030d4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80030d6:	4413      	add	r3, r2
 80030d8:	677b      	str	r3, [r7, #116]	@ 0x74
 80030da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030de:	2200      	movs	r2, #0
 80030e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80030e2:	637a      	str	r2, [r7, #52]	@ 0x34
 80030e4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80030e8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80030ec:	f7fd fda4 	bl	8000c38 <__aeabi_uldivmod>
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	4613      	mov	r3, r2
 80030f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80030fa:	e05b      	b.n	80031b4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030fc:	4b3b      	ldr	r3, [pc, #236]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x348>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	099b      	lsrs	r3, r3, #6
 8003102:	2200      	movs	r2, #0
 8003104:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003106:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800310a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800310e:	623b      	str	r3, [r7, #32]
 8003110:	2300      	movs	r3, #0
 8003112:	627b      	str	r3, [r7, #36]	@ 0x24
 8003114:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003118:	4642      	mov	r2, r8
 800311a:	464b      	mov	r3, r9
 800311c:	f04f 0000 	mov.w	r0, #0
 8003120:	f04f 0100 	mov.w	r1, #0
 8003124:	0159      	lsls	r1, r3, #5
 8003126:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800312a:	0150      	lsls	r0, r2, #5
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	4641      	mov	r1, r8
 8003132:	ebb2 0a01 	subs.w	sl, r2, r1
 8003136:	4649      	mov	r1, r9
 8003138:	eb63 0b01 	sbc.w	fp, r3, r1
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	f04f 0300 	mov.w	r3, #0
 8003144:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003148:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800314c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003150:	ebb2 040a 	subs.w	r4, r2, sl
 8003154:	eb63 050b 	sbc.w	r5, r3, fp
 8003158:	f04f 0200 	mov.w	r2, #0
 800315c:	f04f 0300 	mov.w	r3, #0
 8003160:	00eb      	lsls	r3, r5, #3
 8003162:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003166:	00e2      	lsls	r2, r4, #3
 8003168:	4614      	mov	r4, r2
 800316a:	461d      	mov	r5, r3
 800316c:	4643      	mov	r3, r8
 800316e:	18e3      	adds	r3, r4, r3
 8003170:	603b      	str	r3, [r7, #0]
 8003172:	464b      	mov	r3, r9
 8003174:	eb45 0303 	adc.w	r3, r5, r3
 8003178:	607b      	str	r3, [r7, #4]
 800317a:	f04f 0200 	mov.w	r2, #0
 800317e:	f04f 0300 	mov.w	r3, #0
 8003182:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003186:	4629      	mov	r1, r5
 8003188:	028b      	lsls	r3, r1, #10
 800318a:	4621      	mov	r1, r4
 800318c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003190:	4621      	mov	r1, r4
 8003192:	028a      	lsls	r2, r1, #10
 8003194:	4610      	mov	r0, r2
 8003196:	4619      	mov	r1, r3
 8003198:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800319c:	2200      	movs	r2, #0
 800319e:	61bb      	str	r3, [r7, #24]
 80031a0:	61fa      	str	r2, [r7, #28]
 80031a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031a6:	f7fd fd47 	bl	8000c38 <__aeabi_uldivmod>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	4613      	mov	r3, r2
 80031b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80031b4:	4b0d      	ldr	r3, [pc, #52]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x348>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	0f1b      	lsrs	r3, r3, #28
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80031c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80031c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80031ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80031d2:	e003      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031d4:	4b06      	ldr	r3, [pc, #24]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80031d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80031da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3798      	adds	r7, #152	@ 0x98
 80031e4:	46bd      	mov	sp, r7
 80031e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031ea:	bf00      	nop
 80031ec:	40023800 	.word	0x40023800
 80031f0:	00f42400 	.word	0x00f42400
 80031f4:	017d7840 	.word	0x017d7840

080031f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e28d      	b.n	8003726 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 8083 	beq.w	800331e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003218:	4b94      	ldr	r3, [pc, #592]	@ (800346c <HAL_RCC_OscConfig+0x274>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f003 030c 	and.w	r3, r3, #12
 8003220:	2b04      	cmp	r3, #4
 8003222:	d019      	beq.n	8003258 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003224:	4b91      	ldr	r3, [pc, #580]	@ (800346c <HAL_RCC_OscConfig+0x274>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f003 030c 	and.w	r3, r3, #12
        || \
 800322c:	2b08      	cmp	r3, #8
 800322e:	d106      	bne.n	800323e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003230:	4b8e      	ldr	r3, [pc, #568]	@ (800346c <HAL_RCC_OscConfig+0x274>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003238:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800323c:	d00c      	beq.n	8003258 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800323e:	4b8b      	ldr	r3, [pc, #556]	@ (800346c <HAL_RCC_OscConfig+0x274>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003246:	2b0c      	cmp	r3, #12
 8003248:	d112      	bne.n	8003270 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800324a:	4b88      	ldr	r3, [pc, #544]	@ (800346c <HAL_RCC_OscConfig+0x274>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003252:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003256:	d10b      	bne.n	8003270 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003258:	4b84      	ldr	r3, [pc, #528]	@ (800346c <HAL_RCC_OscConfig+0x274>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d05b      	beq.n	800331c <HAL_RCC_OscConfig+0x124>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d157      	bne.n	800331c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e25a      	b.n	8003726 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003278:	d106      	bne.n	8003288 <HAL_RCC_OscConfig+0x90>
 800327a:	4b7c      	ldr	r3, [pc, #496]	@ (800346c <HAL_RCC_OscConfig+0x274>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a7b      	ldr	r2, [pc, #492]	@ (800346c <HAL_RCC_OscConfig+0x274>)
 8003280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	e01d      	b.n	80032c4 <HAL_RCC_OscConfig+0xcc>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003290:	d10c      	bne.n	80032ac <HAL_RCC_OscConfig+0xb4>
 8003292:	4b76      	ldr	r3, [pc, #472]	@ (800346c <HAL_RCC_OscConfig+0x274>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a75      	ldr	r2, [pc, #468]	@ (800346c <HAL_RCC_OscConfig+0x274>)
 8003298:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	4b73      	ldr	r3, [pc, #460]	@ (800346c <HAL_RCC_OscConfig+0x274>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a72      	ldr	r2, [pc, #456]	@ (800346c <HAL_RCC_OscConfig+0x274>)
 80032a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	e00b      	b.n	80032c4 <HAL_RCC_OscConfig+0xcc>
 80032ac:	4b6f      	ldr	r3, [pc, #444]	@ (800346c <HAL_RCC_OscConfig+0x274>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a6e      	ldr	r2, [pc, #440]	@ (800346c <HAL_RCC_OscConfig+0x274>)
 80032b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032b6:	6013      	str	r3, [r2, #0]
 80032b8:	4b6c      	ldr	r3, [pc, #432]	@ (800346c <HAL_RCC_OscConfig+0x274>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a6b      	ldr	r2, [pc, #428]	@ (800346c <HAL_RCC_OscConfig+0x274>)
 80032be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d013      	beq.n	80032f4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032cc:	f7ff fa02 	bl	80026d4 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d4:	f7ff f9fe 	bl	80026d4 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b64      	cmp	r3, #100	@ 0x64
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e21f      	b.n	8003726 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e6:	4b61      	ldr	r3, [pc, #388]	@ (800346c <HAL_RCC_OscConfig+0x274>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0f0      	beq.n	80032d4 <HAL_RCC_OscConfig+0xdc>
 80032f2:	e014      	b.n	800331e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f4:	f7ff f9ee 	bl	80026d4 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032fc:	f7ff f9ea 	bl	80026d4 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b64      	cmp	r3, #100	@ 0x64
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e20b      	b.n	8003726 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800330e:	4b57      	ldr	r3, [pc, #348]	@ (800346c <HAL_RCC_OscConfig+0x274>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f0      	bne.n	80032fc <HAL_RCC_OscConfig+0x104>
 800331a:	e000      	b.n	800331e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800331c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d06f      	beq.n	800340a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800332a:	4b50      	ldr	r3, [pc, #320]	@ (800346c <HAL_RCC_OscConfig+0x274>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 030c 	and.w	r3, r3, #12
 8003332:	2b00      	cmp	r3, #0
 8003334:	d017      	beq.n	8003366 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003336:	4b4d      	ldr	r3, [pc, #308]	@ (800346c <HAL_RCC_OscConfig+0x274>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 030c 	and.w	r3, r3, #12
        || \
 800333e:	2b08      	cmp	r3, #8
 8003340:	d105      	bne.n	800334e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003342:	4b4a      	ldr	r3, [pc, #296]	@ (800346c <HAL_RCC_OscConfig+0x274>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00b      	beq.n	8003366 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800334e:	4b47      	ldr	r3, [pc, #284]	@ (800346c <HAL_RCC_OscConfig+0x274>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003356:	2b0c      	cmp	r3, #12
 8003358:	d11c      	bne.n	8003394 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800335a:	4b44      	ldr	r3, [pc, #272]	@ (800346c <HAL_RCC_OscConfig+0x274>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d116      	bne.n	8003394 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003366:	4b41      	ldr	r3, [pc, #260]	@ (800346c <HAL_RCC_OscConfig+0x274>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d005      	beq.n	800337e <HAL_RCC_OscConfig+0x186>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d001      	beq.n	800337e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e1d3      	b.n	8003726 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800337e:	4b3b      	ldr	r3, [pc, #236]	@ (800346c <HAL_RCC_OscConfig+0x274>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	4937      	ldr	r1, [pc, #220]	@ (800346c <HAL_RCC_OscConfig+0x274>)
 800338e:	4313      	orrs	r3, r2
 8003390:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003392:	e03a      	b.n	800340a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d020      	beq.n	80033de <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800339c:	4b34      	ldr	r3, [pc, #208]	@ (8003470 <HAL_RCC_OscConfig+0x278>)
 800339e:	2201      	movs	r2, #1
 80033a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a2:	f7ff f997 	bl	80026d4 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033aa:	f7ff f993 	bl	80026d4 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e1b4      	b.n	8003726 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033bc:	4b2b      	ldr	r3, [pc, #172]	@ (800346c <HAL_RCC_OscConfig+0x274>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0f0      	beq.n	80033aa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c8:	4b28      	ldr	r3, [pc, #160]	@ (800346c <HAL_RCC_OscConfig+0x274>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	4925      	ldr	r1, [pc, #148]	@ (800346c <HAL_RCC_OscConfig+0x274>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	600b      	str	r3, [r1, #0]
 80033dc:	e015      	b.n	800340a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033de:	4b24      	ldr	r3, [pc, #144]	@ (8003470 <HAL_RCC_OscConfig+0x278>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e4:	f7ff f976 	bl	80026d4 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ec:	f7ff f972 	bl	80026d4 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e193      	b.n	8003726 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033fe:	4b1b      	ldr	r3, [pc, #108]	@ (800346c <HAL_RCC_OscConfig+0x274>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1f0      	bne.n	80033ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0308 	and.w	r3, r3, #8
 8003412:	2b00      	cmp	r3, #0
 8003414:	d036      	beq.n	8003484 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d016      	beq.n	800344c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800341e:	4b15      	ldr	r3, [pc, #84]	@ (8003474 <HAL_RCC_OscConfig+0x27c>)
 8003420:	2201      	movs	r2, #1
 8003422:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003424:	f7ff f956 	bl	80026d4 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800342c:	f7ff f952 	bl	80026d4 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e173      	b.n	8003726 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800343e:	4b0b      	ldr	r3, [pc, #44]	@ (800346c <HAL_RCC_OscConfig+0x274>)
 8003440:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0f0      	beq.n	800342c <HAL_RCC_OscConfig+0x234>
 800344a:	e01b      	b.n	8003484 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800344c:	4b09      	ldr	r3, [pc, #36]	@ (8003474 <HAL_RCC_OscConfig+0x27c>)
 800344e:	2200      	movs	r2, #0
 8003450:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003452:	f7ff f93f 	bl	80026d4 <HAL_GetTick>
 8003456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003458:	e00e      	b.n	8003478 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800345a:	f7ff f93b 	bl	80026d4 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d907      	bls.n	8003478 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e15c      	b.n	8003726 <HAL_RCC_OscConfig+0x52e>
 800346c:	40023800 	.word	0x40023800
 8003470:	42470000 	.word	0x42470000
 8003474:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003478:	4b8a      	ldr	r3, [pc, #552]	@ (80036a4 <HAL_RCC_OscConfig+0x4ac>)
 800347a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1ea      	bne.n	800345a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 8097 	beq.w	80035c0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003492:	2300      	movs	r3, #0
 8003494:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003496:	4b83      	ldr	r3, [pc, #524]	@ (80036a4 <HAL_RCC_OscConfig+0x4ac>)
 8003498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10f      	bne.n	80034c2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	60bb      	str	r3, [r7, #8]
 80034a6:	4b7f      	ldr	r3, [pc, #508]	@ (80036a4 <HAL_RCC_OscConfig+0x4ac>)
 80034a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034aa:	4a7e      	ldr	r2, [pc, #504]	@ (80036a4 <HAL_RCC_OscConfig+0x4ac>)
 80034ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80034b2:	4b7c      	ldr	r3, [pc, #496]	@ (80036a4 <HAL_RCC_OscConfig+0x4ac>)
 80034b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ba:	60bb      	str	r3, [r7, #8]
 80034bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034be:	2301      	movs	r3, #1
 80034c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c2:	4b79      	ldr	r3, [pc, #484]	@ (80036a8 <HAL_RCC_OscConfig+0x4b0>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d118      	bne.n	8003500 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ce:	4b76      	ldr	r3, [pc, #472]	@ (80036a8 <HAL_RCC_OscConfig+0x4b0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a75      	ldr	r2, [pc, #468]	@ (80036a8 <HAL_RCC_OscConfig+0x4b0>)
 80034d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034da:	f7ff f8fb 	bl	80026d4 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e2:	f7ff f8f7 	bl	80026d4 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e118      	b.n	8003726 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f4:	4b6c      	ldr	r3, [pc, #432]	@ (80036a8 <HAL_RCC_OscConfig+0x4b0>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0f0      	beq.n	80034e2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d106      	bne.n	8003516 <HAL_RCC_OscConfig+0x31e>
 8003508:	4b66      	ldr	r3, [pc, #408]	@ (80036a4 <HAL_RCC_OscConfig+0x4ac>)
 800350a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800350c:	4a65      	ldr	r2, [pc, #404]	@ (80036a4 <HAL_RCC_OscConfig+0x4ac>)
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	6713      	str	r3, [r2, #112]	@ 0x70
 8003514:	e01c      	b.n	8003550 <HAL_RCC_OscConfig+0x358>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	2b05      	cmp	r3, #5
 800351c:	d10c      	bne.n	8003538 <HAL_RCC_OscConfig+0x340>
 800351e:	4b61      	ldr	r3, [pc, #388]	@ (80036a4 <HAL_RCC_OscConfig+0x4ac>)
 8003520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003522:	4a60      	ldr	r2, [pc, #384]	@ (80036a4 <HAL_RCC_OscConfig+0x4ac>)
 8003524:	f043 0304 	orr.w	r3, r3, #4
 8003528:	6713      	str	r3, [r2, #112]	@ 0x70
 800352a:	4b5e      	ldr	r3, [pc, #376]	@ (80036a4 <HAL_RCC_OscConfig+0x4ac>)
 800352c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800352e:	4a5d      	ldr	r2, [pc, #372]	@ (80036a4 <HAL_RCC_OscConfig+0x4ac>)
 8003530:	f043 0301 	orr.w	r3, r3, #1
 8003534:	6713      	str	r3, [r2, #112]	@ 0x70
 8003536:	e00b      	b.n	8003550 <HAL_RCC_OscConfig+0x358>
 8003538:	4b5a      	ldr	r3, [pc, #360]	@ (80036a4 <HAL_RCC_OscConfig+0x4ac>)
 800353a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800353c:	4a59      	ldr	r2, [pc, #356]	@ (80036a4 <HAL_RCC_OscConfig+0x4ac>)
 800353e:	f023 0301 	bic.w	r3, r3, #1
 8003542:	6713      	str	r3, [r2, #112]	@ 0x70
 8003544:	4b57      	ldr	r3, [pc, #348]	@ (80036a4 <HAL_RCC_OscConfig+0x4ac>)
 8003546:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003548:	4a56      	ldr	r2, [pc, #344]	@ (80036a4 <HAL_RCC_OscConfig+0x4ac>)
 800354a:	f023 0304 	bic.w	r3, r3, #4
 800354e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d015      	beq.n	8003584 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003558:	f7ff f8bc 	bl	80026d4 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355e:	e00a      	b.n	8003576 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003560:	f7ff f8b8 	bl	80026d4 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800356e:	4293      	cmp	r3, r2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e0d7      	b.n	8003726 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003576:	4b4b      	ldr	r3, [pc, #300]	@ (80036a4 <HAL_RCC_OscConfig+0x4ac>)
 8003578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0ee      	beq.n	8003560 <HAL_RCC_OscConfig+0x368>
 8003582:	e014      	b.n	80035ae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003584:	f7ff f8a6 	bl	80026d4 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800358a:	e00a      	b.n	80035a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358c:	f7ff f8a2 	bl	80026d4 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800359a:	4293      	cmp	r3, r2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e0c1      	b.n	8003726 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035a2:	4b40      	ldr	r3, [pc, #256]	@ (80036a4 <HAL_RCC_OscConfig+0x4ac>)
 80035a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1ee      	bne.n	800358c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035ae:	7dfb      	ldrb	r3, [r7, #23]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d105      	bne.n	80035c0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b4:	4b3b      	ldr	r3, [pc, #236]	@ (80036a4 <HAL_RCC_OscConfig+0x4ac>)
 80035b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b8:	4a3a      	ldr	r2, [pc, #232]	@ (80036a4 <HAL_RCC_OscConfig+0x4ac>)
 80035ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 80ad 	beq.w	8003724 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035ca:	4b36      	ldr	r3, [pc, #216]	@ (80036a4 <HAL_RCC_OscConfig+0x4ac>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 030c 	and.w	r3, r3, #12
 80035d2:	2b08      	cmp	r3, #8
 80035d4:	d060      	beq.n	8003698 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d145      	bne.n	800366a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035de:	4b33      	ldr	r3, [pc, #204]	@ (80036ac <HAL_RCC_OscConfig+0x4b4>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e4:	f7ff f876 	bl	80026d4 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ec:	f7ff f872 	bl	80026d4 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e093      	b.n	8003726 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035fe:	4b29      	ldr	r3, [pc, #164]	@ (80036a4 <HAL_RCC_OscConfig+0x4ac>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69da      	ldr	r2, [r3, #28]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	431a      	orrs	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003618:	019b      	lsls	r3, r3, #6
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003620:	085b      	lsrs	r3, r3, #1
 8003622:	3b01      	subs	r3, #1
 8003624:	041b      	lsls	r3, r3, #16
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362c:	061b      	lsls	r3, r3, #24
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003634:	071b      	lsls	r3, r3, #28
 8003636:	491b      	ldr	r1, [pc, #108]	@ (80036a4 <HAL_RCC_OscConfig+0x4ac>)
 8003638:	4313      	orrs	r3, r2
 800363a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800363c:	4b1b      	ldr	r3, [pc, #108]	@ (80036ac <HAL_RCC_OscConfig+0x4b4>)
 800363e:	2201      	movs	r2, #1
 8003640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003642:	f7ff f847 	bl	80026d4 <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800364a:	f7ff f843 	bl	80026d4 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e064      	b.n	8003726 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800365c:	4b11      	ldr	r3, [pc, #68]	@ (80036a4 <HAL_RCC_OscConfig+0x4ac>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0f0      	beq.n	800364a <HAL_RCC_OscConfig+0x452>
 8003668:	e05c      	b.n	8003724 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800366a:	4b10      	ldr	r3, [pc, #64]	@ (80036ac <HAL_RCC_OscConfig+0x4b4>)
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003670:	f7ff f830 	bl	80026d4 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003678:	f7ff f82c 	bl	80026d4 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e04d      	b.n	8003726 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800368a:	4b06      	ldr	r3, [pc, #24]	@ (80036a4 <HAL_RCC_OscConfig+0x4ac>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f0      	bne.n	8003678 <HAL_RCC_OscConfig+0x480>
 8003696:	e045      	b.n	8003724 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d107      	bne.n	80036b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e040      	b.n	8003726 <HAL_RCC_OscConfig+0x52e>
 80036a4:	40023800 	.word	0x40023800
 80036a8:	40007000 	.word	0x40007000
 80036ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036b0:	4b1f      	ldr	r3, [pc, #124]	@ (8003730 <HAL_RCC_OscConfig+0x538>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d030      	beq.n	8003720 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d129      	bne.n	8003720 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d122      	bne.n	8003720 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80036e0:	4013      	ands	r3, r2
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80036e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d119      	bne.n	8003720 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f6:	085b      	lsrs	r3, r3, #1
 80036f8:	3b01      	subs	r3, #1
 80036fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d10f      	bne.n	8003720 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800370a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800370c:	429a      	cmp	r2, r3
 800370e:	d107      	bne.n	8003720 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800371c:	429a      	cmp	r2, r3
 800371e:	d001      	beq.n	8003724 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e000      	b.n	8003726 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40023800 	.word	0x40023800

08003734 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e07b      	b.n	800383e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374a:	2b00      	cmp	r3, #0
 800374c:	d108      	bne.n	8003760 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003756:	d009      	beq.n	800376c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	61da      	str	r2, [r3, #28]
 800375e:	e005      	b.n	800376c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d106      	bne.n	800378c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7fe fcd4 	bl	8002134 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80037b4:	431a      	orrs	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	431a      	orrs	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037dc:	431a      	orrs	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037f0:	ea42 0103 	orr.w	r1, r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	430a      	orrs	r2, r1
 8003802:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	0c1b      	lsrs	r3, r3, #16
 800380a:	f003 0104 	and.w	r1, r3, #4
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003812:	f003 0210 	and.w	r2, r3, #16
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	69da      	ldr	r2, [r3, #28]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800382c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b088      	sub	sp, #32
 800384a:	af00      	add	r7, sp, #0
 800384c:	60f8      	str	r0, [r7, #12]
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	603b      	str	r3, [r7, #0]
 8003852:	4613      	mov	r3, r2
 8003854:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003856:	f7fe ff3d 	bl	80026d4 <HAL_GetTick>
 800385a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800385c:	88fb      	ldrh	r3, [r7, #6]
 800385e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b01      	cmp	r3, #1
 800386a:	d001      	beq.n	8003870 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800386c:	2302      	movs	r3, #2
 800386e:	e12a      	b.n	8003ac6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d002      	beq.n	800387c <HAL_SPI_Transmit+0x36>
 8003876:	88fb      	ldrh	r3, [r7, #6]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e122      	b.n	8003ac6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003886:	2b01      	cmp	r3, #1
 8003888:	d101      	bne.n	800388e <HAL_SPI_Transmit+0x48>
 800388a:	2302      	movs	r3, #2
 800388c:	e11b      	b.n	8003ac6 <HAL_SPI_Transmit+0x280>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2203      	movs	r2, #3
 800389a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	88fa      	ldrh	r2, [r7, #6]
 80038ae:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	88fa      	ldrh	r2, [r7, #6]
 80038b4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038dc:	d10f      	bne.n	80038fe <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003908:	2b40      	cmp	r3, #64	@ 0x40
 800390a:	d007      	beq.n	800391c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800391a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003924:	d152      	bne.n	80039cc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <HAL_SPI_Transmit+0xee>
 800392e:	8b7b      	ldrh	r3, [r7, #26]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d145      	bne.n	80039c0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003938:	881a      	ldrh	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003944:	1c9a      	adds	r2, r3, #2
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800394e:	b29b      	uxth	r3, r3
 8003950:	3b01      	subs	r3, #1
 8003952:	b29a      	uxth	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003958:	e032      	b.n	80039c0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b02      	cmp	r3, #2
 8003966:	d112      	bne.n	800398e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396c:	881a      	ldrh	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003978:	1c9a      	adds	r2, r3, #2
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003982:	b29b      	uxth	r3, r3
 8003984:	3b01      	subs	r3, #1
 8003986:	b29a      	uxth	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800398c:	e018      	b.n	80039c0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800398e:	f7fe fea1 	bl	80026d4 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	429a      	cmp	r2, r3
 800399c:	d803      	bhi.n	80039a6 <HAL_SPI_Transmit+0x160>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a4:	d102      	bne.n	80039ac <HAL_SPI_Transmit+0x166>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d109      	bne.n	80039c0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e082      	b.n	8003ac6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1c7      	bne.n	800395a <HAL_SPI_Transmit+0x114>
 80039ca:	e053      	b.n	8003a74 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <HAL_SPI_Transmit+0x194>
 80039d4:	8b7b      	ldrh	r3, [r7, #26]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d147      	bne.n	8003a6a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	330c      	adds	r3, #12
 80039e4:	7812      	ldrb	r2, [r2, #0]
 80039e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a00:	e033      	b.n	8003a6a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d113      	bne.n	8003a38 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	330c      	adds	r3, #12
 8003a1a:	7812      	ldrb	r2, [r2, #0]
 8003a1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a22:	1c5a      	adds	r2, r3, #1
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003a36:	e018      	b.n	8003a6a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a38:	f7fe fe4c 	bl	80026d4 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d803      	bhi.n	8003a50 <HAL_SPI_Transmit+0x20a>
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4e:	d102      	bne.n	8003a56 <HAL_SPI_Transmit+0x210>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d109      	bne.n	8003a6a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e02d      	b.n	8003ac6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1c6      	bne.n	8003a02 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a74:	69fa      	ldr	r2, [r7, #28]
 8003a76:	6839      	ldr	r1, [r7, #0]
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f000 fa59 	bl	8003f30 <SPI_EndRxTxTransaction>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d002      	beq.n	8003a8a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2220      	movs	r2, #32
 8003a88:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10a      	bne.n	8003aa8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	617b      	str	r3, [r7, #20]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e000      	b.n	8003ac6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
  }
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3720      	adds	r7, #32
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b08a      	sub	sp, #40	@ 0x28
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	60f8      	str	r0, [r7, #12]
 8003ad6:	60b9      	str	r1, [r7, #8]
 8003ad8:	607a      	str	r2, [r7, #4]
 8003ada:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003adc:	2301      	movs	r3, #1
 8003ade:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ae0:	f7fe fdf8 	bl	80026d4 <HAL_GetTick>
 8003ae4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003aec:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003af4:	887b      	ldrh	r3, [r7, #2]
 8003af6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003af8:	7ffb      	ldrb	r3, [r7, #31]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d00c      	beq.n	8003b18 <HAL_SPI_TransmitReceive+0x4a>
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b04:	d106      	bne.n	8003b14 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d102      	bne.n	8003b14 <HAL_SPI_TransmitReceive+0x46>
 8003b0e:	7ffb      	ldrb	r3, [r7, #31]
 8003b10:	2b04      	cmp	r3, #4
 8003b12:	d001      	beq.n	8003b18 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003b14:	2302      	movs	r3, #2
 8003b16:	e17f      	b.n	8003e18 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d005      	beq.n	8003b2a <HAL_SPI_TransmitReceive+0x5c>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <HAL_SPI_TransmitReceive+0x5c>
 8003b24:	887b      	ldrh	r3, [r7, #2]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e174      	b.n	8003e18 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d101      	bne.n	8003b3c <HAL_SPI_TransmitReceive+0x6e>
 8003b38:	2302      	movs	r3, #2
 8003b3a:	e16d      	b.n	8003e18 <HAL_SPI_TransmitReceive+0x34a>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b04      	cmp	r3, #4
 8003b4e:	d003      	beq.n	8003b58 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2205      	movs	r2, #5
 8003b54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	887a      	ldrh	r2, [r7, #2]
 8003b68:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	887a      	ldrh	r2, [r7, #2]
 8003b6e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	887a      	ldrh	r2, [r7, #2]
 8003b7a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	887a      	ldrh	r2, [r7, #2]
 8003b80:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b98:	2b40      	cmp	r3, #64	@ 0x40
 8003b9a:	d007      	beq.n	8003bac <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003baa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bb4:	d17e      	bne.n	8003cb4 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d002      	beq.n	8003bc4 <HAL_SPI_TransmitReceive+0xf6>
 8003bbe:	8afb      	ldrh	r3, [r7, #22]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d16c      	bne.n	8003c9e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc8:	881a      	ldrh	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd4:	1c9a      	adds	r2, r3, #2
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003be8:	e059      	b.n	8003c9e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d11b      	bne.n	8003c30 <HAL_SPI_TransmitReceive+0x162>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d016      	beq.n	8003c30 <HAL_SPI_TransmitReceive+0x162>
 8003c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d113      	bne.n	8003c30 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0c:	881a      	ldrh	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c18:	1c9a      	adds	r2, r3, #2
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	3b01      	subs	r3, #1
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d119      	bne.n	8003c72 <HAL_SPI_TransmitReceive+0x1a4>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d014      	beq.n	8003c72 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68da      	ldr	r2, [r3, #12]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c52:	b292      	uxth	r2, r2
 8003c54:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5a:	1c9a      	adds	r2, r3, #2
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003c72:	f7fe fd2f 	bl	80026d4 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d80d      	bhi.n	8003c9e <HAL_SPI_TransmitReceive+0x1d0>
 8003c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c88:	d009      	beq.n	8003c9e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e0bc      	b.n	8003e18 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1a0      	bne.n	8003bea <HAL_SPI_TransmitReceive+0x11c>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d19b      	bne.n	8003bea <HAL_SPI_TransmitReceive+0x11c>
 8003cb2:	e082      	b.n	8003dba <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <HAL_SPI_TransmitReceive+0x1f4>
 8003cbc:	8afb      	ldrh	r3, [r7, #22]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d171      	bne.n	8003da6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	330c      	adds	r3, #12
 8003ccc:	7812      	ldrb	r2, [r2, #0]
 8003cce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd4:	1c5a      	adds	r2, r3, #1
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ce8:	e05d      	b.n	8003da6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d11c      	bne.n	8003d32 <HAL_SPI_TransmitReceive+0x264>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d017      	beq.n	8003d32 <HAL_SPI_TransmitReceive+0x264>
 8003d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d114      	bne.n	8003d32 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	330c      	adds	r3, #12
 8003d12:	7812      	ldrb	r2, [r2, #0]
 8003d14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1a:	1c5a      	adds	r2, r3, #1
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	3b01      	subs	r3, #1
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d119      	bne.n	8003d74 <HAL_SPI_TransmitReceive+0x2a6>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d014      	beq.n	8003d74 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d70:	2301      	movs	r3, #1
 8003d72:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d74:	f7fe fcae 	bl	80026d4 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d803      	bhi.n	8003d8c <HAL_SPI_TransmitReceive+0x2be>
 8003d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8a:	d102      	bne.n	8003d92 <HAL_SPI_TransmitReceive+0x2c4>
 8003d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d109      	bne.n	8003da6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e038      	b.n	8003e18 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d19c      	bne.n	8003cea <HAL_SPI_TransmitReceive+0x21c>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d197      	bne.n	8003cea <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dba:	6a3a      	ldr	r2, [r7, #32]
 8003dbc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 f8b6 	bl	8003f30 <SPI_EndRxTxTransaction>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d008      	beq.n	8003ddc <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e01d      	b.n	8003e18 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10a      	bne.n	8003dfa <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003de4:	2300      	movs	r3, #0
 8003de6:	613b      	str	r3, [r7, #16]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	613b      	str	r3, [r7, #16]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	613b      	str	r3, [r7, #16]
 8003df8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e000      	b.n	8003e18 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003e16:	2300      	movs	r3, #0
  }
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3728      	adds	r7, #40	@ 0x28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	603b      	str	r3, [r7, #0]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e30:	f7fe fc50 	bl	80026d4 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e38:	1a9b      	subs	r3, r3, r2
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e40:	f7fe fc48 	bl	80026d4 <HAL_GetTick>
 8003e44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e46:	4b39      	ldr	r3, [pc, #228]	@ (8003f2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	015b      	lsls	r3, r3, #5
 8003e4c:	0d1b      	lsrs	r3, r3, #20
 8003e4e:	69fa      	ldr	r2, [r7, #28]
 8003e50:	fb02 f303 	mul.w	r3, r2, r3
 8003e54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e56:	e054      	b.n	8003f02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5e:	d050      	beq.n	8003f02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e60:	f7fe fc38 	bl	80026d4 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	69fa      	ldr	r2, [r7, #28]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d902      	bls.n	8003e76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d13d      	bne.n	8003ef2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e8e:	d111      	bne.n	8003eb4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e98:	d004      	beq.n	8003ea4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ea2:	d107      	bne.n	8003eb4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003eb2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ebc:	d10f      	bne.n	8003ede <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003edc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e017      	b.n	8003f22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	bf0c      	ite	eq
 8003f12:	2301      	moveq	r3, #1
 8003f14:	2300      	movne	r3, #0
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	461a      	mov	r2, r3
 8003f1a:	79fb      	ldrb	r3, [r7, #7]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d19b      	bne.n	8003e58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3720      	adds	r7, #32
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20000000 	.word	0x20000000

08003f30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b088      	sub	sp, #32
 8003f34:	af02      	add	r7, sp, #8
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2201      	movs	r2, #1
 8003f44:	2102      	movs	r1, #2
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f7ff ff6a 	bl	8003e20 <SPI_WaitFlagStateUntilTimeout>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d007      	beq.n	8003f62 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f56:	f043 0220 	orr.w	r2, r3, #32
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e032      	b.n	8003fc8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f62:	4b1b      	ldr	r3, [pc, #108]	@ (8003fd0 <SPI_EndRxTxTransaction+0xa0>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a1b      	ldr	r2, [pc, #108]	@ (8003fd4 <SPI_EndRxTxTransaction+0xa4>)
 8003f68:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6c:	0d5b      	lsrs	r3, r3, #21
 8003f6e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003f72:	fb02 f303 	mul.w	r3, r2, r3
 8003f76:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f80:	d112      	bne.n	8003fa8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	2180      	movs	r1, #128	@ 0x80
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f7ff ff47 	bl	8003e20 <SPI_WaitFlagStateUntilTimeout>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d016      	beq.n	8003fc6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f9c:	f043 0220 	orr.w	r2, r3, #32
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e00f      	b.n	8003fc8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fbe:	2b80      	cmp	r3, #128	@ 0x80
 8003fc0:	d0f2      	beq.n	8003fa8 <SPI_EndRxTxTransaction+0x78>
 8003fc2:	e000      	b.n	8003fc6 <SPI_EndRxTxTransaction+0x96>
        break;
 8003fc4:	bf00      	nop
  }

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3718      	adds	r7, #24
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	20000000 	.word	0x20000000
 8003fd4:	165e9f81 	.word	0x165e9f81

08003fd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e041      	b.n	800406e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d106      	bne.n	8004004 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f839 	bl	8004076 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3304      	adds	r3, #4
 8004014:	4619      	mov	r1, r3
 8004016:	4610      	mov	r0, r2
 8004018:	f000 fad2 	bl	80045c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
	...

0800408c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b01      	cmp	r3, #1
 800409e:	d001      	beq.n	80040a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e04e      	b.n	8004142 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0201 	orr.w	r2, r2, #1
 80040ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a23      	ldr	r2, [pc, #140]	@ (8004150 <HAL_TIM_Base_Start_IT+0xc4>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d022      	beq.n	800410c <HAL_TIM_Base_Start_IT+0x80>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040ce:	d01d      	beq.n	800410c <HAL_TIM_Base_Start_IT+0x80>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a1f      	ldr	r2, [pc, #124]	@ (8004154 <HAL_TIM_Base_Start_IT+0xc8>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d018      	beq.n	800410c <HAL_TIM_Base_Start_IT+0x80>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a1e      	ldr	r2, [pc, #120]	@ (8004158 <HAL_TIM_Base_Start_IT+0xcc>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d013      	beq.n	800410c <HAL_TIM_Base_Start_IT+0x80>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a1c      	ldr	r2, [pc, #112]	@ (800415c <HAL_TIM_Base_Start_IT+0xd0>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d00e      	beq.n	800410c <HAL_TIM_Base_Start_IT+0x80>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a1b      	ldr	r2, [pc, #108]	@ (8004160 <HAL_TIM_Base_Start_IT+0xd4>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d009      	beq.n	800410c <HAL_TIM_Base_Start_IT+0x80>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a19      	ldr	r2, [pc, #100]	@ (8004164 <HAL_TIM_Base_Start_IT+0xd8>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d004      	beq.n	800410c <HAL_TIM_Base_Start_IT+0x80>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a18      	ldr	r2, [pc, #96]	@ (8004168 <HAL_TIM_Base_Start_IT+0xdc>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d111      	bne.n	8004130 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 0307 	and.w	r3, r3, #7
 8004116:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2b06      	cmp	r3, #6
 800411c:	d010      	beq.n	8004140 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f042 0201 	orr.w	r2, r2, #1
 800412c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800412e:	e007      	b.n	8004140 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f042 0201 	orr.w	r2, r2, #1
 800413e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	40010000 	.word	0x40010000
 8004154:	40000400 	.word	0x40000400
 8004158:	40000800 	.word	0x40000800
 800415c:	40000c00 	.word	0x40000c00
 8004160:	40010400 	.word	0x40010400
 8004164:	40014000 	.word	0x40014000
 8004168:	40001800 	.word	0x40001800

0800416c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e041      	b.n	8004202 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d106      	bne.n	8004198 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7fe f816 	bl	80021c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3304      	adds	r3, #4
 80041a8:	4619      	mov	r1, r3
 80041aa:	4610      	mov	r0, r2
 80041ac:	f000 fa08 	bl	80045c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b084      	sub	sp, #16
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d020      	beq.n	800426e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d01b      	beq.n	800426e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f06f 0202 	mvn.w	r2, #2
 800423e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	f003 0303 	and.w	r3, r3, #3
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 f995 	bl	8004584 <HAL_TIM_IC_CaptureCallback>
 800425a:	e005      	b.n	8004268 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 f987 	bl	8004570 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f998 	bl	8004598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	d020      	beq.n	80042ba <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	2b00      	cmp	r3, #0
 8004280:	d01b      	beq.n	80042ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f06f 0204 	mvn.w	r2, #4
 800428a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2202      	movs	r2, #2
 8004290:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800429c:	2b00      	cmp	r3, #0
 800429e:	d003      	beq.n	80042a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f96f 	bl	8004584 <HAL_TIM_IC_CaptureCallback>
 80042a6:	e005      	b.n	80042b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 f961 	bl	8004570 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f972 	bl	8004598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	f003 0308 	and.w	r3, r3, #8
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d020      	beq.n	8004306 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f003 0308 	and.w	r3, r3, #8
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d01b      	beq.n	8004306 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f06f 0208 	mvn.w	r2, #8
 80042d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2204      	movs	r2, #4
 80042dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	f003 0303 	and.w	r3, r3, #3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 f949 	bl	8004584 <HAL_TIM_IC_CaptureCallback>
 80042f2:	e005      	b.n	8004300 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 f93b 	bl	8004570 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f94c 	bl	8004598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f003 0310 	and.w	r3, r3, #16
 800430c:	2b00      	cmp	r3, #0
 800430e:	d020      	beq.n	8004352 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f003 0310 	and.w	r3, r3, #16
 8004316:	2b00      	cmp	r3, #0
 8004318:	d01b      	beq.n	8004352 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f06f 0210 	mvn.w	r2, #16
 8004322:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2208      	movs	r2, #8
 8004328:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f923 	bl	8004584 <HAL_TIM_IC_CaptureCallback>
 800433e:	e005      	b.n	800434c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 f915 	bl	8004570 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f926 	bl	8004598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00c      	beq.n	8004376 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d007      	beq.n	8004376 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f06f 0201 	mvn.w	r2, #1
 800436e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7fd f8b9 	bl	80014e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00c      	beq.n	800439a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004386:	2b00      	cmp	r3, #0
 8004388:	d007      	beq.n	800439a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fc47 	bl	8004c28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00c      	beq.n	80043be <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d007      	beq.n	80043be <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80043b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 f8f7 	bl	80045ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f003 0320 	and.w	r3, r3, #32
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00c      	beq.n	80043e2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f003 0320 	and.w	r3, r3, #32
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d007      	beq.n	80043e2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f06f 0220 	mvn.w	r2, #32
 80043da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 fc19 	bl	8004c14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043e2:	bf00      	nop
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
	...

080043ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043f8:	2300      	movs	r3, #0
 80043fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004402:	2b01      	cmp	r3, #1
 8004404:	d101      	bne.n	800440a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004406:	2302      	movs	r3, #2
 8004408:	e0ae      	b.n	8004568 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b0c      	cmp	r3, #12
 8004416:	f200 809f 	bhi.w	8004558 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800441a:	a201      	add	r2, pc, #4	@ (adr r2, 8004420 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800441c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004420:	08004455 	.word	0x08004455
 8004424:	08004559 	.word	0x08004559
 8004428:	08004559 	.word	0x08004559
 800442c:	08004559 	.word	0x08004559
 8004430:	08004495 	.word	0x08004495
 8004434:	08004559 	.word	0x08004559
 8004438:	08004559 	.word	0x08004559
 800443c:	08004559 	.word	0x08004559
 8004440:	080044d7 	.word	0x080044d7
 8004444:	08004559 	.word	0x08004559
 8004448:	08004559 	.word	0x08004559
 800444c:	08004559 	.word	0x08004559
 8004450:	08004517 	.word	0x08004517
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68b9      	ldr	r1, [r7, #8]
 800445a:	4618      	mov	r0, r3
 800445c:	f000 f95c 	bl	8004718 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699a      	ldr	r2, [r3, #24]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0208 	orr.w	r2, r2, #8
 800446e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699a      	ldr	r2, [r3, #24]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0204 	bic.w	r2, r2, #4
 800447e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6999      	ldr	r1, [r3, #24]
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	691a      	ldr	r2, [r3, #16]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	619a      	str	r2, [r3, #24]
      break;
 8004492:	e064      	b.n	800455e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68b9      	ldr	r1, [r7, #8]
 800449a:	4618      	mov	r0, r3
 800449c:	f000 f9ac 	bl	80047f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	699a      	ldr	r2, [r3, #24]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	699a      	ldr	r2, [r3, #24]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6999      	ldr	r1, [r3, #24]
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	021a      	lsls	r2, r3, #8
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	619a      	str	r2, [r3, #24]
      break;
 80044d4:	e043      	b.n	800455e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68b9      	ldr	r1, [r7, #8]
 80044dc:	4618      	mov	r0, r3
 80044de:	f000 fa01 	bl	80048e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	69da      	ldr	r2, [r3, #28]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f042 0208 	orr.w	r2, r2, #8
 80044f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	69da      	ldr	r2, [r3, #28]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 0204 	bic.w	r2, r2, #4
 8004500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69d9      	ldr	r1, [r3, #28]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	691a      	ldr	r2, [r3, #16]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	430a      	orrs	r2, r1
 8004512:	61da      	str	r2, [r3, #28]
      break;
 8004514:	e023      	b.n	800455e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68b9      	ldr	r1, [r7, #8]
 800451c:	4618      	mov	r0, r3
 800451e:	f000 fa55 	bl	80049cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	69da      	ldr	r2, [r3, #28]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004530:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	69da      	ldr	r2, [r3, #28]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004540:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	69d9      	ldr	r1, [r3, #28]
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	021a      	lsls	r2, r3, #8
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	61da      	str	r2, [r3, #28]
      break;
 8004556:	e002      	b.n	800455e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	75fb      	strb	r3, [r7, #23]
      break;
 800455c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004566:	7dfb      	ldrb	r3, [r7, #23]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3718      	adds	r7, #24
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a46      	ldr	r2, [pc, #280]	@ (80046ec <TIM_Base_SetConfig+0x12c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d013      	beq.n	8004600 <TIM_Base_SetConfig+0x40>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045de:	d00f      	beq.n	8004600 <TIM_Base_SetConfig+0x40>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a43      	ldr	r2, [pc, #268]	@ (80046f0 <TIM_Base_SetConfig+0x130>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d00b      	beq.n	8004600 <TIM_Base_SetConfig+0x40>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a42      	ldr	r2, [pc, #264]	@ (80046f4 <TIM_Base_SetConfig+0x134>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d007      	beq.n	8004600 <TIM_Base_SetConfig+0x40>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a41      	ldr	r2, [pc, #260]	@ (80046f8 <TIM_Base_SetConfig+0x138>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d003      	beq.n	8004600 <TIM_Base_SetConfig+0x40>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a40      	ldr	r2, [pc, #256]	@ (80046fc <TIM_Base_SetConfig+0x13c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d108      	bne.n	8004612 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004606:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	4313      	orrs	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a35      	ldr	r2, [pc, #212]	@ (80046ec <TIM_Base_SetConfig+0x12c>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d02b      	beq.n	8004672 <TIM_Base_SetConfig+0xb2>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004620:	d027      	beq.n	8004672 <TIM_Base_SetConfig+0xb2>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a32      	ldr	r2, [pc, #200]	@ (80046f0 <TIM_Base_SetConfig+0x130>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d023      	beq.n	8004672 <TIM_Base_SetConfig+0xb2>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a31      	ldr	r2, [pc, #196]	@ (80046f4 <TIM_Base_SetConfig+0x134>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d01f      	beq.n	8004672 <TIM_Base_SetConfig+0xb2>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a30      	ldr	r2, [pc, #192]	@ (80046f8 <TIM_Base_SetConfig+0x138>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d01b      	beq.n	8004672 <TIM_Base_SetConfig+0xb2>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a2f      	ldr	r2, [pc, #188]	@ (80046fc <TIM_Base_SetConfig+0x13c>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d017      	beq.n	8004672 <TIM_Base_SetConfig+0xb2>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a2e      	ldr	r2, [pc, #184]	@ (8004700 <TIM_Base_SetConfig+0x140>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d013      	beq.n	8004672 <TIM_Base_SetConfig+0xb2>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a2d      	ldr	r2, [pc, #180]	@ (8004704 <TIM_Base_SetConfig+0x144>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d00f      	beq.n	8004672 <TIM_Base_SetConfig+0xb2>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a2c      	ldr	r2, [pc, #176]	@ (8004708 <TIM_Base_SetConfig+0x148>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d00b      	beq.n	8004672 <TIM_Base_SetConfig+0xb2>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a2b      	ldr	r2, [pc, #172]	@ (800470c <TIM_Base_SetConfig+0x14c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d007      	beq.n	8004672 <TIM_Base_SetConfig+0xb2>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a2a      	ldr	r2, [pc, #168]	@ (8004710 <TIM_Base_SetConfig+0x150>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d003      	beq.n	8004672 <TIM_Base_SetConfig+0xb2>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a29      	ldr	r2, [pc, #164]	@ (8004714 <TIM_Base_SetConfig+0x154>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d108      	bne.n	8004684 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004678:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	4313      	orrs	r3, r2
 8004682:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	4313      	orrs	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a10      	ldr	r2, [pc, #64]	@ (80046ec <TIM_Base_SetConfig+0x12c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d003      	beq.n	80046b8 <TIM_Base_SetConfig+0xf8>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a12      	ldr	r2, [pc, #72]	@ (80046fc <TIM_Base_SetConfig+0x13c>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d103      	bne.n	80046c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	691a      	ldr	r2, [r3, #16]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d105      	bne.n	80046de <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	f023 0201 	bic.w	r2, r3, #1
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	611a      	str	r2, [r3, #16]
  }
}
 80046de:	bf00      	nop
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	40010000 	.word	0x40010000
 80046f0:	40000400 	.word	0x40000400
 80046f4:	40000800 	.word	0x40000800
 80046f8:	40000c00 	.word	0x40000c00
 80046fc:	40010400 	.word	0x40010400
 8004700:	40014000 	.word	0x40014000
 8004704:	40014400 	.word	0x40014400
 8004708:	40014800 	.word	0x40014800
 800470c:	40001800 	.word	0x40001800
 8004710:	40001c00 	.word	0x40001c00
 8004714:	40002000 	.word	0x40002000

08004718 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004718:	b480      	push	{r7}
 800471a:	b087      	sub	sp, #28
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	f023 0201 	bic.w	r2, r3, #1
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f023 0303 	bic.w	r3, r3, #3
 800474e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	4313      	orrs	r3, r2
 8004758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f023 0302 	bic.w	r3, r3, #2
 8004760:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	4313      	orrs	r3, r2
 800476a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a20      	ldr	r2, [pc, #128]	@ (80047f0 <TIM_OC1_SetConfig+0xd8>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d003      	beq.n	800477c <TIM_OC1_SetConfig+0x64>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a1f      	ldr	r2, [pc, #124]	@ (80047f4 <TIM_OC1_SetConfig+0xdc>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d10c      	bne.n	8004796 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f023 0308 	bic.w	r3, r3, #8
 8004782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	4313      	orrs	r3, r2
 800478c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f023 0304 	bic.w	r3, r3, #4
 8004794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a15      	ldr	r2, [pc, #84]	@ (80047f0 <TIM_OC1_SetConfig+0xd8>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d003      	beq.n	80047a6 <TIM_OC1_SetConfig+0x8e>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a14      	ldr	r2, [pc, #80]	@ (80047f4 <TIM_OC1_SetConfig+0xdc>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d111      	bne.n	80047ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80047b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	4313      	orrs	r3, r2
 80047be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	621a      	str	r2, [r3, #32]
}
 80047e4:	bf00      	nop
 80047e6:	371c      	adds	r7, #28
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	40010000 	.word	0x40010000
 80047f4:	40010400 	.word	0x40010400

080047f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b087      	sub	sp, #28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	f023 0210 	bic.w	r2, r3, #16
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800482e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	021b      	lsls	r3, r3, #8
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	4313      	orrs	r3, r2
 800483a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	f023 0320 	bic.w	r3, r3, #32
 8004842:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	011b      	lsls	r3, r3, #4
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	4313      	orrs	r3, r2
 800484e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a22      	ldr	r2, [pc, #136]	@ (80048dc <TIM_OC2_SetConfig+0xe4>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d003      	beq.n	8004860 <TIM_OC2_SetConfig+0x68>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a21      	ldr	r2, [pc, #132]	@ (80048e0 <TIM_OC2_SetConfig+0xe8>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d10d      	bne.n	800487c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004866:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	011b      	lsls	r3, r3, #4
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	4313      	orrs	r3, r2
 8004872:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800487a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a17      	ldr	r2, [pc, #92]	@ (80048dc <TIM_OC2_SetConfig+0xe4>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d003      	beq.n	800488c <TIM_OC2_SetConfig+0x94>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a16      	ldr	r2, [pc, #88]	@ (80048e0 <TIM_OC2_SetConfig+0xe8>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d113      	bne.n	80048b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004892:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800489a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	621a      	str	r2, [r3, #32]
}
 80048ce:	bf00      	nop
 80048d0:	371c      	adds	r7, #28
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	40010000 	.word	0x40010000
 80048e0:	40010400 	.word	0x40010400

080048e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b087      	sub	sp, #28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	69db      	ldr	r3, [r3, #28]
 800490a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f023 0303 	bic.w	r3, r3, #3
 800491a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	4313      	orrs	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800492c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	021b      	lsls	r3, r3, #8
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	4313      	orrs	r3, r2
 8004938:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a21      	ldr	r2, [pc, #132]	@ (80049c4 <TIM_OC3_SetConfig+0xe0>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d003      	beq.n	800494a <TIM_OC3_SetConfig+0x66>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a20      	ldr	r2, [pc, #128]	@ (80049c8 <TIM_OC3_SetConfig+0xe4>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d10d      	bne.n	8004966 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004950:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	021b      	lsls	r3, r3, #8
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	4313      	orrs	r3, r2
 800495c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a16      	ldr	r2, [pc, #88]	@ (80049c4 <TIM_OC3_SetConfig+0xe0>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d003      	beq.n	8004976 <TIM_OC3_SetConfig+0x92>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a15      	ldr	r2, [pc, #84]	@ (80049c8 <TIM_OC3_SetConfig+0xe4>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d113      	bne.n	800499e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800497c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004984:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	011b      	lsls	r3, r3, #4
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	011b      	lsls	r3, r3, #4
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	4313      	orrs	r3, r2
 800499c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	621a      	str	r2, [r3, #32]
}
 80049b8:	bf00      	nop
 80049ba:	371c      	adds	r7, #28
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	40010000 	.word	0x40010000
 80049c8:	40010400 	.word	0x40010400

080049cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	021b      	lsls	r3, r3, #8
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	031b      	lsls	r3, r3, #12
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a12      	ldr	r2, [pc, #72]	@ (8004a70 <TIM_OC4_SetConfig+0xa4>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d003      	beq.n	8004a34 <TIM_OC4_SetConfig+0x68>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a11      	ldr	r2, [pc, #68]	@ (8004a74 <TIM_OC4_SetConfig+0xa8>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d109      	bne.n	8004a48 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	019b      	lsls	r3, r3, #6
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	621a      	str	r2, [r3, #32]
}
 8004a62:	bf00      	nop
 8004a64:	371c      	adds	r7, #28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	40010000 	.word	0x40010000
 8004a74:	40010400 	.word	0x40010400

08004a78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d101      	bne.n	8004a90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	e05a      	b.n	8004b46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ab6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a21      	ldr	r2, [pc, #132]	@ (8004b54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d022      	beq.n	8004b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004adc:	d01d      	beq.n	8004b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a1d      	ldr	r2, [pc, #116]	@ (8004b58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d018      	beq.n	8004b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a1b      	ldr	r2, [pc, #108]	@ (8004b5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d013      	beq.n	8004b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a1a      	ldr	r2, [pc, #104]	@ (8004b60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d00e      	beq.n	8004b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a18      	ldr	r2, [pc, #96]	@ (8004b64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d009      	beq.n	8004b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a17      	ldr	r2, [pc, #92]	@ (8004b68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d004      	beq.n	8004b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a15      	ldr	r2, [pc, #84]	@ (8004b6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d10c      	bne.n	8004b34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	40010000 	.word	0x40010000
 8004b58:	40000400 	.word	0x40000400
 8004b5c:	40000800 	.word	0x40000800
 8004b60:	40000c00 	.word	0x40000c00
 8004b64:	40010400 	.word	0x40010400
 8004b68:	40014000 	.word	0x40014000
 8004b6c:	40001800 	.word	0x40001800

08004b70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d101      	bne.n	8004b8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b88:	2302      	movs	r3, #2
 8004b8a:	e03d      	b.n	8004c08 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e042      	b.n	8004cd4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d106      	bne.n	8004c68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7fd fb0a 	bl	800227c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2224      	movs	r2, #36	@ 0x24
 8004c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f973 	bl	8004f6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	691a      	ldr	r2, [r3, #16]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	695a      	ldr	r2, [r3, #20]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ca4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004cb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b08a      	sub	sp, #40	@ 0x28
 8004ce0:	af02      	add	r7, sp, #8
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	603b      	str	r3, [r7, #0]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b20      	cmp	r3, #32
 8004cfa:	d175      	bne.n	8004de8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d002      	beq.n	8004d08 <HAL_UART_Transmit+0x2c>
 8004d02:	88fb      	ldrh	r3, [r7, #6]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e06e      	b.n	8004dea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2221      	movs	r2, #33	@ 0x21
 8004d16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d1a:	f7fd fcdb 	bl	80026d4 <HAL_GetTick>
 8004d1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	88fa      	ldrh	r2, [r7, #6]
 8004d24:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	88fa      	ldrh	r2, [r7, #6]
 8004d2a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d34:	d108      	bne.n	8004d48 <HAL_UART_Transmit+0x6c>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d104      	bne.n	8004d48 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	61bb      	str	r3, [r7, #24]
 8004d46:	e003      	b.n	8004d50 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d50:	e02e      	b.n	8004db0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	2180      	movs	r1, #128	@ 0x80
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f000 f848 	bl	8004df2 <UART_WaitOnFlagUntilTimeout>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d005      	beq.n	8004d74 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e03a      	b.n	8004dea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10b      	bne.n	8004d92 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	881b      	ldrh	r3, [r3, #0]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	3302      	adds	r3, #2
 8004d8e:	61bb      	str	r3, [r7, #24]
 8004d90:	e007      	b.n	8004da2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	781a      	ldrb	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1cb      	bne.n	8004d52 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	2140      	movs	r1, #64	@ 0x40
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f000 f814 	bl	8004df2 <UART_WaitOnFlagUntilTimeout>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d005      	beq.n	8004ddc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e006      	b.n	8004dea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2220      	movs	r2, #32
 8004de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004de4:	2300      	movs	r3, #0
 8004de6:	e000      	b.n	8004dea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004de8:	2302      	movs	r3, #2
  }
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3720      	adds	r7, #32
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b086      	sub	sp, #24
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	60f8      	str	r0, [r7, #12]
 8004dfa:	60b9      	str	r1, [r7, #8]
 8004dfc:	603b      	str	r3, [r7, #0]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e02:	e03b      	b.n	8004e7c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e04:	6a3b      	ldr	r3, [r7, #32]
 8004e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0a:	d037      	beq.n	8004e7c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e0c:	f7fd fc62 	bl	80026d4 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	6a3a      	ldr	r2, [r7, #32]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d302      	bcc.n	8004e22 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e03a      	b.n	8004e9c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f003 0304 	and.w	r3, r3, #4
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d023      	beq.n	8004e7c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	2b80      	cmp	r3, #128	@ 0x80
 8004e38:	d020      	beq.n	8004e7c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	2b40      	cmp	r3, #64	@ 0x40
 8004e3e:	d01d      	beq.n	8004e7c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0308 	and.w	r3, r3, #8
 8004e4a:	2b08      	cmp	r3, #8
 8004e4c:	d116      	bne.n	8004e7c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004e4e:	2300      	movs	r3, #0
 8004e50:	617b      	str	r3, [r7, #20]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	617b      	str	r3, [r7, #20]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	617b      	str	r3, [r7, #20]
 8004e62:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 f81d 	bl	8004ea4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2208      	movs	r2, #8
 8004e6e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e00f      	b.n	8004e9c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	4013      	ands	r3, r2
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	bf0c      	ite	eq
 8004e8c:	2301      	moveq	r3, #1
 8004e8e:	2300      	movne	r3, #0
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	461a      	mov	r2, r3
 8004e94:	79fb      	ldrb	r3, [r7, #7]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d0b4      	beq.n	8004e04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3718      	adds	r7, #24
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b095      	sub	sp, #84	@ 0x54
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	330c      	adds	r3, #12
 8004eb2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eb6:	e853 3f00 	ldrex	r3, [r3]
 8004eba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ebe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ec2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	330c      	adds	r3, #12
 8004eca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ecc:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ed2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ed4:	e841 2300 	strex	r3, r2, [r1]
 8004ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1e5      	bne.n	8004eac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3314      	adds	r3, #20
 8004ee6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
 8004eea:	e853 3f00 	ldrex	r3, [r3]
 8004eee:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	f023 0301 	bic.w	r3, r3, #1
 8004ef6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3314      	adds	r3, #20
 8004efe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f00:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f08:	e841 2300 	strex	r3, r2, [r1]
 8004f0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1e5      	bne.n	8004ee0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d119      	bne.n	8004f50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	330c      	adds	r3, #12
 8004f22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	e853 3f00 	ldrex	r3, [r3]
 8004f2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	f023 0310 	bic.w	r3, r3, #16
 8004f32:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	330c      	adds	r3, #12
 8004f3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f3c:	61ba      	str	r2, [r7, #24]
 8004f3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f40:	6979      	ldr	r1, [r7, #20]
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	e841 2300 	strex	r3, r2, [r1]
 8004f48:	613b      	str	r3, [r7, #16]
   return(result);
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1e5      	bne.n	8004f1c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004f5e:	bf00      	nop
 8004f60:	3754      	adds	r7, #84	@ 0x54
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
	...

08004f6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f70:	b0c0      	sub	sp, #256	@ 0x100
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f88:	68d9      	ldr	r1, [r3, #12]
 8004f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	ea40 0301 	orr.w	r3, r0, r1
 8004f94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	431a      	orrs	r2, r3
 8004fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fb0:	69db      	ldr	r3, [r3, #28]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004fc4:	f021 010c 	bic.w	r1, r1, #12
 8004fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004fd2:	430b      	orrs	r3, r1
 8004fd4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fe6:	6999      	ldr	r1, [r3, #24]
 8004fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	ea40 0301 	orr.w	r3, r0, r1
 8004ff2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	4b8f      	ldr	r3, [pc, #572]	@ (8005238 <UART_SetConfig+0x2cc>)
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d005      	beq.n	800500c <UART_SetConfig+0xa0>
 8005000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	4b8d      	ldr	r3, [pc, #564]	@ (800523c <UART_SetConfig+0x2d0>)
 8005008:	429a      	cmp	r2, r3
 800500a:	d104      	bne.n	8005016 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800500c:	f7fd ff04 	bl	8002e18 <HAL_RCC_GetPCLK2Freq>
 8005010:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005014:	e003      	b.n	800501e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005016:	f7fd feeb 	bl	8002df0 <HAL_RCC_GetPCLK1Freq>
 800501a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800501e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005022:	69db      	ldr	r3, [r3, #28]
 8005024:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005028:	f040 810c 	bne.w	8005244 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800502c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005030:	2200      	movs	r2, #0
 8005032:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005036:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800503a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800503e:	4622      	mov	r2, r4
 8005040:	462b      	mov	r3, r5
 8005042:	1891      	adds	r1, r2, r2
 8005044:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005046:	415b      	adcs	r3, r3
 8005048:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800504a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800504e:	4621      	mov	r1, r4
 8005050:	eb12 0801 	adds.w	r8, r2, r1
 8005054:	4629      	mov	r1, r5
 8005056:	eb43 0901 	adc.w	r9, r3, r1
 800505a:	f04f 0200 	mov.w	r2, #0
 800505e:	f04f 0300 	mov.w	r3, #0
 8005062:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005066:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800506a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800506e:	4690      	mov	r8, r2
 8005070:	4699      	mov	r9, r3
 8005072:	4623      	mov	r3, r4
 8005074:	eb18 0303 	adds.w	r3, r8, r3
 8005078:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800507c:	462b      	mov	r3, r5
 800507e:	eb49 0303 	adc.w	r3, r9, r3
 8005082:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005092:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005096:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800509a:	460b      	mov	r3, r1
 800509c:	18db      	adds	r3, r3, r3
 800509e:	653b      	str	r3, [r7, #80]	@ 0x50
 80050a0:	4613      	mov	r3, r2
 80050a2:	eb42 0303 	adc.w	r3, r2, r3
 80050a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80050a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80050ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80050b0:	f7fb fdc2 	bl	8000c38 <__aeabi_uldivmod>
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	4b61      	ldr	r3, [pc, #388]	@ (8005240 <UART_SetConfig+0x2d4>)
 80050ba:	fba3 2302 	umull	r2, r3, r3, r2
 80050be:	095b      	lsrs	r3, r3, #5
 80050c0:	011c      	lsls	r4, r3, #4
 80050c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050c6:	2200      	movs	r2, #0
 80050c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80050cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80050d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80050d4:	4642      	mov	r2, r8
 80050d6:	464b      	mov	r3, r9
 80050d8:	1891      	adds	r1, r2, r2
 80050da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80050dc:	415b      	adcs	r3, r3
 80050de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80050e4:	4641      	mov	r1, r8
 80050e6:	eb12 0a01 	adds.w	sl, r2, r1
 80050ea:	4649      	mov	r1, r9
 80050ec:	eb43 0b01 	adc.w	fp, r3, r1
 80050f0:	f04f 0200 	mov.w	r2, #0
 80050f4:	f04f 0300 	mov.w	r3, #0
 80050f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005100:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005104:	4692      	mov	sl, r2
 8005106:	469b      	mov	fp, r3
 8005108:	4643      	mov	r3, r8
 800510a:	eb1a 0303 	adds.w	r3, sl, r3
 800510e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005112:	464b      	mov	r3, r9
 8005114:	eb4b 0303 	adc.w	r3, fp, r3
 8005118:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800511c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005128:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800512c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005130:	460b      	mov	r3, r1
 8005132:	18db      	adds	r3, r3, r3
 8005134:	643b      	str	r3, [r7, #64]	@ 0x40
 8005136:	4613      	mov	r3, r2
 8005138:	eb42 0303 	adc.w	r3, r2, r3
 800513c:	647b      	str	r3, [r7, #68]	@ 0x44
 800513e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005142:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005146:	f7fb fd77 	bl	8000c38 <__aeabi_uldivmod>
 800514a:	4602      	mov	r2, r0
 800514c:	460b      	mov	r3, r1
 800514e:	4611      	mov	r1, r2
 8005150:	4b3b      	ldr	r3, [pc, #236]	@ (8005240 <UART_SetConfig+0x2d4>)
 8005152:	fba3 2301 	umull	r2, r3, r3, r1
 8005156:	095b      	lsrs	r3, r3, #5
 8005158:	2264      	movs	r2, #100	@ 0x64
 800515a:	fb02 f303 	mul.w	r3, r2, r3
 800515e:	1acb      	subs	r3, r1, r3
 8005160:	00db      	lsls	r3, r3, #3
 8005162:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005166:	4b36      	ldr	r3, [pc, #216]	@ (8005240 <UART_SetConfig+0x2d4>)
 8005168:	fba3 2302 	umull	r2, r3, r3, r2
 800516c:	095b      	lsrs	r3, r3, #5
 800516e:	005b      	lsls	r3, r3, #1
 8005170:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005174:	441c      	add	r4, r3
 8005176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800517a:	2200      	movs	r2, #0
 800517c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005180:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005184:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005188:	4642      	mov	r2, r8
 800518a:	464b      	mov	r3, r9
 800518c:	1891      	adds	r1, r2, r2
 800518e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005190:	415b      	adcs	r3, r3
 8005192:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005194:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005198:	4641      	mov	r1, r8
 800519a:	1851      	adds	r1, r2, r1
 800519c:	6339      	str	r1, [r7, #48]	@ 0x30
 800519e:	4649      	mov	r1, r9
 80051a0:	414b      	adcs	r3, r1
 80051a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80051a4:	f04f 0200 	mov.w	r2, #0
 80051a8:	f04f 0300 	mov.w	r3, #0
 80051ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80051b0:	4659      	mov	r1, fp
 80051b2:	00cb      	lsls	r3, r1, #3
 80051b4:	4651      	mov	r1, sl
 80051b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051ba:	4651      	mov	r1, sl
 80051bc:	00ca      	lsls	r2, r1, #3
 80051be:	4610      	mov	r0, r2
 80051c0:	4619      	mov	r1, r3
 80051c2:	4603      	mov	r3, r0
 80051c4:	4642      	mov	r2, r8
 80051c6:	189b      	adds	r3, r3, r2
 80051c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80051cc:	464b      	mov	r3, r9
 80051ce:	460a      	mov	r2, r1
 80051d0:	eb42 0303 	adc.w	r3, r2, r3
 80051d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80051e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80051e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80051ec:	460b      	mov	r3, r1
 80051ee:	18db      	adds	r3, r3, r3
 80051f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051f2:	4613      	mov	r3, r2
 80051f4:	eb42 0303 	adc.w	r3, r2, r3
 80051f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80051fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005202:	f7fb fd19 	bl	8000c38 <__aeabi_uldivmod>
 8005206:	4602      	mov	r2, r0
 8005208:	460b      	mov	r3, r1
 800520a:	4b0d      	ldr	r3, [pc, #52]	@ (8005240 <UART_SetConfig+0x2d4>)
 800520c:	fba3 1302 	umull	r1, r3, r3, r2
 8005210:	095b      	lsrs	r3, r3, #5
 8005212:	2164      	movs	r1, #100	@ 0x64
 8005214:	fb01 f303 	mul.w	r3, r1, r3
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	00db      	lsls	r3, r3, #3
 800521c:	3332      	adds	r3, #50	@ 0x32
 800521e:	4a08      	ldr	r2, [pc, #32]	@ (8005240 <UART_SetConfig+0x2d4>)
 8005220:	fba2 2303 	umull	r2, r3, r2, r3
 8005224:	095b      	lsrs	r3, r3, #5
 8005226:	f003 0207 	and.w	r2, r3, #7
 800522a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4422      	add	r2, r4
 8005232:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005234:	e106      	b.n	8005444 <UART_SetConfig+0x4d8>
 8005236:	bf00      	nop
 8005238:	40011000 	.word	0x40011000
 800523c:	40011400 	.word	0x40011400
 8005240:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005244:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005248:	2200      	movs	r2, #0
 800524a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800524e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005252:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005256:	4642      	mov	r2, r8
 8005258:	464b      	mov	r3, r9
 800525a:	1891      	adds	r1, r2, r2
 800525c:	6239      	str	r1, [r7, #32]
 800525e:	415b      	adcs	r3, r3
 8005260:	627b      	str	r3, [r7, #36]	@ 0x24
 8005262:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005266:	4641      	mov	r1, r8
 8005268:	1854      	adds	r4, r2, r1
 800526a:	4649      	mov	r1, r9
 800526c:	eb43 0501 	adc.w	r5, r3, r1
 8005270:	f04f 0200 	mov.w	r2, #0
 8005274:	f04f 0300 	mov.w	r3, #0
 8005278:	00eb      	lsls	r3, r5, #3
 800527a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800527e:	00e2      	lsls	r2, r4, #3
 8005280:	4614      	mov	r4, r2
 8005282:	461d      	mov	r5, r3
 8005284:	4643      	mov	r3, r8
 8005286:	18e3      	adds	r3, r4, r3
 8005288:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800528c:	464b      	mov	r3, r9
 800528e:	eb45 0303 	adc.w	r3, r5, r3
 8005292:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80052a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80052a6:	f04f 0200 	mov.w	r2, #0
 80052aa:	f04f 0300 	mov.w	r3, #0
 80052ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80052b2:	4629      	mov	r1, r5
 80052b4:	008b      	lsls	r3, r1, #2
 80052b6:	4621      	mov	r1, r4
 80052b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052bc:	4621      	mov	r1, r4
 80052be:	008a      	lsls	r2, r1, #2
 80052c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80052c4:	f7fb fcb8 	bl	8000c38 <__aeabi_uldivmod>
 80052c8:	4602      	mov	r2, r0
 80052ca:	460b      	mov	r3, r1
 80052cc:	4b60      	ldr	r3, [pc, #384]	@ (8005450 <UART_SetConfig+0x4e4>)
 80052ce:	fba3 2302 	umull	r2, r3, r3, r2
 80052d2:	095b      	lsrs	r3, r3, #5
 80052d4:	011c      	lsls	r4, r3, #4
 80052d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052da:	2200      	movs	r2, #0
 80052dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80052e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80052e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80052e8:	4642      	mov	r2, r8
 80052ea:	464b      	mov	r3, r9
 80052ec:	1891      	adds	r1, r2, r2
 80052ee:	61b9      	str	r1, [r7, #24]
 80052f0:	415b      	adcs	r3, r3
 80052f2:	61fb      	str	r3, [r7, #28]
 80052f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052f8:	4641      	mov	r1, r8
 80052fa:	1851      	adds	r1, r2, r1
 80052fc:	6139      	str	r1, [r7, #16]
 80052fe:	4649      	mov	r1, r9
 8005300:	414b      	adcs	r3, r1
 8005302:	617b      	str	r3, [r7, #20]
 8005304:	f04f 0200 	mov.w	r2, #0
 8005308:	f04f 0300 	mov.w	r3, #0
 800530c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005310:	4659      	mov	r1, fp
 8005312:	00cb      	lsls	r3, r1, #3
 8005314:	4651      	mov	r1, sl
 8005316:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800531a:	4651      	mov	r1, sl
 800531c:	00ca      	lsls	r2, r1, #3
 800531e:	4610      	mov	r0, r2
 8005320:	4619      	mov	r1, r3
 8005322:	4603      	mov	r3, r0
 8005324:	4642      	mov	r2, r8
 8005326:	189b      	adds	r3, r3, r2
 8005328:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800532c:	464b      	mov	r3, r9
 800532e:	460a      	mov	r2, r1
 8005330:	eb42 0303 	adc.w	r3, r2, r3
 8005334:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005342:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005344:	f04f 0200 	mov.w	r2, #0
 8005348:	f04f 0300 	mov.w	r3, #0
 800534c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005350:	4649      	mov	r1, r9
 8005352:	008b      	lsls	r3, r1, #2
 8005354:	4641      	mov	r1, r8
 8005356:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800535a:	4641      	mov	r1, r8
 800535c:	008a      	lsls	r2, r1, #2
 800535e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005362:	f7fb fc69 	bl	8000c38 <__aeabi_uldivmod>
 8005366:	4602      	mov	r2, r0
 8005368:	460b      	mov	r3, r1
 800536a:	4611      	mov	r1, r2
 800536c:	4b38      	ldr	r3, [pc, #224]	@ (8005450 <UART_SetConfig+0x4e4>)
 800536e:	fba3 2301 	umull	r2, r3, r3, r1
 8005372:	095b      	lsrs	r3, r3, #5
 8005374:	2264      	movs	r2, #100	@ 0x64
 8005376:	fb02 f303 	mul.w	r3, r2, r3
 800537a:	1acb      	subs	r3, r1, r3
 800537c:	011b      	lsls	r3, r3, #4
 800537e:	3332      	adds	r3, #50	@ 0x32
 8005380:	4a33      	ldr	r2, [pc, #204]	@ (8005450 <UART_SetConfig+0x4e4>)
 8005382:	fba2 2303 	umull	r2, r3, r2, r3
 8005386:	095b      	lsrs	r3, r3, #5
 8005388:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800538c:	441c      	add	r4, r3
 800538e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005392:	2200      	movs	r2, #0
 8005394:	673b      	str	r3, [r7, #112]	@ 0x70
 8005396:	677a      	str	r2, [r7, #116]	@ 0x74
 8005398:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800539c:	4642      	mov	r2, r8
 800539e:	464b      	mov	r3, r9
 80053a0:	1891      	adds	r1, r2, r2
 80053a2:	60b9      	str	r1, [r7, #8]
 80053a4:	415b      	adcs	r3, r3
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053ac:	4641      	mov	r1, r8
 80053ae:	1851      	adds	r1, r2, r1
 80053b0:	6039      	str	r1, [r7, #0]
 80053b2:	4649      	mov	r1, r9
 80053b4:	414b      	adcs	r3, r1
 80053b6:	607b      	str	r3, [r7, #4]
 80053b8:	f04f 0200 	mov.w	r2, #0
 80053bc:	f04f 0300 	mov.w	r3, #0
 80053c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80053c4:	4659      	mov	r1, fp
 80053c6:	00cb      	lsls	r3, r1, #3
 80053c8:	4651      	mov	r1, sl
 80053ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053ce:	4651      	mov	r1, sl
 80053d0:	00ca      	lsls	r2, r1, #3
 80053d2:	4610      	mov	r0, r2
 80053d4:	4619      	mov	r1, r3
 80053d6:	4603      	mov	r3, r0
 80053d8:	4642      	mov	r2, r8
 80053da:	189b      	adds	r3, r3, r2
 80053dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053de:	464b      	mov	r3, r9
 80053e0:	460a      	mov	r2, r1
 80053e2:	eb42 0303 	adc.w	r3, r2, r3
 80053e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80053f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80053f4:	f04f 0200 	mov.w	r2, #0
 80053f8:	f04f 0300 	mov.w	r3, #0
 80053fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005400:	4649      	mov	r1, r9
 8005402:	008b      	lsls	r3, r1, #2
 8005404:	4641      	mov	r1, r8
 8005406:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800540a:	4641      	mov	r1, r8
 800540c:	008a      	lsls	r2, r1, #2
 800540e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005412:	f7fb fc11 	bl	8000c38 <__aeabi_uldivmod>
 8005416:	4602      	mov	r2, r0
 8005418:	460b      	mov	r3, r1
 800541a:	4b0d      	ldr	r3, [pc, #52]	@ (8005450 <UART_SetConfig+0x4e4>)
 800541c:	fba3 1302 	umull	r1, r3, r3, r2
 8005420:	095b      	lsrs	r3, r3, #5
 8005422:	2164      	movs	r1, #100	@ 0x64
 8005424:	fb01 f303 	mul.w	r3, r1, r3
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	011b      	lsls	r3, r3, #4
 800542c:	3332      	adds	r3, #50	@ 0x32
 800542e:	4a08      	ldr	r2, [pc, #32]	@ (8005450 <UART_SetConfig+0x4e4>)
 8005430:	fba2 2303 	umull	r2, r3, r2, r3
 8005434:	095b      	lsrs	r3, r3, #5
 8005436:	f003 020f 	and.w	r2, r3, #15
 800543a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4422      	add	r2, r4
 8005442:	609a      	str	r2, [r3, #8]
}
 8005444:	bf00      	nop
 8005446:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800544a:	46bd      	mov	sp, r7
 800544c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005450:	51eb851f 	.word	0x51eb851f

08005454 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005458:	4904      	ldr	r1, [pc, #16]	@ (800546c <MX_FATFS_Init+0x18>)
 800545a:	4805      	ldr	r0, [pc, #20]	@ (8005470 <MX_FATFS_Init+0x1c>)
 800545c:	f003 f836 	bl	80084cc <FATFS_LinkDriver>
 8005460:	4603      	mov	r3, r0
 8005462:	461a      	mov	r2, r3
 8005464:	4b03      	ldr	r3, [pc, #12]	@ (8005474 <MX_FATFS_Init+0x20>)
 8005466:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005468:	bf00      	nop
 800546a:	bd80      	pop	{r7, pc}
 800546c:	20000540 	.word	0x20000540
 8005470:	2000000c 	.word	0x2000000c
 8005474:	2000053c 	.word	0x2000053c

08005478 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005478:	b480      	push	{r7}
 800547a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800547c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800547e:	4618      	mov	r0, r3
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	4603      	mov	r3, r0
 8005490:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINEStat = STA_NOINIT;
 8005492:	79fb      	ldrb	r3, [r7, #7]
 8005494:	4618      	mov	r0, r3
 8005496:	f000 f9d3 	bl	8005840 <USER_SPI_initialize>
 800549a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800549c:	4618      	mov	r0, r3
 800549e:	3708      	adds	r7, #8
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	4603      	mov	r3, r0
 80054ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 80054ae:	79fb      	ldrb	r3, [r7, #7]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f000 fab1 	bl	8005a18 <USER_SPI_status>
 80054b6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3708      	adds	r7, #8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60b9      	str	r1, [r7, #8]
 80054c8:	607a      	str	r2, [r7, #4]
 80054ca:	603b      	str	r3, [r7, #0]
 80054cc:	4603      	mov	r3, r0
 80054ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 80054d0:	7bf8      	ldrb	r0, [r7, #15]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	68b9      	ldr	r1, [r7, #8]
 80054d8:	f000 fab4 	bl	8005a44 <USER_SPI_read>
 80054dc:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b084      	sub	sp, #16
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
 80054f0:	603b      	str	r3, [r7, #0]
 80054f2:	4603      	mov	r3, r0
 80054f4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 80054f6:	7bf8      	ldrb	r0, [r7, #15]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	68b9      	ldr	r1, [r7, #8]
 80054fe:	f000 fb07 	bl	8005b10 <USER_SPI_write>
 8005502:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	4603      	mov	r3, r0
 8005514:	603a      	str	r2, [r7, #0]
 8005516:	71fb      	strb	r3, [r7, #7]
 8005518:	460b      	mov	r3, r1
 800551a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 800551c:	79b9      	ldrb	r1, [r7, #6]
 800551e:	79fb      	ldrb	r3, [r7, #7]
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	4618      	mov	r0, r3
 8005524:	f000 fb70 	bl	8005c08 <USER_SPI_ioctl>
 8005528:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800552a:	4618      	mov	r0, r3
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
	...

08005534 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800553c:	f7fd f8ca 	bl	80026d4 <HAL_GetTick>
 8005540:	4603      	mov	r3, r0
 8005542:	4a04      	ldr	r2, [pc, #16]	@ (8005554 <SPI_Timer_On+0x20>)
 8005544:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8005546:	4a04      	ldr	r2, [pc, #16]	@ (8005558 <SPI_Timer_On+0x24>)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6013      	str	r3, [r2, #0]
}
 800554c:	bf00      	nop
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	20000548 	.word	0x20000548
 8005558:	2000054c 	.word	0x2000054c

0800555c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800555c:	b580      	push	{r7, lr}
 800555e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8005560:	f7fd f8b8 	bl	80026d4 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	4b06      	ldr	r3, [pc, #24]	@ (8005580 <SPI_Timer_Status+0x24>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	1ad2      	subs	r2, r2, r3
 800556c:	4b05      	ldr	r3, [pc, #20]	@ (8005584 <SPI_Timer_Status+0x28>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	429a      	cmp	r2, r3
 8005572:	bf34      	ite	cc
 8005574:	2301      	movcc	r3, #1
 8005576:	2300      	movcs	r3, #0
 8005578:	b2db      	uxtb	r3, r3
}
 800557a:	4618      	mov	r0, r3
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	20000548 	.word	0x20000548
 8005584:	2000054c 	.word	0x2000054c

08005588 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af02      	add	r7, sp, #8
 800558e:	4603      	mov	r3, r0
 8005590:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8005592:	f107 020f 	add.w	r2, r7, #15
 8005596:	1df9      	adds	r1, r7, #7
 8005598:	2332      	movs	r3, #50	@ 0x32
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	2301      	movs	r3, #1
 800559e:	4804      	ldr	r0, [pc, #16]	@ (80055b0 <xchg_spi+0x28>)
 80055a0:	f7fe fa95 	bl	8003ace <HAL_SPI_TransmitReceive>
    return rxDat;
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	200002f8 	.word	0x200002f8

080055b4 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80055b4:	b590      	push	{r4, r7, lr}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80055be:	2300      	movs	r3, #0
 80055c0:	60fb      	str	r3, [r7, #12]
 80055c2:	e00a      	b.n	80055da <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	18d4      	adds	r4, r2, r3
 80055ca:	20ff      	movs	r0, #255	@ 0xff
 80055cc:	f7ff ffdc 	bl	8005588 <xchg_spi>
 80055d0:	4603      	mov	r3, r0
 80055d2:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	3301      	adds	r3, #1
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d3f0      	bcc.n	80055c4 <rcvr_spi_multi+0x10>
	}
}
 80055e2:	bf00      	nop
 80055e4:	bf00      	nop
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd90      	pop	{r4, r7, pc}

080055ec <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	f04f 33ff 	mov.w	r3, #4294967295
 80055fe:	6879      	ldr	r1, [r7, #4]
 8005600:	4803      	ldr	r0, [pc, #12]	@ (8005610 <xmit_spi_multi+0x24>)
 8005602:	f7fe f920 	bl	8003846 <HAL_SPI_Transmit>
}
 8005606:	bf00      	nop
 8005608:	3708      	adds	r7, #8
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	200002f8 	.word	0x200002f8

08005614 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b086      	sub	sp, #24
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800561c:	f7fd f85a 	bl	80026d4 <HAL_GetTick>
 8005620:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8005626:	20ff      	movs	r0, #255	@ 0xff
 8005628:	f7ff ffae 	bl	8005588 <xchg_spi>
 800562c:	4603      	mov	r3, r0
 800562e:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8005630:	7bfb      	ldrb	r3, [r7, #15]
 8005632:	2bff      	cmp	r3, #255	@ 0xff
 8005634:	d007      	beq.n	8005646 <wait_ready+0x32>
 8005636:	f7fd f84d 	bl	80026d4 <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	429a      	cmp	r2, r3
 8005644:	d8ef      	bhi.n	8005626 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8005646:	7bfb      	ldrb	r3, [r7, #15]
 8005648:	2bff      	cmp	r3, #255	@ 0xff
 800564a:	bf0c      	ite	eq
 800564c:	2301      	moveq	r3, #1
 800564e:	2300      	movne	r3, #0
 8005650:	b2db      	uxtb	r3, r3
}
 8005652:	4618      	mov	r0, r3
 8005654:	3718      	adds	r7, #24
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
	...

0800565c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8005660:	2201      	movs	r2, #1
 8005662:	2110      	movs	r1, #16
 8005664:	4803      	ldr	r0, [pc, #12]	@ (8005674 <despiselect+0x18>)
 8005666:	f7fd fab7 	bl	8002bd8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800566a:	20ff      	movs	r0, #255	@ 0xff
 800566c:	f7ff ff8c 	bl	8005588 <xchg_spi>

}
 8005670:	bf00      	nop
 8005672:	bd80      	pop	{r7, pc}
 8005674:	40020000 	.word	0x40020000

08005678 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800567c:	2200      	movs	r2, #0
 800567e:	2110      	movs	r1, #16
 8005680:	4809      	ldr	r0, [pc, #36]	@ (80056a8 <spiselect+0x30>)
 8005682:	f7fd faa9 	bl	8002bd8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8005686:	20ff      	movs	r0, #255	@ 0xff
 8005688:	f7ff ff7e 	bl	8005588 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800568c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005690:	f7ff ffc0 	bl	8005614 <wait_ready>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <spiselect+0x26>
 800569a:	2301      	movs	r3, #1
 800569c:	e002      	b.n	80056a4 <spiselect+0x2c>

	despiselect();
 800569e:	f7ff ffdd 	bl	800565c <despiselect>
	return 0;	/* Timeout */
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	40020000 	.word	0x40020000

080056ac <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80056b6:	20c8      	movs	r0, #200	@ 0xc8
 80056b8:	f7ff ff3c 	bl	8005534 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80056bc:	20ff      	movs	r0, #255	@ 0xff
 80056be:	f7ff ff63 	bl	8005588 <xchg_spi>
 80056c2:	4603      	mov	r3, r0
 80056c4:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80056c6:	7bfb      	ldrb	r3, [r7, #15]
 80056c8:	2bff      	cmp	r3, #255	@ 0xff
 80056ca:	d104      	bne.n	80056d6 <rcvr_datablock+0x2a>
 80056cc:	f7ff ff46 	bl	800555c <SPI_Timer_Status>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1f2      	bne.n	80056bc <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80056d6:	7bfb      	ldrb	r3, [r7, #15]
 80056d8:	2bfe      	cmp	r3, #254	@ 0xfe
 80056da:	d001      	beq.n	80056e0 <rcvr_datablock+0x34>
 80056dc:	2300      	movs	r3, #0
 80056de:	e00a      	b.n	80056f6 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80056e0:	6839      	ldr	r1, [r7, #0]
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7ff ff66 	bl	80055b4 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80056e8:	20ff      	movs	r0, #255	@ 0xff
 80056ea:	f7ff ff4d 	bl	8005588 <xchg_spi>
 80056ee:	20ff      	movs	r0, #255	@ 0xff
 80056f0:	f7ff ff4a 	bl	8005588 <xchg_spi>

	return 1;						/* Function succeeded */
 80056f4:	2301      	movs	r3, #1
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b084      	sub	sp, #16
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
 8005706:	460b      	mov	r3, r1
 8005708:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800570a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800570e:	f7ff ff81 	bl	8005614 <wait_ready>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <xmit_datablock+0x1e>
 8005718:	2300      	movs	r3, #0
 800571a:	e01e      	b.n	800575a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800571c:	78fb      	ldrb	r3, [r7, #3]
 800571e:	4618      	mov	r0, r3
 8005720:	f7ff ff32 	bl	8005588 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8005724:	78fb      	ldrb	r3, [r7, #3]
 8005726:	2bfd      	cmp	r3, #253	@ 0xfd
 8005728:	d016      	beq.n	8005758 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800572a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7ff ff5c 	bl	80055ec <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8005734:	20ff      	movs	r0, #255	@ 0xff
 8005736:	f7ff ff27 	bl	8005588 <xchg_spi>
 800573a:	20ff      	movs	r0, #255	@ 0xff
 800573c:	f7ff ff24 	bl	8005588 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8005740:	20ff      	movs	r0, #255	@ 0xff
 8005742:	f7ff ff21 	bl	8005588 <xchg_spi>
 8005746:	4603      	mov	r3, r0
 8005748:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800574a:	7bfb      	ldrb	r3, [r7, #15]
 800574c:	f003 031f 	and.w	r3, r3, #31
 8005750:	2b05      	cmp	r3, #5
 8005752:	d001      	beq.n	8005758 <xmit_datablock+0x5a>
 8005754:	2300      	movs	r3, #0
 8005756:	e000      	b.n	800575a <xmit_datablock+0x5c>
	}
	return 1;
 8005758:	2301      	movs	r3, #1
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b084      	sub	sp, #16
 8005766:	af00      	add	r7, sp, #0
 8005768:	4603      	mov	r3, r0
 800576a:	6039      	str	r1, [r7, #0]
 800576c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800576e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005772:	2b00      	cmp	r3, #0
 8005774:	da0e      	bge.n	8005794 <send_cmd+0x32>
		cmd &= 0x7F;
 8005776:	79fb      	ldrb	r3, [r7, #7]
 8005778:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800577c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800577e:	2100      	movs	r1, #0
 8005780:	2037      	movs	r0, #55	@ 0x37
 8005782:	f7ff ffee 	bl	8005762 <send_cmd>
 8005786:	4603      	mov	r3, r0
 8005788:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800578a:	7bbb      	ldrb	r3, [r7, #14]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d901      	bls.n	8005794 <send_cmd+0x32>
 8005790:	7bbb      	ldrb	r3, [r7, #14]
 8005792:	e051      	b.n	8005838 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8005794:	79fb      	ldrb	r3, [r7, #7]
 8005796:	2b0c      	cmp	r3, #12
 8005798:	d008      	beq.n	80057ac <send_cmd+0x4a>
		despiselect();
 800579a:	f7ff ff5f 	bl	800565c <despiselect>
		if (!spiselect()) return 0xFF;
 800579e:	f7ff ff6b 	bl	8005678 <spiselect>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d101      	bne.n	80057ac <send_cmd+0x4a>
 80057a8:	23ff      	movs	r3, #255	@ 0xff
 80057aa:	e045      	b.n	8005838 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80057ac:	79fb      	ldrb	r3, [r7, #7]
 80057ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7ff fee7 	bl	8005588 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	0e1b      	lsrs	r3, r3, #24
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7ff fee1 	bl	8005588 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	0c1b      	lsrs	r3, r3, #16
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7ff fedb 	bl	8005588 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	0a1b      	lsrs	r3, r3, #8
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	4618      	mov	r0, r3
 80057da:	f7ff fed5 	bl	8005588 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7ff fed0 	bl	8005588 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80057e8:	2301      	movs	r3, #1
 80057ea:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80057ec:	79fb      	ldrb	r3, [r7, #7]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <send_cmd+0x94>
 80057f2:	2395      	movs	r3, #149	@ 0x95
 80057f4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80057f6:	79fb      	ldrb	r3, [r7, #7]
 80057f8:	2b08      	cmp	r3, #8
 80057fa:	d101      	bne.n	8005800 <send_cmd+0x9e>
 80057fc:	2387      	movs	r3, #135	@ 0x87
 80057fe:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8005800:	7bfb      	ldrb	r3, [r7, #15]
 8005802:	4618      	mov	r0, r3
 8005804:	f7ff fec0 	bl	8005588 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8005808:	79fb      	ldrb	r3, [r7, #7]
 800580a:	2b0c      	cmp	r3, #12
 800580c:	d102      	bne.n	8005814 <send_cmd+0xb2>
 800580e:	20ff      	movs	r0, #255	@ 0xff
 8005810:	f7ff feba 	bl	8005588 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8005814:	230a      	movs	r3, #10
 8005816:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8005818:	20ff      	movs	r0, #255	@ 0xff
 800581a:	f7ff feb5 	bl	8005588 <xchg_spi>
 800581e:	4603      	mov	r3, r0
 8005820:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8005822:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005826:	2b00      	cmp	r3, #0
 8005828:	da05      	bge.n	8005836 <send_cmd+0xd4>
 800582a:	7bfb      	ldrb	r3, [r7, #15]
 800582c:	3b01      	subs	r3, #1
 800582e:	73fb      	strb	r3, [r7, #15]
 8005830:	7bfb      	ldrb	r3, [r7, #15]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1f0      	bne.n	8005818 <send_cmd+0xb6>

	return res;							/* Return received response */
 8005836:	7bbb      	ldrb	r3, [r7, #14]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005840:	b590      	push	{r4, r7, lr}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	4603      	mov	r3, r0
 8005848:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800584a:	79fb      	ldrb	r3, [r7, #7]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <USER_SPI_initialize+0x14>
 8005850:	2301      	movs	r3, #1
 8005852:	e0d6      	b.n	8005a02 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8005854:	4b6d      	ldr	r3, [pc, #436]	@ (8005a0c <USER_SPI_initialize+0x1cc>)
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	b2db      	uxtb	r3, r3
 800585a:	f003 0302 	and.w	r3, r3, #2
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <USER_SPI_initialize+0x2a>
 8005862:	4b6a      	ldr	r3, [pc, #424]	@ (8005a0c <USER_SPI_initialize+0x1cc>)
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	b2db      	uxtb	r3, r3
 8005868:	e0cb      	b.n	8005a02 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800586a:	4b69      	ldr	r3, [pc, #420]	@ (8005a10 <USER_SPI_initialize+0x1d0>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8005874:	4b66      	ldr	r3, [pc, #408]	@ (8005a10 <USER_SPI_initialize+0x1d0>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800587c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800587e:	230a      	movs	r3, #10
 8005880:	73fb      	strb	r3, [r7, #15]
 8005882:	e005      	b.n	8005890 <USER_SPI_initialize+0x50>
 8005884:	20ff      	movs	r0, #255	@ 0xff
 8005886:	f7ff fe7f 	bl	8005588 <xchg_spi>
 800588a:	7bfb      	ldrb	r3, [r7, #15]
 800588c:	3b01      	subs	r3, #1
 800588e:	73fb      	strb	r3, [r7, #15]
 8005890:	7bfb      	ldrb	r3, [r7, #15]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1f6      	bne.n	8005884 <USER_SPI_initialize+0x44>

	ty = 0;
 8005896:	2300      	movs	r3, #0
 8005898:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800589a:	2100      	movs	r1, #0
 800589c:	2000      	movs	r0, #0
 800589e:	f7ff ff60 	bl	8005762 <send_cmd>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	f040 808b 	bne.w	80059c0 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80058aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80058ae:	f7ff fe41 	bl	8005534 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80058b2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80058b6:	2008      	movs	r0, #8
 80058b8:	f7ff ff53 	bl	8005762 <send_cmd>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d151      	bne.n	8005966 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80058c2:	2300      	movs	r3, #0
 80058c4:	73fb      	strb	r3, [r7, #15]
 80058c6:	e00d      	b.n	80058e4 <USER_SPI_initialize+0xa4>
 80058c8:	7bfc      	ldrb	r4, [r7, #15]
 80058ca:	20ff      	movs	r0, #255	@ 0xff
 80058cc:	f7ff fe5c 	bl	8005588 <xchg_spi>
 80058d0:	4603      	mov	r3, r0
 80058d2:	461a      	mov	r2, r3
 80058d4:	f104 0310 	add.w	r3, r4, #16
 80058d8:	443b      	add	r3, r7
 80058da:	f803 2c08 	strb.w	r2, [r3, #-8]
 80058de:	7bfb      	ldrb	r3, [r7, #15]
 80058e0:	3301      	adds	r3, #1
 80058e2:	73fb      	strb	r3, [r7, #15]
 80058e4:	7bfb      	ldrb	r3, [r7, #15]
 80058e6:	2b03      	cmp	r3, #3
 80058e8:	d9ee      	bls.n	80058c8 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80058ea:	7abb      	ldrb	r3, [r7, #10]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d167      	bne.n	80059c0 <USER_SPI_initialize+0x180>
 80058f0:	7afb      	ldrb	r3, [r7, #11]
 80058f2:	2baa      	cmp	r3, #170	@ 0xaa
 80058f4:	d164      	bne.n	80059c0 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80058f6:	bf00      	nop
 80058f8:	f7ff fe30 	bl	800555c <SPI_Timer_Status>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d007      	beq.n	8005912 <USER_SPI_initialize+0xd2>
 8005902:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005906:	20a9      	movs	r0, #169	@ 0xa9
 8005908:	f7ff ff2b 	bl	8005762 <send_cmd>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1f2      	bne.n	80058f8 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8005912:	f7ff fe23 	bl	800555c <SPI_Timer_Status>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d051      	beq.n	80059c0 <USER_SPI_initialize+0x180>
 800591c:	2100      	movs	r1, #0
 800591e:	203a      	movs	r0, #58	@ 0x3a
 8005920:	f7ff ff1f 	bl	8005762 <send_cmd>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d14a      	bne.n	80059c0 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800592a:	2300      	movs	r3, #0
 800592c:	73fb      	strb	r3, [r7, #15]
 800592e:	e00d      	b.n	800594c <USER_SPI_initialize+0x10c>
 8005930:	7bfc      	ldrb	r4, [r7, #15]
 8005932:	20ff      	movs	r0, #255	@ 0xff
 8005934:	f7ff fe28 	bl	8005588 <xchg_spi>
 8005938:	4603      	mov	r3, r0
 800593a:	461a      	mov	r2, r3
 800593c:	f104 0310 	add.w	r3, r4, #16
 8005940:	443b      	add	r3, r7
 8005942:	f803 2c08 	strb.w	r2, [r3, #-8]
 8005946:	7bfb      	ldrb	r3, [r7, #15]
 8005948:	3301      	adds	r3, #1
 800594a:	73fb      	strb	r3, [r7, #15]
 800594c:	7bfb      	ldrb	r3, [r7, #15]
 800594e:	2b03      	cmp	r3, #3
 8005950:	d9ee      	bls.n	8005930 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8005952:	7a3b      	ldrb	r3, [r7, #8]
 8005954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005958:	2b00      	cmp	r3, #0
 800595a:	d001      	beq.n	8005960 <USER_SPI_initialize+0x120>
 800595c:	230c      	movs	r3, #12
 800595e:	e000      	b.n	8005962 <USER_SPI_initialize+0x122>
 8005960:	2304      	movs	r3, #4
 8005962:	737b      	strb	r3, [r7, #13]
 8005964:	e02c      	b.n	80059c0 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8005966:	2100      	movs	r1, #0
 8005968:	20a9      	movs	r0, #169	@ 0xa9
 800596a:	f7ff fefa 	bl	8005762 <send_cmd>
 800596e:	4603      	mov	r3, r0
 8005970:	2b01      	cmp	r3, #1
 8005972:	d804      	bhi.n	800597e <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8005974:	2302      	movs	r3, #2
 8005976:	737b      	strb	r3, [r7, #13]
 8005978:	23a9      	movs	r3, #169	@ 0xa9
 800597a:	73bb      	strb	r3, [r7, #14]
 800597c:	e003      	b.n	8005986 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800597e:	2301      	movs	r3, #1
 8005980:	737b      	strb	r3, [r7, #13]
 8005982:	2301      	movs	r3, #1
 8005984:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8005986:	bf00      	nop
 8005988:	f7ff fde8 	bl	800555c <SPI_Timer_Status>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d007      	beq.n	80059a2 <USER_SPI_initialize+0x162>
 8005992:	7bbb      	ldrb	r3, [r7, #14]
 8005994:	2100      	movs	r1, #0
 8005996:	4618      	mov	r0, r3
 8005998:	f7ff fee3 	bl	8005762 <send_cmd>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1f2      	bne.n	8005988 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80059a2:	f7ff fddb 	bl	800555c <SPI_Timer_Status>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d007      	beq.n	80059bc <USER_SPI_initialize+0x17c>
 80059ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80059b0:	2010      	movs	r0, #16
 80059b2:	f7ff fed6 	bl	8005762 <send_cmd>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <USER_SPI_initialize+0x180>
				ty = 0;
 80059bc:	2300      	movs	r3, #0
 80059be:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80059c0:	4a14      	ldr	r2, [pc, #80]	@ (8005a14 <USER_SPI_initialize+0x1d4>)
 80059c2:	7b7b      	ldrb	r3, [r7, #13]
 80059c4:	7013      	strb	r3, [r2, #0]
	despiselect();
 80059c6:	f7ff fe49 	bl	800565c <despiselect>

	if (ty) {			/* OK */
 80059ca:	7b7b      	ldrb	r3, [r7, #13]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d012      	beq.n	80059f6 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80059d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005a10 <USER_SPI_initialize+0x1d0>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80059da:	4b0d      	ldr	r3, [pc, #52]	@ (8005a10 <USER_SPI_initialize+0x1d0>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f042 0210 	orr.w	r2, r2, #16
 80059e2:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80059e4:	4b09      	ldr	r3, [pc, #36]	@ (8005a0c <USER_SPI_initialize+0x1cc>)
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	f023 0301 	bic.w	r3, r3, #1
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	4b06      	ldr	r3, [pc, #24]	@ (8005a0c <USER_SPI_initialize+0x1cc>)
 80059f2:	701a      	strb	r2, [r3, #0]
 80059f4:	e002      	b.n	80059fc <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80059f6:	4b05      	ldr	r3, [pc, #20]	@ (8005a0c <USER_SPI_initialize+0x1cc>)
 80059f8:	2201      	movs	r2, #1
 80059fa:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80059fc:	4b03      	ldr	r3, [pc, #12]	@ (8005a0c <USER_SPI_initialize+0x1cc>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	b2db      	uxtb	r3, r3
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd90      	pop	{r4, r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	20000020 	.word	0x20000020
 8005a10:	200002f8 	.word	0x200002f8
 8005a14:	20000544 	.word	0x20000544

08005a18 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	4603      	mov	r3, r0
 8005a20:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8005a22:	79fb      	ldrb	r3, [r7, #7]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d001      	beq.n	8005a2c <USER_SPI_status+0x14>
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e002      	b.n	8005a32 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8005a2c:	4b04      	ldr	r3, [pc, #16]	@ (8005a40 <USER_SPI_status+0x28>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	b2db      	uxtb	r3, r3
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	20000020 	.word	0x20000020

08005a44 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60b9      	str	r1, [r7, #8]
 8005a4c:	607a      	str	r2, [r7, #4]
 8005a4e:	603b      	str	r3, [r7, #0]
 8005a50:	4603      	mov	r3, r0
 8005a52:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005a54:	7bfb      	ldrb	r3, [r7, #15]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d102      	bne.n	8005a60 <USER_SPI_read+0x1c>
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <USER_SPI_read+0x20>
 8005a60:	2304      	movs	r3, #4
 8005a62:	e04d      	b.n	8005b00 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005a64:	4b28      	ldr	r3, [pc, #160]	@ (8005b08 <USER_SPI_read+0xc4>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <USER_SPI_read+0x32>
 8005a72:	2303      	movs	r3, #3
 8005a74:	e044      	b.n	8005b00 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8005a76:	4b25      	ldr	r3, [pc, #148]	@ (8005b0c <USER_SPI_read+0xc8>)
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	f003 0308 	and.w	r3, r3, #8
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d102      	bne.n	8005a88 <USER_SPI_read+0x44>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	025b      	lsls	r3, r3, #9
 8005a86:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d111      	bne.n	8005ab2 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8005a8e:	6879      	ldr	r1, [r7, #4]
 8005a90:	2011      	movs	r0, #17
 8005a92:	f7ff fe66 	bl	8005762 <send_cmd>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d129      	bne.n	8005af0 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8005a9c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005aa0:	68b8      	ldr	r0, [r7, #8]
 8005aa2:	f7ff fe03 	bl	80056ac <rcvr_datablock>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d021      	beq.n	8005af0 <USER_SPI_read+0xac>
			count = 0;
 8005aac:	2300      	movs	r3, #0
 8005aae:	603b      	str	r3, [r7, #0]
 8005ab0:	e01e      	b.n	8005af0 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8005ab2:	6879      	ldr	r1, [r7, #4]
 8005ab4:	2012      	movs	r0, #18
 8005ab6:	f7ff fe54 	bl	8005762 <send_cmd>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d117      	bne.n	8005af0 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8005ac0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005ac4:	68b8      	ldr	r0, [r7, #8]
 8005ac6:	f7ff fdf1 	bl	80056ac <rcvr_datablock>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00a      	beq.n	8005ae6 <USER_SPI_read+0xa2>
				buff += 512;
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005ad6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	3b01      	subs	r3, #1
 8005adc:	603b      	str	r3, [r7, #0]
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1ed      	bne.n	8005ac0 <USER_SPI_read+0x7c>
 8005ae4:	e000      	b.n	8005ae8 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8005ae6:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8005ae8:	2100      	movs	r1, #0
 8005aea:	200c      	movs	r0, #12
 8005aec:	f7ff fe39 	bl	8005762 <send_cmd>
		}
	}
	despiselect();
 8005af0:	f7ff fdb4 	bl	800565c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	bf14      	ite	ne
 8005afa:	2301      	movne	r3, #1
 8005afc:	2300      	moveq	r3, #0
 8005afe:	b2db      	uxtb	r3, r3
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	20000020 	.word	0x20000020
 8005b0c:	20000544 	.word	0x20000544

08005b10 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60b9      	str	r1, [r7, #8]
 8005b18:	607a      	str	r2, [r7, #4]
 8005b1a:	603b      	str	r3, [r7, #0]
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005b20:	7bfb      	ldrb	r3, [r7, #15]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d102      	bne.n	8005b2c <USER_SPI_write+0x1c>
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d101      	bne.n	8005b30 <USER_SPI_write+0x20>
 8005b2c:	2304      	movs	r3, #4
 8005b2e:	e063      	b.n	8005bf8 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8005b30:	4b33      	ldr	r3, [pc, #204]	@ (8005c00 <USER_SPI_write+0xf0>)
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d001      	beq.n	8005b42 <USER_SPI_write+0x32>
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e05a      	b.n	8005bf8 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8005b42:	4b2f      	ldr	r3, [pc, #188]	@ (8005c00 <USER_SPI_write+0xf0>)
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d001      	beq.n	8005b54 <USER_SPI_write+0x44>
 8005b50:	2302      	movs	r3, #2
 8005b52:	e051      	b.n	8005bf8 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8005b54:	4b2b      	ldr	r3, [pc, #172]	@ (8005c04 <USER_SPI_write+0xf4>)
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	f003 0308 	and.w	r3, r3, #8
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d102      	bne.n	8005b66 <USER_SPI_write+0x56>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	025b      	lsls	r3, r3, #9
 8005b64:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d110      	bne.n	8005b8e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8005b6c:	6879      	ldr	r1, [r7, #4]
 8005b6e:	2018      	movs	r0, #24
 8005b70:	f7ff fdf7 	bl	8005762 <send_cmd>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d136      	bne.n	8005be8 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8005b7a:	21fe      	movs	r1, #254	@ 0xfe
 8005b7c:	68b8      	ldr	r0, [r7, #8]
 8005b7e:	f7ff fdbe 	bl	80056fe <xmit_datablock>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d02f      	beq.n	8005be8 <USER_SPI_write+0xd8>
			count = 0;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	603b      	str	r3, [r7, #0]
 8005b8c:	e02c      	b.n	8005be8 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8005b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8005c04 <USER_SPI_write+0xf4>)
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	f003 0306 	and.w	r3, r3, #6
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <USER_SPI_write+0x92>
 8005b9a:	6839      	ldr	r1, [r7, #0]
 8005b9c:	2097      	movs	r0, #151	@ 0x97
 8005b9e:	f7ff fde0 	bl	8005762 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8005ba2:	6879      	ldr	r1, [r7, #4]
 8005ba4:	2019      	movs	r0, #25
 8005ba6:	f7ff fddc 	bl	8005762 <send_cmd>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d11b      	bne.n	8005be8 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8005bb0:	21fc      	movs	r1, #252	@ 0xfc
 8005bb2:	68b8      	ldr	r0, [r7, #8]
 8005bb4:	f7ff fda3 	bl	80056fe <xmit_datablock>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00a      	beq.n	8005bd4 <USER_SPI_write+0xc4>
				buff += 512;
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005bc4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	603b      	str	r3, [r7, #0]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1ee      	bne.n	8005bb0 <USER_SPI_write+0xa0>
 8005bd2:	e000      	b.n	8005bd6 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8005bd4:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8005bd6:	21fd      	movs	r1, #253	@ 0xfd
 8005bd8:	2000      	movs	r0, #0
 8005bda:	f7ff fd90 	bl	80056fe <xmit_datablock>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d101      	bne.n	8005be8 <USER_SPI_write+0xd8>
 8005be4:	2301      	movs	r3, #1
 8005be6:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8005be8:	f7ff fd38 	bl	800565c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	bf14      	ite	ne
 8005bf2:	2301      	movne	r3, #1
 8005bf4:	2300      	moveq	r3, #0
 8005bf6:	b2db      	uxtb	r3, r3
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	20000020 	.word	0x20000020
 8005c04:	20000544 	.word	0x20000544

08005c08 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b08c      	sub	sp, #48	@ 0x30
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	4603      	mov	r3, r0
 8005c10:	603a      	str	r2, [r7, #0]
 8005c12:	71fb      	strb	r3, [r7, #7]
 8005c14:	460b      	mov	r3, r1
 8005c16:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8005c18:	79fb      	ldrb	r3, [r7, #7]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <USER_SPI_ioctl+0x1a>
 8005c1e:	2304      	movs	r3, #4
 8005c20:	e15a      	b.n	8005ed8 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005c22:	4baf      	ldr	r3, [pc, #700]	@ (8005ee0 <USER_SPI_ioctl+0x2d8>)
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	f003 0301 	and.w	r3, r3, #1
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d001      	beq.n	8005c34 <USER_SPI_ioctl+0x2c>
 8005c30:	2303      	movs	r3, #3
 8005c32:	e151      	b.n	8005ed8 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8005c3a:	79bb      	ldrb	r3, [r7, #6]
 8005c3c:	2b04      	cmp	r3, #4
 8005c3e:	f200 8136 	bhi.w	8005eae <USER_SPI_ioctl+0x2a6>
 8005c42:	a201      	add	r2, pc, #4	@ (adr r2, 8005c48 <USER_SPI_ioctl+0x40>)
 8005c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c48:	08005c5d 	.word	0x08005c5d
 8005c4c:	08005c71 	.word	0x08005c71
 8005c50:	08005eaf 	.word	0x08005eaf
 8005c54:	08005d1d 	.word	0x08005d1d
 8005c58:	08005e13 	.word	0x08005e13
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8005c5c:	f7ff fd0c 	bl	8005678 <spiselect>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f000 8127 	beq.w	8005eb6 <USER_SPI_ioctl+0x2ae>
 8005c68:	2300      	movs	r3, #0
 8005c6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8005c6e:	e122      	b.n	8005eb6 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8005c70:	2100      	movs	r1, #0
 8005c72:	2009      	movs	r0, #9
 8005c74:	f7ff fd75 	bl	8005762 <send_cmd>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f040 811d 	bne.w	8005eba <USER_SPI_ioctl+0x2b2>
 8005c80:	f107 030c 	add.w	r3, r7, #12
 8005c84:	2110      	movs	r1, #16
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7ff fd10 	bl	80056ac <rcvr_datablock>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f000 8113 	beq.w	8005eba <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8005c94:	7b3b      	ldrb	r3, [r7, #12]
 8005c96:	099b      	lsrs	r3, r3, #6
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d111      	bne.n	8005cc2 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8005c9e:	7d7b      	ldrb	r3, [r7, #21]
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	7d3b      	ldrb	r3, [r7, #20]
 8005ca4:	021b      	lsls	r3, r3, #8
 8005ca6:	4413      	add	r3, r2
 8005ca8:	461a      	mov	r2, r3
 8005caa:	7cfb      	ldrb	r3, [r7, #19]
 8005cac:	041b      	lsls	r3, r3, #16
 8005cae:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8005cb2:	4413      	add	r3, r2
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	029a      	lsls	r2, r3, #10
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	601a      	str	r2, [r3, #0]
 8005cc0:	e028      	b.n	8005d14 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8005cc2:	7c7b      	ldrb	r3, [r7, #17]
 8005cc4:	f003 030f 	and.w	r3, r3, #15
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	7dbb      	ldrb	r3, [r7, #22]
 8005ccc:	09db      	lsrs	r3, r3, #7
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	4413      	add	r3, r2
 8005cd2:	b2da      	uxtb	r2, r3
 8005cd4:	7d7b      	ldrb	r3, [r7, #21]
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	f003 0306 	and.w	r3, r3, #6
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	4413      	add	r3, r2
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	3302      	adds	r3, #2
 8005ce6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8005cea:	7d3b      	ldrb	r3, [r7, #20]
 8005cec:	099b      	lsrs	r3, r3, #6
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	7cfb      	ldrb	r3, [r7, #19]
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	441a      	add	r2, r3
 8005cf8:	7cbb      	ldrb	r3, [r7, #18]
 8005cfa:	029b      	lsls	r3, r3, #10
 8005cfc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005d00:	4413      	add	r3, r2
 8005d02:	3301      	adds	r3, #1
 8005d04:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8005d06:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d0a:	3b09      	subs	r3, #9
 8005d0c:	69fa      	ldr	r2, [r7, #28]
 8005d0e:	409a      	lsls	r2, r3
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8005d14:	2300      	movs	r3, #0
 8005d16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8005d1a:	e0ce      	b.n	8005eba <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8005d1c:	4b71      	ldr	r3, [pc, #452]	@ (8005ee4 <USER_SPI_ioctl+0x2dc>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	f003 0304 	and.w	r3, r3, #4
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d031      	beq.n	8005d8c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8005d28:	2100      	movs	r1, #0
 8005d2a:	208d      	movs	r0, #141	@ 0x8d
 8005d2c:	f7ff fd19 	bl	8005762 <send_cmd>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f040 80c3 	bne.w	8005ebe <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8005d38:	20ff      	movs	r0, #255	@ 0xff
 8005d3a:	f7ff fc25 	bl	8005588 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8005d3e:	f107 030c 	add.w	r3, r7, #12
 8005d42:	2110      	movs	r1, #16
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7ff fcb1 	bl	80056ac <rcvr_datablock>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f000 80b6 	beq.w	8005ebe <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8005d52:	2330      	movs	r3, #48	@ 0x30
 8005d54:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8005d58:	e007      	b.n	8005d6a <USER_SPI_ioctl+0x162>
 8005d5a:	20ff      	movs	r0, #255	@ 0xff
 8005d5c:	f7ff fc14 	bl	8005588 <xchg_spi>
 8005d60:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d64:	3b01      	subs	r3, #1
 8005d66:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8005d6a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1f3      	bne.n	8005d5a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8005d72:	7dbb      	ldrb	r3, [r7, #22]
 8005d74:	091b      	lsrs	r3, r3, #4
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	461a      	mov	r2, r3
 8005d7a:	2310      	movs	r3, #16
 8005d7c:	fa03 f202 	lsl.w	r2, r3, r2
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8005d84:	2300      	movs	r3, #0
 8005d86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8005d8a:	e098      	b.n	8005ebe <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	2009      	movs	r0, #9
 8005d90:	f7ff fce7 	bl	8005762 <send_cmd>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f040 8091 	bne.w	8005ebe <USER_SPI_ioctl+0x2b6>
 8005d9c:	f107 030c 	add.w	r3, r7, #12
 8005da0:	2110      	movs	r1, #16
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7ff fc82 	bl	80056ac <rcvr_datablock>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f000 8087 	beq.w	8005ebe <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8005db0:	4b4c      	ldr	r3, [pc, #304]	@ (8005ee4 <USER_SPI_ioctl+0x2dc>)
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d012      	beq.n	8005de2 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8005dbc:	7dbb      	ldrb	r3, [r7, #22]
 8005dbe:	005b      	lsls	r3, r3, #1
 8005dc0:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8005dc4:	7dfa      	ldrb	r2, [r7, #23]
 8005dc6:	09d2      	lsrs	r2, r2, #7
 8005dc8:	b2d2      	uxtb	r2, r2
 8005dca:	4413      	add	r3, r2
 8005dcc:	1c5a      	adds	r2, r3, #1
 8005dce:	7e7b      	ldrb	r3, [r7, #25]
 8005dd0:	099b      	lsrs	r3, r3, #6
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dda:	461a      	mov	r2, r3
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	601a      	str	r2, [r3, #0]
 8005de0:	e013      	b.n	8005e0a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8005de2:	7dbb      	ldrb	r3, [r7, #22]
 8005de4:	109b      	asrs	r3, r3, #2
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	f003 031f 	and.w	r3, r3, #31
 8005dec:	3301      	adds	r3, #1
 8005dee:	7dfa      	ldrb	r2, [r7, #23]
 8005df0:	00d2      	lsls	r2, r2, #3
 8005df2:	f002 0218 	and.w	r2, r2, #24
 8005df6:	7df9      	ldrb	r1, [r7, #23]
 8005df8:	0949      	lsrs	r1, r1, #5
 8005dfa:	b2c9      	uxtb	r1, r1
 8005dfc:	440a      	add	r2, r1
 8005dfe:	3201      	adds	r2, #1
 8005e00:	fb02 f303 	mul.w	r3, r2, r3
 8005e04:	461a      	mov	r2, r3
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8005e10:	e055      	b.n	8005ebe <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005e12:	4b34      	ldr	r3, [pc, #208]	@ (8005ee4 <USER_SPI_ioctl+0x2dc>)
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	f003 0306 	and.w	r3, r3, #6
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d051      	beq.n	8005ec2 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005e1e:	f107 020c 	add.w	r2, r7, #12
 8005e22:	79fb      	ldrb	r3, [r7, #7]
 8005e24:	210b      	movs	r1, #11
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7ff feee 	bl	8005c08 <USER_SPI_ioctl>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d149      	bne.n	8005ec6 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005e32:	7b3b      	ldrb	r3, [r7, #12]
 8005e34:	099b      	lsrs	r3, r3, #6
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d104      	bne.n	8005e46 <USER_SPI_ioctl+0x23e>
 8005e3c:	7dbb      	ldrb	r3, [r7, #22]
 8005e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d041      	beq.n	8005eca <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	623b      	str	r3, [r7, #32]
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e50:	6a3b      	ldr	r3, [r7, #32]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8005e56:	4b23      	ldr	r3, [pc, #140]	@ (8005ee4 <USER_SPI_ioctl+0x2dc>)
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	f003 0308 	and.w	r3, r3, #8
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d105      	bne.n	8005e6e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8005e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e64:	025b      	lsls	r3, r3, #9
 8005e66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e6a:	025b      	lsls	r3, r3, #9
 8005e6c:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8005e6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e70:	2020      	movs	r0, #32
 8005e72:	f7ff fc76 	bl	8005762 <send_cmd>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d128      	bne.n	8005ece <USER_SPI_ioctl+0x2c6>
 8005e7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005e7e:	2021      	movs	r0, #33	@ 0x21
 8005e80:	f7ff fc6f 	bl	8005762 <send_cmd>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d121      	bne.n	8005ece <USER_SPI_ioctl+0x2c6>
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	2026      	movs	r0, #38	@ 0x26
 8005e8e:	f7ff fc68 	bl	8005762 <send_cmd>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d11a      	bne.n	8005ece <USER_SPI_ioctl+0x2c6>
 8005e98:	f247 5030 	movw	r0, #30000	@ 0x7530
 8005e9c:	f7ff fbba 	bl	8005614 <wait_ready>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d013      	beq.n	8005ece <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8005eac:	e00f      	b.n	8005ece <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8005eae:	2304      	movs	r3, #4
 8005eb0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005eb4:	e00c      	b.n	8005ed0 <USER_SPI_ioctl+0x2c8>
		break;
 8005eb6:	bf00      	nop
 8005eb8:	e00a      	b.n	8005ed0 <USER_SPI_ioctl+0x2c8>
		break;
 8005eba:	bf00      	nop
 8005ebc:	e008      	b.n	8005ed0 <USER_SPI_ioctl+0x2c8>
		break;
 8005ebe:	bf00      	nop
 8005ec0:	e006      	b.n	8005ed0 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005ec2:	bf00      	nop
 8005ec4:	e004      	b.n	8005ed0 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005ec6:	bf00      	nop
 8005ec8:	e002      	b.n	8005ed0 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005eca:	bf00      	nop
 8005ecc:	e000      	b.n	8005ed0 <USER_SPI_ioctl+0x2c8>
		break;
 8005ece:	bf00      	nop
	}

	despiselect();
 8005ed0:	f7ff fbc4 	bl	800565c <despiselect>

	return res;
 8005ed4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3730      	adds	r7, #48	@ 0x30
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	20000020 	.word	0x20000020
 8005ee4:	20000544 	.word	0x20000544

08005ee8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	4603      	mov	r3, r0
 8005ef0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005ef2:	79fb      	ldrb	r3, [r7, #7]
 8005ef4:	4a08      	ldr	r2, [pc, #32]	@ (8005f18 <disk_status+0x30>)
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4413      	add	r3, r2
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	79fa      	ldrb	r2, [r7, #7]
 8005f00:	4905      	ldr	r1, [pc, #20]	@ (8005f18 <disk_status+0x30>)
 8005f02:	440a      	add	r2, r1
 8005f04:	7a12      	ldrb	r2, [r2, #8]
 8005f06:	4610      	mov	r0, r2
 8005f08:	4798      	blx	r3
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3710      	adds	r7, #16
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	20000578 	.word	0x20000578

08005f1c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	4603      	mov	r3, r0
 8005f24:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005f26:	2300      	movs	r3, #0
 8005f28:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005f2a:	79fb      	ldrb	r3, [r7, #7]
 8005f2c:	4a0e      	ldr	r2, [pc, #56]	@ (8005f68 <disk_initialize+0x4c>)
 8005f2e:	5cd3      	ldrb	r3, [r2, r3]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d114      	bne.n	8005f5e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005f34:	79fb      	ldrb	r3, [r7, #7]
 8005f36:	4a0c      	ldr	r2, [pc, #48]	@ (8005f68 <disk_initialize+0x4c>)
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4413      	add	r3, r2
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	79fa      	ldrb	r2, [r7, #7]
 8005f42:	4909      	ldr	r1, [pc, #36]	@ (8005f68 <disk_initialize+0x4c>)
 8005f44:	440a      	add	r2, r1
 8005f46:	7a12      	ldrb	r2, [r2, #8]
 8005f48:	4610      	mov	r0, r2
 8005f4a:	4798      	blx	r3
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8005f50:	7bfb      	ldrb	r3, [r7, #15]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d103      	bne.n	8005f5e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8005f56:	79fb      	ldrb	r3, [r7, #7]
 8005f58:	4a03      	ldr	r2, [pc, #12]	@ (8005f68 <disk_initialize+0x4c>)
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8005f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3710      	adds	r7, #16
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	20000578 	.word	0x20000578

08005f6c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005f6c:	b590      	push	{r4, r7, lr}
 8005f6e:	b087      	sub	sp, #28
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60b9      	str	r1, [r7, #8]
 8005f74:	607a      	str	r2, [r7, #4]
 8005f76:	603b      	str	r3, [r7, #0]
 8005f78:	4603      	mov	r3, r0
 8005f7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
 8005f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8005fa8 <disk_read+0x3c>)
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4413      	add	r3, r2
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	689c      	ldr	r4, [r3, #8]
 8005f88:	7bfb      	ldrb	r3, [r7, #15]
 8005f8a:	4a07      	ldr	r2, [pc, #28]	@ (8005fa8 <disk_read+0x3c>)
 8005f8c:	4413      	add	r3, r2
 8005f8e:	7a18      	ldrb	r0, [r3, #8]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	68b9      	ldr	r1, [r7, #8]
 8005f96:	47a0      	blx	r4
 8005f98:	4603      	mov	r3, r0
 8005f9a:	75fb      	strb	r3, [r7, #23]
  return res;
 8005f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	371c      	adds	r7, #28
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd90      	pop	{r4, r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	20000578 	.word	0x20000578

08005fac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005fac:	b590      	push	{r4, r7, lr}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60b9      	str	r1, [r7, #8]
 8005fb4:	607a      	str	r2, [r7, #4]
 8005fb6:	603b      	str	r3, [r7, #0]
 8005fb8:	4603      	mov	r3, r0
 8005fba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005fbc:	7bfb      	ldrb	r3, [r7, #15]
 8005fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8005fe8 <disk_write+0x3c>)
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	68dc      	ldr	r4, [r3, #12]
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
 8005fca:	4a07      	ldr	r2, [pc, #28]	@ (8005fe8 <disk_write+0x3c>)
 8005fcc:	4413      	add	r3, r2
 8005fce:	7a18      	ldrb	r0, [r3, #8]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	68b9      	ldr	r1, [r7, #8]
 8005fd6:	47a0      	blx	r4
 8005fd8:	4603      	mov	r3, r0
 8005fda:	75fb      	strb	r3, [r7, #23]
  return res;
 8005fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	371c      	adds	r7, #28
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd90      	pop	{r4, r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	20000578 	.word	0x20000578

08005fec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005ffc:	89fb      	ldrh	r3, [r7, #14]
 8005ffe:	021b      	lsls	r3, r3, #8
 8006000:	b21a      	sxth	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	b21b      	sxth	r3, r3
 8006008:	4313      	orrs	r3, r2
 800600a:	b21b      	sxth	r3, r3
 800600c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800600e:	89fb      	ldrh	r3, [r7, #14]
}
 8006010:	4618      	mov	r0, r3
 8006012:	3714      	adds	r7, #20
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	3303      	adds	r3, #3
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	021b      	lsls	r3, r3, #8
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	3202      	adds	r2, #2
 8006034:	7812      	ldrb	r2, [r2, #0]
 8006036:	4313      	orrs	r3, r2
 8006038:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	021b      	lsls	r3, r3, #8
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	3201      	adds	r2, #1
 8006042:	7812      	ldrb	r2, [r2, #0]
 8006044:	4313      	orrs	r3, r2
 8006046:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	021b      	lsls	r3, r3, #8
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	7812      	ldrb	r2, [r2, #0]
 8006050:	4313      	orrs	r3, r2
 8006052:	60fb      	str	r3, [r7, #12]
	return rv;
 8006054:	68fb      	ldr	r3, [r7, #12]
}
 8006056:	4618      	mov	r0, r3
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006062:	b480      	push	{r7}
 8006064:	b083      	sub	sp, #12
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
 800606a:	460b      	mov	r3, r1
 800606c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	1c5a      	adds	r2, r3, #1
 8006072:	607a      	str	r2, [r7, #4]
 8006074:	887a      	ldrh	r2, [r7, #2]
 8006076:	b2d2      	uxtb	r2, r2
 8006078:	701a      	strb	r2, [r3, #0]
 800607a:	887b      	ldrh	r3, [r7, #2]
 800607c:	0a1b      	lsrs	r3, r3, #8
 800607e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	607a      	str	r2, [r7, #4]
 8006086:	887a      	ldrh	r2, [r7, #2]
 8006088:	b2d2      	uxtb	r2, r2
 800608a:	701a      	strb	r2, [r3, #0]
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	1c5a      	adds	r2, r3, #1
 80060a6:	607a      	str	r2, [r7, #4]
 80060a8:	683a      	ldr	r2, [r7, #0]
 80060aa:	b2d2      	uxtb	r2, r2
 80060ac:	701a      	strb	r2, [r3, #0]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	0a1b      	lsrs	r3, r3, #8
 80060b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	1c5a      	adds	r2, r3, #1
 80060b8:	607a      	str	r2, [r7, #4]
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	b2d2      	uxtb	r2, r2
 80060be:	701a      	strb	r2, [r3, #0]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	0a1b      	lsrs	r3, r3, #8
 80060c4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	1c5a      	adds	r2, r3, #1
 80060ca:	607a      	str	r2, [r7, #4]
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	b2d2      	uxtb	r2, r2
 80060d0:	701a      	strb	r2, [r3, #0]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	0a1b      	lsrs	r3, r3, #8
 80060d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	1c5a      	adds	r2, r3, #1
 80060dc:	607a      	str	r2, [r7, #4]
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	b2d2      	uxtb	r2, r2
 80060e2:	701a      	strb	r2, [r3, #0]
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80060f0:	b480      	push	{r7}
 80060f2:	b087      	sub	sp, #28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00d      	beq.n	8006126 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	1c53      	adds	r3, r2, #1
 800610e:	613b      	str	r3, [r7, #16]
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	1c59      	adds	r1, r3, #1
 8006114:	6179      	str	r1, [r7, #20]
 8006116:	7812      	ldrb	r2, [r2, #0]
 8006118:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	3b01      	subs	r3, #1
 800611e:	607b      	str	r3, [r7, #4]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1f1      	bne.n	800610a <mem_cpy+0x1a>
	}
}
 8006126:	bf00      	nop
 8006128:	371c      	adds	r7, #28
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006132:	b480      	push	{r7}
 8006134:	b087      	sub	sp, #28
 8006136:	af00      	add	r7, sp, #0
 8006138:	60f8      	str	r0, [r7, #12]
 800613a:	60b9      	str	r1, [r7, #8]
 800613c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	1c5a      	adds	r2, r3, #1
 8006146:	617a      	str	r2, [r7, #20]
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	b2d2      	uxtb	r2, r2
 800614c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	3b01      	subs	r3, #1
 8006152:	607b      	str	r3, [r7, #4]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1f3      	bne.n	8006142 <mem_set+0x10>
}
 800615a:	bf00      	nop
 800615c:	bf00      	nop
 800615e:	371c      	adds	r7, #28
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006168:	b480      	push	{r7}
 800616a:	b089      	sub	sp, #36	@ 0x24
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	61fb      	str	r3, [r7, #28]
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800617c:	2300      	movs	r3, #0
 800617e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	1c5a      	adds	r2, r3, #1
 8006184:	61fa      	str	r2, [r7, #28]
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	4619      	mov	r1, r3
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	1c5a      	adds	r2, r3, #1
 800618e:	61ba      	str	r2, [r7, #24]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	1acb      	subs	r3, r1, r3
 8006194:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	3b01      	subs	r3, #1
 800619a:	607b      	str	r3, [r7, #4]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d002      	beq.n	80061a8 <mem_cmp+0x40>
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d0eb      	beq.n	8006180 <mem_cmp+0x18>

	return r;
 80061a8:	697b      	ldr	r3, [r7, #20]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3724      	adds	r7, #36	@ 0x24
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80061b6:	b480      	push	{r7}
 80061b8:	b083      	sub	sp, #12
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
 80061be:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80061c0:	e002      	b.n	80061c8 <chk_chr+0x12>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	3301      	adds	r3, #1
 80061c6:	607b      	str	r3, [r7, #4]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d005      	beq.n	80061dc <chk_chr+0x26>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	461a      	mov	r2, r3
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	4293      	cmp	r3, r2
 80061da:	d1f2      	bne.n	80061c2 <chk_chr+0xc>
	return *str;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	781b      	ldrb	r3, [r3, #0]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d009      	beq.n	800620e <lock_fs+0x22>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	4618      	mov	r0, r3
 8006200:	f002 f99f 	bl	8008542 <ff_req_grant>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <lock_fs+0x22>
 800620a:	2301      	movs	r3, #1
 800620c:	e000      	b.n	8006210 <lock_fs+0x24>
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3708      	adds	r7, #8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	460b      	mov	r3, r1
 8006222:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00d      	beq.n	8006246 <unlock_fs+0x2e>
 800622a:	78fb      	ldrb	r3, [r7, #3]
 800622c:	2b0c      	cmp	r3, #12
 800622e:	d00a      	beq.n	8006246 <unlock_fs+0x2e>
 8006230:	78fb      	ldrb	r3, [r7, #3]
 8006232:	2b0b      	cmp	r3, #11
 8006234:	d007      	beq.n	8006246 <unlock_fs+0x2e>
 8006236:	78fb      	ldrb	r3, [r7, #3]
 8006238:	2b0f      	cmp	r3, #15
 800623a:	d004      	beq.n	8006246 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	4618      	mov	r0, r3
 8006242:	f002 f993 	bl	800856c <ff_rel_grant>
	}
}
 8006246:	bf00      	nop
 8006248:	3708      	adds	r7, #8
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
	...

08006250 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800625a:	2300      	movs	r3, #0
 800625c:	60bb      	str	r3, [r7, #8]
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	60fb      	str	r3, [r7, #12]
 8006262:	e029      	b.n	80062b8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006264:	4a27      	ldr	r2, [pc, #156]	@ (8006304 <chk_lock+0xb4>)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	011b      	lsls	r3, r3, #4
 800626a:	4413      	add	r3, r2
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d01d      	beq.n	80062ae <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006272:	4a24      	ldr	r2, [pc, #144]	@ (8006304 <chk_lock+0xb4>)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	011b      	lsls	r3, r3, #4
 8006278:	4413      	add	r3, r2
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	429a      	cmp	r2, r3
 8006282:	d116      	bne.n	80062b2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006284:	4a1f      	ldr	r2, [pc, #124]	@ (8006304 <chk_lock+0xb4>)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	011b      	lsls	r3, r3, #4
 800628a:	4413      	add	r3, r2
 800628c:	3304      	adds	r3, #4
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006294:	429a      	cmp	r2, r3
 8006296:	d10c      	bne.n	80062b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006298:	4a1a      	ldr	r2, [pc, #104]	@ (8006304 <chk_lock+0xb4>)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	011b      	lsls	r3, r3, #4
 800629e:	4413      	add	r3, r2
 80062a0:	3308      	adds	r3, #8
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d102      	bne.n	80062b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80062ac:	e007      	b.n	80062be <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80062ae:	2301      	movs	r3, #1
 80062b0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	3301      	adds	r3, #1
 80062b6:	60fb      	str	r3, [r7, #12]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d9d2      	bls.n	8006264 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d109      	bne.n	80062d8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d102      	bne.n	80062d0 <chk_lock+0x80>
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d101      	bne.n	80062d4 <chk_lock+0x84>
 80062d0:	2300      	movs	r3, #0
 80062d2:	e010      	b.n	80062f6 <chk_lock+0xa6>
 80062d4:	2312      	movs	r3, #18
 80062d6:	e00e      	b.n	80062f6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d108      	bne.n	80062f0 <chk_lock+0xa0>
 80062de:	4a09      	ldr	r2, [pc, #36]	@ (8006304 <chk_lock+0xb4>)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	011b      	lsls	r3, r3, #4
 80062e4:	4413      	add	r3, r2
 80062e6:	330c      	adds	r3, #12
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062ee:	d101      	bne.n	80062f4 <chk_lock+0xa4>
 80062f0:	2310      	movs	r3, #16
 80062f2:	e000      	b.n	80062f6 <chk_lock+0xa6>
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	20000558 	.word	0x20000558

08006308 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800630e:	2300      	movs	r3, #0
 8006310:	607b      	str	r3, [r7, #4]
 8006312:	e002      	b.n	800631a <enq_lock+0x12>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	3301      	adds	r3, #1
 8006318:	607b      	str	r3, [r7, #4]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d806      	bhi.n	800632e <enq_lock+0x26>
 8006320:	4a09      	ldr	r2, [pc, #36]	@ (8006348 <enq_lock+0x40>)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	011b      	lsls	r3, r3, #4
 8006326:	4413      	add	r3, r2
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1f2      	bne.n	8006314 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2b02      	cmp	r3, #2
 8006332:	bf14      	ite	ne
 8006334:	2301      	movne	r3, #1
 8006336:	2300      	moveq	r3, #0
 8006338:	b2db      	uxtb	r3, r3
}
 800633a:	4618      	mov	r0, r3
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	20000558 	.word	0x20000558

0800634c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006356:	2300      	movs	r3, #0
 8006358:	60fb      	str	r3, [r7, #12]
 800635a:	e01f      	b.n	800639c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800635c:	4a41      	ldr	r2, [pc, #260]	@ (8006464 <inc_lock+0x118>)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	011b      	lsls	r3, r3, #4
 8006362:	4413      	add	r3, r2
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	429a      	cmp	r2, r3
 800636c:	d113      	bne.n	8006396 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800636e:	4a3d      	ldr	r2, [pc, #244]	@ (8006464 <inc_lock+0x118>)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	011b      	lsls	r3, r3, #4
 8006374:	4413      	add	r3, r2
 8006376:	3304      	adds	r3, #4
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800637e:	429a      	cmp	r2, r3
 8006380:	d109      	bne.n	8006396 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006382:	4a38      	ldr	r2, [pc, #224]	@ (8006464 <inc_lock+0x118>)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	011b      	lsls	r3, r3, #4
 8006388:	4413      	add	r3, r2
 800638a:	3308      	adds	r3, #8
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006392:	429a      	cmp	r2, r3
 8006394:	d006      	beq.n	80063a4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	3301      	adds	r3, #1
 800639a:	60fb      	str	r3, [r7, #12]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d9dc      	bls.n	800635c <inc_lock+0x10>
 80063a2:	e000      	b.n	80063a6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80063a4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d132      	bne.n	8006412 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80063ac:	2300      	movs	r3, #0
 80063ae:	60fb      	str	r3, [r7, #12]
 80063b0:	e002      	b.n	80063b8 <inc_lock+0x6c>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	3301      	adds	r3, #1
 80063b6:	60fb      	str	r3, [r7, #12]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d806      	bhi.n	80063cc <inc_lock+0x80>
 80063be:	4a29      	ldr	r2, [pc, #164]	@ (8006464 <inc_lock+0x118>)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	011b      	lsls	r3, r3, #4
 80063c4:	4413      	add	r3, r2
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1f2      	bne.n	80063b2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d101      	bne.n	80063d6 <inc_lock+0x8a>
 80063d2:	2300      	movs	r3, #0
 80063d4:	e040      	b.n	8006458 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	4922      	ldr	r1, [pc, #136]	@ (8006464 <inc_lock+0x118>)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	011b      	lsls	r3, r3, #4
 80063e0:	440b      	add	r3, r1
 80063e2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	689a      	ldr	r2, [r3, #8]
 80063e8:	491e      	ldr	r1, [pc, #120]	@ (8006464 <inc_lock+0x118>)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	011b      	lsls	r3, r3, #4
 80063ee:	440b      	add	r3, r1
 80063f0:	3304      	adds	r3, #4
 80063f2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	695a      	ldr	r2, [r3, #20]
 80063f8:	491a      	ldr	r1, [pc, #104]	@ (8006464 <inc_lock+0x118>)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	011b      	lsls	r3, r3, #4
 80063fe:	440b      	add	r3, r1
 8006400:	3308      	adds	r3, #8
 8006402:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006404:	4a17      	ldr	r2, [pc, #92]	@ (8006464 <inc_lock+0x118>)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	011b      	lsls	r3, r3, #4
 800640a:	4413      	add	r3, r2
 800640c:	330c      	adds	r3, #12
 800640e:	2200      	movs	r2, #0
 8006410:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d009      	beq.n	800642c <inc_lock+0xe0>
 8006418:	4a12      	ldr	r2, [pc, #72]	@ (8006464 <inc_lock+0x118>)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	011b      	lsls	r3, r3, #4
 800641e:	4413      	add	r3, r2
 8006420:	330c      	adds	r3, #12
 8006422:	881b      	ldrh	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d001      	beq.n	800642c <inc_lock+0xe0>
 8006428:	2300      	movs	r3, #0
 800642a:	e015      	b.n	8006458 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d108      	bne.n	8006444 <inc_lock+0xf8>
 8006432:	4a0c      	ldr	r2, [pc, #48]	@ (8006464 <inc_lock+0x118>)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	011b      	lsls	r3, r3, #4
 8006438:	4413      	add	r3, r2
 800643a:	330c      	adds	r3, #12
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	3301      	adds	r3, #1
 8006440:	b29a      	uxth	r2, r3
 8006442:	e001      	b.n	8006448 <inc_lock+0xfc>
 8006444:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006448:	4906      	ldr	r1, [pc, #24]	@ (8006464 <inc_lock+0x118>)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	011b      	lsls	r3, r3, #4
 800644e:	440b      	add	r3, r1
 8006450:	330c      	adds	r3, #12
 8006452:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	3301      	adds	r3, #1
}
 8006458:	4618      	mov	r0, r3
 800645a:	3714      	adds	r7, #20
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	20000558 	.word	0x20000558

08006468 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006470:	2300      	movs	r3, #0
 8006472:	60fb      	str	r3, [r7, #12]
 8006474:	e010      	b.n	8006498 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006476:	4a0d      	ldr	r2, [pc, #52]	@ (80064ac <clear_lock+0x44>)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	011b      	lsls	r3, r3, #4
 800647c:	4413      	add	r3, r2
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	429a      	cmp	r2, r3
 8006484:	d105      	bne.n	8006492 <clear_lock+0x2a>
 8006486:	4a09      	ldr	r2, [pc, #36]	@ (80064ac <clear_lock+0x44>)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	011b      	lsls	r3, r3, #4
 800648c:	4413      	add	r3, r2
 800648e:	2200      	movs	r2, #0
 8006490:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	3301      	adds	r3, #1
 8006496:	60fb      	str	r3, [r7, #12]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d9eb      	bls.n	8006476 <clear_lock+0xe>
	}
}
 800649e:	bf00      	nop
 80064a0:	bf00      	nop
 80064a2:	3714      	adds	r7, #20
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr
 80064ac:	20000558 	.word	0x20000558

080064b0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80064b8:	2300      	movs	r3, #0
 80064ba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	78db      	ldrb	r3, [r3, #3]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d034      	beq.n	800652e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	7858      	ldrb	r0, [r3, #1]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80064d4:	2301      	movs	r3, #1
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	f7ff fd68 	bl	8005fac <disk_write>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d002      	beq.n	80064e8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	73fb      	strb	r3, [r7, #15]
 80064e6:	e022      	b.n	800652e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	1ad2      	subs	r2, r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d217      	bcs.n	800652e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	789b      	ldrb	r3, [r3, #2]
 8006502:	613b      	str	r3, [r7, #16]
 8006504:	e010      	b.n	8006528 <sync_window+0x78>
					wsect += fs->fsize;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	4413      	add	r3, r2
 800650e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	7858      	ldrb	r0, [r3, #1]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800651a:	2301      	movs	r3, #1
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	f7ff fd45 	bl	8005fac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	3b01      	subs	r3, #1
 8006526:	613b      	str	r3, [r7, #16]
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	2b01      	cmp	r3, #1
 800652c:	d8eb      	bhi.n	8006506 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800652e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006530:	4618      	mov	r0, r3
 8006532:	3718      	adds	r7, #24
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006542:	2300      	movs	r3, #0
 8006544:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800654a:	683a      	ldr	r2, [r7, #0]
 800654c:	429a      	cmp	r2, r3
 800654e:	d01b      	beq.n	8006588 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f7ff ffad 	bl	80064b0 <sync_window>
 8006556:	4603      	mov	r3, r0
 8006558:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800655a:	7bfb      	ldrb	r3, [r7, #15]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d113      	bne.n	8006588 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	7858      	ldrb	r0, [r3, #1]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800656a:	2301      	movs	r3, #1
 800656c:	683a      	ldr	r2, [r7, #0]
 800656e:	f7ff fcfd 	bl	8005f6c <disk_read>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d004      	beq.n	8006582 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006578:	f04f 33ff 	mov.w	r3, #4294967295
 800657c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800657e:	2301      	movs	r3, #1
 8006580:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	683a      	ldr	r2, [r7, #0]
 8006586:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8006588:	7bfb      	ldrb	r3, [r7, #15]
}
 800658a:	4618      	mov	r0, r3
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006592:	b480      	push	{r7}
 8006594:	b083      	sub	sp, #12
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	3b02      	subs	r3, #2
 80065a0:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	3b02      	subs	r3, #2
 80065a8:	683a      	ldr	r2, [r7, #0]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d301      	bcc.n	80065b2 <clust2sect+0x20>
 80065ae:	2300      	movs	r3, #0
 80065b0:	e008      	b.n	80065c4 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	895b      	ldrh	r3, [r3, #10]
 80065b6:	461a      	mov	r2, r3
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	fb03 f202 	mul.w	r2, r3, r2
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c2:	4413      	add	r3, r2
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d904      	bls.n	80065f0 <get_fat+0x20>
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	683a      	ldr	r2, [r7, #0]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d302      	bcc.n	80065f6 <get_fat+0x26>
		val = 1;	/* Internal error */
 80065f0:	2301      	movs	r3, #1
 80065f2:	617b      	str	r3, [r7, #20]
 80065f4:	e08e      	b.n	8006714 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80065f6:	f04f 33ff 	mov.w	r3, #4294967295
 80065fa:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	2b03      	cmp	r3, #3
 8006602:	d061      	beq.n	80066c8 <get_fat+0xf8>
 8006604:	2b03      	cmp	r3, #3
 8006606:	dc7b      	bgt.n	8006700 <get_fat+0x130>
 8006608:	2b01      	cmp	r3, #1
 800660a:	d002      	beq.n	8006612 <get_fat+0x42>
 800660c:	2b02      	cmp	r3, #2
 800660e:	d041      	beq.n	8006694 <get_fat+0xc4>
 8006610:	e076      	b.n	8006700 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	60fb      	str	r3, [r7, #12]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	085b      	lsrs	r3, r3, #1
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	4413      	add	r3, r2
 800661e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	0a5b      	lsrs	r3, r3, #9
 8006628:	4413      	add	r3, r2
 800662a:	4619      	mov	r1, r3
 800662c:	6938      	ldr	r0, [r7, #16]
 800662e:	f7ff ff83 	bl	8006538 <move_window>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d166      	bne.n	8006706 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	1c5a      	adds	r2, r3, #1
 800663c:	60fa      	str	r2, [r7, #12]
 800663e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	4413      	add	r3, r2
 8006646:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800664a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	0a5b      	lsrs	r3, r3, #9
 8006654:	4413      	add	r3, r2
 8006656:	4619      	mov	r1, r3
 8006658:	6938      	ldr	r0, [r7, #16]
 800665a:	f7ff ff6d 	bl	8006538 <move_window>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d152      	bne.n	800670a <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	4413      	add	r3, r2
 800666e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006672:	021b      	lsls	r3, r3, #8
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	4313      	orrs	r3, r2
 8006678:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	f003 0301 	and.w	r3, r3, #1
 8006680:	2b00      	cmp	r3, #0
 8006682:	d002      	beq.n	800668a <get_fat+0xba>
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	091b      	lsrs	r3, r3, #4
 8006688:	e002      	b.n	8006690 <get_fat+0xc0>
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006690:	617b      	str	r3, [r7, #20]
			break;
 8006692:	e03f      	b.n	8006714 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	0a1b      	lsrs	r3, r3, #8
 800669c:	4413      	add	r3, r2
 800669e:	4619      	mov	r1, r3
 80066a0:	6938      	ldr	r0, [r7, #16]
 80066a2:	f7ff ff49 	bl	8006538 <move_window>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d130      	bne.n	800670e <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	005b      	lsls	r3, r3, #1
 80066b6:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80066ba:	4413      	add	r3, r2
 80066bc:	4618      	mov	r0, r3
 80066be:	f7ff fc95 	bl	8005fec <ld_word>
 80066c2:	4603      	mov	r3, r0
 80066c4:	617b      	str	r3, [r7, #20]
			break;
 80066c6:	e025      	b.n	8006714 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	09db      	lsrs	r3, r3, #7
 80066d0:	4413      	add	r3, r2
 80066d2:	4619      	mov	r1, r3
 80066d4:	6938      	ldr	r0, [r7, #16]
 80066d6:	f7ff ff2f 	bl	8006538 <move_window>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d118      	bne.n	8006712 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80066ee:	4413      	add	r3, r2
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7ff fc93 	bl	800601c <ld_dword>
 80066f6:	4603      	mov	r3, r0
 80066f8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80066fc:	617b      	str	r3, [r7, #20]
			break;
 80066fe:	e009      	b.n	8006714 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006700:	2301      	movs	r3, #1
 8006702:	617b      	str	r3, [r7, #20]
 8006704:	e006      	b.n	8006714 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006706:	bf00      	nop
 8006708:	e004      	b.n	8006714 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800670a:	bf00      	nop
 800670c:	e002      	b.n	8006714 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800670e:	bf00      	nop
 8006710:	e000      	b.n	8006714 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006712:	bf00      	nop
		}
	}

	return val;
 8006714:	697b      	ldr	r3, [r7, #20]
}
 8006716:	4618      	mov	r0, r3
 8006718:	3718      	adds	r7, #24
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800671e:	b590      	push	{r4, r7, lr}
 8006720:	b089      	sub	sp, #36	@ 0x24
 8006722:	af00      	add	r7, sp, #0
 8006724:	60f8      	str	r0, [r7, #12]
 8006726:	60b9      	str	r1, [r7, #8]
 8006728:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800672a:	2302      	movs	r3, #2
 800672c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	2b01      	cmp	r3, #1
 8006732:	f240 80d9 	bls.w	80068e8 <put_fat+0x1ca>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	429a      	cmp	r2, r3
 800673e:	f080 80d3 	bcs.w	80068e8 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	2b03      	cmp	r3, #3
 8006748:	f000 8096 	beq.w	8006878 <put_fat+0x15a>
 800674c:	2b03      	cmp	r3, #3
 800674e:	f300 80cb 	bgt.w	80068e8 <put_fat+0x1ca>
 8006752:	2b01      	cmp	r3, #1
 8006754:	d002      	beq.n	800675c <put_fat+0x3e>
 8006756:	2b02      	cmp	r3, #2
 8006758:	d06e      	beq.n	8006838 <put_fat+0x11a>
 800675a:	e0c5      	b.n	80068e8 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	61bb      	str	r3, [r7, #24]
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	085b      	lsrs	r3, r3, #1
 8006764:	69ba      	ldr	r2, [r7, #24]
 8006766:	4413      	add	r3, r2
 8006768:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	0a5b      	lsrs	r3, r3, #9
 8006772:	4413      	add	r3, r2
 8006774:	4619      	mov	r1, r3
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f7ff fede 	bl	8006538 <move_window>
 800677c:	4603      	mov	r3, r0
 800677e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006780:	7ffb      	ldrb	r3, [r7, #31]
 8006782:	2b00      	cmp	r3, #0
 8006784:	f040 80a9 	bne.w	80068da <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	1c59      	adds	r1, r3, #1
 8006792:	61b9      	str	r1, [r7, #24]
 8006794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006798:	4413      	add	r3, r2
 800679a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00d      	beq.n	80067c2 <put_fat+0xa4>
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	b25b      	sxtb	r3, r3
 80067ac:	f003 030f 	and.w	r3, r3, #15
 80067b0:	b25a      	sxtb	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	011b      	lsls	r3, r3, #4
 80067b8:	b25b      	sxtb	r3, r3
 80067ba:	4313      	orrs	r3, r2
 80067bc:	b25b      	sxtb	r3, r3
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	e001      	b.n	80067c6 <put_fat+0xa8>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2201      	movs	r2, #1
 80067ce:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	0a5b      	lsrs	r3, r3, #9
 80067d8:	4413      	add	r3, r2
 80067da:	4619      	mov	r1, r3
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f7ff feab 	bl	8006538 <move_window>
 80067e2:	4603      	mov	r3, r0
 80067e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80067e6:	7ffb      	ldrb	r3, [r7, #31]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d178      	bne.n	80068de <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067f8:	4413      	add	r3, r2
 80067fa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	d003      	beq.n	800680e <put_fat+0xf0>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	091b      	lsrs	r3, r3, #4
 800680a:	b2db      	uxtb	r3, r3
 800680c:	e00e      	b.n	800682c <put_fat+0x10e>
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	b25b      	sxtb	r3, r3
 8006814:	f023 030f 	bic.w	r3, r3, #15
 8006818:	b25a      	sxtb	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	0a1b      	lsrs	r3, r3, #8
 800681e:	b25b      	sxtb	r3, r3
 8006820:	f003 030f 	and.w	r3, r3, #15
 8006824:	b25b      	sxtb	r3, r3
 8006826:	4313      	orrs	r3, r2
 8006828:	b25b      	sxtb	r3, r3
 800682a:	b2db      	uxtb	r3, r3
 800682c:	697a      	ldr	r2, [r7, #20]
 800682e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2201      	movs	r2, #1
 8006834:	70da      	strb	r2, [r3, #3]
			break;
 8006836:	e057      	b.n	80068e8 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	0a1b      	lsrs	r3, r3, #8
 8006840:	4413      	add	r3, r2
 8006842:	4619      	mov	r1, r3
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f7ff fe77 	bl	8006538 <move_window>
 800684a:	4603      	mov	r3, r0
 800684c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800684e:	7ffb      	ldrb	r3, [r7, #31]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d146      	bne.n	80068e2 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	005b      	lsls	r3, r3, #1
 800685e:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006862:	4413      	add	r3, r2
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	b292      	uxth	r2, r2
 8006868:	4611      	mov	r1, r2
 800686a:	4618      	mov	r0, r3
 800686c:	f7ff fbf9 	bl	8006062 <st_word>
			fs->wflag = 1;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2201      	movs	r2, #1
 8006874:	70da      	strb	r2, [r3, #3]
			break;
 8006876:	e037      	b.n	80068e8 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	09db      	lsrs	r3, r3, #7
 8006880:	4413      	add	r3, r2
 8006882:	4619      	mov	r1, r3
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f7ff fe57 	bl	8006538 <move_window>
 800688a:	4603      	mov	r3, r0
 800688c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800688e:	7ffb      	ldrb	r3, [r7, #31]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d128      	bne.n	80068e6 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80068a8:	4413      	add	r3, r2
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7ff fbb6 	bl	800601c <ld_dword>
 80068b0:	4603      	mov	r3, r0
 80068b2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80068b6:	4323      	orrs	r3, r4
 80068b8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80068c8:	4413      	add	r3, r2
 80068ca:	6879      	ldr	r1, [r7, #4]
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7ff fbe3 	bl	8006098 <st_dword>
			fs->wflag = 1;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2201      	movs	r2, #1
 80068d6:	70da      	strb	r2, [r3, #3]
			break;
 80068d8:	e006      	b.n	80068e8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80068da:	bf00      	nop
 80068dc:	e004      	b.n	80068e8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80068de:	bf00      	nop
 80068e0:	e002      	b.n	80068e8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80068e2:	bf00      	nop
 80068e4:	e000      	b.n	80068e8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80068e6:	bf00      	nop
		}
	}
	return res;
 80068e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3724      	adds	r7, #36	@ 0x24
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd90      	pop	{r4, r7, pc}

080068f2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b088      	sub	sp, #32
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	60f8      	str	r0, [r7, #12]
 80068fa:	60b9      	str	r1, [r7, #8]
 80068fc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80068fe:	2300      	movs	r3, #0
 8006900:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	2b01      	cmp	r3, #1
 800690c:	d904      	bls.n	8006918 <remove_chain+0x26>
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	429a      	cmp	r2, r3
 8006916:	d301      	bcc.n	800691c <remove_chain+0x2a>
 8006918:	2302      	movs	r3, #2
 800691a:	e04b      	b.n	80069b4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00c      	beq.n	800693c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006922:	f04f 32ff 	mov.w	r2, #4294967295
 8006926:	6879      	ldr	r1, [r7, #4]
 8006928:	69b8      	ldr	r0, [r7, #24]
 800692a:	f7ff fef8 	bl	800671e <put_fat>
 800692e:	4603      	mov	r3, r0
 8006930:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006932:	7ffb      	ldrb	r3, [r7, #31]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d001      	beq.n	800693c <remove_chain+0x4a>
 8006938:	7ffb      	ldrb	r3, [r7, #31]
 800693a:	e03b      	b.n	80069b4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800693c:	68b9      	ldr	r1, [r7, #8]
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f7ff fe46 	bl	80065d0 <get_fat>
 8006944:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d031      	beq.n	80069b0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d101      	bne.n	8006956 <remove_chain+0x64>
 8006952:	2302      	movs	r3, #2
 8006954:	e02e      	b.n	80069b4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695c:	d101      	bne.n	8006962 <remove_chain+0x70>
 800695e:	2301      	movs	r3, #1
 8006960:	e028      	b.n	80069b4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006962:	2200      	movs	r2, #0
 8006964:	68b9      	ldr	r1, [r7, #8]
 8006966:	69b8      	ldr	r0, [r7, #24]
 8006968:	f7ff fed9 	bl	800671e <put_fat>
 800696c:	4603      	mov	r3, r0
 800696e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006970:	7ffb      	ldrb	r3, [r7, #31]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <remove_chain+0x88>
 8006976:	7ffb      	ldrb	r3, [r7, #31]
 8006978:	e01c      	b.n	80069b4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	695a      	ldr	r2, [r3, #20]
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	3b02      	subs	r3, #2
 8006984:	429a      	cmp	r2, r3
 8006986:	d20b      	bcs.n	80069a0 <remove_chain+0xae>
			fs->free_clst++;
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	1c5a      	adds	r2, r3, #1
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	791b      	ldrb	r3, [r3, #4]
 8006996:	f043 0301 	orr.w	r3, r3, #1
 800699a:	b2da      	uxtb	r2, r3
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	68ba      	ldr	r2, [r7, #8]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d3c6      	bcc.n	800693c <remove_chain+0x4a>
 80069ae:	e000      	b.n	80069b2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80069b0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3720      	adds	r7, #32
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b088      	sub	sp, #32
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10d      	bne.n	80069ee <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d004      	beq.n	80069e8 <create_chain+0x2c>
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	69ba      	ldr	r2, [r7, #24]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d31b      	bcc.n	8006a20 <create_chain+0x64>
 80069e8:	2301      	movs	r3, #1
 80069ea:	61bb      	str	r3, [r7, #24]
 80069ec:	e018      	b.n	8006a20 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80069ee:	6839      	ldr	r1, [r7, #0]
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f7ff fded 	bl	80065d0 <get_fat>
 80069f6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d801      	bhi.n	8006a02 <create_chain+0x46>
 80069fe:	2301      	movs	r3, #1
 8006a00:	e070      	b.n	8006ae4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a08:	d101      	bne.n	8006a0e <create_chain+0x52>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	e06a      	b.n	8006ae4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d201      	bcs.n	8006a1c <create_chain+0x60>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	e063      	b.n	8006ae4 <create_chain+0x128>
		scl = clst;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	3301      	adds	r3, #1
 8006a28:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	69fa      	ldr	r2, [r7, #28]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d307      	bcc.n	8006a44 <create_chain+0x88>
				ncl = 2;
 8006a34:	2302      	movs	r3, #2
 8006a36:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006a38:	69fa      	ldr	r2, [r7, #28]
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d901      	bls.n	8006a44 <create_chain+0x88>
 8006a40:	2300      	movs	r3, #0
 8006a42:	e04f      	b.n	8006ae4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006a44:	69f9      	ldr	r1, [r7, #28]
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7ff fdc2 	bl	80065d0 <get_fat>
 8006a4c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00e      	beq.n	8006a72 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d003      	beq.n	8006a62 <create_chain+0xa6>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a60:	d101      	bne.n	8006a66 <create_chain+0xaa>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	e03e      	b.n	8006ae4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006a66:	69fa      	ldr	r2, [r7, #28]
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d1da      	bne.n	8006a24 <create_chain+0x68>
 8006a6e:	2300      	movs	r3, #0
 8006a70:	e038      	b.n	8006ae4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006a72:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006a74:	f04f 32ff 	mov.w	r2, #4294967295
 8006a78:	69f9      	ldr	r1, [r7, #28]
 8006a7a:	6938      	ldr	r0, [r7, #16]
 8006a7c:	f7ff fe4f 	bl	800671e <put_fat>
 8006a80:	4603      	mov	r3, r0
 8006a82:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006a84:	7dfb      	ldrb	r3, [r7, #23]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d109      	bne.n	8006a9e <create_chain+0xe2>
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d006      	beq.n	8006a9e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006a90:	69fa      	ldr	r2, [r7, #28]
 8006a92:	6839      	ldr	r1, [r7, #0]
 8006a94:	6938      	ldr	r0, [r7, #16]
 8006a96:	f7ff fe42 	bl	800671e <put_fat>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006a9e:	7dfb      	ldrb	r3, [r7, #23]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d116      	bne.n	8006ad2 <create_chain+0x116>
		fs->last_clst = ncl;
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	69fa      	ldr	r2, [r7, #28]
 8006aa8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	695a      	ldr	r2, [r3, #20]
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	3b02      	subs	r3, #2
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d804      	bhi.n	8006ac2 <create_chain+0x106>
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	695b      	ldr	r3, [r3, #20]
 8006abc:	1e5a      	subs	r2, r3, #1
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	791b      	ldrb	r3, [r3, #4]
 8006ac6:	f043 0301 	orr.w	r3, r3, #1
 8006aca:	b2da      	uxtb	r2, r3
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	711a      	strb	r2, [r3, #4]
 8006ad0:	e007      	b.n	8006ae2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006ad2:	7dfb      	ldrb	r3, [r7, #23]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d102      	bne.n	8006ade <create_chain+0x122>
 8006ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8006adc:	e000      	b.n	8006ae0 <create_chain+0x124>
 8006ade:	2301      	movs	r3, #1
 8006ae0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006ae2:	69fb      	ldr	r3, [r7, #28]
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3720      	adds	r7, #32
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b087      	sub	sp, #28
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b00:	3304      	adds	r3, #4
 8006b02:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	0a5b      	lsrs	r3, r3, #9
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	8952      	ldrh	r2, [r2, #10]
 8006b0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b10:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	1d1a      	adds	r2, r3, #4
 8006b16:	613a      	str	r2, [r7, #16]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <clmt_clust+0x3a>
 8006b22:	2300      	movs	r3, #0
 8006b24:	e010      	b.n	8006b48 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006b26:	697a      	ldr	r2, [r7, #20]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d307      	bcc.n	8006b3e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	617b      	str	r3, [r7, #20]
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	3304      	adds	r3, #4
 8006b3a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006b3c:	e7e9      	b.n	8006b12 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006b3e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	4413      	add	r3, r2
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	371c      	adds	r7, #28
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b6a:	d204      	bcs.n	8006b76 <dir_sdi+0x22>
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	f003 031f 	and.w	r3, r3, #31
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <dir_sdi+0x26>
		return FR_INT_ERR;
 8006b76:	2302      	movs	r3, #2
 8006b78:	e063      	b.n	8006c42 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	683a      	ldr	r2, [r7, #0]
 8006b7e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d106      	bne.n	8006b9a <dir_sdi+0x46>
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d902      	bls.n	8006b9a <dir_sdi+0x46>
		clst = fs->dirbase;
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b98:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d10c      	bne.n	8006bba <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	095b      	lsrs	r3, r3, #5
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	8912      	ldrh	r2, [r2, #8]
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d301      	bcc.n	8006bb0 <dir_sdi+0x5c>
 8006bac:	2302      	movs	r3, #2
 8006bae:	e048      	b.n	8006c42 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	61da      	str	r2, [r3, #28]
 8006bb8:	e029      	b.n	8006c0e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	895b      	ldrh	r3, [r3, #10]
 8006bbe:	025b      	lsls	r3, r3, #9
 8006bc0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006bc2:	e019      	b.n	8006bf8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6979      	ldr	r1, [r7, #20]
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7ff fd01 	bl	80065d0 <get_fat>
 8006bce:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd6:	d101      	bne.n	8006bdc <dir_sdi+0x88>
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e032      	b.n	8006c42 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d904      	bls.n	8006bec <dir_sdi+0x98>
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d301      	bcc.n	8006bf0 <dir_sdi+0x9c>
 8006bec:	2302      	movs	r3, #2
 8006bee:	e028      	b.n	8006c42 <dir_sdi+0xee>
			ofs -= csz;
 8006bf0:	683a      	ldr	r2, [r7, #0]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d2e1      	bcs.n	8006bc4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006c00:	6979      	ldr	r1, [r7, #20]
 8006c02:	6938      	ldr	r0, [r7, #16]
 8006c04:	f7ff fcc5 	bl	8006592 <clust2sect>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	697a      	ldr	r2, [r7, #20]
 8006c12:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	69db      	ldr	r3, [r3, #28]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d101      	bne.n	8006c20 <dir_sdi+0xcc>
 8006c1c:	2302      	movs	r3, #2
 8006c1e:	e010      	b.n	8006c42 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	69da      	ldr	r2, [r3, #28]
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	0a5b      	lsrs	r3, r3, #9
 8006c28:	441a      	add	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c3a:	441a      	add	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3718      	adds	r7, #24
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b086      	sub	sp, #24
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
 8006c52:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	3320      	adds	r3, #32
 8006c60:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	69db      	ldr	r3, [r3, #28]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d003      	beq.n	8006c72 <dir_next+0x28>
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c70:	d301      	bcc.n	8006c76 <dir_next+0x2c>
 8006c72:	2304      	movs	r3, #4
 8006c74:	e0aa      	b.n	8006dcc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f040 8098 	bne.w	8006db2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	69db      	ldr	r3, [r3, #28]
 8006c86:	1c5a      	adds	r2, r3, #1
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10b      	bne.n	8006cac <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	095b      	lsrs	r3, r3, #5
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	8912      	ldrh	r2, [r2, #8]
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	f0c0 8088 	bcc.w	8006db2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	61da      	str	r2, [r3, #28]
 8006ca8:	2304      	movs	r3, #4
 8006caa:	e08f      	b.n	8006dcc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	0a5b      	lsrs	r3, r3, #9
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	8952      	ldrh	r2, [r2, #10]
 8006cb4:	3a01      	subs	r2, #1
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d17a      	bne.n	8006db2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	4610      	mov	r0, r2
 8006cc6:	f7ff fc83 	bl	80065d0 <get_fat>
 8006cca:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d801      	bhi.n	8006cd6 <dir_next+0x8c>
 8006cd2:	2302      	movs	r3, #2
 8006cd4:	e07a      	b.n	8006dcc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cdc:	d101      	bne.n	8006ce2 <dir_next+0x98>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e074      	b.n	8006dcc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d358      	bcc.n	8006d9e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d104      	bne.n	8006cfc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	61da      	str	r2, [r3, #28]
 8006cf8:	2304      	movs	r3, #4
 8006cfa:	e067      	b.n	8006dcc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	4619      	mov	r1, r3
 8006d04:	4610      	mov	r0, r2
 8006d06:	f7ff fe59 	bl	80069bc <create_chain>
 8006d0a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d101      	bne.n	8006d16 <dir_next+0xcc>
 8006d12:	2307      	movs	r3, #7
 8006d14:	e05a      	b.n	8006dcc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d101      	bne.n	8006d20 <dir_next+0xd6>
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	e055      	b.n	8006dcc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d26:	d101      	bne.n	8006d2c <dir_next+0xe2>
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e04f      	b.n	8006dcc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f7ff fbbf 	bl	80064b0 <sync_window>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d001      	beq.n	8006d3c <dir_next+0xf2>
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e047      	b.n	8006dcc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	3334      	adds	r3, #52	@ 0x34
 8006d40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d44:	2100      	movs	r1, #0
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7ff f9f3 	bl	8006132 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	613b      	str	r3, [r7, #16]
 8006d50:	6979      	ldr	r1, [r7, #20]
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f7ff fc1d 	bl	8006592 <clust2sect>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8006d5e:	e012      	b.n	8006d86 <dir_next+0x13c>
						fs->wflag = 1;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2201      	movs	r2, #1
 8006d64:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f7ff fba2 	bl	80064b0 <sync_window>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d001      	beq.n	8006d76 <dir_next+0x12c>
 8006d72:	2301      	movs	r3, #1
 8006d74:	e02a      	b.n	8006dcc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	613b      	str	r3, [r7, #16]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d80:	1c5a      	adds	r2, r3, #1
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	631a      	str	r2, [r3, #48]	@ 0x30
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	895b      	ldrh	r3, [r3, #10]
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d3e6      	bcc.n	8006d60 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	1ad2      	subs	r2, r2, r3
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006da4:	6979      	ldr	r1, [r7, #20]
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f7ff fbf3 	bl	8006592 <clust2sect>
 8006dac:	4602      	mov	r2, r0
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	68ba      	ldr	r2, [r7, #8]
 8006db6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dc4:	441a      	add	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3718      	adds	r7, #24
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b086      	sub	sp, #24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006de4:	2100      	movs	r1, #0
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f7ff feb4 	bl	8006b54 <dir_sdi>
 8006dec:	4603      	mov	r3, r0
 8006dee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006df0:	7dfb      	ldrb	r3, [r7, #23]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d12b      	bne.n	8006e4e <dir_alloc+0x7a>
		n = 0;
 8006df6:	2300      	movs	r3, #0
 8006df8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	69db      	ldr	r3, [r3, #28]
 8006dfe:	4619      	mov	r1, r3
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f7ff fb99 	bl	8006538 <move_window>
 8006e06:	4603      	mov	r3, r0
 8006e08:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006e0a:	7dfb      	ldrb	r3, [r7, #23]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d11d      	bne.n	8006e4c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a1b      	ldr	r3, [r3, #32]
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	2be5      	cmp	r3, #229	@ 0xe5
 8006e18:	d004      	beq.n	8006e24 <dir_alloc+0x50>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d107      	bne.n	8006e34 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	3301      	adds	r3, #1
 8006e28:	613b      	str	r3, [r7, #16]
 8006e2a:	693a      	ldr	r2, [r7, #16]
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d102      	bne.n	8006e38 <dir_alloc+0x64>
 8006e32:	e00c      	b.n	8006e4e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006e34:	2300      	movs	r3, #0
 8006e36:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006e38:	2101      	movs	r1, #1
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7ff ff05 	bl	8006c4a <dir_next>
 8006e40:	4603      	mov	r3, r0
 8006e42:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006e44:	7dfb      	ldrb	r3, [r7, #23]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d0d7      	beq.n	8006dfa <dir_alloc+0x26>
 8006e4a:	e000      	b.n	8006e4e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006e4c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006e4e:	7dfb      	ldrb	r3, [r7, #23]
 8006e50:	2b04      	cmp	r3, #4
 8006e52:	d101      	bne.n	8006e58 <dir_alloc+0x84>
 8006e54:	2307      	movs	r3, #7
 8006e56:	75fb      	strb	r3, [r7, #23]
	return res;
 8006e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3718      	adds	r7, #24
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b084      	sub	sp, #16
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
 8006e6a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	331a      	adds	r3, #26
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7ff f8bb 	bl	8005fec <ld_word>
 8006e76:	4603      	mov	r3, r0
 8006e78:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	2b03      	cmp	r3, #3
 8006e80:	d109      	bne.n	8006e96 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	3314      	adds	r3, #20
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7ff f8b0 	bl	8005fec <ld_word>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	041b      	lsls	r3, r3, #16
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006e96:	68fb      	ldr	r3, [r7, #12]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3710      	adds	r7, #16
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	331a      	adds	r3, #26
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	b292      	uxth	r2, r2
 8006eb4:	4611      	mov	r1, r2
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7ff f8d3 	bl	8006062 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	2b03      	cmp	r3, #3
 8006ec2:	d109      	bne.n	8006ed8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	f103 0214 	add.w	r2, r3, #20
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	0c1b      	lsrs	r3, r3, #16
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	4610      	mov	r0, r2
 8006ed4:	f7ff f8c5 	bl	8006062 <st_word>
	}
}
 8006ed8:	bf00      	nop
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006eee:	2100      	movs	r1, #0
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f7ff fe2f 	bl	8006b54 <dir_sdi>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006efa:	7dfb      	ldrb	r3, [r7, #23]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d001      	beq.n	8006f04 <dir_find+0x24>
 8006f00:	7dfb      	ldrb	r3, [r7, #23]
 8006f02:	e03e      	b.n	8006f82 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	69db      	ldr	r3, [r3, #28]
 8006f08:	4619      	mov	r1, r3
 8006f0a:	6938      	ldr	r0, [r7, #16]
 8006f0c:	f7ff fb14 	bl	8006538 <move_window>
 8006f10:	4603      	mov	r3, r0
 8006f12:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006f14:	7dfb      	ldrb	r3, [r7, #23]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d12f      	bne.n	8006f7a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a1b      	ldr	r3, [r3, #32]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006f22:	7bfb      	ldrb	r3, [r7, #15]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d102      	bne.n	8006f2e <dir_find+0x4e>
 8006f28:	2304      	movs	r3, #4
 8006f2a:	75fb      	strb	r3, [r7, #23]
 8006f2c:	e028      	b.n	8006f80 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	330b      	adds	r3, #11
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f3a:	b2da      	uxtb	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a1b      	ldr	r3, [r3, #32]
 8006f44:	330b      	adds	r3, #11
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	f003 0308 	and.w	r3, r3, #8
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d10a      	bne.n	8006f66 <dir_find+0x86>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6a18      	ldr	r0, [r3, #32]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	3324      	adds	r3, #36	@ 0x24
 8006f58:	220b      	movs	r2, #11
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	f7ff f904 	bl	8006168 <mem_cmp>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00b      	beq.n	8006f7e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006f66:	2100      	movs	r1, #0
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f7ff fe6e 	bl	8006c4a <dir_next>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006f72:	7dfb      	ldrb	r3, [r7, #23]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d0c5      	beq.n	8006f04 <dir_find+0x24>
 8006f78:	e002      	b.n	8006f80 <dir_find+0xa0>
		if (res != FR_OK) break;
 8006f7a:	bf00      	nop
 8006f7c:	e000      	b.n	8006f80 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006f7e:	bf00      	nop

	return res;
 8006f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3718      	adds	r7, #24
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b084      	sub	sp, #16
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006f98:	2101      	movs	r1, #1
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7ff ff1a 	bl	8006dd4 <dir_alloc>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006fa4:	7bfb      	ldrb	r3, [r7, #15]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d11c      	bne.n	8006fe4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	4619      	mov	r1, r3
 8006fb0:	68b8      	ldr	r0, [r7, #8]
 8006fb2:	f7ff fac1 	bl	8006538 <move_window>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006fba:	7bfb      	ldrb	r3, [r7, #15]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d111      	bne.n	8006fe4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a1b      	ldr	r3, [r3, #32]
 8006fc4:	2220      	movs	r2, #32
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f7ff f8b2 	bl	8006132 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a18      	ldr	r0, [r3, #32]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	3324      	adds	r3, #36	@ 0x24
 8006fd6:	220b      	movs	r2, #11
 8006fd8:	4619      	mov	r1, r3
 8006fda:	f7ff f889 	bl	80060f0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
	...

08006ff0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b088      	sub	sp, #32
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	60fb      	str	r3, [r7, #12]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	3324      	adds	r3, #36	@ 0x24
 8007004:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007006:	220b      	movs	r2, #11
 8007008:	2120      	movs	r1, #32
 800700a:	68b8      	ldr	r0, [r7, #8]
 800700c:	f7ff f891 	bl	8006132 <mem_set>
	si = i = 0; ni = 8;
 8007010:	2300      	movs	r3, #0
 8007012:	613b      	str	r3, [r7, #16]
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	61fb      	str	r3, [r7, #28]
 8007018:	2308      	movs	r3, #8
 800701a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	1c5a      	adds	r2, r3, #1
 8007020:	61fa      	str	r2, [r7, #28]
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	4413      	add	r3, r2
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800702a:	7efb      	ldrb	r3, [r7, #27]
 800702c:	2b20      	cmp	r3, #32
 800702e:	d94e      	bls.n	80070ce <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007030:	7efb      	ldrb	r3, [r7, #27]
 8007032:	2b2f      	cmp	r3, #47	@ 0x2f
 8007034:	d006      	beq.n	8007044 <create_name+0x54>
 8007036:	7efb      	ldrb	r3, [r7, #27]
 8007038:	2b5c      	cmp	r3, #92	@ 0x5c
 800703a:	d110      	bne.n	800705e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800703c:	e002      	b.n	8007044 <create_name+0x54>
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	3301      	adds	r3, #1
 8007042:	61fb      	str	r3, [r7, #28]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	4413      	add	r3, r2
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	2b2f      	cmp	r3, #47	@ 0x2f
 800704e:	d0f6      	beq.n	800703e <create_name+0x4e>
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	4413      	add	r3, r2
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	2b5c      	cmp	r3, #92	@ 0x5c
 800705a:	d0f0      	beq.n	800703e <create_name+0x4e>
			break;
 800705c:	e038      	b.n	80070d0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800705e:	7efb      	ldrb	r3, [r7, #27]
 8007060:	2b2e      	cmp	r3, #46	@ 0x2e
 8007062:	d003      	beq.n	800706c <create_name+0x7c>
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	429a      	cmp	r2, r3
 800706a:	d30c      	bcc.n	8007086 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	2b0b      	cmp	r3, #11
 8007070:	d002      	beq.n	8007078 <create_name+0x88>
 8007072:	7efb      	ldrb	r3, [r7, #27]
 8007074:	2b2e      	cmp	r3, #46	@ 0x2e
 8007076:	d001      	beq.n	800707c <create_name+0x8c>
 8007078:	2306      	movs	r3, #6
 800707a:	e044      	b.n	8007106 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800707c:	2308      	movs	r3, #8
 800707e:	613b      	str	r3, [r7, #16]
 8007080:	230b      	movs	r3, #11
 8007082:	617b      	str	r3, [r7, #20]
			continue;
 8007084:	e022      	b.n	80070cc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007086:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800708a:	2b00      	cmp	r3, #0
 800708c:	da04      	bge.n	8007098 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800708e:	7efb      	ldrb	r3, [r7, #27]
 8007090:	3b80      	subs	r3, #128	@ 0x80
 8007092:	4a1f      	ldr	r2, [pc, #124]	@ (8007110 <create_name+0x120>)
 8007094:	5cd3      	ldrb	r3, [r2, r3]
 8007096:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007098:	7efb      	ldrb	r3, [r7, #27]
 800709a:	4619      	mov	r1, r3
 800709c:	481d      	ldr	r0, [pc, #116]	@ (8007114 <create_name+0x124>)
 800709e:	f7ff f88a 	bl	80061b6 <chk_chr>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d001      	beq.n	80070ac <create_name+0xbc>
 80070a8:	2306      	movs	r3, #6
 80070aa:	e02c      	b.n	8007106 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80070ac:	7efb      	ldrb	r3, [r7, #27]
 80070ae:	2b60      	cmp	r3, #96	@ 0x60
 80070b0:	d905      	bls.n	80070be <create_name+0xce>
 80070b2:	7efb      	ldrb	r3, [r7, #27]
 80070b4:	2b7a      	cmp	r3, #122	@ 0x7a
 80070b6:	d802      	bhi.n	80070be <create_name+0xce>
 80070b8:	7efb      	ldrb	r3, [r7, #27]
 80070ba:	3b20      	subs	r3, #32
 80070bc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	1c5a      	adds	r2, r3, #1
 80070c2:	613a      	str	r2, [r7, #16]
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	4413      	add	r3, r2
 80070c8:	7efa      	ldrb	r2, [r7, #27]
 80070ca:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80070cc:	e7a6      	b.n	800701c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80070ce:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	441a      	add	r2, r3
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d101      	bne.n	80070e4 <create_name+0xf4>
 80070e0:	2306      	movs	r3, #6
 80070e2:	e010      	b.n	8007106 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	2be5      	cmp	r3, #229	@ 0xe5
 80070ea:	d102      	bne.n	80070f2 <create_name+0x102>
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	2205      	movs	r2, #5
 80070f0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80070f2:	7efb      	ldrb	r3, [r7, #27]
 80070f4:	2b20      	cmp	r3, #32
 80070f6:	d801      	bhi.n	80070fc <create_name+0x10c>
 80070f8:	2204      	movs	r2, #4
 80070fa:	e000      	b.n	80070fe <create_name+0x10e>
 80070fc:	2200      	movs	r2, #0
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	330b      	adds	r3, #11
 8007102:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007104:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007106:	4618      	mov	r0, r3
 8007108:	3720      	adds	r7, #32
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	0800d314 	.word	0x0800d314
 8007114:	0800d2b0 	.word	0x0800d2b0

08007118 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800712c:	e002      	b.n	8007134 <follow_path+0x1c>
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	3301      	adds	r3, #1
 8007132:	603b      	str	r3, [r7, #0]
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	2b2f      	cmp	r3, #47	@ 0x2f
 800713a:	d0f8      	beq.n	800712e <follow_path+0x16>
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	2b5c      	cmp	r3, #92	@ 0x5c
 8007142:	d0f4      	beq.n	800712e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	2200      	movs	r2, #0
 8007148:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	2b1f      	cmp	r3, #31
 8007150:	d80a      	bhi.n	8007168 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2280      	movs	r2, #128	@ 0x80
 8007156:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800715a:	2100      	movs	r1, #0
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f7ff fcf9 	bl	8006b54 <dir_sdi>
 8007162:	4603      	mov	r3, r0
 8007164:	75fb      	strb	r3, [r7, #23]
 8007166:	e043      	b.n	80071f0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007168:	463b      	mov	r3, r7
 800716a:	4619      	mov	r1, r3
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f7ff ff3f 	bl	8006ff0 <create_name>
 8007172:	4603      	mov	r3, r0
 8007174:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007176:	7dfb      	ldrb	r3, [r7, #23]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d134      	bne.n	80071e6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f7ff feaf 	bl	8006ee0 <dir_find>
 8007182:	4603      	mov	r3, r0
 8007184:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800718c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800718e:	7dfb      	ldrb	r3, [r7, #23]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00a      	beq.n	80071aa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007194:	7dfb      	ldrb	r3, [r7, #23]
 8007196:	2b04      	cmp	r3, #4
 8007198:	d127      	bne.n	80071ea <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800719a:	7afb      	ldrb	r3, [r7, #11]
 800719c:	f003 0304 	and.w	r3, r3, #4
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d122      	bne.n	80071ea <follow_path+0xd2>
 80071a4:	2305      	movs	r3, #5
 80071a6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80071a8:	e01f      	b.n	80071ea <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80071aa:	7afb      	ldrb	r3, [r7, #11]
 80071ac:	f003 0304 	and.w	r3, r3, #4
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d11c      	bne.n	80071ee <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	799b      	ldrb	r3, [r3, #6]
 80071b8:	f003 0310 	and.w	r3, r3, #16
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d102      	bne.n	80071c6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80071c0:	2305      	movs	r3, #5
 80071c2:	75fb      	strb	r3, [r7, #23]
 80071c4:	e014      	b.n	80071f0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	695b      	ldr	r3, [r3, #20]
 80071d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071d4:	4413      	add	r3, r2
 80071d6:	4619      	mov	r1, r3
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f7ff fe42 	bl	8006e62 <ld_clust>
 80071de:	4602      	mov	r2, r0
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80071e4:	e7c0      	b.n	8007168 <follow_path+0x50>
			if (res != FR_OK) break;
 80071e6:	bf00      	nop
 80071e8:	e002      	b.n	80071f0 <follow_path+0xd8>
				break;
 80071ea:	bf00      	nop
 80071ec:	e000      	b.n	80071f0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80071ee:	bf00      	nop
			}
		}
	}

	return res;
 80071f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3718      	adds	r7, #24
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80071fa:	b480      	push	{r7}
 80071fc:	b087      	sub	sp, #28
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007202:	f04f 33ff 	mov.w	r3, #4294967295
 8007206:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d031      	beq.n	8007274 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	617b      	str	r3, [r7, #20]
 8007216:	e002      	b.n	800721e <get_ldnumber+0x24>
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	3301      	adds	r3, #1
 800721c:	617b      	str	r3, [r7, #20]
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	2b20      	cmp	r3, #32
 8007224:	d903      	bls.n	800722e <get_ldnumber+0x34>
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	2b3a      	cmp	r3, #58	@ 0x3a
 800722c:	d1f4      	bne.n	8007218 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	2b3a      	cmp	r3, #58	@ 0x3a
 8007234:	d11c      	bne.n	8007270 <get_ldnumber+0x76>
			tp = *path;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	1c5a      	adds	r2, r3, #1
 8007240:	60fa      	str	r2, [r7, #12]
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	3b30      	subs	r3, #48	@ 0x30
 8007246:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	2b09      	cmp	r3, #9
 800724c:	d80e      	bhi.n	800726c <get_ldnumber+0x72>
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	429a      	cmp	r2, r3
 8007254:	d10a      	bne.n	800726c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d107      	bne.n	800726c <get_ldnumber+0x72>
					vol = (int)i;
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	3301      	adds	r3, #1
 8007264:	617b      	str	r3, [r7, #20]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	697a      	ldr	r2, [r7, #20]
 800726a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	e002      	b.n	8007276 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007270:	2300      	movs	r3, #0
 8007272:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007274:	693b      	ldr	r3, [r7, #16]
}
 8007276:	4618      	mov	r0, r3
 8007278:	371c      	adds	r7, #28
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
	...

08007284 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	70da      	strb	r2, [r3, #3]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f04f 32ff 	mov.w	r2, #4294967295
 800729a:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800729c:	6839      	ldr	r1, [r7, #0]
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f7ff f94a 	bl	8006538 <move_window>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d001      	beq.n	80072ae <check_fs+0x2a>
 80072aa:	2304      	movs	r3, #4
 80072ac:	e038      	b.n	8007320 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	3334      	adds	r3, #52	@ 0x34
 80072b2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7fe fe98 	bl	8005fec <ld_word>
 80072bc:	4603      	mov	r3, r0
 80072be:	461a      	mov	r2, r3
 80072c0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d001      	beq.n	80072cc <check_fs+0x48>
 80072c8:	2303      	movs	r3, #3
 80072ca:	e029      	b.n	8007320 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80072d2:	2be9      	cmp	r3, #233	@ 0xe9
 80072d4:	d009      	beq.n	80072ea <check_fs+0x66>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80072dc:	2beb      	cmp	r3, #235	@ 0xeb
 80072de:	d11e      	bne.n	800731e <check_fs+0x9a>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80072e6:	2b90      	cmp	r3, #144	@ 0x90
 80072e8:	d119      	bne.n	800731e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	3334      	adds	r3, #52	@ 0x34
 80072ee:	3336      	adds	r3, #54	@ 0x36
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7fe fe93 	bl	800601c <ld_dword>
 80072f6:	4603      	mov	r3, r0
 80072f8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80072fc:	4a0a      	ldr	r2, [pc, #40]	@ (8007328 <check_fs+0xa4>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d101      	bne.n	8007306 <check_fs+0x82>
 8007302:	2300      	movs	r3, #0
 8007304:	e00c      	b.n	8007320 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	3334      	adds	r3, #52	@ 0x34
 800730a:	3352      	adds	r3, #82	@ 0x52
 800730c:	4618      	mov	r0, r3
 800730e:	f7fe fe85 	bl	800601c <ld_dword>
 8007312:	4603      	mov	r3, r0
 8007314:	4a05      	ldr	r2, [pc, #20]	@ (800732c <check_fs+0xa8>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d101      	bne.n	800731e <check_fs+0x9a>
 800731a:	2300      	movs	r3, #0
 800731c:	e000      	b.n	8007320 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800731e:	2302      	movs	r3, #2
}
 8007320:	4618      	mov	r0, r3
 8007322:	3708      	adds	r7, #8
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	00544146 	.word	0x00544146
 800732c:	33544146 	.word	0x33544146

08007330 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b096      	sub	sp, #88	@ 0x58
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	4613      	mov	r3, r2
 800733c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	2200      	movs	r2, #0
 8007342:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f7ff ff58 	bl	80071fa <get_ldnumber>
 800734a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800734c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800734e:	2b00      	cmp	r3, #0
 8007350:	da01      	bge.n	8007356 <find_volume+0x26>
 8007352:	230b      	movs	r3, #11
 8007354:	e235      	b.n	80077c2 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007356:	4aa5      	ldr	r2, [pc, #660]	@ (80075ec <find_volume+0x2bc>)
 8007358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800735a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800735e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <find_volume+0x3a>
 8007366:	230c      	movs	r3, #12
 8007368:	e22b      	b.n	80077c2 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800736a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800736c:	f7fe ff3e 	bl	80061ec <lock_fs>
 8007370:	4603      	mov	r3, r0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d101      	bne.n	800737a <find_volume+0x4a>
 8007376:	230f      	movs	r3, #15
 8007378:	e223      	b.n	80077c2 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800737e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007380:	79fb      	ldrb	r3, [r7, #7]
 8007382:	f023 0301 	bic.w	r3, r3, #1
 8007386:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d01a      	beq.n	80073c6 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8007390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007392:	785b      	ldrb	r3, [r3, #1]
 8007394:	4618      	mov	r0, r3
 8007396:	f7fe fda7 	bl	8005ee8 <disk_status>
 800739a:	4603      	mov	r3, r0
 800739c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80073a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80073a4:	f003 0301 	and.w	r3, r3, #1
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d10c      	bne.n	80073c6 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80073ac:	79fb      	ldrb	r3, [r7, #7]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d007      	beq.n	80073c2 <find_volume+0x92>
 80073b2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80073b6:	f003 0304 	and.w	r3, r3, #4
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d001      	beq.n	80073c2 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80073be:	230a      	movs	r3, #10
 80073c0:	e1ff      	b.n	80077c2 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 80073c2:	2300      	movs	r3, #0
 80073c4:	e1fd      	b.n	80077c2 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80073c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073c8:	2200      	movs	r2, #0
 80073ca:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80073cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073ce:	b2da      	uxtb	r2, r3
 80073d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073d2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80073d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073d6:	785b      	ldrb	r3, [r3, #1]
 80073d8:	4618      	mov	r0, r3
 80073da:	f7fe fd9f 	bl	8005f1c <disk_initialize>
 80073de:	4603      	mov	r3, r0
 80073e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80073e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80073e8:	f003 0301 	and.w	r3, r3, #1
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d001      	beq.n	80073f4 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80073f0:	2303      	movs	r3, #3
 80073f2:	e1e6      	b.n	80077c2 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80073f4:	79fb      	ldrb	r3, [r7, #7]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d007      	beq.n	800740a <find_volume+0xda>
 80073fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80073fe:	f003 0304 	and.w	r3, r3, #4
 8007402:	2b00      	cmp	r3, #0
 8007404:	d001      	beq.n	800740a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8007406:	230a      	movs	r3, #10
 8007408:	e1db      	b.n	80077c2 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800740a:	2300      	movs	r3, #0
 800740c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800740e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007410:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007412:	f7ff ff37 	bl	8007284 <check_fs>
 8007416:	4603      	mov	r3, r0
 8007418:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800741c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007420:	2b02      	cmp	r3, #2
 8007422:	d149      	bne.n	80074b8 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007424:	2300      	movs	r3, #0
 8007426:	643b      	str	r3, [r7, #64]	@ 0x40
 8007428:	e01e      	b.n	8007468 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800742a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800742c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007430:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007432:	011b      	lsls	r3, r3, #4
 8007434:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007438:	4413      	add	r3, r2
 800743a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800743c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800743e:	3304      	adds	r3, #4
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d006      	beq.n	8007454 <find_volume+0x124>
 8007446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007448:	3308      	adds	r3, #8
 800744a:	4618      	mov	r0, r3
 800744c:	f7fe fde6 	bl	800601c <ld_dword>
 8007450:	4602      	mov	r2, r0
 8007452:	e000      	b.n	8007456 <find_volume+0x126>
 8007454:	2200      	movs	r2, #0
 8007456:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	3358      	adds	r3, #88	@ 0x58
 800745c:	443b      	add	r3, r7
 800745e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007464:	3301      	adds	r3, #1
 8007466:	643b      	str	r3, [r7, #64]	@ 0x40
 8007468:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800746a:	2b03      	cmp	r3, #3
 800746c:	d9dd      	bls.n	800742a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800746e:	2300      	movs	r3, #0
 8007470:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8007472:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007474:	2b00      	cmp	r3, #0
 8007476:	d002      	beq.n	800747e <find_volume+0x14e>
 8007478:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800747a:	3b01      	subs	r3, #1
 800747c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800747e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	3358      	adds	r3, #88	@ 0x58
 8007484:	443b      	add	r3, r7
 8007486:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800748a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800748c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800748e:	2b00      	cmp	r3, #0
 8007490:	d005      	beq.n	800749e <find_volume+0x16e>
 8007492:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007494:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007496:	f7ff fef5 	bl	8007284 <check_fs>
 800749a:	4603      	mov	r3, r0
 800749c:	e000      	b.n	80074a0 <find_volume+0x170>
 800749e:	2303      	movs	r3, #3
 80074a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80074a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d905      	bls.n	80074b8 <find_volume+0x188>
 80074ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074ae:	3301      	adds	r3, #1
 80074b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80074b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074b4:	2b03      	cmp	r3, #3
 80074b6:	d9e2      	bls.n	800747e <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80074b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80074bc:	2b04      	cmp	r3, #4
 80074be:	d101      	bne.n	80074c4 <find_volume+0x194>
 80074c0:	2301      	movs	r3, #1
 80074c2:	e17e      	b.n	80077c2 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80074c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d901      	bls.n	80074d0 <find_volume+0x1a0>
 80074cc:	230d      	movs	r3, #13
 80074ce:	e178      	b.n	80077c2 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80074d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074d2:	3334      	adds	r3, #52	@ 0x34
 80074d4:	330b      	adds	r3, #11
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fe fd88 	bl	8005fec <ld_word>
 80074dc:	4603      	mov	r3, r0
 80074de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074e2:	d001      	beq.n	80074e8 <find_volume+0x1b8>
 80074e4:	230d      	movs	r3, #13
 80074e6:	e16c      	b.n	80077c2 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80074e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ea:	3334      	adds	r3, #52	@ 0x34
 80074ec:	3316      	adds	r3, #22
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fe fd7c 	bl	8005fec <ld_word>
 80074f4:	4603      	mov	r3, r0
 80074f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80074f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d106      	bne.n	800750c <find_volume+0x1dc>
 80074fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007500:	3334      	adds	r3, #52	@ 0x34
 8007502:	3324      	adds	r3, #36	@ 0x24
 8007504:	4618      	mov	r0, r3
 8007506:	f7fe fd89 	bl	800601c <ld_dword>
 800750a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800750c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800750e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007510:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007514:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800751a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800751c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800751e:	789b      	ldrb	r3, [r3, #2]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d005      	beq.n	8007530 <find_volume+0x200>
 8007524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007526:	789b      	ldrb	r3, [r3, #2]
 8007528:	2b02      	cmp	r3, #2
 800752a:	d001      	beq.n	8007530 <find_volume+0x200>
 800752c:	230d      	movs	r3, #13
 800752e:	e148      	b.n	80077c2 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007532:	789b      	ldrb	r3, [r3, #2]
 8007534:	461a      	mov	r2, r3
 8007536:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007538:	fb02 f303 	mul.w	r3, r2, r3
 800753c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800753e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007540:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007544:	461a      	mov	r2, r3
 8007546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007548:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800754a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800754c:	895b      	ldrh	r3, [r3, #10]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d008      	beq.n	8007564 <find_volume+0x234>
 8007552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007554:	895b      	ldrh	r3, [r3, #10]
 8007556:	461a      	mov	r2, r3
 8007558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800755a:	895b      	ldrh	r3, [r3, #10]
 800755c:	3b01      	subs	r3, #1
 800755e:	4013      	ands	r3, r2
 8007560:	2b00      	cmp	r3, #0
 8007562:	d001      	beq.n	8007568 <find_volume+0x238>
 8007564:	230d      	movs	r3, #13
 8007566:	e12c      	b.n	80077c2 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800756a:	3334      	adds	r3, #52	@ 0x34
 800756c:	3311      	adds	r3, #17
 800756e:	4618      	mov	r0, r3
 8007570:	f7fe fd3c 	bl	8005fec <ld_word>
 8007574:	4603      	mov	r3, r0
 8007576:	461a      	mov	r2, r3
 8007578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800757a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800757c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800757e:	891b      	ldrh	r3, [r3, #8]
 8007580:	f003 030f 	and.w	r3, r3, #15
 8007584:	b29b      	uxth	r3, r3
 8007586:	2b00      	cmp	r3, #0
 8007588:	d001      	beq.n	800758e <find_volume+0x25e>
 800758a:	230d      	movs	r3, #13
 800758c:	e119      	b.n	80077c2 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800758e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007590:	3334      	adds	r3, #52	@ 0x34
 8007592:	3313      	adds	r3, #19
 8007594:	4618      	mov	r0, r3
 8007596:	f7fe fd29 	bl	8005fec <ld_word>
 800759a:	4603      	mov	r3, r0
 800759c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800759e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d106      	bne.n	80075b2 <find_volume+0x282>
 80075a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075a6:	3334      	adds	r3, #52	@ 0x34
 80075a8:	3320      	adds	r3, #32
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7fe fd36 	bl	800601c <ld_dword>
 80075b0:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80075b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075b4:	3334      	adds	r3, #52	@ 0x34
 80075b6:	330e      	adds	r3, #14
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7fe fd17 	bl	8005fec <ld_word>
 80075be:	4603      	mov	r3, r0
 80075c0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80075c2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d101      	bne.n	80075cc <find_volume+0x29c>
 80075c8:	230d      	movs	r3, #13
 80075ca:	e0fa      	b.n	80077c2 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80075cc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80075ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075d0:	4413      	add	r3, r2
 80075d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80075d4:	8912      	ldrh	r2, [r2, #8]
 80075d6:	0912      	lsrs	r2, r2, #4
 80075d8:	b292      	uxth	r2, r2
 80075da:	4413      	add	r3, r2
 80075dc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80075de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d204      	bcs.n	80075f0 <find_volume+0x2c0>
 80075e6:	230d      	movs	r3, #13
 80075e8:	e0eb      	b.n	80077c2 <find_volume+0x492>
 80075ea:	bf00      	nop
 80075ec:	20000550 	.word	0x20000550
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80075f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80075f8:	8952      	ldrh	r2, [r2, #10]
 80075fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80075fe:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007602:	2b00      	cmp	r3, #0
 8007604:	d101      	bne.n	800760a <find_volume+0x2da>
 8007606:	230d      	movs	r3, #13
 8007608:	e0db      	b.n	80077c2 <find_volume+0x492>
		fmt = FS_FAT32;
 800760a:	2303      	movs	r3, #3
 800760c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007612:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007616:	4293      	cmp	r3, r2
 8007618:	d802      	bhi.n	8007620 <find_volume+0x2f0>
 800761a:	2302      	movs	r3, #2
 800761c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007622:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007626:	4293      	cmp	r3, r2
 8007628:	d802      	bhi.n	8007630 <find_volume+0x300>
 800762a:	2301      	movs	r3, #1
 800762c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007632:	1c9a      	adds	r2, r3, #2
 8007634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007636:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800763a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800763c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800763e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007640:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007642:	441a      	add	r2, r3
 8007644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007646:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8007648:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800764a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800764c:	441a      	add	r2, r3
 800764e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007650:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8007652:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007656:	2b03      	cmp	r3, #3
 8007658:	d11e      	bne.n	8007698 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800765a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800765c:	3334      	adds	r3, #52	@ 0x34
 800765e:	332a      	adds	r3, #42	@ 0x2a
 8007660:	4618      	mov	r0, r3
 8007662:	f7fe fcc3 	bl	8005fec <ld_word>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d001      	beq.n	8007670 <find_volume+0x340>
 800766c:	230d      	movs	r3, #13
 800766e:	e0a8      	b.n	80077c2 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007672:	891b      	ldrh	r3, [r3, #8]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d001      	beq.n	800767c <find_volume+0x34c>
 8007678:	230d      	movs	r3, #13
 800767a:	e0a2      	b.n	80077c2 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800767c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800767e:	3334      	adds	r3, #52	@ 0x34
 8007680:	332c      	adds	r3, #44	@ 0x2c
 8007682:	4618      	mov	r0, r3
 8007684:	f7fe fcca 	bl	800601c <ld_dword>
 8007688:	4602      	mov	r2, r0
 800768a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800768c:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800768e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	647b      	str	r3, [r7, #68]	@ 0x44
 8007696:	e01f      	b.n	80076d8 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800769a:	891b      	ldrh	r3, [r3, #8]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d101      	bne.n	80076a4 <find_volume+0x374>
 80076a0:	230d      	movs	r3, #13
 80076a2:	e08e      	b.n	80077c2 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80076a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076aa:	441a      	add	r2, r3
 80076ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ae:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80076b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d103      	bne.n	80076c0 <find_volume+0x390>
 80076b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ba:	699b      	ldr	r3, [r3, #24]
 80076bc:	005b      	lsls	r3, r3, #1
 80076be:	e00a      	b.n	80076d6 <find_volume+0x3a6>
 80076c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076c2:	699a      	ldr	r2, [r3, #24]
 80076c4:	4613      	mov	r3, r2
 80076c6:	005b      	lsls	r3, r3, #1
 80076c8:	4413      	add	r3, r2
 80076ca:	085a      	lsrs	r2, r3, #1
 80076cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	f003 0301 	and.w	r3, r3, #1
 80076d4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80076d6:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80076d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076da:	69da      	ldr	r2, [r3, #28]
 80076dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076de:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80076e2:	0a5b      	lsrs	r3, r3, #9
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d201      	bcs.n	80076ec <find_volume+0x3bc>
 80076e8:	230d      	movs	r3, #13
 80076ea:	e06a      	b.n	80077c2 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80076ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ee:	f04f 32ff 	mov.w	r2, #4294967295
 80076f2:	615a      	str	r2, [r3, #20]
 80076f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076f6:	695a      	ldr	r2, [r3, #20]
 80076f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076fa:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80076fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076fe:	2280      	movs	r2, #128	@ 0x80
 8007700:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007702:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007706:	2b03      	cmp	r3, #3
 8007708:	d149      	bne.n	800779e <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800770a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800770c:	3334      	adds	r3, #52	@ 0x34
 800770e:	3330      	adds	r3, #48	@ 0x30
 8007710:	4618      	mov	r0, r3
 8007712:	f7fe fc6b 	bl	8005fec <ld_word>
 8007716:	4603      	mov	r3, r0
 8007718:	2b01      	cmp	r3, #1
 800771a:	d140      	bne.n	800779e <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800771c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800771e:	3301      	adds	r3, #1
 8007720:	4619      	mov	r1, r3
 8007722:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007724:	f7fe ff08 	bl	8006538 <move_window>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d137      	bne.n	800779e <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800772e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007730:	2200      	movs	r2, #0
 8007732:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007736:	3334      	adds	r3, #52	@ 0x34
 8007738:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800773c:	4618      	mov	r0, r3
 800773e:	f7fe fc55 	bl	8005fec <ld_word>
 8007742:	4603      	mov	r3, r0
 8007744:	461a      	mov	r2, r3
 8007746:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800774a:	429a      	cmp	r2, r3
 800774c:	d127      	bne.n	800779e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800774e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007750:	3334      	adds	r3, #52	@ 0x34
 8007752:	4618      	mov	r0, r3
 8007754:	f7fe fc62 	bl	800601c <ld_dword>
 8007758:	4603      	mov	r3, r0
 800775a:	4a1c      	ldr	r2, [pc, #112]	@ (80077cc <find_volume+0x49c>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d11e      	bne.n	800779e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007762:	3334      	adds	r3, #52	@ 0x34
 8007764:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007768:	4618      	mov	r0, r3
 800776a:	f7fe fc57 	bl	800601c <ld_dword>
 800776e:	4603      	mov	r3, r0
 8007770:	4a17      	ldr	r2, [pc, #92]	@ (80077d0 <find_volume+0x4a0>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d113      	bne.n	800779e <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007778:	3334      	adds	r3, #52	@ 0x34
 800777a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800777e:	4618      	mov	r0, r3
 8007780:	f7fe fc4c 	bl	800601c <ld_dword>
 8007784:	4602      	mov	r2, r0
 8007786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007788:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800778a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800778c:	3334      	adds	r3, #52	@ 0x34
 800778e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8007792:	4618      	mov	r0, r3
 8007794:	f7fe fc42 	bl	800601c <ld_dword>
 8007798:	4602      	mov	r2, r0
 800779a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800779c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800779e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80077a4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80077a6:	4b0b      	ldr	r3, [pc, #44]	@ (80077d4 <find_volume+0x4a4>)
 80077a8:	881b      	ldrh	r3, [r3, #0]
 80077aa:	3301      	adds	r3, #1
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	4b09      	ldr	r3, [pc, #36]	@ (80077d4 <find_volume+0x4a4>)
 80077b0:	801a      	strh	r2, [r3, #0]
 80077b2:	4b08      	ldr	r3, [pc, #32]	@ (80077d4 <find_volume+0x4a4>)
 80077b4:	881a      	ldrh	r2, [r3, #0]
 80077b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80077ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80077bc:	f7fe fe54 	bl	8006468 <clear_lock>
#endif
	return FR_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3758      	adds	r7, #88	@ 0x58
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	41615252 	.word	0x41615252
 80077d0:	61417272 	.word	0x61417272
 80077d4:	20000554 	.word	0x20000554

080077d8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80077e2:	2309      	movs	r3, #9
 80077e4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d02e      	beq.n	800784a <validate+0x72>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d02a      	beq.n	800784a <validate+0x72>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d025      	beq.n	800784a <validate+0x72>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	889a      	ldrh	r2, [r3, #4]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	88db      	ldrh	r3, [r3, #6]
 8007808:	429a      	cmp	r2, r3
 800780a:	d11e      	bne.n	800784a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4618      	mov	r0, r3
 8007812:	f7fe fceb 	bl	80061ec <lock_fs>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d014      	beq.n	8007846 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	785b      	ldrb	r3, [r3, #1]
 8007822:	4618      	mov	r0, r3
 8007824:	f7fe fb60 	bl	8005ee8 <disk_status>
 8007828:	4603      	mov	r3, r0
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	2b00      	cmp	r3, #0
 8007830:	d102      	bne.n	8007838 <validate+0x60>
				res = FR_OK;
 8007832:	2300      	movs	r3, #0
 8007834:	73fb      	strb	r3, [r7, #15]
 8007836:	e008      	b.n	800784a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2100      	movs	r1, #0
 800783e:	4618      	mov	r0, r3
 8007840:	f7fe fcea 	bl	8006218 <unlock_fs>
 8007844:	e001      	b.n	800784a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8007846:	230f      	movs	r3, #15
 8007848:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800784a:	7bfb      	ldrb	r3, [r7, #15]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d102      	bne.n	8007856 <validate+0x7e>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	e000      	b.n	8007858 <validate+0x80>
 8007856:	2300      	movs	r3, #0
 8007858:	683a      	ldr	r2, [r7, #0]
 800785a:	6013      	str	r3, [r2, #0]
	return res;
 800785c:	7bfb      	ldrb	r3, [r7, #15]
}
 800785e:	4618      	mov	r0, r3
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
	...

08007868 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b088      	sub	sp, #32
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	60b9      	str	r1, [r7, #8]
 8007872:	4613      	mov	r3, r2
 8007874:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800787a:	f107 0310 	add.w	r3, r7, #16
 800787e:	4618      	mov	r0, r3
 8007880:	f7ff fcbb 	bl	80071fa <get_ldnumber>
 8007884:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	2b00      	cmp	r3, #0
 800788a:	da01      	bge.n	8007890 <f_mount+0x28>
 800788c:	230b      	movs	r3, #11
 800788e:	e048      	b.n	8007922 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007890:	4a26      	ldr	r2, [pc, #152]	@ (800792c <f_mount+0xc4>)
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007898:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00f      	beq.n	80078c0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80078a0:	69b8      	ldr	r0, [r7, #24]
 80078a2:	f7fe fde1 	bl	8006468 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	4618      	mov	r0, r3
 80078ac:	f000 fe3d 	bl	800852a <ff_del_syncobj>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d101      	bne.n	80078ba <f_mount+0x52>
 80078b6:	2302      	movs	r3, #2
 80078b8:	e033      	b.n	8007922 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	2200      	movs	r2, #0
 80078be:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00f      	beq.n	80078e6 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2200      	movs	r2, #0
 80078ca:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	b2da      	uxtb	r2, r3
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	330c      	adds	r3, #12
 80078d4:	4619      	mov	r1, r3
 80078d6:	4610      	mov	r0, r2
 80078d8:	f000 fe07 	bl	80084ea <ff_cre_syncobj>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d101      	bne.n	80078e6 <f_mount+0x7e>
 80078e2:	2302      	movs	r3, #2
 80078e4:	e01d      	b.n	8007922 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	4910      	ldr	r1, [pc, #64]	@ (800792c <f_mount+0xc4>)
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d002      	beq.n	80078fc <f_mount+0x94>
 80078f6:	79fb      	ldrb	r3, [r7, #7]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d001      	beq.n	8007900 <f_mount+0x98>
 80078fc:	2300      	movs	r3, #0
 80078fe:	e010      	b.n	8007922 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007900:	f107 010c 	add.w	r1, r7, #12
 8007904:	f107 0308 	add.w	r3, r7, #8
 8007908:	2200      	movs	r2, #0
 800790a:	4618      	mov	r0, r3
 800790c:	f7ff fd10 	bl	8007330 <find_volume>
 8007910:	4603      	mov	r3, r0
 8007912:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	7dfa      	ldrb	r2, [r7, #23]
 8007918:	4611      	mov	r1, r2
 800791a:	4618      	mov	r0, r3
 800791c:	f7fe fc7c 	bl	8006218 <unlock_fs>
 8007920:	7dfb      	ldrb	r3, [r7, #23]
}
 8007922:	4618      	mov	r0, r3
 8007924:	3720      	adds	r7, #32
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	20000550 	.word	0x20000550

08007930 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b098      	sub	sp, #96	@ 0x60
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	4613      	mov	r3, r2
 800793c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d101      	bne.n	8007948 <f_open+0x18>
 8007944:	2309      	movs	r3, #9
 8007946:	e1b0      	b.n	8007caa <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007948:	79fb      	ldrb	r3, [r7, #7]
 800794a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800794e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007950:	79fa      	ldrb	r2, [r7, #7]
 8007952:	f107 0110 	add.w	r1, r7, #16
 8007956:	f107 0308 	add.w	r3, r7, #8
 800795a:	4618      	mov	r0, r3
 800795c:	f7ff fce8 	bl	8007330 <find_volume>
 8007960:	4603      	mov	r3, r0
 8007962:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8007966:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800796a:	2b00      	cmp	r3, #0
 800796c:	f040 818d 	bne.w	8007c8a <f_open+0x35a>
		dj.obj.fs = fs;
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007974:	68ba      	ldr	r2, [r7, #8]
 8007976:	f107 0314 	add.w	r3, r7, #20
 800797a:	4611      	mov	r1, r2
 800797c:	4618      	mov	r0, r3
 800797e:	f7ff fbcb 	bl	8007118 <follow_path>
 8007982:	4603      	mov	r3, r0
 8007984:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007988:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800798c:	2b00      	cmp	r3, #0
 800798e:	d118      	bne.n	80079c2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007990:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007994:	b25b      	sxtb	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	da03      	bge.n	80079a2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800799a:	2306      	movs	r3, #6
 800799c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80079a0:	e00f      	b.n	80079c2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80079a2:	79fb      	ldrb	r3, [r7, #7]
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	bf8c      	ite	hi
 80079a8:	2301      	movhi	r3, #1
 80079aa:	2300      	movls	r3, #0
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	461a      	mov	r2, r3
 80079b0:	f107 0314 	add.w	r3, r7, #20
 80079b4:	4611      	mov	r1, r2
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7fe fc4a 	bl	8006250 <chk_lock>
 80079bc:	4603      	mov	r3, r0
 80079be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80079c2:	79fb      	ldrb	r3, [r7, #7]
 80079c4:	f003 031c 	and.w	r3, r3, #28
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d07f      	beq.n	8007acc <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80079cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d017      	beq.n	8007a04 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80079d4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80079d8:	2b04      	cmp	r3, #4
 80079da:	d10e      	bne.n	80079fa <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80079dc:	f7fe fc94 	bl	8006308 <enq_lock>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d006      	beq.n	80079f4 <f_open+0xc4>
 80079e6:	f107 0314 	add.w	r3, r7, #20
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7ff facd 	bl	8006f8a <dir_register>
 80079f0:	4603      	mov	r3, r0
 80079f2:	e000      	b.n	80079f6 <f_open+0xc6>
 80079f4:	2312      	movs	r3, #18
 80079f6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80079fa:	79fb      	ldrb	r3, [r7, #7]
 80079fc:	f043 0308 	orr.w	r3, r3, #8
 8007a00:	71fb      	strb	r3, [r7, #7]
 8007a02:	e010      	b.n	8007a26 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007a04:	7ebb      	ldrb	r3, [r7, #26]
 8007a06:	f003 0311 	and.w	r3, r3, #17
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d003      	beq.n	8007a16 <f_open+0xe6>
					res = FR_DENIED;
 8007a0e:	2307      	movs	r3, #7
 8007a10:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007a14:	e007      	b.n	8007a26 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007a16:	79fb      	ldrb	r3, [r7, #7]
 8007a18:	f003 0304 	and.w	r3, r3, #4
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d002      	beq.n	8007a26 <f_open+0xf6>
 8007a20:	2308      	movs	r3, #8
 8007a22:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007a26:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d168      	bne.n	8007b00 <f_open+0x1d0>
 8007a2e:	79fb      	ldrb	r3, [r7, #7]
 8007a30:	f003 0308 	and.w	r3, r3, #8
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d063      	beq.n	8007b00 <f_open+0x1d0>
				dw = GET_FATTIME();
 8007a38:	f7fd fd1e 	bl	8005478 <get_fattime>
 8007a3c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a40:	330e      	adds	r3, #14
 8007a42:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7fe fb27 	bl	8006098 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a4c:	3316      	adds	r3, #22
 8007a4e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7fe fb21 	bl	8006098 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a58:	330b      	adds	r3, #11
 8007a5a:	2220      	movs	r2, #32
 8007a5c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007a62:	4611      	mov	r1, r2
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7ff f9fc 	bl	8006e62 <ld_clust>
 8007a6a:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007a70:	2200      	movs	r2, #0
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7ff fa14 	bl	8006ea0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a7a:	331c      	adds	r3, #28
 8007a7c:	2100      	movs	r1, #0
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7fe fb0a 	bl	8006098 <st_dword>
					fs->wflag = 1;
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	2201      	movs	r2, #1
 8007a88:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007a8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d037      	beq.n	8007b00 <f_open+0x1d0>
						dw = fs->winsect;
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a94:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007a96:	f107 0314 	add.w	r3, r7, #20
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7fe ff27 	bl	80068f2 <remove_chain>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8007aaa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d126      	bne.n	8007b00 <f_open+0x1d0>
							res = move_window(fs, dw);
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7fe fd3e 	bl	8006538 <move_window>
 8007abc:	4603      	mov	r3, r0
 8007abe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007ac6:	3a01      	subs	r2, #1
 8007ac8:	611a      	str	r2, [r3, #16]
 8007aca:	e019      	b.n	8007b00 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007acc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d115      	bne.n	8007b00 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007ad4:	7ebb      	ldrb	r3, [r7, #26]
 8007ad6:	f003 0310 	and.w	r3, r3, #16
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d003      	beq.n	8007ae6 <f_open+0x1b6>
					res = FR_NO_FILE;
 8007ade:	2304      	movs	r3, #4
 8007ae0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007ae4:	e00c      	b.n	8007b00 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007ae6:	79fb      	ldrb	r3, [r7, #7]
 8007ae8:	f003 0302 	and.w	r3, r3, #2
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d007      	beq.n	8007b00 <f_open+0x1d0>
 8007af0:	7ebb      	ldrb	r3, [r7, #26]
 8007af2:	f003 0301 	and.w	r3, r3, #1
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d002      	beq.n	8007b00 <f_open+0x1d0>
						res = FR_DENIED;
 8007afa:	2307      	movs	r3, #7
 8007afc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007b00:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d126      	bne.n	8007b56 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007b08:	79fb      	ldrb	r3, [r7, #7]
 8007b0a:	f003 0308 	and.w	r3, r3, #8
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d003      	beq.n	8007b1a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8007b12:	79fb      	ldrb	r3, [r7, #7]
 8007b14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b18:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007b22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007b28:	79fb      	ldrb	r3, [r7, #7]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	bf8c      	ite	hi
 8007b2e:	2301      	movhi	r3, #1
 8007b30:	2300      	movls	r3, #0
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	461a      	mov	r2, r3
 8007b36:	f107 0314 	add.w	r3, r7, #20
 8007b3a:	4611      	mov	r1, r2
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7fe fc05 	bl	800634c <inc_lock>
 8007b42:	4602      	mov	r2, r0
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d102      	bne.n	8007b56 <f_open+0x226>
 8007b50:	2302      	movs	r3, #2
 8007b52:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007b56:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f040 8095 	bne.w	8007c8a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b64:	4611      	mov	r1, r2
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7ff f97b 	bl	8006e62 <ld_clust>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b74:	331c      	adds	r3, #28
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7fe fa50 	bl	800601c <ld_dword>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2200      	movs	r2, #0
 8007b86:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007b88:	693a      	ldr	r2, [r7, #16]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	88da      	ldrh	r2, [r3, #6]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	79fa      	ldrb	r2, [r7, #7]
 8007b9a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	3330      	adds	r3, #48	@ 0x30
 8007bb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f7fe faba 	bl	8006132 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007bbe:	79fb      	ldrb	r3, [r7, #7]
 8007bc0:	f003 0320 	and.w	r3, r3, #32
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d060      	beq.n	8007c8a <f_open+0x35a>
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d05c      	beq.n	8007c8a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	68da      	ldr	r2, [r3, #12]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	895b      	ldrh	r3, [r3, #10]
 8007bdc:	025b      	lsls	r3, r3, #9
 8007bde:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	657b      	str	r3, [r7, #84]	@ 0x54
 8007bec:	e016      	b.n	8007c1c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7fe fcec 	bl	80065d0 <get_fat>
 8007bf8:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007bfa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d802      	bhi.n	8007c06 <f_open+0x2d6>
 8007c00:	2302      	movs	r3, #2
 8007c02:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007c06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c0c:	d102      	bne.n	8007c14 <f_open+0x2e4>
 8007c0e:	2301      	movs	r3, #1
 8007c10:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007c14:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007c16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c1c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d103      	bne.n	8007c2c <f_open+0x2fc>
 8007c24:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007c26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d8e0      	bhi.n	8007bee <f_open+0x2be>
				}
				fp->clust = clst;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c30:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007c32:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d127      	bne.n	8007c8a <f_open+0x35a>
 8007c3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d022      	beq.n	8007c8a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7fe fca2 	bl	8006592 <clust2sect>
 8007c4e:	6478      	str	r0, [r7, #68]	@ 0x44
 8007c50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d103      	bne.n	8007c5e <f_open+0x32e>
						res = FR_INT_ERR;
 8007c56:	2302      	movs	r3, #2
 8007c58:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007c5c:	e015      	b.n	8007c8a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007c5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c60:	0a5a      	lsrs	r2, r3, #9
 8007c62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c64:	441a      	add	r2, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	7858      	ldrb	r0, [r3, #1]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6a1a      	ldr	r2, [r3, #32]
 8007c78:	2301      	movs	r3, #1
 8007c7a:	f7fe f977 	bl	8005f6c <disk_read>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d002      	beq.n	8007c8a <f_open+0x35a>
 8007c84:	2301      	movs	r3, #1
 8007c86:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007c8a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d002      	beq.n	8007c98 <f_open+0x368>
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8007c9e:	4611      	mov	r1, r2
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f7fe fab9 	bl	8006218 <unlock_fs>
 8007ca6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3760      	adds	r7, #96	@ 0x60
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b08e      	sub	sp, #56	@ 0x38
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	60f8      	str	r0, [r7, #12]
 8007cba:	60b9      	str	r1, [r7, #8]
 8007cbc:	607a      	str	r2, [r7, #4]
 8007cbe:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f107 0214 	add.w	r2, r7, #20
 8007cd0:	4611      	mov	r1, r2
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7ff fd80 	bl	80077d8 <validate>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007cde:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d107      	bne.n	8007cf6 <f_read+0x44>
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	7d5b      	ldrb	r3, [r3, #21]
 8007cea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007cee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d009      	beq.n	8007d0a <f_read+0x58>
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8007cfc:	4611      	mov	r1, r2
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7fe fa8a 	bl	8006218 <unlock_fs>
 8007d04:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007d08:	e13d      	b.n	8007f86 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	7d1b      	ldrb	r3, [r3, #20]
 8007d0e:	f003 0301 	and.w	r3, r3, #1
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d106      	bne.n	8007d24 <f_read+0x72>
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	2107      	movs	r1, #7
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7fe fa7c 	bl	8006218 <unlock_fs>
 8007d20:	2307      	movs	r3, #7
 8007d22:	e130      	b.n	8007f86 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	68da      	ldr	r2, [r3, #12]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	1ad3      	subs	r3, r2, r3
 8007d2e:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	6a3b      	ldr	r3, [r7, #32]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	f240 811c 	bls.w	8007f72 <f_read+0x2c0>
 8007d3a:	6a3b      	ldr	r3, [r7, #32]
 8007d3c:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007d3e:	e118      	b.n	8007f72 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	699b      	ldr	r3, [r3, #24]
 8007d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f040 80e4 	bne.w	8007f16 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	699b      	ldr	r3, [r3, #24]
 8007d52:	0a5b      	lsrs	r3, r3, #9
 8007d54:	697a      	ldr	r2, [r7, #20]
 8007d56:	8952      	ldrh	r2, [r2, #10]
 8007d58:	3a01      	subs	r2, #1
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d139      	bne.n	8007dd8 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	699b      	ldr	r3, [r3, #24]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d103      	bne.n	8007d74 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d72:	e013      	b.n	8007d9c <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d007      	beq.n	8007d8c <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	699b      	ldr	r3, [r3, #24]
 8007d80:	4619      	mov	r1, r3
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	f7fe feb2 	bl	8006aec <clmt_clust>
 8007d88:	6338      	str	r0, [r7, #48]	@ 0x30
 8007d8a:	e007      	b.n	8007d9c <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	69db      	ldr	r3, [r3, #28]
 8007d92:	4619      	mov	r1, r3
 8007d94:	4610      	mov	r0, r2
 8007d96:	f7fe fc1b 	bl	80065d0 <get_fat>
 8007d9a:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d809      	bhi.n	8007db6 <f_read+0x104>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2202      	movs	r2, #2
 8007da6:	755a      	strb	r2, [r3, #21]
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	2102      	movs	r1, #2
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7fe fa33 	bl	8006218 <unlock_fs>
 8007db2:	2302      	movs	r3, #2
 8007db4:	e0e7      	b.n	8007f86 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dbc:	d109      	bne.n	8007dd2 <f_read+0x120>
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	755a      	strb	r2, [r3, #21]
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	2101      	movs	r1, #1
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7fe fa25 	bl	8006218 <unlock_fs>
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e0d9      	b.n	8007f86 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dd6:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007dd8:	697a      	ldr	r2, [r7, #20]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	69db      	ldr	r3, [r3, #28]
 8007dde:	4619      	mov	r1, r3
 8007de0:	4610      	mov	r0, r2
 8007de2:	f7fe fbd6 	bl	8006592 <clust2sect>
 8007de6:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d109      	bne.n	8007e02 <f_read+0x150>
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2202      	movs	r2, #2
 8007df2:	755a      	strb	r2, [r3, #21]
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	2102      	movs	r1, #2
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f7fe fa0d 	bl	8006218 <unlock_fs>
 8007dfe:	2302      	movs	r3, #2
 8007e00:	e0c1      	b.n	8007f86 <f_read+0x2d4>
			sect += csect;
 8007e02:	69ba      	ldr	r2, [r7, #24]
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	4413      	add	r3, r2
 8007e08:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	0a5b      	lsrs	r3, r3, #9
 8007e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d03e      	beq.n	8007e94 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007e16:	69fa      	ldr	r2, [r7, #28]
 8007e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e1a:	4413      	add	r3, r2
 8007e1c:	697a      	ldr	r2, [r7, #20]
 8007e1e:	8952      	ldrh	r2, [r2, #10]
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d905      	bls.n	8007e30 <f_read+0x17e>
					cc = fs->csize - csect;
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	895b      	ldrh	r3, [r3, #10]
 8007e28:	461a      	mov	r2, r3
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	1ad3      	subs	r3, r2, r3
 8007e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	7858      	ldrb	r0, [r3, #1]
 8007e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e36:	69ba      	ldr	r2, [r7, #24]
 8007e38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007e3a:	f7fe f897 	bl	8005f6c <disk_read>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d009      	beq.n	8007e58 <f_read+0x1a6>
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2201      	movs	r2, #1
 8007e48:	755a      	strb	r2, [r3, #21]
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	2101      	movs	r1, #1
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f7fe f9e2 	bl	8006218 <unlock_fs>
 8007e54:	2301      	movs	r3, #1
 8007e56:	e096      	b.n	8007f86 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	7d1b      	ldrb	r3, [r3, #20]
 8007e5c:	b25b      	sxtb	r3, r3
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	da14      	bge.n	8007e8c <f_read+0x1da>
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6a1a      	ldr	r2, [r3, #32]
 8007e66:	69bb      	ldr	r3, [r7, #24]
 8007e68:	1ad3      	subs	r3, r2, r3
 8007e6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d90d      	bls.n	8007e8c <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6a1a      	ldr	r2, [r3, #32]
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	1ad3      	subs	r3, r2, r3
 8007e78:	025b      	lsls	r3, r3, #9
 8007e7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e7c:	18d0      	adds	r0, r2, r3
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	3330      	adds	r3, #48	@ 0x30
 8007e82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e86:	4619      	mov	r1, r3
 8007e88:	f7fe f932 	bl	80060f0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e8e:	025b      	lsls	r3, r3, #9
 8007e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8007e92:	e05a      	b.n	8007f4a <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6a1b      	ldr	r3, [r3, #32]
 8007e98:	69ba      	ldr	r2, [r7, #24]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d038      	beq.n	8007f10 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	7d1b      	ldrb	r3, [r3, #20]
 8007ea2:	b25b      	sxtb	r3, r3
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	da1d      	bge.n	8007ee4 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	7858      	ldrb	r0, [r3, #1]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6a1a      	ldr	r2, [r3, #32]
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	f7fe f878 	bl	8005fac <disk_write>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d009      	beq.n	8007ed6 <f_read+0x224>
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	755a      	strb	r2, [r3, #21]
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	2101      	movs	r1, #1
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7fe f9a3 	bl	8006218 <unlock_fs>
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e057      	b.n	8007f86 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	7d1b      	ldrb	r3, [r3, #20]
 8007eda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ede:	b2da      	uxtb	r2, r3
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	7858      	ldrb	r0, [r3, #1]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007eee:	2301      	movs	r3, #1
 8007ef0:	69ba      	ldr	r2, [r7, #24]
 8007ef2:	f7fe f83b 	bl	8005f6c <disk_read>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d009      	beq.n	8007f10 <f_read+0x25e>
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2201      	movs	r2, #1
 8007f00:	755a      	strb	r2, [r3, #21]
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	2101      	movs	r1, #1
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7fe f986 	bl	8006218 <unlock_fs>
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e03a      	b.n	8007f86 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	69ba      	ldr	r2, [r7, #24]
 8007f14:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	699b      	ldr	r3, [r3, #24]
 8007f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f1e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8007f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007f24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d901      	bls.n	8007f30 <f_read+0x27e>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	699b      	ldr	r3, [r3, #24]
 8007f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f3e:	4413      	add	r3, r2
 8007f40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f42:	4619      	mov	r1, r3
 8007f44:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007f46:	f7fe f8d3 	bl	80060f0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f4e:	4413      	add	r3, r2
 8007f50:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	699a      	ldr	r2, [r3, #24]
 8007f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f58:	441a      	add	r2, r3
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	619a      	str	r2, [r3, #24]
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f64:	441a      	add	r2, r3
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	601a      	str	r2, [r3, #0]
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f47f aee3 	bne.w	8007d40 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	2100      	movs	r1, #0
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7fe f94a 	bl	8006218 <unlock_fs>
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3738      	adds	r7, #56	@ 0x38
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b090      	sub	sp, #64	@ 0x40
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
 8007f96:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f107 0208 	add.w	r2, r7, #8
 8007f9e:	4611      	mov	r1, r2
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7ff fc19 	bl	80077d8 <validate>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8007fac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d103      	bne.n	8007fbc <f_lseek+0x2e>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	7d5b      	ldrb	r3, [r3, #21]
 8007fb8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8007fbc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d009      	beq.n	8007fd8 <f_lseek+0x4a>
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8007fca:	4611      	mov	r1, r2
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7fe f923 	bl	8006218 <unlock_fs>
 8007fd2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007fd6:	e229      	b.n	800842c <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f000 80ea 	beq.w	80081b6 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe8:	d164      	bne.n	80080b4 <f_lseek+0x126>
			tbl = fp->cltbl;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fee:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8007ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff2:	1d1a      	adds	r2, r3, #4
 8007ff4:	627a      	str	r2, [r7, #36]	@ 0x24
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	617b      	str	r3, [r7, #20]
 8007ffa:	2302      	movs	r3, #2
 8007ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8008004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008006:	2b00      	cmp	r3, #0
 8008008:	d044      	beq.n	8008094 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800800a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800800c:	613b      	str	r3, [r7, #16]
 800800e:	2300      	movs	r3, #0
 8008010:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008014:	3302      	adds	r3, #2
 8008016:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8008018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800801a:	60fb      	str	r3, [r7, #12]
 800801c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800801e:	3301      	adds	r3, #1
 8008020:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008026:	4618      	mov	r0, r3
 8008028:	f7fe fad2 	bl	80065d0 <get_fat>
 800802c:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800802e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008030:	2b01      	cmp	r3, #1
 8008032:	d809      	bhi.n	8008048 <f_lseek+0xba>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2202      	movs	r2, #2
 8008038:	755a      	strb	r2, [r3, #21]
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	2102      	movs	r1, #2
 800803e:	4618      	mov	r0, r3
 8008040:	f7fe f8ea 	bl	8006218 <unlock_fs>
 8008044:	2302      	movs	r3, #2
 8008046:	e1f1      	b.n	800842c <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800804a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800804e:	d109      	bne.n	8008064 <f_lseek+0xd6>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	755a      	strb	r2, [r3, #21]
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	2101      	movs	r1, #1
 800805a:	4618      	mov	r0, r3
 800805c:	f7fe f8dc 	bl	8006218 <unlock_fs>
 8008060:	2301      	movs	r3, #1
 8008062:	e1e3      	b.n	800842c <f_lseek+0x49e>
					} while (cl == pcl + 1);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	3301      	adds	r3, #1
 8008068:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800806a:	429a      	cmp	r2, r3
 800806c:	d0d4      	beq.n	8008018 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800806e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	429a      	cmp	r2, r3
 8008074:	d809      	bhi.n	800808a <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8008076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008078:	1d1a      	adds	r2, r3, #4
 800807a:	627a      	str	r2, [r7, #36]	@ 0x24
 800807c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800807e:	601a      	str	r2, [r3, #0]
 8008080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008082:	1d1a      	adds	r2, r3, #4
 8008084:	627a      	str	r2, [r7, #36]	@ 0x24
 8008086:	693a      	ldr	r2, [r7, #16]
 8008088:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	699b      	ldr	r3, [r3, #24]
 800808e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008090:	429a      	cmp	r2, r3
 8008092:	d3ba      	bcc.n	800800a <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008098:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800809a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800809c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d803      	bhi.n	80080ac <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 80080a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a6:	2200      	movs	r2, #0
 80080a8:	601a      	str	r2, [r3, #0]
 80080aa:	e1b6      	b.n	800841a <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80080ac:	2311      	movs	r3, #17
 80080ae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80080b2:	e1b2      	b.n	800841a <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	683a      	ldr	r2, [r7, #0]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d902      	bls.n	80080c4 <f_lseek+0x136>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	683a      	ldr	r2, [r7, #0]
 80080c8:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f000 81a4 	beq.w	800841a <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	3b01      	subs	r3, #1
 80080d6:	4619      	mov	r1, r3
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f7fe fd07 	bl	8006aec <clmt_clust>
 80080de:	4602      	mov	r2, r0
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80080e4:	68ba      	ldr	r2, [r7, #8]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	69db      	ldr	r3, [r3, #28]
 80080ea:	4619      	mov	r1, r3
 80080ec:	4610      	mov	r0, r2
 80080ee:	f7fe fa50 	bl	8006592 <clust2sect>
 80080f2:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d109      	bne.n	800810e <f_lseek+0x180>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2202      	movs	r2, #2
 80080fe:	755a      	strb	r2, [r3, #21]
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	2102      	movs	r1, #2
 8008104:	4618      	mov	r0, r3
 8008106:	f7fe f887 	bl	8006218 <unlock_fs>
 800810a:	2302      	movs	r3, #2
 800810c:	e18e      	b.n	800842c <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	3b01      	subs	r3, #1
 8008112:	0a5b      	lsrs	r3, r3, #9
 8008114:	68ba      	ldr	r2, [r7, #8]
 8008116:	8952      	ldrh	r2, [r2, #10]
 8008118:	3a01      	subs	r2, #1
 800811a:	4013      	ands	r3, r2
 800811c:	69ba      	ldr	r2, [r7, #24]
 800811e:	4413      	add	r3, r2
 8008120:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	699b      	ldr	r3, [r3, #24]
 8008126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800812a:	2b00      	cmp	r3, #0
 800812c:	f000 8175 	beq.w	800841a <f_lseek+0x48c>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a1b      	ldr	r3, [r3, #32]
 8008134:	69ba      	ldr	r2, [r7, #24]
 8008136:	429a      	cmp	r2, r3
 8008138:	f000 816f 	beq.w	800841a <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	7d1b      	ldrb	r3, [r3, #20]
 8008140:	b25b      	sxtb	r3, r3
 8008142:	2b00      	cmp	r3, #0
 8008144:	da1d      	bge.n	8008182 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	7858      	ldrb	r0, [r3, #1]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6a1a      	ldr	r2, [r3, #32]
 8008154:	2301      	movs	r3, #1
 8008156:	f7fd ff29 	bl	8005fac <disk_write>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d009      	beq.n	8008174 <f_lseek+0x1e6>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	755a      	strb	r2, [r3, #21]
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	2101      	movs	r1, #1
 800816a:	4618      	mov	r0, r3
 800816c:	f7fe f854 	bl	8006218 <unlock_fs>
 8008170:	2301      	movs	r3, #1
 8008172:	e15b      	b.n	800842c <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	7d1b      	ldrb	r3, [r3, #20]
 8008178:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800817c:	b2da      	uxtb	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	7858      	ldrb	r0, [r3, #1]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800818c:	2301      	movs	r3, #1
 800818e:	69ba      	ldr	r2, [r7, #24]
 8008190:	f7fd feec 	bl	8005f6c <disk_read>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d009      	beq.n	80081ae <f_lseek+0x220>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2201      	movs	r2, #1
 800819e:	755a      	strb	r2, [r3, #21]
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	2101      	movs	r1, #1
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7fe f837 	bl	8006218 <unlock_fs>
 80081aa:	2301      	movs	r3, #1
 80081ac:	e13e      	b.n	800842c <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	69ba      	ldr	r2, [r7, #24]
 80081b2:	621a      	str	r2, [r3, #32]
 80081b4:	e131      	b.n	800841a <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	683a      	ldr	r2, [r7, #0]
 80081bc:	429a      	cmp	r2, r3
 80081be:	d908      	bls.n	80081d2 <f_lseek+0x244>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	7d1b      	ldrb	r3, [r3, #20]
 80081c4:	f003 0302 	and.w	r3, r3, #2
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d102      	bne.n	80081d2 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	699b      	ldr	r3, [r3, #24]
 80081d6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80081d8:	2300      	movs	r3, #0
 80081da:	637b      	str	r3, [r7, #52]	@ 0x34
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80081e0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 80c0 	beq.w	800836a <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	895b      	ldrh	r3, [r3, #10]
 80081ee:	025b      	lsls	r3, r3, #9
 80081f0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80081f2:	6a3b      	ldr	r3, [r7, #32]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d01b      	beq.n	8008230 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	1e5a      	subs	r2, r3, #1
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8008202:	6a3b      	ldr	r3, [r7, #32]
 8008204:	1e59      	subs	r1, r3, #1
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800820c:	429a      	cmp	r2, r3
 800820e:	d30f      	bcc.n	8008230 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8008210:	6a3b      	ldr	r3, [r7, #32]
 8008212:	1e5a      	subs	r2, r3, #1
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	425b      	negs	r3, r3
 8008218:	401a      	ands	r2, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	699b      	ldr	r3, [r3, #24]
 8008222:	683a      	ldr	r2, [r7, #0]
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	69db      	ldr	r3, [r3, #28]
 800822c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800822e:	e02c      	b.n	800828a <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008238:	2b00      	cmp	r3, #0
 800823a:	d123      	bne.n	8008284 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2100      	movs	r1, #0
 8008240:	4618      	mov	r0, r3
 8008242:	f7fe fbbb 	bl	80069bc <create_chain>
 8008246:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800824a:	2b01      	cmp	r3, #1
 800824c:	d109      	bne.n	8008262 <f_lseek+0x2d4>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2202      	movs	r2, #2
 8008252:	755a      	strb	r2, [r3, #21]
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	2102      	movs	r1, #2
 8008258:	4618      	mov	r0, r3
 800825a:	f7fd ffdd 	bl	8006218 <unlock_fs>
 800825e:	2302      	movs	r3, #2
 8008260:	e0e4      	b.n	800842c <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008268:	d109      	bne.n	800827e <f_lseek+0x2f0>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2201      	movs	r2, #1
 800826e:	755a      	strb	r2, [r3, #21]
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	2101      	movs	r1, #1
 8008274:	4618      	mov	r0, r3
 8008276:	f7fd ffcf 	bl	8006218 <unlock_fs>
 800827a:	2301      	movs	r3, #1
 800827c:	e0d6      	b.n	800842c <f_lseek+0x49e>
					fp->obj.sclust = clst;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008282:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008288:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800828a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800828c:	2b00      	cmp	r3, #0
 800828e:	d06c      	beq.n	800836a <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8008290:	e044      	b.n	800831c <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8008292:	683a      	ldr	r2, [r7, #0]
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	1ad3      	subs	r3, r2, r3
 8008298:	603b      	str	r3, [r7, #0]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	699a      	ldr	r2, [r3, #24]
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	441a      	add	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	7d1b      	ldrb	r3, [r3, #20]
 80082aa:	f003 0302 	and.w	r3, r3, #2
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00b      	beq.n	80082ca <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7fe fb80 	bl	80069bc <create_chain>
 80082bc:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80082be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d108      	bne.n	80082d6 <f_lseek+0x348>
							ofs = 0; break;
 80082c4:	2300      	movs	r3, #0
 80082c6:	603b      	str	r3, [r7, #0]
 80082c8:	e02c      	b.n	8008324 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7fe f97e 	bl	80065d0 <get_fat>
 80082d4:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80082d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082dc:	d109      	bne.n	80082f2 <f_lseek+0x364>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2201      	movs	r2, #1
 80082e2:	755a      	strb	r2, [r3, #21]
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	2101      	movs	r1, #1
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7fd ff95 	bl	8006218 <unlock_fs>
 80082ee:	2301      	movs	r3, #1
 80082f0:	e09c      	b.n	800842c <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80082f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d904      	bls.n	8008302 <f_lseek+0x374>
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	699b      	ldr	r3, [r3, #24]
 80082fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80082fe:	429a      	cmp	r2, r3
 8008300:	d309      	bcc.n	8008316 <f_lseek+0x388>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2202      	movs	r2, #2
 8008306:	755a      	strb	r2, [r3, #21]
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	2102      	movs	r1, #2
 800830c:	4618      	mov	r0, r3
 800830e:	f7fd ff83 	bl	8006218 <unlock_fs>
 8008312:	2302      	movs	r3, #2
 8008314:	e08a      	b.n	800842c <f_lseek+0x49e>
					fp->clust = clst;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800831a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800831c:	683a      	ldr	r2, [r7, #0]
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	429a      	cmp	r2, r3
 8008322:	d8b6      	bhi.n	8008292 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	699a      	ldr	r2, [r3, #24]
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	441a      	add	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008336:	2b00      	cmp	r3, #0
 8008338:	d017      	beq.n	800836a <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800833e:	4618      	mov	r0, r3
 8008340:	f7fe f927 	bl	8006592 <clust2sect>
 8008344:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8008346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008348:	2b00      	cmp	r3, #0
 800834a:	d109      	bne.n	8008360 <f_lseek+0x3d2>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2202      	movs	r2, #2
 8008350:	755a      	strb	r2, [r3, #21]
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	2102      	movs	r1, #2
 8008356:	4618      	mov	r0, r3
 8008358:	f7fd ff5e 	bl	8006218 <unlock_fs>
 800835c:	2302      	movs	r3, #2
 800835e:	e065      	b.n	800842c <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	0a5b      	lsrs	r3, r3, #9
 8008364:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008366:	4413      	add	r3, r2
 8008368:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	699a      	ldr	r2, [r3, #24]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	429a      	cmp	r2, r3
 8008374:	d90a      	bls.n	800838c <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	699a      	ldr	r2, [r3, #24]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	7d1b      	ldrb	r3, [r3, #20]
 8008382:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008386:	b2da      	uxtb	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	699b      	ldr	r3, [r3, #24]
 8008390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008394:	2b00      	cmp	r3, #0
 8008396:	d040      	beq.n	800841a <f_lseek+0x48c>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a1b      	ldr	r3, [r3, #32]
 800839c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800839e:	429a      	cmp	r2, r3
 80083a0:	d03b      	beq.n	800841a <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	7d1b      	ldrb	r3, [r3, #20]
 80083a6:	b25b      	sxtb	r3, r3
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	da1d      	bge.n	80083e8 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	7858      	ldrb	r0, [r3, #1]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a1a      	ldr	r2, [r3, #32]
 80083ba:	2301      	movs	r3, #1
 80083bc:	f7fd fdf6 	bl	8005fac <disk_write>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d009      	beq.n	80083da <f_lseek+0x44c>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2201      	movs	r2, #1
 80083ca:	755a      	strb	r2, [r3, #21]
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	2101      	movs	r1, #1
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7fd ff21 	bl	8006218 <unlock_fs>
 80083d6:	2301      	movs	r3, #1
 80083d8:	e028      	b.n	800842c <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	7d1b      	ldrb	r3, [r3, #20]
 80083de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083e2:	b2da      	uxtb	r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	7858      	ldrb	r0, [r3, #1]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80083f2:	2301      	movs	r3, #1
 80083f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083f6:	f7fd fdb9 	bl	8005f6c <disk_read>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d009      	beq.n	8008414 <f_lseek+0x486>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	755a      	strb	r2, [r3, #21]
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	2101      	movs	r1, #1
 800840a:	4618      	mov	r0, r3
 800840c:	f7fd ff04 	bl	8006218 <unlock_fs>
 8008410:	2301      	movs	r3, #1
 8008412:	e00b      	b.n	800842c <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008418:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8008420:	4611      	mov	r1, r2
 8008422:	4618      	mov	r0, r3
 8008424:	f7fd fef8 	bl	8006218 <unlock_fs>
 8008428:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800842c:	4618      	mov	r0, r3
 800842e:	3740      	adds	r7, #64	@ 0x40
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008434:	b480      	push	{r7}
 8008436:	b087      	sub	sp, #28
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	4613      	mov	r3, r2
 8008440:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008442:	2301      	movs	r3, #1
 8008444:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008446:	2300      	movs	r3, #0
 8008448:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800844a:	4b1f      	ldr	r3, [pc, #124]	@ (80084c8 <FATFS_LinkDriverEx+0x94>)
 800844c:	7a5b      	ldrb	r3, [r3, #9]
 800844e:	b2db      	uxtb	r3, r3
 8008450:	2b00      	cmp	r3, #0
 8008452:	d131      	bne.n	80084b8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008454:	4b1c      	ldr	r3, [pc, #112]	@ (80084c8 <FATFS_LinkDriverEx+0x94>)
 8008456:	7a5b      	ldrb	r3, [r3, #9]
 8008458:	b2db      	uxtb	r3, r3
 800845a:	461a      	mov	r2, r3
 800845c:	4b1a      	ldr	r3, [pc, #104]	@ (80084c8 <FATFS_LinkDriverEx+0x94>)
 800845e:	2100      	movs	r1, #0
 8008460:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008462:	4b19      	ldr	r3, [pc, #100]	@ (80084c8 <FATFS_LinkDriverEx+0x94>)
 8008464:	7a5b      	ldrb	r3, [r3, #9]
 8008466:	b2db      	uxtb	r3, r3
 8008468:	4a17      	ldr	r2, [pc, #92]	@ (80084c8 <FATFS_LinkDriverEx+0x94>)
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	4413      	add	r3, r2
 800846e:	68fa      	ldr	r2, [r7, #12]
 8008470:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008472:	4b15      	ldr	r3, [pc, #84]	@ (80084c8 <FATFS_LinkDriverEx+0x94>)
 8008474:	7a5b      	ldrb	r3, [r3, #9]
 8008476:	b2db      	uxtb	r3, r3
 8008478:	461a      	mov	r2, r3
 800847a:	4b13      	ldr	r3, [pc, #76]	@ (80084c8 <FATFS_LinkDriverEx+0x94>)
 800847c:	4413      	add	r3, r2
 800847e:	79fa      	ldrb	r2, [r7, #7]
 8008480:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008482:	4b11      	ldr	r3, [pc, #68]	@ (80084c8 <FATFS_LinkDriverEx+0x94>)
 8008484:	7a5b      	ldrb	r3, [r3, #9]
 8008486:	b2db      	uxtb	r3, r3
 8008488:	1c5a      	adds	r2, r3, #1
 800848a:	b2d1      	uxtb	r1, r2
 800848c:	4a0e      	ldr	r2, [pc, #56]	@ (80084c8 <FATFS_LinkDriverEx+0x94>)
 800848e:	7251      	strb	r1, [r2, #9]
 8008490:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008492:	7dbb      	ldrb	r3, [r7, #22]
 8008494:	3330      	adds	r3, #48	@ 0x30
 8008496:	b2da      	uxtb	r2, r3
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	3301      	adds	r3, #1
 80084a0:	223a      	movs	r2, #58	@ 0x3a
 80084a2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	3302      	adds	r3, #2
 80084a8:	222f      	movs	r2, #47	@ 0x2f
 80084aa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	3303      	adds	r3, #3
 80084b0:	2200      	movs	r2, #0
 80084b2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80084b4:	2300      	movs	r3, #0
 80084b6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80084b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	371c      	adds	r7, #28
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr
 80084c6:	bf00      	nop
 80084c8:	20000578 	.word	0x20000578

080084cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80084d6:	2200      	movs	r2, #0
 80084d8:	6839      	ldr	r1, [r7, #0]
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f7ff ffaa 	bl	8008434 <FATFS_LinkDriverEx>
 80084e0:	4603      	mov	r3, r0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3708      	adds	r7, #8
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b086      	sub	sp, #24
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	4603      	mov	r3, r0
 80084f2:	6039      	str	r1, [r7, #0]
 80084f4:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 80084f6:	2300      	movs	r3, #0
 80084f8:	60fb      	str	r3, [r7, #12]
 80084fa:	2300      	movs	r3, #0
 80084fc:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 80084fe:	f107 030c 	add.w	r3, r7, #12
 8008502:	2101      	movs	r1, #1
 8008504:	4618      	mov	r0, r3
 8008506:	f000 f8cd 	bl	80086a4 <osSemaphoreCreate>
 800850a:	4602      	mov	r2, r0
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2b00      	cmp	r3, #0
 8008516:	bf14      	ite	ne
 8008518:	2301      	movne	r3, #1
 800851a:	2300      	moveq	r3, #0
 800851c:	b2db      	uxtb	r3, r3
 800851e:	617b      	str	r3, [r7, #20]

    return ret;
 8008520:	697b      	ldr	r3, [r7, #20]
}
 8008522:	4618      	mov	r0, r3
 8008524:	3718      	adds	r7, #24
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b082      	sub	sp, #8
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 f96c 	bl	8008810 <osSemaphoreDelete>
#endif
    return 1;
 8008538:	2301      	movs	r3, #1
}
 800853a:	4618      	mov	r0, r3
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b084      	sub	sp, #16
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800854a:	2300      	movs	r3, #0
 800854c:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800854e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 f8d8 	bl	8008708 <osSemaphoreWait>
 8008558:	4603      	mov	r3, r0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d101      	bne.n	8008562 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800855e:	2301      	movs	r3, #1
 8008560:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008562:	68fb      	ldr	r3, [r7, #12]
}
 8008564:	4618      	mov	r0, r3
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 f915 	bl	80087a4 <osSemaphoreRelease>
#endif
}
 800857a:	bf00      	nop
 800857c:	3708      	adds	r7, #8
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008582:	b480      	push	{r7}
 8008584:	b085      	sub	sp, #20
 8008586:	af00      	add	r7, sp, #0
 8008588:	4603      	mov	r3, r0
 800858a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800858c:	2300      	movs	r3, #0
 800858e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008590:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008594:	2b84      	cmp	r3, #132	@ 0x84
 8008596:	d005      	beq.n	80085a4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008598:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	4413      	add	r3, r2
 80085a0:	3303      	adds	r3, #3
 80085a2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80085a4:	68fb      	ldr	r3, [r7, #12]
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3714      	adds	r7, #20
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr

080085b2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80085b2:	b480      	push	{r7}
 80085b4:	b083      	sub	sp, #12
 80085b6:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085b8:	f3ef 8305 	mrs	r3, IPSR
 80085bc:	607b      	str	r3, [r7, #4]
  return(result);
 80085be:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	bf14      	ite	ne
 80085c4:	2301      	movne	r3, #1
 80085c6:	2300      	moveq	r3, #0
 80085c8:	b2db      	uxtb	r3, r3
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	370c      	adds	r7, #12
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr

080085d6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80085da:	f001 fbe7 	bl	8009dac <vTaskStartScheduler>
  
  return osOK;
 80085de:	2300      	movs	r3, #0
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80085e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085e6:	b089      	sub	sp, #36	@ 0x24
 80085e8:	af04      	add	r7, sp, #16
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	695b      	ldr	r3, [r3, #20]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d020      	beq.n	8008638 <osThreadCreate+0x54>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	699b      	ldr	r3, [r3, #24]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d01c      	beq.n	8008638 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	685c      	ldr	r4, [r3, #4]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	691e      	ldr	r6, [r3, #16]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008610:	4618      	mov	r0, r3
 8008612:	f7ff ffb6 	bl	8008582 <makeFreeRtosPriority>
 8008616:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	695b      	ldr	r3, [r3, #20]
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008620:	9202      	str	r2, [sp, #8]
 8008622:	9301      	str	r3, [sp, #4]
 8008624:	9100      	str	r1, [sp, #0]
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	4632      	mov	r2, r6
 800862a:	4629      	mov	r1, r5
 800862c:	4620      	mov	r0, r4
 800862e:	f001 f9ef 	bl	8009a10 <xTaskCreateStatic>
 8008632:	4603      	mov	r3, r0
 8008634:	60fb      	str	r3, [r7, #12]
 8008636:	e01c      	b.n	8008672 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685c      	ldr	r4, [r3, #4]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008644:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800864c:	4618      	mov	r0, r3
 800864e:	f7ff ff98 	bl	8008582 <makeFreeRtosPriority>
 8008652:	4602      	mov	r2, r0
 8008654:	f107 030c 	add.w	r3, r7, #12
 8008658:	9301      	str	r3, [sp, #4]
 800865a:	9200      	str	r2, [sp, #0]
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	4632      	mov	r2, r6
 8008660:	4629      	mov	r1, r5
 8008662:	4620      	mov	r0, r4
 8008664:	f001 fa34 	bl	8009ad0 <xTaskCreate>
 8008668:	4603      	mov	r3, r0
 800866a:	2b01      	cmp	r3, #1
 800866c:	d001      	beq.n	8008672 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800866e:	2300      	movs	r3, #0
 8008670:	e000      	b.n	8008674 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008672:	68fb      	ldr	r3, [r7, #12]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3714      	adds	r7, #20
 8008678:	46bd      	mov	sp, r7
 800867a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800867c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d001      	beq.n	8008692 <osDelay+0x16>
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	e000      	b.n	8008694 <osDelay+0x18>
 8008692:	2301      	movs	r3, #1
 8008694:	4618      	mov	r0, r3
 8008696:	f001 fb53 	bl	8009d40 <vTaskDelay>
  
  return osOK;
 800869a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800869c:	4618      	mov	r0, r3
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b086      	sub	sp, #24
 80086a8:	af02      	add	r7, sp, #8
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00f      	beq.n	80086d6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d10a      	bne.n	80086d2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	2203      	movs	r2, #3
 80086c2:	9200      	str	r2, [sp, #0]
 80086c4:	2200      	movs	r2, #0
 80086c6:	2100      	movs	r1, #0
 80086c8:	2001      	movs	r0, #1
 80086ca:	f000 faaf 	bl	8008c2c <xQueueGenericCreateStatic>
 80086ce:	4603      	mov	r3, r0
 80086d0:	e016      	b.n	8008700 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80086d2:	2300      	movs	r3, #0
 80086d4:	e014      	b.n	8008700 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d110      	bne.n	80086fe <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80086dc:	2203      	movs	r2, #3
 80086de:	2100      	movs	r1, #0
 80086e0:	2001      	movs	r0, #1
 80086e2:	f000 fb20 	bl	8008d26 <xQueueGenericCreate>
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d005      	beq.n	80086fa <osSemaphoreCreate+0x56>
 80086ee:	2300      	movs	r3, #0
 80086f0:	2200      	movs	r2, #0
 80086f2:	2100      	movs	r1, #0
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f000 fb71 	bl	8008ddc <xQueueGenericSend>
      return sema;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	e000      	b.n	8008700 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80086fe:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8008700:	4618      	mov	r0, r3
 8008702:	3710      	adds	r7, #16
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008712:	2300      	movs	r3, #0
 8008714:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d101      	bne.n	8008720 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800871c:	2380      	movs	r3, #128	@ 0x80
 800871e:	e03a      	b.n	8008796 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8008720:	2300      	movs	r3, #0
 8008722:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800872a:	d103      	bne.n	8008734 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800872c:	f04f 33ff 	mov.w	r3, #4294967295
 8008730:	60fb      	str	r3, [r7, #12]
 8008732:	e009      	b.n	8008748 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d006      	beq.n	8008748 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d101      	bne.n	8008748 <osSemaphoreWait+0x40>
      ticks = 1;
 8008744:	2301      	movs	r3, #1
 8008746:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008748:	f7ff ff33 	bl	80085b2 <inHandlerMode>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d017      	beq.n	8008782 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008752:	f107 0308 	add.w	r3, r7, #8
 8008756:	461a      	mov	r2, r3
 8008758:	2100      	movs	r1, #0
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 ff60 	bl	8009620 <xQueueReceiveFromISR>
 8008760:	4603      	mov	r3, r0
 8008762:	2b01      	cmp	r3, #1
 8008764:	d001      	beq.n	800876a <osSemaphoreWait+0x62>
      return osErrorOS;
 8008766:	23ff      	movs	r3, #255	@ 0xff
 8008768:	e015      	b.n	8008796 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d011      	beq.n	8008794 <osSemaphoreWait+0x8c>
 8008770:	4b0b      	ldr	r3, [pc, #44]	@ (80087a0 <osSemaphoreWait+0x98>)
 8008772:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008776:	601a      	str	r2, [r3, #0]
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	e008      	b.n	8008794 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8008782:	68f9      	ldr	r1, [r7, #12]
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fe3b 	bl	8009400 <xQueueSemaphoreTake>
 800878a:	4603      	mov	r3, r0
 800878c:	2b01      	cmp	r3, #1
 800878e:	d001      	beq.n	8008794 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8008790:	23ff      	movs	r3, #255	@ 0xff
 8008792:	e000      	b.n	8008796 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3710      	adds	r7, #16
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	e000ed04 	.word	0xe000ed04

080087a4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80087ac:	2300      	movs	r3, #0
 80087ae:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80087b0:	2300      	movs	r3, #0
 80087b2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80087b4:	f7ff fefd 	bl	80085b2 <inHandlerMode>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d016      	beq.n	80087ec <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80087be:	f107 0308 	add.w	r3, r7, #8
 80087c2:	4619      	mov	r1, r3
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 fca9 	bl	800911c <xQueueGiveFromISR>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d001      	beq.n	80087d4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80087d0:	23ff      	movs	r3, #255	@ 0xff
 80087d2:	e017      	b.n	8008804 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d013      	beq.n	8008802 <osSemaphoreRelease+0x5e>
 80087da:	4b0c      	ldr	r3, [pc, #48]	@ (800880c <osSemaphoreRelease+0x68>)
 80087dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087e0:	601a      	str	r2, [r3, #0]
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	f3bf 8f6f 	isb	sy
 80087ea:	e00a      	b.n	8008802 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80087ec:	2300      	movs	r3, #0
 80087ee:	2200      	movs	r2, #0
 80087f0:	2100      	movs	r1, #0
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 faf2 	bl	8008ddc <xQueueGenericSend>
 80087f8:	4603      	mov	r3, r0
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d001      	beq.n	8008802 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80087fe:	23ff      	movs	r3, #255	@ 0xff
 8008800:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8008802:	68fb      	ldr	r3, [r7, #12]
}
 8008804:	4618      	mov	r0, r3
 8008806:	3710      	adds	r7, #16
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}
 800880c:	e000ed04 	.word	0xe000ed04

08008810 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008818:	f7ff fecb 	bl	80085b2 <inHandlerMode>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d001      	beq.n	8008826 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8008822:	2382      	movs	r3, #130	@ 0x82
 8008824:	e003      	b.n	800882e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 ff7c 	bl	8009724 <vQueueDelete>

  return osOK; 
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3708      	adds	r7, #8
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008836:	b590      	push	{r4, r7, lr}
 8008838:	b085      	sub	sp, #20
 800883a:	af02      	add	r7, sp, #8
 800883c:	6078      	str	r0, [r7, #4]
 800883e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d011      	beq.n	800886c <osMessageCreate+0x36>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00d      	beq.n	800886c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6818      	ldr	r0, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6859      	ldr	r1, [r3, #4]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	689a      	ldr	r2, [r3, #8]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	2400      	movs	r4, #0
 8008862:	9400      	str	r4, [sp, #0]
 8008864:	f000 f9e2 	bl	8008c2c <xQueueGenericCreateStatic>
 8008868:	4603      	mov	r3, r0
 800886a:	e008      	b.n	800887e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6818      	ldr	r0, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	4619      	mov	r1, r3
 8008878:	f000 fa55 	bl	8008d26 <xQueueGenericCreate>
 800887c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800887e:	4618      	mov	r0, r3
 8008880:	370c      	adds	r7, #12
 8008882:	46bd      	mov	sp, r7
 8008884:	bd90      	pop	{r4, r7, pc}
	...

08008888 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b086      	sub	sp, #24
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008894:	2300      	movs	r3, #0
 8008896:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d101      	bne.n	80088a6 <osMessagePut+0x1e>
    ticks = 1;
 80088a2:	2301      	movs	r3, #1
 80088a4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80088a6:	f7ff fe84 	bl	80085b2 <inHandlerMode>
 80088aa:	4603      	mov	r3, r0
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d018      	beq.n	80088e2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80088b0:	f107 0210 	add.w	r2, r7, #16
 80088b4:	f107 0108 	add.w	r1, r7, #8
 80088b8:	2300      	movs	r3, #0
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f000 fb90 	bl	8008fe0 <xQueueGenericSendFromISR>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d001      	beq.n	80088ca <osMessagePut+0x42>
      return osErrorOS;
 80088c6:	23ff      	movs	r3, #255	@ 0xff
 80088c8:	e018      	b.n	80088fc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d014      	beq.n	80088fa <osMessagePut+0x72>
 80088d0:	4b0c      	ldr	r3, [pc, #48]	@ (8008904 <osMessagePut+0x7c>)
 80088d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088d6:	601a      	str	r2, [r3, #0]
 80088d8:	f3bf 8f4f 	dsb	sy
 80088dc:	f3bf 8f6f 	isb	sy
 80088e0:	e00b      	b.n	80088fa <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80088e2:	f107 0108 	add.w	r1, r7, #8
 80088e6:	2300      	movs	r3, #0
 80088e8:	697a      	ldr	r2, [r7, #20]
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f000 fa76 	bl	8008ddc <xQueueGenericSend>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d001      	beq.n	80088fa <osMessagePut+0x72>
      return osErrorOS;
 80088f6:	23ff      	movs	r3, #255	@ 0xff
 80088f8:	e000      	b.n	80088fc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80088fa:	2300      	movs	r3, #0
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3718      	adds	r7, #24
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	e000ed04 	.word	0xe000ed04

08008908 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008908:	b590      	push	{r4, r7, lr}
 800890a:	b08b      	sub	sp, #44	@ 0x2c
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8008918:	2300      	movs	r3, #0
 800891a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d10a      	bne.n	8008938 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8008922:	2380      	movs	r3, #128	@ 0x80
 8008924:	617b      	str	r3, [r7, #20]
    return event;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	461c      	mov	r4, r3
 800892a:	f107 0314 	add.w	r3, r7, #20
 800892e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008932:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008936:	e054      	b.n	80089e2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8008938:	2300      	movs	r3, #0
 800893a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800893c:	2300      	movs	r3, #0
 800893e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008946:	d103      	bne.n	8008950 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8008948:	f04f 33ff 	mov.w	r3, #4294967295
 800894c:	627b      	str	r3, [r7, #36]	@ 0x24
 800894e:	e009      	b.n	8008964 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d006      	beq.n	8008964 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800895a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800895c:	2b00      	cmp	r3, #0
 800895e:	d101      	bne.n	8008964 <osMessageGet+0x5c>
      ticks = 1;
 8008960:	2301      	movs	r3, #1
 8008962:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8008964:	f7ff fe25 	bl	80085b2 <inHandlerMode>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d01c      	beq.n	80089a8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800896e:	f107 0220 	add.w	r2, r7, #32
 8008972:	f107 0314 	add.w	r3, r7, #20
 8008976:	3304      	adds	r3, #4
 8008978:	4619      	mov	r1, r3
 800897a:	68b8      	ldr	r0, [r7, #8]
 800897c:	f000 fe50 	bl	8009620 <xQueueReceiveFromISR>
 8008980:	4603      	mov	r3, r0
 8008982:	2b01      	cmp	r3, #1
 8008984:	d102      	bne.n	800898c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8008986:	2310      	movs	r3, #16
 8008988:	617b      	str	r3, [r7, #20]
 800898a:	e001      	b.n	8008990 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800898c:	2300      	movs	r3, #0
 800898e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008990:	6a3b      	ldr	r3, [r7, #32]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d01d      	beq.n	80089d2 <osMessageGet+0xca>
 8008996:	4b15      	ldr	r3, [pc, #84]	@ (80089ec <osMessageGet+0xe4>)
 8008998:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800899c:	601a      	str	r2, [r3, #0]
 800899e:	f3bf 8f4f 	dsb	sy
 80089a2:	f3bf 8f6f 	isb	sy
 80089a6:	e014      	b.n	80089d2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80089a8:	f107 0314 	add.w	r3, r7, #20
 80089ac:	3304      	adds	r3, #4
 80089ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089b0:	4619      	mov	r1, r3
 80089b2:	68b8      	ldr	r0, [r7, #8]
 80089b4:	f000 fc42 	bl	800923c <xQueueReceive>
 80089b8:	4603      	mov	r3, r0
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d102      	bne.n	80089c4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80089be:	2310      	movs	r3, #16
 80089c0:	617b      	str	r3, [r7, #20]
 80089c2:	e006      	b.n	80089d2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80089c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d101      	bne.n	80089ce <osMessageGet+0xc6>
 80089ca:	2300      	movs	r3, #0
 80089cc:	e000      	b.n	80089d0 <osMessageGet+0xc8>
 80089ce:	2340      	movs	r3, #64	@ 0x40
 80089d0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	461c      	mov	r4, r3
 80089d6:	f107 0314 	add.w	r3, r7, #20
 80089da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80089de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80089e2:	68f8      	ldr	r0, [r7, #12]
 80089e4:	372c      	adds	r7, #44	@ 0x2c
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd90      	pop	{r4, r7, pc}
 80089ea:	bf00      	nop
 80089ec:	e000ed04 	.word	0xe000ed04

080089f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80089f0:	b480      	push	{r7}
 80089f2:	b083      	sub	sp, #12
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f103 0208 	add.w	r2, r3, #8
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f04f 32ff 	mov.w	r2, #4294967295
 8008a08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f103 0208 	add.w	r2, r3, #8
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f103 0208 	add.w	r2, r3, #8
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008a24:	bf00      	nop
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008a3e:	bf00      	nop
 8008a40:	370c      	adds	r7, #12
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr

08008a4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a4a:	b480      	push	{r7}
 8008a4c:	b085      	sub	sp, #20
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
 8008a52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	68fa      	ldr	r2, [r7, #12]
 8008a5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	689a      	ldr	r2, [r3, #8]
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	683a      	ldr	r2, [r7, #0]
 8008a6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	683a      	ldr	r2, [r7, #0]
 8008a74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	1c5a      	adds	r2, r3, #1
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	601a      	str	r2, [r3, #0]
}
 8008a86:	bf00      	nop
 8008a88:	3714      	adds	r7, #20
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr

08008a92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a92:	b480      	push	{r7}
 8008a94:	b085      	sub	sp, #20
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
 8008a9a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aa8:	d103      	bne.n	8008ab2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	60fb      	str	r3, [r7, #12]
 8008ab0:	e00c      	b.n	8008acc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	3308      	adds	r3, #8
 8008ab6:	60fb      	str	r3, [r7, #12]
 8008ab8:	e002      	b.n	8008ac0 <vListInsert+0x2e>
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	60fb      	str	r3, [r7, #12]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	68ba      	ldr	r2, [r7, #8]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d2f6      	bcs.n	8008aba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	685a      	ldr	r2, [r3, #4]
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	683a      	ldr	r2, [r7, #0]
 8008ada:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	683a      	ldr	r2, [r7, #0]
 8008ae6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	1c5a      	adds	r2, r3, #1
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	601a      	str	r2, [r3, #0]
}
 8008af8:	bf00      	nop
 8008afa:	3714      	adds	r7, #20
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	691b      	ldr	r3, [r3, #16]
 8008b10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	6892      	ldr	r2, [r2, #8]
 8008b1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	6852      	ldr	r2, [r2, #4]
 8008b24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d103      	bne.n	8008b38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	689a      	ldr	r2, [r3, #8]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	1e5a      	subs	r2, r3, #1
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3714      	adds	r7, #20
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d10b      	bne.n	8008b84 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b70:	f383 8811 	msr	BASEPRI, r3
 8008b74:	f3bf 8f6f 	isb	sy
 8008b78:	f3bf 8f4f 	dsb	sy
 8008b7c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008b7e:	bf00      	nop
 8008b80:	bf00      	nop
 8008b82:	e7fd      	b.n	8008b80 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008b84:	f002 f870 	bl	800ac68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b90:	68f9      	ldr	r1, [r7, #12]
 8008b92:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008b94:	fb01 f303 	mul.w	r3, r1, r3
 8008b98:	441a      	add	r2, r3
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	68f9      	ldr	r1, [r7, #12]
 8008bb8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008bba:	fb01 f303 	mul.w	r3, r1, r3
 8008bbe:	441a      	add	r2, r3
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	22ff      	movs	r2, #255	@ 0xff
 8008bc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	22ff      	movs	r2, #255	@ 0xff
 8008bd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d114      	bne.n	8008c04 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	691b      	ldr	r3, [r3, #16]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d01a      	beq.n	8008c18 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	3310      	adds	r3, #16
 8008be6:	4618      	mov	r0, r3
 8008be8:	f001 fb2a 	bl	800a240 <xTaskRemoveFromEventList>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d012      	beq.n	8008c18 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8008c28 <xQueueGenericReset+0xd0>)
 8008bf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bf8:	601a      	str	r2, [r3, #0]
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	f3bf 8f6f 	isb	sy
 8008c02:	e009      	b.n	8008c18 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	3310      	adds	r3, #16
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7ff fef1 	bl	80089f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	3324      	adds	r3, #36	@ 0x24
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7ff feec 	bl	80089f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008c18:	f002 f858 	bl	800accc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008c1c:	2301      	movs	r3, #1
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	e000ed04 	.word	0xe000ed04

08008c2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b08e      	sub	sp, #56	@ 0x38
 8008c30:	af02      	add	r7, sp, #8
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	607a      	str	r2, [r7, #4]
 8008c38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d10b      	bne.n	8008c58 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c44:	f383 8811 	msr	BASEPRI, r3
 8008c48:	f3bf 8f6f 	isb	sy
 8008c4c:	f3bf 8f4f 	dsb	sy
 8008c50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008c52:	bf00      	nop
 8008c54:	bf00      	nop
 8008c56:	e7fd      	b.n	8008c54 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d10b      	bne.n	8008c76 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c62:	f383 8811 	msr	BASEPRI, r3
 8008c66:	f3bf 8f6f 	isb	sy
 8008c6a:	f3bf 8f4f 	dsb	sy
 8008c6e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008c70:	bf00      	nop
 8008c72:	bf00      	nop
 8008c74:	e7fd      	b.n	8008c72 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d002      	beq.n	8008c82 <xQueueGenericCreateStatic+0x56>
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d001      	beq.n	8008c86 <xQueueGenericCreateStatic+0x5a>
 8008c82:	2301      	movs	r3, #1
 8008c84:	e000      	b.n	8008c88 <xQueueGenericCreateStatic+0x5c>
 8008c86:	2300      	movs	r3, #0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d10b      	bne.n	8008ca4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c90:	f383 8811 	msr	BASEPRI, r3
 8008c94:	f3bf 8f6f 	isb	sy
 8008c98:	f3bf 8f4f 	dsb	sy
 8008c9c:	623b      	str	r3, [r7, #32]
}
 8008c9e:	bf00      	nop
 8008ca0:	bf00      	nop
 8008ca2:	e7fd      	b.n	8008ca0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d102      	bne.n	8008cb0 <xQueueGenericCreateStatic+0x84>
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d101      	bne.n	8008cb4 <xQueueGenericCreateStatic+0x88>
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e000      	b.n	8008cb6 <xQueueGenericCreateStatic+0x8a>
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d10b      	bne.n	8008cd2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cbe:	f383 8811 	msr	BASEPRI, r3
 8008cc2:	f3bf 8f6f 	isb	sy
 8008cc6:	f3bf 8f4f 	dsb	sy
 8008cca:	61fb      	str	r3, [r7, #28]
}
 8008ccc:	bf00      	nop
 8008cce:	bf00      	nop
 8008cd0:	e7fd      	b.n	8008cce <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008cd2:	2348      	movs	r3, #72	@ 0x48
 8008cd4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	2b48      	cmp	r3, #72	@ 0x48
 8008cda:	d00b      	beq.n	8008cf4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce0:	f383 8811 	msr	BASEPRI, r3
 8008ce4:	f3bf 8f6f 	isb	sy
 8008ce8:	f3bf 8f4f 	dsb	sy
 8008cec:	61bb      	str	r3, [r7, #24]
}
 8008cee:	bf00      	nop
 8008cf0:	bf00      	nop
 8008cf2:	e7fd      	b.n	8008cf0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008cf4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d00d      	beq.n	8008d1c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008d08:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d0e:	9300      	str	r3, [sp, #0]
 8008d10:	4613      	mov	r3, r2
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	68b9      	ldr	r1, [r7, #8]
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f000 f840 	bl	8008d9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3730      	adds	r7, #48	@ 0x30
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b08a      	sub	sp, #40	@ 0x28
 8008d2a:	af02      	add	r7, sp, #8
 8008d2c:	60f8      	str	r0, [r7, #12]
 8008d2e:	60b9      	str	r1, [r7, #8]
 8008d30:	4613      	mov	r3, r2
 8008d32:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d10b      	bne.n	8008d52 <xQueueGenericCreate+0x2c>
	__asm volatile
 8008d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d3e:	f383 8811 	msr	BASEPRI, r3
 8008d42:	f3bf 8f6f 	isb	sy
 8008d46:	f3bf 8f4f 	dsb	sy
 8008d4a:	613b      	str	r3, [r7, #16]
}
 8008d4c:	bf00      	nop
 8008d4e:	bf00      	nop
 8008d50:	e7fd      	b.n	8008d4e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	68ba      	ldr	r2, [r7, #8]
 8008d56:	fb02 f303 	mul.w	r3, r2, r3
 8008d5a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	3348      	adds	r3, #72	@ 0x48
 8008d60:	4618      	mov	r0, r3
 8008d62:	f002 f8a3 	bl	800aeac <pvPortMalloc>
 8008d66:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d011      	beq.n	8008d92 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	3348      	adds	r3, #72	@ 0x48
 8008d76:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008d80:	79fa      	ldrb	r2, [r7, #7]
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	9300      	str	r3, [sp, #0]
 8008d86:	4613      	mov	r3, r2
 8008d88:	697a      	ldr	r2, [r7, #20]
 8008d8a:	68b9      	ldr	r1, [r7, #8]
 8008d8c:	68f8      	ldr	r0, [r7, #12]
 8008d8e:	f000 f805 	bl	8008d9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008d92:	69bb      	ldr	r3, [r7, #24]
	}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3720      	adds	r7, #32
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	607a      	str	r2, [r7, #4]
 8008da8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d103      	bne.n	8008db8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008db0:	69bb      	ldr	r3, [r7, #24]
 8008db2:	69ba      	ldr	r2, [r7, #24]
 8008db4:	601a      	str	r2, [r3, #0]
 8008db6:	e002      	b.n	8008dbe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	68fa      	ldr	r2, [r7, #12]
 8008dc2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008dc4:	69bb      	ldr	r3, [r7, #24]
 8008dc6:	68ba      	ldr	r2, [r7, #8]
 8008dc8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008dca:	2101      	movs	r1, #1
 8008dcc:	69b8      	ldr	r0, [r7, #24]
 8008dce:	f7ff fec3 	bl	8008b58 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008dd2:	bf00      	nop
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
	...

08008ddc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b08e      	sub	sp, #56	@ 0x38
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	60b9      	str	r1, [r7, #8]
 8008de6:	607a      	str	r2, [r7, #4]
 8008de8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008dea:	2300      	movs	r3, #0
 8008dec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d10b      	bne.n	8008e10 <xQueueGenericSend+0x34>
	__asm volatile
 8008df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dfc:	f383 8811 	msr	BASEPRI, r3
 8008e00:	f3bf 8f6f 	isb	sy
 8008e04:	f3bf 8f4f 	dsb	sy
 8008e08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008e0a:	bf00      	nop
 8008e0c:	bf00      	nop
 8008e0e:	e7fd      	b.n	8008e0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d103      	bne.n	8008e1e <xQueueGenericSend+0x42>
 8008e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d101      	bne.n	8008e22 <xQueueGenericSend+0x46>
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e000      	b.n	8008e24 <xQueueGenericSend+0x48>
 8008e22:	2300      	movs	r3, #0
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d10b      	bne.n	8008e40 <xQueueGenericSend+0x64>
	__asm volatile
 8008e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e2c:	f383 8811 	msr	BASEPRI, r3
 8008e30:	f3bf 8f6f 	isb	sy
 8008e34:	f3bf 8f4f 	dsb	sy
 8008e38:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008e3a:	bf00      	nop
 8008e3c:	bf00      	nop
 8008e3e:	e7fd      	b.n	8008e3c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	2b02      	cmp	r3, #2
 8008e44:	d103      	bne.n	8008e4e <xQueueGenericSend+0x72>
 8008e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d101      	bne.n	8008e52 <xQueueGenericSend+0x76>
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e000      	b.n	8008e54 <xQueueGenericSend+0x78>
 8008e52:	2300      	movs	r3, #0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d10b      	bne.n	8008e70 <xQueueGenericSend+0x94>
	__asm volatile
 8008e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e5c:	f383 8811 	msr	BASEPRI, r3
 8008e60:	f3bf 8f6f 	isb	sy
 8008e64:	f3bf 8f4f 	dsb	sy
 8008e68:	623b      	str	r3, [r7, #32]
}
 8008e6a:	bf00      	nop
 8008e6c:	bf00      	nop
 8008e6e:	e7fd      	b.n	8008e6c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e70:	f001 fba6 	bl	800a5c0 <xTaskGetSchedulerState>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d102      	bne.n	8008e80 <xQueueGenericSend+0xa4>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d101      	bne.n	8008e84 <xQueueGenericSend+0xa8>
 8008e80:	2301      	movs	r3, #1
 8008e82:	e000      	b.n	8008e86 <xQueueGenericSend+0xaa>
 8008e84:	2300      	movs	r3, #0
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d10b      	bne.n	8008ea2 <xQueueGenericSend+0xc6>
	__asm volatile
 8008e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e8e:	f383 8811 	msr	BASEPRI, r3
 8008e92:	f3bf 8f6f 	isb	sy
 8008e96:	f3bf 8f4f 	dsb	sy
 8008e9a:	61fb      	str	r3, [r7, #28]
}
 8008e9c:	bf00      	nop
 8008e9e:	bf00      	nop
 8008ea0:	e7fd      	b.n	8008e9e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ea2:	f001 fee1 	bl	800ac68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d302      	bcc.n	8008eb8 <xQueueGenericSend+0xdc>
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	d129      	bne.n	8008f0c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008eb8:	683a      	ldr	r2, [r7, #0]
 8008eba:	68b9      	ldr	r1, [r7, #8]
 8008ebc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008ebe:	f000 fc6d 	bl	800979c <prvCopyDataToQueue>
 8008ec2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d010      	beq.n	8008eee <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ece:	3324      	adds	r3, #36	@ 0x24
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f001 f9b5 	bl	800a240 <xTaskRemoveFromEventList>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d013      	beq.n	8008f04 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008edc:	4b3f      	ldr	r3, [pc, #252]	@ (8008fdc <xQueueGenericSend+0x200>)
 8008ede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ee2:	601a      	str	r2, [r3, #0]
 8008ee4:	f3bf 8f4f 	dsb	sy
 8008ee8:	f3bf 8f6f 	isb	sy
 8008eec:	e00a      	b.n	8008f04 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d007      	beq.n	8008f04 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008ef4:	4b39      	ldr	r3, [pc, #228]	@ (8008fdc <xQueueGenericSend+0x200>)
 8008ef6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008efa:	601a      	str	r2, [r3, #0]
 8008efc:	f3bf 8f4f 	dsb	sy
 8008f00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008f04:	f001 fee2 	bl	800accc <vPortExitCritical>
				return pdPASS;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e063      	b.n	8008fd4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d103      	bne.n	8008f1a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008f12:	f001 fedb 	bl	800accc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008f16:	2300      	movs	r3, #0
 8008f18:	e05c      	b.n	8008fd4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d106      	bne.n	8008f2e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f20:	f107 0314 	add.w	r3, r7, #20
 8008f24:	4618      	mov	r0, r3
 8008f26:	f001 f9ef 	bl	800a308 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f2e:	f001 fecd 	bl	800accc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f32:	f000 ff9d 	bl	8009e70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f36:	f001 fe97 	bl	800ac68 <vPortEnterCritical>
 8008f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f40:	b25b      	sxtb	r3, r3
 8008f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f46:	d103      	bne.n	8008f50 <xQueueGenericSend+0x174>
 8008f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f52:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f56:	b25b      	sxtb	r3, r3
 8008f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f5c:	d103      	bne.n	8008f66 <xQueueGenericSend+0x18a>
 8008f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f60:	2200      	movs	r2, #0
 8008f62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008f66:	f001 feb1 	bl	800accc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f6a:	1d3a      	adds	r2, r7, #4
 8008f6c:	f107 0314 	add.w	r3, r7, #20
 8008f70:	4611      	mov	r1, r2
 8008f72:	4618      	mov	r0, r3
 8008f74:	f001 f9de 	bl	800a334 <xTaskCheckForTimeOut>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d124      	bne.n	8008fc8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008f7e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f80:	f000 fd04 	bl	800998c <prvIsQueueFull>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d018      	beq.n	8008fbc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f8c:	3310      	adds	r3, #16
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	4611      	mov	r1, r2
 8008f92:	4618      	mov	r0, r3
 8008f94:	f001 f92e 	bl	800a1f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008f98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f9a:	f000 fc8f 	bl	80098bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008f9e:	f000 ff75 	bl	8009e8c <xTaskResumeAll>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	f47f af7c 	bne.w	8008ea2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008faa:	4b0c      	ldr	r3, [pc, #48]	@ (8008fdc <xQueueGenericSend+0x200>)
 8008fac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fb0:	601a      	str	r2, [r3, #0]
 8008fb2:	f3bf 8f4f 	dsb	sy
 8008fb6:	f3bf 8f6f 	isb	sy
 8008fba:	e772      	b.n	8008ea2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008fbc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008fbe:	f000 fc7d 	bl	80098bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008fc2:	f000 ff63 	bl	8009e8c <xTaskResumeAll>
 8008fc6:	e76c      	b.n	8008ea2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008fc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008fca:	f000 fc77 	bl	80098bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008fce:	f000 ff5d 	bl	8009e8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008fd2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3738      	adds	r7, #56	@ 0x38
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	e000ed04 	.word	0xe000ed04

08008fe0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b090      	sub	sp, #64	@ 0x40
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	607a      	str	r2, [r7, #4]
 8008fec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d10b      	bne.n	8009010 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ffc:	f383 8811 	msr	BASEPRI, r3
 8009000:	f3bf 8f6f 	isb	sy
 8009004:	f3bf 8f4f 	dsb	sy
 8009008:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800900a:	bf00      	nop
 800900c:	bf00      	nop
 800900e:	e7fd      	b.n	800900c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d103      	bne.n	800901e <xQueueGenericSendFromISR+0x3e>
 8009016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800901a:	2b00      	cmp	r3, #0
 800901c:	d101      	bne.n	8009022 <xQueueGenericSendFromISR+0x42>
 800901e:	2301      	movs	r3, #1
 8009020:	e000      	b.n	8009024 <xQueueGenericSendFromISR+0x44>
 8009022:	2300      	movs	r3, #0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d10b      	bne.n	8009040 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800902c:	f383 8811 	msr	BASEPRI, r3
 8009030:	f3bf 8f6f 	isb	sy
 8009034:	f3bf 8f4f 	dsb	sy
 8009038:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800903a:	bf00      	nop
 800903c:	bf00      	nop
 800903e:	e7fd      	b.n	800903c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	2b02      	cmp	r3, #2
 8009044:	d103      	bne.n	800904e <xQueueGenericSendFromISR+0x6e>
 8009046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800904a:	2b01      	cmp	r3, #1
 800904c:	d101      	bne.n	8009052 <xQueueGenericSendFromISR+0x72>
 800904e:	2301      	movs	r3, #1
 8009050:	e000      	b.n	8009054 <xQueueGenericSendFromISR+0x74>
 8009052:	2300      	movs	r3, #0
 8009054:	2b00      	cmp	r3, #0
 8009056:	d10b      	bne.n	8009070 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800905c:	f383 8811 	msr	BASEPRI, r3
 8009060:	f3bf 8f6f 	isb	sy
 8009064:	f3bf 8f4f 	dsb	sy
 8009068:	623b      	str	r3, [r7, #32]
}
 800906a:	bf00      	nop
 800906c:	bf00      	nop
 800906e:	e7fd      	b.n	800906c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009070:	f001 feda 	bl	800ae28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009074:	f3ef 8211 	mrs	r2, BASEPRI
 8009078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800907c:	f383 8811 	msr	BASEPRI, r3
 8009080:	f3bf 8f6f 	isb	sy
 8009084:	f3bf 8f4f 	dsb	sy
 8009088:	61fa      	str	r2, [r7, #28]
 800908a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800908c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800908e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009092:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009098:	429a      	cmp	r2, r3
 800909a:	d302      	bcc.n	80090a2 <xQueueGenericSendFromISR+0xc2>
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	2b02      	cmp	r3, #2
 80090a0:	d12f      	bne.n	8009102 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80090a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80090a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80090ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80090b2:	683a      	ldr	r2, [r7, #0]
 80090b4:	68b9      	ldr	r1, [r7, #8]
 80090b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80090b8:	f000 fb70 	bl	800979c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80090bc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80090c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090c4:	d112      	bne.n	80090ec <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d016      	beq.n	80090fc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090d0:	3324      	adds	r3, #36	@ 0x24
 80090d2:	4618      	mov	r0, r3
 80090d4:	f001 f8b4 	bl	800a240 <xTaskRemoveFromEventList>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00e      	beq.n	80090fc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d00b      	beq.n	80090fc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2201      	movs	r2, #1
 80090e8:	601a      	str	r2, [r3, #0]
 80090ea:	e007      	b.n	80090fc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80090ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80090f0:	3301      	adds	r3, #1
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	b25a      	sxtb	r2, r3
 80090f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80090fc:	2301      	movs	r3, #1
 80090fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009100:	e001      	b.n	8009106 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009102:	2300      	movs	r3, #0
 8009104:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009108:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009110:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009114:	4618      	mov	r0, r3
 8009116:	3740      	adds	r7, #64	@ 0x40
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b08e      	sub	sp, #56	@ 0x38
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800912a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800912c:	2b00      	cmp	r3, #0
 800912e:	d10b      	bne.n	8009148 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8009130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009134:	f383 8811 	msr	BASEPRI, r3
 8009138:	f3bf 8f6f 	isb	sy
 800913c:	f3bf 8f4f 	dsb	sy
 8009140:	623b      	str	r3, [r7, #32]
}
 8009142:	bf00      	nop
 8009144:	bf00      	nop
 8009146:	e7fd      	b.n	8009144 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800914a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800914c:	2b00      	cmp	r3, #0
 800914e:	d00b      	beq.n	8009168 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8009150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009154:	f383 8811 	msr	BASEPRI, r3
 8009158:	f3bf 8f6f 	isb	sy
 800915c:	f3bf 8f4f 	dsb	sy
 8009160:	61fb      	str	r3, [r7, #28]
}
 8009162:	bf00      	nop
 8009164:	bf00      	nop
 8009166:	e7fd      	b.n	8009164 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d103      	bne.n	8009178 <xQueueGiveFromISR+0x5c>
 8009170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d101      	bne.n	800917c <xQueueGiveFromISR+0x60>
 8009178:	2301      	movs	r3, #1
 800917a:	e000      	b.n	800917e <xQueueGiveFromISR+0x62>
 800917c:	2300      	movs	r3, #0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d10b      	bne.n	800919a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8009182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009186:	f383 8811 	msr	BASEPRI, r3
 800918a:	f3bf 8f6f 	isb	sy
 800918e:	f3bf 8f4f 	dsb	sy
 8009192:	61bb      	str	r3, [r7, #24]
}
 8009194:	bf00      	nop
 8009196:	bf00      	nop
 8009198:	e7fd      	b.n	8009196 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800919a:	f001 fe45 	bl	800ae28 <vPortValidateInterruptPriority>
	__asm volatile
 800919e:	f3ef 8211 	mrs	r2, BASEPRI
 80091a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091a6:	f383 8811 	msr	BASEPRI, r3
 80091aa:	f3bf 8f6f 	isb	sy
 80091ae:	f3bf 8f4f 	dsb	sy
 80091b2:	617a      	str	r2, [r7, #20]
 80091b4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80091b6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80091b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091be:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80091c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d22b      	bcs.n	8009222 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80091ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80091d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80091d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091d6:	1c5a      	adds	r2, r3, #1
 80091d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091da:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80091dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80091e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e4:	d112      	bne.n	800920c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d016      	beq.n	800921c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f0:	3324      	adds	r3, #36	@ 0x24
 80091f2:	4618      	mov	r0, r3
 80091f4:	f001 f824 	bl	800a240 <xTaskRemoveFromEventList>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d00e      	beq.n	800921c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d00b      	beq.n	800921c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	2201      	movs	r2, #1
 8009208:	601a      	str	r2, [r3, #0]
 800920a:	e007      	b.n	800921c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800920c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009210:	3301      	adds	r3, #1
 8009212:	b2db      	uxtb	r3, r3
 8009214:	b25a      	sxtb	r2, r3
 8009216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009218:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800921c:	2301      	movs	r3, #1
 800921e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009220:	e001      	b.n	8009226 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009222:	2300      	movs	r3, #0
 8009224:	637b      	str	r3, [r7, #52]	@ 0x34
 8009226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009228:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f383 8811 	msr	BASEPRI, r3
}
 8009230:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009234:	4618      	mov	r0, r3
 8009236:	3738      	adds	r7, #56	@ 0x38
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b08c      	sub	sp, #48	@ 0x30
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009248:	2300      	movs	r3, #0
 800924a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009252:	2b00      	cmp	r3, #0
 8009254:	d10b      	bne.n	800926e <xQueueReceive+0x32>
	__asm volatile
 8009256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800925a:	f383 8811 	msr	BASEPRI, r3
 800925e:	f3bf 8f6f 	isb	sy
 8009262:	f3bf 8f4f 	dsb	sy
 8009266:	623b      	str	r3, [r7, #32]
}
 8009268:	bf00      	nop
 800926a:	bf00      	nop
 800926c:	e7fd      	b.n	800926a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d103      	bne.n	800927c <xQueueReceive+0x40>
 8009274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009278:	2b00      	cmp	r3, #0
 800927a:	d101      	bne.n	8009280 <xQueueReceive+0x44>
 800927c:	2301      	movs	r3, #1
 800927e:	e000      	b.n	8009282 <xQueueReceive+0x46>
 8009280:	2300      	movs	r3, #0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d10b      	bne.n	800929e <xQueueReceive+0x62>
	__asm volatile
 8009286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800928a:	f383 8811 	msr	BASEPRI, r3
 800928e:	f3bf 8f6f 	isb	sy
 8009292:	f3bf 8f4f 	dsb	sy
 8009296:	61fb      	str	r3, [r7, #28]
}
 8009298:	bf00      	nop
 800929a:	bf00      	nop
 800929c:	e7fd      	b.n	800929a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800929e:	f001 f98f 	bl	800a5c0 <xTaskGetSchedulerState>
 80092a2:	4603      	mov	r3, r0
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d102      	bne.n	80092ae <xQueueReceive+0x72>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d101      	bne.n	80092b2 <xQueueReceive+0x76>
 80092ae:	2301      	movs	r3, #1
 80092b0:	e000      	b.n	80092b4 <xQueueReceive+0x78>
 80092b2:	2300      	movs	r3, #0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d10b      	bne.n	80092d0 <xQueueReceive+0x94>
	__asm volatile
 80092b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092bc:	f383 8811 	msr	BASEPRI, r3
 80092c0:	f3bf 8f6f 	isb	sy
 80092c4:	f3bf 8f4f 	dsb	sy
 80092c8:	61bb      	str	r3, [r7, #24]
}
 80092ca:	bf00      	nop
 80092cc:	bf00      	nop
 80092ce:	e7fd      	b.n	80092cc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80092d0:	f001 fcca 	bl	800ac68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092d8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d01f      	beq.n	8009320 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80092e0:	68b9      	ldr	r1, [r7, #8]
 80092e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092e4:	f000 fac4 	bl	8009870 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80092e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ea:	1e5a      	subs	r2, r3, #1
 80092ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ee:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092f2:	691b      	ldr	r3, [r3, #16]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00f      	beq.n	8009318 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092fa:	3310      	adds	r3, #16
 80092fc:	4618      	mov	r0, r3
 80092fe:	f000 ff9f 	bl	800a240 <xTaskRemoveFromEventList>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d007      	beq.n	8009318 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009308:	4b3c      	ldr	r3, [pc, #240]	@ (80093fc <xQueueReceive+0x1c0>)
 800930a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800930e:	601a      	str	r2, [r3, #0]
 8009310:	f3bf 8f4f 	dsb	sy
 8009314:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009318:	f001 fcd8 	bl	800accc <vPortExitCritical>
				return pdPASS;
 800931c:	2301      	movs	r3, #1
 800931e:	e069      	b.n	80093f4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d103      	bne.n	800932e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009326:	f001 fcd1 	bl	800accc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800932a:	2300      	movs	r3, #0
 800932c:	e062      	b.n	80093f4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800932e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009330:	2b00      	cmp	r3, #0
 8009332:	d106      	bne.n	8009342 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009334:	f107 0310 	add.w	r3, r7, #16
 8009338:	4618      	mov	r0, r3
 800933a:	f000 ffe5 	bl	800a308 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800933e:	2301      	movs	r3, #1
 8009340:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009342:	f001 fcc3 	bl	800accc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009346:	f000 fd93 	bl	8009e70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800934a:	f001 fc8d 	bl	800ac68 <vPortEnterCritical>
 800934e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009350:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009354:	b25b      	sxtb	r3, r3
 8009356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800935a:	d103      	bne.n	8009364 <xQueueReceive+0x128>
 800935c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800935e:	2200      	movs	r2, #0
 8009360:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009366:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800936a:	b25b      	sxtb	r3, r3
 800936c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009370:	d103      	bne.n	800937a <xQueueReceive+0x13e>
 8009372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009374:	2200      	movs	r2, #0
 8009376:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800937a:	f001 fca7 	bl	800accc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800937e:	1d3a      	adds	r2, r7, #4
 8009380:	f107 0310 	add.w	r3, r7, #16
 8009384:	4611      	mov	r1, r2
 8009386:	4618      	mov	r0, r3
 8009388:	f000 ffd4 	bl	800a334 <xTaskCheckForTimeOut>
 800938c:	4603      	mov	r3, r0
 800938e:	2b00      	cmp	r3, #0
 8009390:	d123      	bne.n	80093da <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009392:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009394:	f000 fae4 	bl	8009960 <prvIsQueueEmpty>
 8009398:	4603      	mov	r3, r0
 800939a:	2b00      	cmp	r3, #0
 800939c:	d017      	beq.n	80093ce <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800939e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a0:	3324      	adds	r3, #36	@ 0x24
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	4611      	mov	r1, r2
 80093a6:	4618      	mov	r0, r3
 80093a8:	f000 ff24 	bl	800a1f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80093ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093ae:	f000 fa85 	bl	80098bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80093b2:	f000 fd6b 	bl	8009e8c <xTaskResumeAll>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d189      	bne.n	80092d0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80093bc:	4b0f      	ldr	r3, [pc, #60]	@ (80093fc <xQueueReceive+0x1c0>)
 80093be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093c2:	601a      	str	r2, [r3, #0]
 80093c4:	f3bf 8f4f 	dsb	sy
 80093c8:	f3bf 8f6f 	isb	sy
 80093cc:	e780      	b.n	80092d0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80093ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093d0:	f000 fa74 	bl	80098bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80093d4:	f000 fd5a 	bl	8009e8c <xTaskResumeAll>
 80093d8:	e77a      	b.n	80092d0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80093da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093dc:	f000 fa6e 	bl	80098bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80093e0:	f000 fd54 	bl	8009e8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093e6:	f000 fabb 	bl	8009960 <prvIsQueueEmpty>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	f43f af6f 	beq.w	80092d0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80093f2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3730      	adds	r7, #48	@ 0x30
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	e000ed04 	.word	0xe000ed04

08009400 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b08e      	sub	sp, #56	@ 0x38
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800940a:	2300      	movs	r3, #0
 800940c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009412:	2300      	movs	r3, #0
 8009414:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009418:	2b00      	cmp	r3, #0
 800941a:	d10b      	bne.n	8009434 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800941c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009420:	f383 8811 	msr	BASEPRI, r3
 8009424:	f3bf 8f6f 	isb	sy
 8009428:	f3bf 8f4f 	dsb	sy
 800942c:	623b      	str	r3, [r7, #32]
}
 800942e:	bf00      	nop
 8009430:	bf00      	nop
 8009432:	e7fd      	b.n	8009430 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009438:	2b00      	cmp	r3, #0
 800943a:	d00b      	beq.n	8009454 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800943c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009440:	f383 8811 	msr	BASEPRI, r3
 8009444:	f3bf 8f6f 	isb	sy
 8009448:	f3bf 8f4f 	dsb	sy
 800944c:	61fb      	str	r3, [r7, #28]
}
 800944e:	bf00      	nop
 8009450:	bf00      	nop
 8009452:	e7fd      	b.n	8009450 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009454:	f001 f8b4 	bl	800a5c0 <xTaskGetSchedulerState>
 8009458:	4603      	mov	r3, r0
 800945a:	2b00      	cmp	r3, #0
 800945c:	d102      	bne.n	8009464 <xQueueSemaphoreTake+0x64>
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d101      	bne.n	8009468 <xQueueSemaphoreTake+0x68>
 8009464:	2301      	movs	r3, #1
 8009466:	e000      	b.n	800946a <xQueueSemaphoreTake+0x6a>
 8009468:	2300      	movs	r3, #0
 800946a:	2b00      	cmp	r3, #0
 800946c:	d10b      	bne.n	8009486 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800946e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009472:	f383 8811 	msr	BASEPRI, r3
 8009476:	f3bf 8f6f 	isb	sy
 800947a:	f3bf 8f4f 	dsb	sy
 800947e:	61bb      	str	r3, [r7, #24]
}
 8009480:	bf00      	nop
 8009482:	bf00      	nop
 8009484:	e7fd      	b.n	8009482 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009486:	f001 fbef 	bl	800ac68 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800948a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800948c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800948e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009492:	2b00      	cmp	r3, #0
 8009494:	d024      	beq.n	80094e0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009498:	1e5a      	subs	r2, r3, #1
 800949a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800949c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800949e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d104      	bne.n	80094b0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80094a6:	f001 fa37 	bl	800a918 <pvTaskIncrementMutexHeldCount>
 80094aa:	4602      	mov	r2, r0
 80094ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ae:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094b2:	691b      	ldr	r3, [r3, #16]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00f      	beq.n	80094d8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ba:	3310      	adds	r3, #16
 80094bc:	4618      	mov	r0, r3
 80094be:	f000 febf 	bl	800a240 <xTaskRemoveFromEventList>
 80094c2:	4603      	mov	r3, r0
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d007      	beq.n	80094d8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80094c8:	4b54      	ldr	r3, [pc, #336]	@ (800961c <xQueueSemaphoreTake+0x21c>)
 80094ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094ce:	601a      	str	r2, [r3, #0]
 80094d0:	f3bf 8f4f 	dsb	sy
 80094d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80094d8:	f001 fbf8 	bl	800accc <vPortExitCritical>
				return pdPASS;
 80094dc:	2301      	movs	r3, #1
 80094de:	e098      	b.n	8009612 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d112      	bne.n	800950c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80094e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d00b      	beq.n	8009504 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80094ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094f0:	f383 8811 	msr	BASEPRI, r3
 80094f4:	f3bf 8f6f 	isb	sy
 80094f8:	f3bf 8f4f 	dsb	sy
 80094fc:	617b      	str	r3, [r7, #20]
}
 80094fe:	bf00      	nop
 8009500:	bf00      	nop
 8009502:	e7fd      	b.n	8009500 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009504:	f001 fbe2 	bl	800accc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009508:	2300      	movs	r3, #0
 800950a:	e082      	b.n	8009612 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800950c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800950e:	2b00      	cmp	r3, #0
 8009510:	d106      	bne.n	8009520 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009512:	f107 030c 	add.w	r3, r7, #12
 8009516:	4618      	mov	r0, r3
 8009518:	f000 fef6 	bl	800a308 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800951c:	2301      	movs	r3, #1
 800951e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009520:	f001 fbd4 	bl	800accc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009524:	f000 fca4 	bl	8009e70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009528:	f001 fb9e 	bl	800ac68 <vPortEnterCritical>
 800952c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800952e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009532:	b25b      	sxtb	r3, r3
 8009534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009538:	d103      	bne.n	8009542 <xQueueSemaphoreTake+0x142>
 800953a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800953c:	2200      	movs	r2, #0
 800953e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009544:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009548:	b25b      	sxtb	r3, r3
 800954a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800954e:	d103      	bne.n	8009558 <xQueueSemaphoreTake+0x158>
 8009550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009552:	2200      	movs	r2, #0
 8009554:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009558:	f001 fbb8 	bl	800accc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800955c:	463a      	mov	r2, r7
 800955e:	f107 030c 	add.w	r3, r7, #12
 8009562:	4611      	mov	r1, r2
 8009564:	4618      	mov	r0, r3
 8009566:	f000 fee5 	bl	800a334 <xTaskCheckForTimeOut>
 800956a:	4603      	mov	r3, r0
 800956c:	2b00      	cmp	r3, #0
 800956e:	d132      	bne.n	80095d6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009570:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009572:	f000 f9f5 	bl	8009960 <prvIsQueueEmpty>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d026      	beq.n	80095ca <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800957c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d109      	bne.n	8009598 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009584:	f001 fb70 	bl	800ac68 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	4618      	mov	r0, r3
 800958e:	f001 f835 	bl	800a5fc <xTaskPriorityInherit>
 8009592:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009594:	f001 fb9a 	bl	800accc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800959a:	3324      	adds	r3, #36	@ 0x24
 800959c:	683a      	ldr	r2, [r7, #0]
 800959e:	4611      	mov	r1, r2
 80095a0:	4618      	mov	r0, r3
 80095a2:	f000 fe27 	bl	800a1f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80095a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80095a8:	f000 f988 	bl	80098bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80095ac:	f000 fc6e 	bl	8009e8c <xTaskResumeAll>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f47f af67 	bne.w	8009486 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80095b8:	4b18      	ldr	r3, [pc, #96]	@ (800961c <xQueueSemaphoreTake+0x21c>)
 80095ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095be:	601a      	str	r2, [r3, #0]
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	f3bf 8f6f 	isb	sy
 80095c8:	e75d      	b.n	8009486 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80095ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80095cc:	f000 f976 	bl	80098bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80095d0:	f000 fc5c 	bl	8009e8c <xTaskResumeAll>
 80095d4:	e757      	b.n	8009486 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80095d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80095d8:	f000 f970 	bl	80098bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80095dc:	f000 fc56 	bl	8009e8c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80095e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80095e2:	f000 f9bd 	bl	8009960 <prvIsQueueEmpty>
 80095e6:	4603      	mov	r3, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	f43f af4c 	beq.w	8009486 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80095ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d00d      	beq.n	8009610 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80095f4:	f001 fb38 	bl	800ac68 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80095f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80095fa:	f000 f8b7 	bl	800976c <prvGetDisinheritPriorityAfterTimeout>
 80095fe:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009606:	4618      	mov	r0, r3
 8009608:	f001 f8f6 	bl	800a7f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800960c:	f001 fb5e 	bl	800accc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009610:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009612:	4618      	mov	r0, r3
 8009614:	3738      	adds	r7, #56	@ 0x38
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	e000ed04 	.word	0xe000ed04

08009620 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b08e      	sub	sp, #56	@ 0x38
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009632:	2b00      	cmp	r3, #0
 8009634:	d10b      	bne.n	800964e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8009636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800963a:	f383 8811 	msr	BASEPRI, r3
 800963e:	f3bf 8f6f 	isb	sy
 8009642:	f3bf 8f4f 	dsb	sy
 8009646:	623b      	str	r3, [r7, #32]
}
 8009648:	bf00      	nop
 800964a:	bf00      	nop
 800964c:	e7fd      	b.n	800964a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d103      	bne.n	800965c <xQueueReceiveFromISR+0x3c>
 8009654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009658:	2b00      	cmp	r3, #0
 800965a:	d101      	bne.n	8009660 <xQueueReceiveFromISR+0x40>
 800965c:	2301      	movs	r3, #1
 800965e:	e000      	b.n	8009662 <xQueueReceiveFromISR+0x42>
 8009660:	2300      	movs	r3, #0
 8009662:	2b00      	cmp	r3, #0
 8009664:	d10b      	bne.n	800967e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8009666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800966a:	f383 8811 	msr	BASEPRI, r3
 800966e:	f3bf 8f6f 	isb	sy
 8009672:	f3bf 8f4f 	dsb	sy
 8009676:	61fb      	str	r3, [r7, #28]
}
 8009678:	bf00      	nop
 800967a:	bf00      	nop
 800967c:	e7fd      	b.n	800967a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800967e:	f001 fbd3 	bl	800ae28 <vPortValidateInterruptPriority>
	__asm volatile
 8009682:	f3ef 8211 	mrs	r2, BASEPRI
 8009686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800968a:	f383 8811 	msr	BASEPRI, r3
 800968e:	f3bf 8f6f 	isb	sy
 8009692:	f3bf 8f4f 	dsb	sy
 8009696:	61ba      	str	r2, [r7, #24]
 8009698:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800969a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800969c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800969e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096a2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80096a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d02f      	beq.n	800970a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80096aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80096b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80096b4:	68b9      	ldr	r1, [r7, #8]
 80096b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80096b8:	f000 f8da 	bl	8009870 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80096bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096be:	1e5a      	subs	r2, r3, #1
 80096c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80096c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80096c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096cc:	d112      	bne.n	80096f4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80096ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d0:	691b      	ldr	r3, [r3, #16]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d016      	beq.n	8009704 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d8:	3310      	adds	r3, #16
 80096da:	4618      	mov	r0, r3
 80096dc:	f000 fdb0 	bl	800a240 <xTaskRemoveFromEventList>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00e      	beq.n	8009704 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00b      	beq.n	8009704 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	601a      	str	r2, [r3, #0]
 80096f2:	e007      	b.n	8009704 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80096f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80096f8:	3301      	adds	r3, #1
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	b25a      	sxtb	r2, r3
 80096fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009700:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009704:	2301      	movs	r3, #1
 8009706:	637b      	str	r3, [r7, #52]	@ 0x34
 8009708:	e001      	b.n	800970e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800970a:	2300      	movs	r3, #0
 800970c:	637b      	str	r3, [r7, #52]	@ 0x34
 800970e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009710:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	f383 8811 	msr	BASEPRI, r3
}
 8009718:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800971a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800971c:	4618      	mov	r0, r3
 800971e:	3738      	adds	r7, #56	@ 0x38
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d10b      	bne.n	800974e <vQueueDelete+0x2a>
	__asm volatile
 8009736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800973a:	f383 8811 	msr	BASEPRI, r3
 800973e:	f3bf 8f6f 	isb	sy
 8009742:	f3bf 8f4f 	dsb	sy
 8009746:	60bb      	str	r3, [r7, #8]
}
 8009748:	bf00      	nop
 800974a:	bf00      	nop
 800974c:	e7fd      	b.n	800974a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800974e:	68f8      	ldr	r0, [r7, #12]
 8009750:	f000 f934 	bl	80099bc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800975a:	2b00      	cmp	r3, #0
 800975c:	d102      	bne.n	8009764 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800975e:	68f8      	ldr	r0, [r7, #12]
 8009760:	f001 fc72 	bl	800b048 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009764:	bf00      	nop
 8009766:	3710      	adds	r7, #16
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800976c:	b480      	push	{r7}
 800976e:	b085      	sub	sp, #20
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009778:	2b00      	cmp	r3, #0
 800977a:	d006      	beq.n	800978a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f1c3 0307 	rsb	r3, r3, #7
 8009786:	60fb      	str	r3, [r7, #12]
 8009788:	e001      	b.n	800978e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800978a:	2300      	movs	r3, #0
 800978c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800978e:	68fb      	ldr	r3, [r7, #12]
	}
 8009790:	4618      	mov	r0, r3
 8009792:	3714      	adds	r7, #20
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr

0800979c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b086      	sub	sp, #24
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80097a8:	2300      	movs	r3, #0
 80097aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d10d      	bne.n	80097d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d14d      	bne.n	800985e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	4618      	mov	r0, r3
 80097c8:	f000 ff8e 	bl	800a6e8 <xTaskPriorityDisinherit>
 80097cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2200      	movs	r2, #0
 80097d2:	609a      	str	r2, [r3, #8]
 80097d4:	e043      	b.n	800985e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d119      	bne.n	8009810 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6858      	ldr	r0, [r3, #4]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097e4:	461a      	mov	r2, r3
 80097e6:	68b9      	ldr	r1, [r7, #8]
 80097e8:	f001 fed6 	bl	800b598 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	685a      	ldr	r2, [r3, #4]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097f4:	441a      	add	r2, r3
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	685a      	ldr	r2, [r3, #4]
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	429a      	cmp	r2, r3
 8009804:	d32b      	bcc.n	800985e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	605a      	str	r2, [r3, #4]
 800980e:	e026      	b.n	800985e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	68d8      	ldr	r0, [r3, #12]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009818:	461a      	mov	r2, r3
 800981a:	68b9      	ldr	r1, [r7, #8]
 800981c:	f001 febc 	bl	800b598 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	68da      	ldr	r2, [r3, #12]
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009828:	425b      	negs	r3, r3
 800982a:	441a      	add	r2, r3
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	68da      	ldr	r2, [r3, #12]
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	429a      	cmp	r2, r3
 800983a:	d207      	bcs.n	800984c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	689a      	ldr	r2, [r3, #8]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009844:	425b      	negs	r3, r3
 8009846:	441a      	add	r2, r3
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2b02      	cmp	r3, #2
 8009850:	d105      	bne.n	800985e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d002      	beq.n	800985e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	3b01      	subs	r3, #1
 800985c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	1c5a      	adds	r2, r3, #1
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009866:	697b      	ldr	r3, [r7, #20]
}
 8009868:	4618      	mov	r0, r3
 800986a:	3718      	adds	r7, #24
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800987e:	2b00      	cmp	r3, #0
 8009880:	d018      	beq.n	80098b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	68da      	ldr	r2, [r3, #12]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800988a:	441a      	add	r2, r3
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	68da      	ldr	r2, [r3, #12]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	429a      	cmp	r2, r3
 800989a:	d303      	bcc.n	80098a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	68d9      	ldr	r1, [r3, #12]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098ac:	461a      	mov	r2, r3
 80098ae:	6838      	ldr	r0, [r7, #0]
 80098b0:	f001 fe72 	bl	800b598 <memcpy>
	}
}
 80098b4:	bf00      	nop
 80098b6:	3708      	adds	r7, #8
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80098c4:	f001 f9d0 	bl	800ac68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80098ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80098d0:	e011      	b.n	80098f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d012      	beq.n	8009900 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	3324      	adds	r3, #36	@ 0x24
 80098de:	4618      	mov	r0, r3
 80098e0:	f000 fcae 	bl	800a240 <xTaskRemoveFromEventList>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d001      	beq.n	80098ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80098ea:	f000 fd87 	bl	800a3fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80098ee:	7bfb      	ldrb	r3, [r7, #15]
 80098f0:	3b01      	subs	r3, #1
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80098f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	dce9      	bgt.n	80098d2 <prvUnlockQueue+0x16>
 80098fe:	e000      	b.n	8009902 <prvUnlockQueue+0x46>
					break;
 8009900:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	22ff      	movs	r2, #255	@ 0xff
 8009906:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800990a:	f001 f9df 	bl	800accc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800990e:	f001 f9ab 	bl	800ac68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009918:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800991a:	e011      	b.n	8009940 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	691b      	ldr	r3, [r3, #16]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d012      	beq.n	800994a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	3310      	adds	r3, #16
 8009928:	4618      	mov	r0, r3
 800992a:	f000 fc89 	bl	800a240 <xTaskRemoveFromEventList>
 800992e:	4603      	mov	r3, r0
 8009930:	2b00      	cmp	r3, #0
 8009932:	d001      	beq.n	8009938 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009934:	f000 fd62 	bl	800a3fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009938:	7bbb      	ldrb	r3, [r7, #14]
 800993a:	3b01      	subs	r3, #1
 800993c:	b2db      	uxtb	r3, r3
 800993e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009940:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009944:	2b00      	cmp	r3, #0
 8009946:	dce9      	bgt.n	800991c <prvUnlockQueue+0x60>
 8009948:	e000      	b.n	800994c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800994a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	22ff      	movs	r2, #255	@ 0xff
 8009950:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009954:	f001 f9ba 	bl	800accc <vPortExitCritical>
}
 8009958:	bf00      	nop
 800995a:	3710      	adds	r7, #16
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009968:	f001 f97e 	bl	800ac68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009970:	2b00      	cmp	r3, #0
 8009972:	d102      	bne.n	800997a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009974:	2301      	movs	r3, #1
 8009976:	60fb      	str	r3, [r7, #12]
 8009978:	e001      	b.n	800997e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800997a:	2300      	movs	r3, #0
 800997c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800997e:	f001 f9a5 	bl	800accc <vPortExitCritical>

	return xReturn;
 8009982:	68fb      	ldr	r3, [r7, #12]
}
 8009984:	4618      	mov	r0, r3
 8009986:	3710      	adds	r7, #16
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009994:	f001 f968 	bl	800ac68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d102      	bne.n	80099aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80099a4:	2301      	movs	r3, #1
 80099a6:	60fb      	str	r3, [r7, #12]
 80099a8:	e001      	b.n	80099ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80099aa:	2300      	movs	r3, #0
 80099ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80099ae:	f001 f98d 	bl	800accc <vPortExitCritical>

	return xReturn;
 80099b2:	68fb      	ldr	r3, [r7, #12]
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3710      	adds	r7, #16
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80099bc:	b480      	push	{r7}
 80099be:	b085      	sub	sp, #20
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80099c4:	2300      	movs	r3, #0
 80099c6:	60fb      	str	r3, [r7, #12]
 80099c8:	e016      	b.n	80099f8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80099ca:	4a10      	ldr	r2, [pc, #64]	@ (8009a0c <vQueueUnregisterQueue+0x50>)
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	00db      	lsls	r3, r3, #3
 80099d0:	4413      	add	r3, r2
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	687a      	ldr	r2, [r7, #4]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d10b      	bne.n	80099f2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80099da:	4a0c      	ldr	r2, [pc, #48]	@ (8009a0c <vQueueUnregisterQueue+0x50>)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2100      	movs	r1, #0
 80099e0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80099e4:	4a09      	ldr	r2, [pc, #36]	@ (8009a0c <vQueueUnregisterQueue+0x50>)
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	00db      	lsls	r3, r3, #3
 80099ea:	4413      	add	r3, r2
 80099ec:	2200      	movs	r2, #0
 80099ee:	605a      	str	r2, [r3, #4]
				break;
 80099f0:	e006      	b.n	8009a00 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	3301      	adds	r3, #1
 80099f6:	60fb      	str	r3, [r7, #12]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2b07      	cmp	r3, #7
 80099fc:	d9e5      	bls.n	80099ca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80099fe:	bf00      	nop
 8009a00:	bf00      	nop
 8009a02:	3714      	adds	r7, #20
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr
 8009a0c:	20000584 	.word	0x20000584

08009a10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b08e      	sub	sp, #56	@ 0x38
 8009a14:	af04      	add	r7, sp, #16
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	60b9      	str	r1, [r7, #8]
 8009a1a:	607a      	str	r2, [r7, #4]
 8009a1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009a1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d10b      	bne.n	8009a3c <xTaskCreateStatic+0x2c>
	__asm volatile
 8009a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a28:	f383 8811 	msr	BASEPRI, r3
 8009a2c:	f3bf 8f6f 	isb	sy
 8009a30:	f3bf 8f4f 	dsb	sy
 8009a34:	623b      	str	r3, [r7, #32]
}
 8009a36:	bf00      	nop
 8009a38:	bf00      	nop
 8009a3a:	e7fd      	b.n	8009a38 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d10b      	bne.n	8009a5a <xTaskCreateStatic+0x4a>
	__asm volatile
 8009a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a46:	f383 8811 	msr	BASEPRI, r3
 8009a4a:	f3bf 8f6f 	isb	sy
 8009a4e:	f3bf 8f4f 	dsb	sy
 8009a52:	61fb      	str	r3, [r7, #28]
}
 8009a54:	bf00      	nop
 8009a56:	bf00      	nop
 8009a58:	e7fd      	b.n	8009a56 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009a5a:	2354      	movs	r3, #84	@ 0x54
 8009a5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	2b54      	cmp	r3, #84	@ 0x54
 8009a62:	d00b      	beq.n	8009a7c <xTaskCreateStatic+0x6c>
	__asm volatile
 8009a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a68:	f383 8811 	msr	BASEPRI, r3
 8009a6c:	f3bf 8f6f 	isb	sy
 8009a70:	f3bf 8f4f 	dsb	sy
 8009a74:	61bb      	str	r3, [r7, #24]
}
 8009a76:	bf00      	nop
 8009a78:	bf00      	nop
 8009a7a:	e7fd      	b.n	8009a78 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009a7c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d01e      	beq.n	8009ac2 <xTaskCreateStatic+0xb2>
 8009a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d01b      	beq.n	8009ac2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a8c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009a92:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a96:	2202      	movs	r2, #2
 8009a98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	9303      	str	r3, [sp, #12]
 8009aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa2:	9302      	str	r3, [sp, #8]
 8009aa4:	f107 0314 	add.w	r3, r7, #20
 8009aa8:	9301      	str	r3, [sp, #4]
 8009aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aac:	9300      	str	r3, [sp, #0]
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	687a      	ldr	r2, [r7, #4]
 8009ab2:	68b9      	ldr	r1, [r7, #8]
 8009ab4:	68f8      	ldr	r0, [r7, #12]
 8009ab6:	f000 f850 	bl	8009b5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009aba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009abc:	f000 f8d6 	bl	8009c6c <prvAddNewTaskToReadyList>
 8009ac0:	e001      	b.n	8009ac6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009ac6:	697b      	ldr	r3, [r7, #20]
	}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3728      	adds	r7, #40	@ 0x28
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b08c      	sub	sp, #48	@ 0x30
 8009ad4:	af04      	add	r7, sp, #16
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	603b      	str	r3, [r7, #0]
 8009adc:	4613      	mov	r3, r2
 8009ade:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009ae0:	88fb      	ldrh	r3, [r7, #6]
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f001 f9e1 	bl	800aeac <pvPortMalloc>
 8009aea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d00e      	beq.n	8009b10 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009af2:	2054      	movs	r0, #84	@ 0x54
 8009af4:	f001 f9da 	bl	800aeac <pvPortMalloc>
 8009af8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009afa:	69fb      	ldr	r3, [r7, #28]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d003      	beq.n	8009b08 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	697a      	ldr	r2, [r7, #20]
 8009b04:	631a      	str	r2, [r3, #48]	@ 0x30
 8009b06:	e005      	b.n	8009b14 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009b08:	6978      	ldr	r0, [r7, #20]
 8009b0a:	f001 fa9d 	bl	800b048 <vPortFree>
 8009b0e:	e001      	b.n	8009b14 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009b10:	2300      	movs	r3, #0
 8009b12:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009b14:	69fb      	ldr	r3, [r7, #28]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d017      	beq.n	8009b4a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009b22:	88fa      	ldrh	r2, [r7, #6]
 8009b24:	2300      	movs	r3, #0
 8009b26:	9303      	str	r3, [sp, #12]
 8009b28:	69fb      	ldr	r3, [r7, #28]
 8009b2a:	9302      	str	r3, [sp, #8]
 8009b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b2e:	9301      	str	r3, [sp, #4]
 8009b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b32:	9300      	str	r3, [sp, #0]
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	68b9      	ldr	r1, [r7, #8]
 8009b38:	68f8      	ldr	r0, [r7, #12]
 8009b3a:	f000 f80e 	bl	8009b5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b3e:	69f8      	ldr	r0, [r7, #28]
 8009b40:	f000 f894 	bl	8009c6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009b44:	2301      	movs	r3, #1
 8009b46:	61bb      	str	r3, [r7, #24]
 8009b48:	e002      	b.n	8009b50 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009b50:	69bb      	ldr	r3, [r7, #24]
	}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3720      	adds	r7, #32
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b088      	sub	sp, #32
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	60f8      	str	r0, [r7, #12]
 8009b62:	60b9      	str	r1, [r7, #8]
 8009b64:	607a      	str	r2, [r7, #4]
 8009b66:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009b72:	3b01      	subs	r3, #1
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	4413      	add	r3, r2
 8009b78:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009b7a:	69bb      	ldr	r3, [r7, #24]
 8009b7c:	f023 0307 	bic.w	r3, r3, #7
 8009b80:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	f003 0307 	and.w	r3, r3, #7
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d00b      	beq.n	8009ba4 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8009b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b90:	f383 8811 	msr	BASEPRI, r3
 8009b94:	f3bf 8f6f 	isb	sy
 8009b98:	f3bf 8f4f 	dsb	sy
 8009b9c:	617b      	str	r3, [r7, #20]
}
 8009b9e:	bf00      	nop
 8009ba0:	bf00      	nop
 8009ba2:	e7fd      	b.n	8009ba0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d01f      	beq.n	8009bea <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009baa:	2300      	movs	r3, #0
 8009bac:	61fb      	str	r3, [r7, #28]
 8009bae:	e012      	b.n	8009bd6 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009bb0:	68ba      	ldr	r2, [r7, #8]
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	7819      	ldrb	r1, [r3, #0]
 8009bb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bba:	69fb      	ldr	r3, [r7, #28]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	3334      	adds	r3, #52	@ 0x34
 8009bc0:	460a      	mov	r2, r1
 8009bc2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009bc4:	68ba      	ldr	r2, [r7, #8]
 8009bc6:	69fb      	ldr	r3, [r7, #28]
 8009bc8:	4413      	add	r3, r2
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d006      	beq.n	8009bde <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	61fb      	str	r3, [r7, #28]
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	2b0f      	cmp	r3, #15
 8009bda:	d9e9      	bls.n	8009bb0 <prvInitialiseNewTask+0x56>
 8009bdc:	e000      	b.n	8009be0 <prvInitialiseNewTask+0x86>
			{
				break;
 8009bde:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009be2:	2200      	movs	r2, #0
 8009be4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009be8:	e003      	b.n	8009bf2 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bec:	2200      	movs	r2, #0
 8009bee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf4:	2b06      	cmp	r3, #6
 8009bf6:	d901      	bls.n	8009bfc <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009bf8:	2306      	movs	r3, #6
 8009bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bfe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c00:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c06:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c10:	3304      	adds	r3, #4
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7fe ff0c 	bl	8008a30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c1a:	3318      	adds	r3, #24
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f7fe ff07 	bl	8008a30 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c26:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c2a:	f1c3 0207 	rsb	r2, r3, #7
 8009c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c30:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c36:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c40:	2200      	movs	r2, #0
 8009c42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009c46:	683a      	ldr	r2, [r7, #0]
 8009c48:	68f9      	ldr	r1, [r7, #12]
 8009c4a:	69b8      	ldr	r0, [r7, #24]
 8009c4c:	f000 fede 	bl	800aa0c <pxPortInitialiseStack>
 8009c50:	4602      	mov	r2, r0
 8009c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c54:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d002      	beq.n	8009c62 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c62:	bf00      	nop
 8009c64:	3720      	adds	r7, #32
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
	...

08009c6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009c74:	f000 fff8 	bl	800ac68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009c78:	4b2a      	ldr	r3, [pc, #168]	@ (8009d24 <prvAddNewTaskToReadyList+0xb8>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	4a29      	ldr	r2, [pc, #164]	@ (8009d24 <prvAddNewTaskToReadyList+0xb8>)
 8009c80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009c82:	4b29      	ldr	r3, [pc, #164]	@ (8009d28 <prvAddNewTaskToReadyList+0xbc>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d109      	bne.n	8009c9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009c8a:	4a27      	ldr	r2, [pc, #156]	@ (8009d28 <prvAddNewTaskToReadyList+0xbc>)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009c90:	4b24      	ldr	r3, [pc, #144]	@ (8009d24 <prvAddNewTaskToReadyList+0xb8>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d110      	bne.n	8009cba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009c98:	f000 fbd4 	bl	800a444 <prvInitialiseTaskLists>
 8009c9c:	e00d      	b.n	8009cba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009c9e:	4b23      	ldr	r3, [pc, #140]	@ (8009d2c <prvAddNewTaskToReadyList+0xc0>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d109      	bne.n	8009cba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009ca6:	4b20      	ldr	r3, [pc, #128]	@ (8009d28 <prvAddNewTaskToReadyList+0xbc>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d802      	bhi.n	8009cba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8009d28 <prvAddNewTaskToReadyList+0xbc>)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009cba:	4b1d      	ldr	r3, [pc, #116]	@ (8009d30 <prvAddNewTaskToReadyList+0xc4>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	4a1b      	ldr	r2, [pc, #108]	@ (8009d30 <prvAddNewTaskToReadyList+0xc4>)
 8009cc2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cc8:	2201      	movs	r2, #1
 8009cca:	409a      	lsls	r2, r3
 8009ccc:	4b19      	ldr	r3, [pc, #100]	@ (8009d34 <prvAddNewTaskToReadyList+0xc8>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	4a18      	ldr	r2, [pc, #96]	@ (8009d34 <prvAddNewTaskToReadyList+0xc8>)
 8009cd4:	6013      	str	r3, [r2, #0]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cda:	4613      	mov	r3, r2
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	4413      	add	r3, r2
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	4a15      	ldr	r2, [pc, #84]	@ (8009d38 <prvAddNewTaskToReadyList+0xcc>)
 8009ce4:	441a      	add	r2, r3
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	3304      	adds	r3, #4
 8009cea:	4619      	mov	r1, r3
 8009cec:	4610      	mov	r0, r2
 8009cee:	f7fe feac 	bl	8008a4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009cf2:	f000 ffeb 	bl	800accc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8009d2c <prvAddNewTaskToReadyList+0xc0>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d00e      	beq.n	8009d1c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8009d28 <prvAddNewTaskToReadyList+0xbc>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d207      	bcs.n	8009d1c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8009d3c <prvAddNewTaskToReadyList+0xd0>)
 8009d0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d12:	601a      	str	r2, [r3, #0]
 8009d14:	f3bf 8f4f 	dsb	sy
 8009d18:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d1c:	bf00      	nop
 8009d1e:	3708      	adds	r7, #8
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	200006c4 	.word	0x200006c4
 8009d28:	200005c4 	.word	0x200005c4
 8009d2c:	200006d0 	.word	0x200006d0
 8009d30:	200006e0 	.word	0x200006e0
 8009d34:	200006cc 	.word	0x200006cc
 8009d38:	200005c8 	.word	0x200005c8
 8009d3c:	e000ed04 	.word	0xe000ed04

08009d40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d018      	beq.n	8009d84 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009d52:	4b14      	ldr	r3, [pc, #80]	@ (8009da4 <vTaskDelay+0x64>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d00b      	beq.n	8009d72 <vTaskDelay+0x32>
	__asm volatile
 8009d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d5e:	f383 8811 	msr	BASEPRI, r3
 8009d62:	f3bf 8f6f 	isb	sy
 8009d66:	f3bf 8f4f 	dsb	sy
 8009d6a:	60bb      	str	r3, [r7, #8]
}
 8009d6c:	bf00      	nop
 8009d6e:	bf00      	nop
 8009d70:	e7fd      	b.n	8009d6e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009d72:	f000 f87d 	bl	8009e70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009d76:	2100      	movs	r1, #0
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 fde1 	bl	800a940 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009d7e:	f000 f885 	bl	8009e8c <xTaskResumeAll>
 8009d82:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d107      	bne.n	8009d9a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009d8a:	4b07      	ldr	r3, [pc, #28]	@ (8009da8 <vTaskDelay+0x68>)
 8009d8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d90:	601a      	str	r2, [r3, #0]
 8009d92:	f3bf 8f4f 	dsb	sy
 8009d96:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009d9a:	bf00      	nop
 8009d9c:	3710      	adds	r7, #16
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	200006ec 	.word	0x200006ec
 8009da8:	e000ed04 	.word	0xe000ed04

08009dac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b08a      	sub	sp, #40	@ 0x28
 8009db0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009db2:	2300      	movs	r3, #0
 8009db4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009db6:	2300      	movs	r3, #0
 8009db8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009dba:	463a      	mov	r2, r7
 8009dbc:	1d39      	adds	r1, r7, #4
 8009dbe:	f107 0308 	add.w	r3, r7, #8
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7f7 f8b0 	bl	8000f28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009dc8:	6839      	ldr	r1, [r7, #0]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	68ba      	ldr	r2, [r7, #8]
 8009dce:	9202      	str	r2, [sp, #8]
 8009dd0:	9301      	str	r3, [sp, #4]
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	9300      	str	r3, [sp, #0]
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	460a      	mov	r2, r1
 8009dda:	491f      	ldr	r1, [pc, #124]	@ (8009e58 <vTaskStartScheduler+0xac>)
 8009ddc:	481f      	ldr	r0, [pc, #124]	@ (8009e5c <vTaskStartScheduler+0xb0>)
 8009dde:	f7ff fe17 	bl	8009a10 <xTaskCreateStatic>
 8009de2:	4603      	mov	r3, r0
 8009de4:	4a1e      	ldr	r2, [pc, #120]	@ (8009e60 <vTaskStartScheduler+0xb4>)
 8009de6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009de8:	4b1d      	ldr	r3, [pc, #116]	@ (8009e60 <vTaskStartScheduler+0xb4>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d002      	beq.n	8009df6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009df0:	2301      	movs	r3, #1
 8009df2:	617b      	str	r3, [r7, #20]
 8009df4:	e001      	b.n	8009dfa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009df6:	2300      	movs	r3, #0
 8009df8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d116      	bne.n	8009e2e <vTaskStartScheduler+0x82>
	__asm volatile
 8009e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e04:	f383 8811 	msr	BASEPRI, r3
 8009e08:	f3bf 8f6f 	isb	sy
 8009e0c:	f3bf 8f4f 	dsb	sy
 8009e10:	613b      	str	r3, [r7, #16]
}
 8009e12:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009e14:	4b13      	ldr	r3, [pc, #76]	@ (8009e64 <vTaskStartScheduler+0xb8>)
 8009e16:	f04f 32ff 	mov.w	r2, #4294967295
 8009e1a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009e1c:	4b12      	ldr	r3, [pc, #72]	@ (8009e68 <vTaskStartScheduler+0xbc>)
 8009e1e:	2201      	movs	r2, #1
 8009e20:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009e22:	4b12      	ldr	r3, [pc, #72]	@ (8009e6c <vTaskStartScheduler+0xc0>)
 8009e24:	2200      	movs	r2, #0
 8009e26:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009e28:	f000 fe7a 	bl	800ab20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009e2c:	e00f      	b.n	8009e4e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e34:	d10b      	bne.n	8009e4e <vTaskStartScheduler+0xa2>
	__asm volatile
 8009e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e3a:	f383 8811 	msr	BASEPRI, r3
 8009e3e:	f3bf 8f6f 	isb	sy
 8009e42:	f3bf 8f4f 	dsb	sy
 8009e46:	60fb      	str	r3, [r7, #12]
}
 8009e48:	bf00      	nop
 8009e4a:	bf00      	nop
 8009e4c:	e7fd      	b.n	8009e4a <vTaskStartScheduler+0x9e>
}
 8009e4e:	bf00      	nop
 8009e50:	3718      	adds	r7, #24
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop
 8009e58:	0800d2f4 	.word	0x0800d2f4
 8009e5c:	0800a415 	.word	0x0800a415
 8009e60:	200006e8 	.word	0x200006e8
 8009e64:	200006e4 	.word	0x200006e4
 8009e68:	200006d0 	.word	0x200006d0
 8009e6c:	200006c8 	.word	0x200006c8

08009e70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009e70:	b480      	push	{r7}
 8009e72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009e74:	4b04      	ldr	r3, [pc, #16]	@ (8009e88 <vTaskSuspendAll+0x18>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	3301      	adds	r3, #1
 8009e7a:	4a03      	ldr	r2, [pc, #12]	@ (8009e88 <vTaskSuspendAll+0x18>)
 8009e7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009e7e:	bf00      	nop
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr
 8009e88:	200006ec 	.word	0x200006ec

08009e8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009e92:	2300      	movs	r3, #0
 8009e94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009e96:	2300      	movs	r3, #0
 8009e98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009e9a:	4b42      	ldr	r3, [pc, #264]	@ (8009fa4 <xTaskResumeAll+0x118>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d10b      	bne.n	8009eba <xTaskResumeAll+0x2e>
	__asm volatile
 8009ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ea6:	f383 8811 	msr	BASEPRI, r3
 8009eaa:	f3bf 8f6f 	isb	sy
 8009eae:	f3bf 8f4f 	dsb	sy
 8009eb2:	603b      	str	r3, [r7, #0]
}
 8009eb4:	bf00      	nop
 8009eb6:	bf00      	nop
 8009eb8:	e7fd      	b.n	8009eb6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009eba:	f000 fed5 	bl	800ac68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009ebe:	4b39      	ldr	r3, [pc, #228]	@ (8009fa4 <xTaskResumeAll+0x118>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	3b01      	subs	r3, #1
 8009ec4:	4a37      	ldr	r2, [pc, #220]	@ (8009fa4 <xTaskResumeAll+0x118>)
 8009ec6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ec8:	4b36      	ldr	r3, [pc, #216]	@ (8009fa4 <xTaskResumeAll+0x118>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d161      	bne.n	8009f94 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009ed0:	4b35      	ldr	r3, [pc, #212]	@ (8009fa8 <xTaskResumeAll+0x11c>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d05d      	beq.n	8009f94 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ed8:	e02e      	b.n	8009f38 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009eda:	4b34      	ldr	r3, [pc, #208]	@ (8009fac <xTaskResumeAll+0x120>)
 8009edc:	68db      	ldr	r3, [r3, #12]
 8009ede:	68db      	ldr	r3, [r3, #12]
 8009ee0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	3318      	adds	r3, #24
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f7fe fe0c 	bl	8008b04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	3304      	adds	r3, #4
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f7fe fe07 	bl	8008b04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009efa:	2201      	movs	r2, #1
 8009efc:	409a      	lsls	r2, r3
 8009efe:	4b2c      	ldr	r3, [pc, #176]	@ (8009fb0 <xTaskResumeAll+0x124>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4313      	orrs	r3, r2
 8009f04:	4a2a      	ldr	r2, [pc, #168]	@ (8009fb0 <xTaskResumeAll+0x124>)
 8009f06:	6013      	str	r3, [r2, #0]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f0c:	4613      	mov	r3, r2
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	4413      	add	r3, r2
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	4a27      	ldr	r2, [pc, #156]	@ (8009fb4 <xTaskResumeAll+0x128>)
 8009f16:	441a      	add	r2, r3
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	3304      	adds	r3, #4
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	4610      	mov	r0, r2
 8009f20:	f7fe fd93 	bl	8008a4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f28:	4b23      	ldr	r3, [pc, #140]	@ (8009fb8 <xTaskResumeAll+0x12c>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d302      	bcc.n	8009f38 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009f32:	4b22      	ldr	r3, [pc, #136]	@ (8009fbc <xTaskResumeAll+0x130>)
 8009f34:	2201      	movs	r2, #1
 8009f36:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009f38:	4b1c      	ldr	r3, [pc, #112]	@ (8009fac <xTaskResumeAll+0x120>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d1cc      	bne.n	8009eda <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d001      	beq.n	8009f4a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009f46:	f000 fb1b 	bl	800a580 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8009fc0 <xTaskResumeAll+0x134>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d010      	beq.n	8009f78 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009f56:	f000 f837 	bl	8009fc8 <xTaskIncrementTick>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d002      	beq.n	8009f66 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009f60:	4b16      	ldr	r3, [pc, #88]	@ (8009fbc <xTaskResumeAll+0x130>)
 8009f62:	2201      	movs	r2, #1
 8009f64:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	3b01      	subs	r3, #1
 8009f6a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d1f1      	bne.n	8009f56 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009f72:	4b13      	ldr	r3, [pc, #76]	@ (8009fc0 <xTaskResumeAll+0x134>)
 8009f74:	2200      	movs	r2, #0
 8009f76:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009f78:	4b10      	ldr	r3, [pc, #64]	@ (8009fbc <xTaskResumeAll+0x130>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d009      	beq.n	8009f94 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009f80:	2301      	movs	r3, #1
 8009f82:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009f84:	4b0f      	ldr	r3, [pc, #60]	@ (8009fc4 <xTaskResumeAll+0x138>)
 8009f86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f8a:	601a      	str	r2, [r3, #0]
 8009f8c:	f3bf 8f4f 	dsb	sy
 8009f90:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009f94:	f000 fe9a 	bl	800accc <vPortExitCritical>

	return xAlreadyYielded;
 8009f98:	68bb      	ldr	r3, [r7, #8]
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	200006ec 	.word	0x200006ec
 8009fa8:	200006c4 	.word	0x200006c4
 8009fac:	20000684 	.word	0x20000684
 8009fb0:	200006cc 	.word	0x200006cc
 8009fb4:	200005c8 	.word	0x200005c8
 8009fb8:	200005c4 	.word	0x200005c4
 8009fbc:	200006d8 	.word	0x200006d8
 8009fc0:	200006d4 	.word	0x200006d4
 8009fc4:	e000ed04 	.word	0xe000ed04

08009fc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b086      	sub	sp, #24
 8009fcc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fd2:	4b4f      	ldr	r3, [pc, #316]	@ (800a110 <xTaskIncrementTick+0x148>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	f040 808f 	bne.w	800a0fa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009fdc:	4b4d      	ldr	r3, [pc, #308]	@ (800a114 <xTaskIncrementTick+0x14c>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009fe4:	4a4b      	ldr	r2, [pc, #300]	@ (800a114 <xTaskIncrementTick+0x14c>)
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d121      	bne.n	800a034 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009ff0:	4b49      	ldr	r3, [pc, #292]	@ (800a118 <xTaskIncrementTick+0x150>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d00b      	beq.n	800a012 <xTaskIncrementTick+0x4a>
	__asm volatile
 8009ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ffe:	f383 8811 	msr	BASEPRI, r3
 800a002:	f3bf 8f6f 	isb	sy
 800a006:	f3bf 8f4f 	dsb	sy
 800a00a:	603b      	str	r3, [r7, #0]
}
 800a00c:	bf00      	nop
 800a00e:	bf00      	nop
 800a010:	e7fd      	b.n	800a00e <xTaskIncrementTick+0x46>
 800a012:	4b41      	ldr	r3, [pc, #260]	@ (800a118 <xTaskIncrementTick+0x150>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	60fb      	str	r3, [r7, #12]
 800a018:	4b40      	ldr	r3, [pc, #256]	@ (800a11c <xTaskIncrementTick+0x154>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a3e      	ldr	r2, [pc, #248]	@ (800a118 <xTaskIncrementTick+0x150>)
 800a01e:	6013      	str	r3, [r2, #0]
 800a020:	4a3e      	ldr	r2, [pc, #248]	@ (800a11c <xTaskIncrementTick+0x154>)
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	6013      	str	r3, [r2, #0]
 800a026:	4b3e      	ldr	r3, [pc, #248]	@ (800a120 <xTaskIncrementTick+0x158>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	3301      	adds	r3, #1
 800a02c:	4a3c      	ldr	r2, [pc, #240]	@ (800a120 <xTaskIncrementTick+0x158>)
 800a02e:	6013      	str	r3, [r2, #0]
 800a030:	f000 faa6 	bl	800a580 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a034:	4b3b      	ldr	r3, [pc, #236]	@ (800a124 <xTaskIncrementTick+0x15c>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	693a      	ldr	r2, [r7, #16]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d348      	bcc.n	800a0d0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a03e:	4b36      	ldr	r3, [pc, #216]	@ (800a118 <xTaskIncrementTick+0x150>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d104      	bne.n	800a052 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a048:	4b36      	ldr	r3, [pc, #216]	@ (800a124 <xTaskIncrementTick+0x15c>)
 800a04a:	f04f 32ff 	mov.w	r2, #4294967295
 800a04e:	601a      	str	r2, [r3, #0]
					break;
 800a050:	e03e      	b.n	800a0d0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a052:	4b31      	ldr	r3, [pc, #196]	@ (800a118 <xTaskIncrementTick+0x150>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a062:	693a      	ldr	r2, [r7, #16]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	429a      	cmp	r2, r3
 800a068:	d203      	bcs.n	800a072 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a06a:	4a2e      	ldr	r2, [pc, #184]	@ (800a124 <xTaskIncrementTick+0x15c>)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a070:	e02e      	b.n	800a0d0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	3304      	adds	r3, #4
 800a076:	4618      	mov	r0, r3
 800a078:	f7fe fd44 	bl	8008b04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a080:	2b00      	cmp	r3, #0
 800a082:	d004      	beq.n	800a08e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	3318      	adds	r3, #24
 800a088:	4618      	mov	r0, r3
 800a08a:	f7fe fd3b 	bl	8008b04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a092:	2201      	movs	r2, #1
 800a094:	409a      	lsls	r2, r3
 800a096:	4b24      	ldr	r3, [pc, #144]	@ (800a128 <xTaskIncrementTick+0x160>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4313      	orrs	r3, r2
 800a09c:	4a22      	ldr	r2, [pc, #136]	@ (800a128 <xTaskIncrementTick+0x160>)
 800a09e:	6013      	str	r3, [r2, #0]
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	4413      	add	r3, r2
 800a0aa:	009b      	lsls	r3, r3, #2
 800a0ac:	4a1f      	ldr	r2, [pc, #124]	@ (800a12c <xTaskIncrementTick+0x164>)
 800a0ae:	441a      	add	r2, r3
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	3304      	adds	r3, #4
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	4610      	mov	r0, r2
 800a0b8:	f7fe fcc7 	bl	8008a4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0c0:	4b1b      	ldr	r3, [pc, #108]	@ (800a130 <xTaskIncrementTick+0x168>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d3b9      	bcc.n	800a03e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0ce:	e7b6      	b.n	800a03e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a0d0:	4b17      	ldr	r3, [pc, #92]	@ (800a130 <xTaskIncrementTick+0x168>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0d6:	4915      	ldr	r1, [pc, #84]	@ (800a12c <xTaskIncrementTick+0x164>)
 800a0d8:	4613      	mov	r3, r2
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	4413      	add	r3, r2
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	440b      	add	r3, r1
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	d901      	bls.n	800a0ec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a0ec:	4b11      	ldr	r3, [pc, #68]	@ (800a134 <xTaskIncrementTick+0x16c>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d007      	beq.n	800a104 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	617b      	str	r3, [r7, #20]
 800a0f8:	e004      	b.n	800a104 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a0fa:	4b0f      	ldr	r3, [pc, #60]	@ (800a138 <xTaskIncrementTick+0x170>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	3301      	adds	r3, #1
 800a100:	4a0d      	ldr	r2, [pc, #52]	@ (800a138 <xTaskIncrementTick+0x170>)
 800a102:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a104:	697b      	ldr	r3, [r7, #20]
}
 800a106:	4618      	mov	r0, r3
 800a108:	3718      	adds	r7, #24
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	200006ec 	.word	0x200006ec
 800a114:	200006c8 	.word	0x200006c8
 800a118:	2000067c 	.word	0x2000067c
 800a11c:	20000680 	.word	0x20000680
 800a120:	200006dc 	.word	0x200006dc
 800a124:	200006e4 	.word	0x200006e4
 800a128:	200006cc 	.word	0x200006cc
 800a12c:	200005c8 	.word	0x200005c8
 800a130:	200005c4 	.word	0x200005c4
 800a134:	200006d8 	.word	0x200006d8
 800a138:	200006d4 	.word	0x200006d4

0800a13c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a13c:	b480      	push	{r7}
 800a13e:	b087      	sub	sp, #28
 800a140:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a142:	4b27      	ldr	r3, [pc, #156]	@ (800a1e0 <vTaskSwitchContext+0xa4>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d003      	beq.n	800a152 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a14a:	4b26      	ldr	r3, [pc, #152]	@ (800a1e4 <vTaskSwitchContext+0xa8>)
 800a14c:	2201      	movs	r2, #1
 800a14e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a150:	e040      	b.n	800a1d4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800a152:	4b24      	ldr	r3, [pc, #144]	@ (800a1e4 <vTaskSwitchContext+0xa8>)
 800a154:	2200      	movs	r2, #0
 800a156:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a158:	4b23      	ldr	r3, [pc, #140]	@ (800a1e8 <vTaskSwitchContext+0xac>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	fab3 f383 	clz	r3, r3
 800a164:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a166:	7afb      	ldrb	r3, [r7, #11]
 800a168:	f1c3 031f 	rsb	r3, r3, #31
 800a16c:	617b      	str	r3, [r7, #20]
 800a16e:	491f      	ldr	r1, [pc, #124]	@ (800a1ec <vTaskSwitchContext+0xb0>)
 800a170:	697a      	ldr	r2, [r7, #20]
 800a172:	4613      	mov	r3, r2
 800a174:	009b      	lsls	r3, r3, #2
 800a176:	4413      	add	r3, r2
 800a178:	009b      	lsls	r3, r3, #2
 800a17a:	440b      	add	r3, r1
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d10b      	bne.n	800a19a <vTaskSwitchContext+0x5e>
	__asm volatile
 800a182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a186:	f383 8811 	msr	BASEPRI, r3
 800a18a:	f3bf 8f6f 	isb	sy
 800a18e:	f3bf 8f4f 	dsb	sy
 800a192:	607b      	str	r3, [r7, #4]
}
 800a194:	bf00      	nop
 800a196:	bf00      	nop
 800a198:	e7fd      	b.n	800a196 <vTaskSwitchContext+0x5a>
 800a19a:	697a      	ldr	r2, [r7, #20]
 800a19c:	4613      	mov	r3, r2
 800a19e:	009b      	lsls	r3, r3, #2
 800a1a0:	4413      	add	r3, r2
 800a1a2:	009b      	lsls	r3, r3, #2
 800a1a4:	4a11      	ldr	r2, [pc, #68]	@ (800a1ec <vTaskSwitchContext+0xb0>)
 800a1a6:	4413      	add	r3, r2
 800a1a8:	613b      	str	r3, [r7, #16]
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	685a      	ldr	r2, [r3, #4]
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	605a      	str	r2, [r3, #4]
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	685a      	ldr	r2, [r3, #4]
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	3308      	adds	r3, #8
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d104      	bne.n	800a1ca <vTaskSwitchContext+0x8e>
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	685a      	ldr	r2, [r3, #4]
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	605a      	str	r2, [r3, #4]
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	68db      	ldr	r3, [r3, #12]
 800a1d0:	4a07      	ldr	r2, [pc, #28]	@ (800a1f0 <vTaskSwitchContext+0xb4>)
 800a1d2:	6013      	str	r3, [r2, #0]
}
 800a1d4:	bf00      	nop
 800a1d6:	371c      	adds	r7, #28
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr
 800a1e0:	200006ec 	.word	0x200006ec
 800a1e4:	200006d8 	.word	0x200006d8
 800a1e8:	200006cc 	.word	0x200006cc
 800a1ec:	200005c8 	.word	0x200005c8
 800a1f0:	200005c4 	.word	0x200005c4

0800a1f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d10b      	bne.n	800a21c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a208:	f383 8811 	msr	BASEPRI, r3
 800a20c:	f3bf 8f6f 	isb	sy
 800a210:	f3bf 8f4f 	dsb	sy
 800a214:	60fb      	str	r3, [r7, #12]
}
 800a216:	bf00      	nop
 800a218:	bf00      	nop
 800a21a:	e7fd      	b.n	800a218 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a21c:	4b07      	ldr	r3, [pc, #28]	@ (800a23c <vTaskPlaceOnEventList+0x48>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	3318      	adds	r3, #24
 800a222:	4619      	mov	r1, r3
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f7fe fc34 	bl	8008a92 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a22a:	2101      	movs	r1, #1
 800a22c:	6838      	ldr	r0, [r7, #0]
 800a22e:	f000 fb87 	bl	800a940 <prvAddCurrentTaskToDelayedList>
}
 800a232:	bf00      	nop
 800a234:	3710      	adds	r7, #16
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	200005c4 	.word	0x200005c4

0800a240 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b086      	sub	sp, #24
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	68db      	ldr	r3, [r3, #12]
 800a24e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d10b      	bne.n	800a26e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a25a:	f383 8811 	msr	BASEPRI, r3
 800a25e:	f3bf 8f6f 	isb	sy
 800a262:	f3bf 8f4f 	dsb	sy
 800a266:	60fb      	str	r3, [r7, #12]
}
 800a268:	bf00      	nop
 800a26a:	bf00      	nop
 800a26c:	e7fd      	b.n	800a26a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	3318      	adds	r3, #24
 800a272:	4618      	mov	r0, r3
 800a274:	f7fe fc46 	bl	8008b04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a278:	4b1d      	ldr	r3, [pc, #116]	@ (800a2f0 <xTaskRemoveFromEventList+0xb0>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d11c      	bne.n	800a2ba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	3304      	adds	r3, #4
 800a284:	4618      	mov	r0, r3
 800a286:	f7fe fc3d 	bl	8008b04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a28e:	2201      	movs	r2, #1
 800a290:	409a      	lsls	r2, r3
 800a292:	4b18      	ldr	r3, [pc, #96]	@ (800a2f4 <xTaskRemoveFromEventList+0xb4>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4313      	orrs	r3, r2
 800a298:	4a16      	ldr	r2, [pc, #88]	@ (800a2f4 <xTaskRemoveFromEventList+0xb4>)
 800a29a:	6013      	str	r3, [r2, #0]
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2a0:	4613      	mov	r3, r2
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	4413      	add	r3, r2
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	4a13      	ldr	r2, [pc, #76]	@ (800a2f8 <xTaskRemoveFromEventList+0xb8>)
 800a2aa:	441a      	add	r2, r3
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	3304      	adds	r3, #4
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	4610      	mov	r0, r2
 800a2b4:	f7fe fbc9 	bl	8008a4a <vListInsertEnd>
 800a2b8:	e005      	b.n	800a2c6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	3318      	adds	r3, #24
 800a2be:	4619      	mov	r1, r3
 800a2c0:	480e      	ldr	r0, [pc, #56]	@ (800a2fc <xTaskRemoveFromEventList+0xbc>)
 800a2c2:	f7fe fbc2 	bl	8008a4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2ca:	4b0d      	ldr	r3, [pc, #52]	@ (800a300 <xTaskRemoveFromEventList+0xc0>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d905      	bls.n	800a2e0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a2d8:	4b0a      	ldr	r3, [pc, #40]	@ (800a304 <xTaskRemoveFromEventList+0xc4>)
 800a2da:	2201      	movs	r2, #1
 800a2dc:	601a      	str	r2, [r3, #0]
 800a2de:	e001      	b.n	800a2e4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a2e4:	697b      	ldr	r3, [r7, #20]
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3718      	adds	r7, #24
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	200006ec 	.word	0x200006ec
 800a2f4:	200006cc 	.word	0x200006cc
 800a2f8:	200005c8 	.word	0x200005c8
 800a2fc:	20000684 	.word	0x20000684
 800a300:	200005c4 	.word	0x200005c4
 800a304:	200006d8 	.word	0x200006d8

0800a308 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a310:	4b06      	ldr	r3, [pc, #24]	@ (800a32c <vTaskInternalSetTimeOutState+0x24>)
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a318:	4b05      	ldr	r3, [pc, #20]	@ (800a330 <vTaskInternalSetTimeOutState+0x28>)
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	605a      	str	r2, [r3, #4]
}
 800a320:	bf00      	nop
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr
 800a32c:	200006dc 	.word	0x200006dc
 800a330:	200006c8 	.word	0x200006c8

0800a334 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b088      	sub	sp, #32
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d10b      	bne.n	800a35c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a348:	f383 8811 	msr	BASEPRI, r3
 800a34c:	f3bf 8f6f 	isb	sy
 800a350:	f3bf 8f4f 	dsb	sy
 800a354:	613b      	str	r3, [r7, #16]
}
 800a356:	bf00      	nop
 800a358:	bf00      	nop
 800a35a:	e7fd      	b.n	800a358 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d10b      	bne.n	800a37a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a366:	f383 8811 	msr	BASEPRI, r3
 800a36a:	f3bf 8f6f 	isb	sy
 800a36e:	f3bf 8f4f 	dsb	sy
 800a372:	60fb      	str	r3, [r7, #12]
}
 800a374:	bf00      	nop
 800a376:	bf00      	nop
 800a378:	e7fd      	b.n	800a376 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a37a:	f000 fc75 	bl	800ac68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a37e:	4b1d      	ldr	r3, [pc, #116]	@ (800a3f4 <xTaskCheckForTimeOut+0xc0>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	69ba      	ldr	r2, [r7, #24]
 800a38a:	1ad3      	subs	r3, r2, r3
 800a38c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a396:	d102      	bne.n	800a39e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a398:	2300      	movs	r3, #0
 800a39a:	61fb      	str	r3, [r7, #28]
 800a39c:	e023      	b.n	800a3e6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	4b15      	ldr	r3, [pc, #84]	@ (800a3f8 <xTaskCheckForTimeOut+0xc4>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d007      	beq.n	800a3ba <xTaskCheckForTimeOut+0x86>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	69ba      	ldr	r2, [r7, #24]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d302      	bcc.n	800a3ba <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	61fb      	str	r3, [r7, #28]
 800a3b8:	e015      	b.n	800a3e6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	697a      	ldr	r2, [r7, #20]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d20b      	bcs.n	800a3dc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	681a      	ldr	r2, [r3, #0]
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	1ad2      	subs	r2, r2, r3
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f7ff ff99 	bl	800a308 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	61fb      	str	r3, [r7, #28]
 800a3da:	e004      	b.n	800a3e6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a3e6:	f000 fc71 	bl	800accc <vPortExitCritical>

	return xReturn;
 800a3ea:	69fb      	ldr	r3, [r7, #28]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3720      	adds	r7, #32
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	200006c8 	.word	0x200006c8
 800a3f8:	200006dc 	.word	0x200006dc

0800a3fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a400:	4b03      	ldr	r3, [pc, #12]	@ (800a410 <vTaskMissedYield+0x14>)
 800a402:	2201      	movs	r2, #1
 800a404:	601a      	str	r2, [r3, #0]
}
 800a406:	bf00      	nop
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr
 800a410:	200006d8 	.word	0x200006d8

0800a414 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a41c:	f000 f852 	bl	800a4c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a420:	4b06      	ldr	r3, [pc, #24]	@ (800a43c <prvIdleTask+0x28>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2b01      	cmp	r3, #1
 800a426:	d9f9      	bls.n	800a41c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a428:	4b05      	ldr	r3, [pc, #20]	@ (800a440 <prvIdleTask+0x2c>)
 800a42a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a42e:	601a      	str	r2, [r3, #0]
 800a430:	f3bf 8f4f 	dsb	sy
 800a434:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a438:	e7f0      	b.n	800a41c <prvIdleTask+0x8>
 800a43a:	bf00      	nop
 800a43c:	200005c8 	.word	0x200005c8
 800a440:	e000ed04 	.word	0xe000ed04

0800a444 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a44a:	2300      	movs	r3, #0
 800a44c:	607b      	str	r3, [r7, #4]
 800a44e:	e00c      	b.n	800a46a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	4613      	mov	r3, r2
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	4413      	add	r3, r2
 800a458:	009b      	lsls	r3, r3, #2
 800a45a:	4a12      	ldr	r2, [pc, #72]	@ (800a4a4 <prvInitialiseTaskLists+0x60>)
 800a45c:	4413      	add	r3, r2
 800a45e:	4618      	mov	r0, r3
 800a460:	f7fe fac6 	bl	80089f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	3301      	adds	r3, #1
 800a468:	607b      	str	r3, [r7, #4]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2b06      	cmp	r3, #6
 800a46e:	d9ef      	bls.n	800a450 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a470:	480d      	ldr	r0, [pc, #52]	@ (800a4a8 <prvInitialiseTaskLists+0x64>)
 800a472:	f7fe fabd 	bl	80089f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a476:	480d      	ldr	r0, [pc, #52]	@ (800a4ac <prvInitialiseTaskLists+0x68>)
 800a478:	f7fe faba 	bl	80089f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a47c:	480c      	ldr	r0, [pc, #48]	@ (800a4b0 <prvInitialiseTaskLists+0x6c>)
 800a47e:	f7fe fab7 	bl	80089f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a482:	480c      	ldr	r0, [pc, #48]	@ (800a4b4 <prvInitialiseTaskLists+0x70>)
 800a484:	f7fe fab4 	bl	80089f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a488:	480b      	ldr	r0, [pc, #44]	@ (800a4b8 <prvInitialiseTaskLists+0x74>)
 800a48a:	f7fe fab1 	bl	80089f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a48e:	4b0b      	ldr	r3, [pc, #44]	@ (800a4bc <prvInitialiseTaskLists+0x78>)
 800a490:	4a05      	ldr	r2, [pc, #20]	@ (800a4a8 <prvInitialiseTaskLists+0x64>)
 800a492:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a494:	4b0a      	ldr	r3, [pc, #40]	@ (800a4c0 <prvInitialiseTaskLists+0x7c>)
 800a496:	4a05      	ldr	r2, [pc, #20]	@ (800a4ac <prvInitialiseTaskLists+0x68>)
 800a498:	601a      	str	r2, [r3, #0]
}
 800a49a:	bf00      	nop
 800a49c:	3708      	adds	r7, #8
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	200005c8 	.word	0x200005c8
 800a4a8:	20000654 	.word	0x20000654
 800a4ac:	20000668 	.word	0x20000668
 800a4b0:	20000684 	.word	0x20000684
 800a4b4:	20000698 	.word	0x20000698
 800a4b8:	200006b0 	.word	0x200006b0
 800a4bc:	2000067c 	.word	0x2000067c
 800a4c0:	20000680 	.word	0x20000680

0800a4c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b082      	sub	sp, #8
 800a4c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a4ca:	e019      	b.n	800a500 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a4cc:	f000 fbcc 	bl	800ac68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4d0:	4b10      	ldr	r3, [pc, #64]	@ (800a514 <prvCheckTasksWaitingTermination+0x50>)
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	68db      	ldr	r3, [r3, #12]
 800a4d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	3304      	adds	r3, #4
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f7fe fb11 	bl	8008b04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a4e2:	4b0d      	ldr	r3, [pc, #52]	@ (800a518 <prvCheckTasksWaitingTermination+0x54>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	3b01      	subs	r3, #1
 800a4e8:	4a0b      	ldr	r2, [pc, #44]	@ (800a518 <prvCheckTasksWaitingTermination+0x54>)
 800a4ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a4ec:	4b0b      	ldr	r3, [pc, #44]	@ (800a51c <prvCheckTasksWaitingTermination+0x58>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	3b01      	subs	r3, #1
 800a4f2:	4a0a      	ldr	r2, [pc, #40]	@ (800a51c <prvCheckTasksWaitingTermination+0x58>)
 800a4f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a4f6:	f000 fbe9 	bl	800accc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 f810 	bl	800a520 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a500:	4b06      	ldr	r3, [pc, #24]	@ (800a51c <prvCheckTasksWaitingTermination+0x58>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d1e1      	bne.n	800a4cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a508:	bf00      	nop
 800a50a:	bf00      	nop
 800a50c:	3708      	adds	r7, #8
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	20000698 	.word	0x20000698
 800a518:	200006c4 	.word	0x200006c4
 800a51c:	200006ac 	.word	0x200006ac

0800a520 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d108      	bne.n	800a544 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a536:	4618      	mov	r0, r3
 800a538:	f000 fd86 	bl	800b048 <vPortFree>
				vPortFree( pxTCB );
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 fd83 	bl	800b048 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a542:	e019      	b.n	800a578 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d103      	bne.n	800a556 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 fd7a 	bl	800b048 <vPortFree>
	}
 800a554:	e010      	b.n	800a578 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a55c:	2b02      	cmp	r3, #2
 800a55e:	d00b      	beq.n	800a578 <prvDeleteTCB+0x58>
	__asm volatile
 800a560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a564:	f383 8811 	msr	BASEPRI, r3
 800a568:	f3bf 8f6f 	isb	sy
 800a56c:	f3bf 8f4f 	dsb	sy
 800a570:	60fb      	str	r3, [r7, #12]
}
 800a572:	bf00      	nop
 800a574:	bf00      	nop
 800a576:	e7fd      	b.n	800a574 <prvDeleteTCB+0x54>
	}
 800a578:	bf00      	nop
 800a57a:	3710      	adds	r7, #16
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a580:	b480      	push	{r7}
 800a582:	b083      	sub	sp, #12
 800a584:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a586:	4b0c      	ldr	r3, [pc, #48]	@ (800a5b8 <prvResetNextTaskUnblockTime+0x38>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d104      	bne.n	800a59a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a590:	4b0a      	ldr	r3, [pc, #40]	@ (800a5bc <prvResetNextTaskUnblockTime+0x3c>)
 800a592:	f04f 32ff 	mov.w	r2, #4294967295
 800a596:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a598:	e008      	b.n	800a5ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a59a:	4b07      	ldr	r3, [pc, #28]	@ (800a5b8 <prvResetNextTaskUnblockTime+0x38>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	68db      	ldr	r3, [r3, #12]
 800a5a0:	68db      	ldr	r3, [r3, #12]
 800a5a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	685b      	ldr	r3, [r3, #4]
 800a5a8:	4a04      	ldr	r2, [pc, #16]	@ (800a5bc <prvResetNextTaskUnblockTime+0x3c>)
 800a5aa:	6013      	str	r3, [r2, #0]
}
 800a5ac:	bf00      	nop
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr
 800a5b8:	2000067c 	.word	0x2000067c
 800a5bc:	200006e4 	.word	0x200006e4

0800a5c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a5c6:	4b0b      	ldr	r3, [pc, #44]	@ (800a5f4 <xTaskGetSchedulerState+0x34>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d102      	bne.n	800a5d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	607b      	str	r3, [r7, #4]
 800a5d2:	e008      	b.n	800a5e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5d4:	4b08      	ldr	r3, [pc, #32]	@ (800a5f8 <xTaskGetSchedulerState+0x38>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d102      	bne.n	800a5e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a5dc:	2302      	movs	r3, #2
 800a5de:	607b      	str	r3, [r7, #4]
 800a5e0:	e001      	b.n	800a5e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a5e6:	687b      	ldr	r3, [r7, #4]
	}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	370c      	adds	r7, #12
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr
 800a5f4:	200006d0 	.word	0x200006d0
 800a5f8:	200006ec 	.word	0x200006ec

0800a5fc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a608:	2300      	movs	r3, #0
 800a60a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d05e      	beq.n	800a6d0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a616:	4b31      	ldr	r3, [pc, #196]	@ (800a6dc <xTaskPriorityInherit+0xe0>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d24e      	bcs.n	800a6be <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	699b      	ldr	r3, [r3, #24]
 800a624:	2b00      	cmp	r3, #0
 800a626:	db06      	blt.n	800a636 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a628:	4b2c      	ldr	r3, [pc, #176]	@ (800a6dc <xTaskPriorityInherit+0xe0>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a62e:	f1c3 0207 	rsb	r2, r3, #7
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	6959      	ldr	r1, [r3, #20]
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a63e:	4613      	mov	r3, r2
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	4413      	add	r3, r2
 800a644:	009b      	lsls	r3, r3, #2
 800a646:	4a26      	ldr	r2, [pc, #152]	@ (800a6e0 <xTaskPriorityInherit+0xe4>)
 800a648:	4413      	add	r3, r2
 800a64a:	4299      	cmp	r1, r3
 800a64c:	d12f      	bne.n	800a6ae <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	3304      	adds	r3, #4
 800a652:	4618      	mov	r0, r3
 800a654:	f7fe fa56 	bl	8008b04 <uxListRemove>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d10a      	bne.n	800a674 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a662:	2201      	movs	r2, #1
 800a664:	fa02 f303 	lsl.w	r3, r2, r3
 800a668:	43da      	mvns	r2, r3
 800a66a:	4b1e      	ldr	r3, [pc, #120]	@ (800a6e4 <xTaskPriorityInherit+0xe8>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4013      	ands	r3, r2
 800a670:	4a1c      	ldr	r2, [pc, #112]	@ (800a6e4 <xTaskPriorityInherit+0xe8>)
 800a672:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a674:	4b19      	ldr	r3, [pc, #100]	@ (800a6dc <xTaskPriorityInherit+0xe0>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a682:	2201      	movs	r2, #1
 800a684:	409a      	lsls	r2, r3
 800a686:	4b17      	ldr	r3, [pc, #92]	@ (800a6e4 <xTaskPriorityInherit+0xe8>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4313      	orrs	r3, r2
 800a68c:	4a15      	ldr	r2, [pc, #84]	@ (800a6e4 <xTaskPriorityInherit+0xe8>)
 800a68e:	6013      	str	r3, [r2, #0]
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a694:	4613      	mov	r3, r2
 800a696:	009b      	lsls	r3, r3, #2
 800a698:	4413      	add	r3, r2
 800a69a:	009b      	lsls	r3, r3, #2
 800a69c:	4a10      	ldr	r2, [pc, #64]	@ (800a6e0 <xTaskPriorityInherit+0xe4>)
 800a69e:	441a      	add	r2, r3
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	3304      	adds	r3, #4
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	4610      	mov	r0, r2
 800a6a8:	f7fe f9cf 	bl	8008a4a <vListInsertEnd>
 800a6ac:	e004      	b.n	800a6b8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a6ae:	4b0b      	ldr	r3, [pc, #44]	@ (800a6dc <xTaskPriorityInherit+0xe0>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	60fb      	str	r3, [r7, #12]
 800a6bc:	e008      	b.n	800a6d0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a6c2:	4b06      	ldr	r3, [pc, #24]	@ (800a6dc <xTaskPriorityInherit+0xe0>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d201      	bcs.n	800a6d0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
	}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3710      	adds	r7, #16
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	200005c4 	.word	0x200005c4
 800a6e0:	200005c8 	.word	0x200005c8
 800a6e4:	200006cc 	.word	0x200006cc

0800a6e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b086      	sub	sp, #24
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d070      	beq.n	800a7e0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a6fe:	4b3b      	ldr	r3, [pc, #236]	@ (800a7ec <xTaskPriorityDisinherit+0x104>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	693a      	ldr	r2, [r7, #16]
 800a704:	429a      	cmp	r2, r3
 800a706:	d00b      	beq.n	800a720 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a70c:	f383 8811 	msr	BASEPRI, r3
 800a710:	f3bf 8f6f 	isb	sy
 800a714:	f3bf 8f4f 	dsb	sy
 800a718:	60fb      	str	r3, [r7, #12]
}
 800a71a:	bf00      	nop
 800a71c:	bf00      	nop
 800a71e:	e7fd      	b.n	800a71c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10b      	bne.n	800a740 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a72c:	f383 8811 	msr	BASEPRI, r3
 800a730:	f3bf 8f6f 	isb	sy
 800a734:	f3bf 8f4f 	dsb	sy
 800a738:	60bb      	str	r3, [r7, #8]
}
 800a73a:	bf00      	nop
 800a73c:	bf00      	nop
 800a73e:	e7fd      	b.n	800a73c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a744:	1e5a      	subs	r2, r3, #1
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a752:	429a      	cmp	r2, r3
 800a754:	d044      	beq.n	800a7e0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d140      	bne.n	800a7e0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	3304      	adds	r3, #4
 800a762:	4618      	mov	r0, r3
 800a764:	f7fe f9ce 	bl	8008b04 <uxListRemove>
 800a768:	4603      	mov	r3, r0
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d115      	bne.n	800a79a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a772:	491f      	ldr	r1, [pc, #124]	@ (800a7f0 <xTaskPriorityDisinherit+0x108>)
 800a774:	4613      	mov	r3, r2
 800a776:	009b      	lsls	r3, r3, #2
 800a778:	4413      	add	r3, r2
 800a77a:	009b      	lsls	r3, r3, #2
 800a77c:	440b      	add	r3, r1
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d10a      	bne.n	800a79a <xTaskPriorityDisinherit+0xb2>
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a788:	2201      	movs	r2, #1
 800a78a:	fa02 f303 	lsl.w	r3, r2, r3
 800a78e:	43da      	mvns	r2, r3
 800a790:	4b18      	ldr	r3, [pc, #96]	@ (800a7f4 <xTaskPriorityDisinherit+0x10c>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4013      	ands	r3, r2
 800a796:	4a17      	ldr	r2, [pc, #92]	@ (800a7f4 <xTaskPriorityDisinherit+0x10c>)
 800a798:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7a6:	f1c3 0207 	rsb	r2, r3, #7
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	409a      	lsls	r2, r3
 800a7b6:	4b0f      	ldr	r3, [pc, #60]	@ (800a7f4 <xTaskPriorityDisinherit+0x10c>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	4a0d      	ldr	r2, [pc, #52]	@ (800a7f4 <xTaskPriorityDisinherit+0x10c>)
 800a7be:	6013      	str	r3, [r2, #0]
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7c4:	4613      	mov	r3, r2
 800a7c6:	009b      	lsls	r3, r3, #2
 800a7c8:	4413      	add	r3, r2
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	4a08      	ldr	r2, [pc, #32]	@ (800a7f0 <xTaskPriorityDisinherit+0x108>)
 800a7ce:	441a      	add	r2, r3
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	3304      	adds	r3, #4
 800a7d4:	4619      	mov	r1, r3
 800a7d6:	4610      	mov	r0, r2
 800a7d8:	f7fe f937 	bl	8008a4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a7e0:	697b      	ldr	r3, [r7, #20]
	}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3718      	adds	r7, #24
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
 800a7ea:	bf00      	nop
 800a7ec:	200005c4 	.word	0x200005c4
 800a7f0:	200005c8 	.word	0x200005c8
 800a7f4:	200006cc 	.word	0x200006cc

0800a7f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b088      	sub	sp, #32
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a806:	2301      	movs	r3, #1
 800a808:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d079      	beq.n	800a904 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a810:	69bb      	ldr	r3, [r7, #24]
 800a812:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a814:	2b00      	cmp	r3, #0
 800a816:	d10b      	bne.n	800a830 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a81c:	f383 8811 	msr	BASEPRI, r3
 800a820:	f3bf 8f6f 	isb	sy
 800a824:	f3bf 8f4f 	dsb	sy
 800a828:	60fb      	str	r3, [r7, #12]
}
 800a82a:	bf00      	nop
 800a82c:	bf00      	nop
 800a82e:	e7fd      	b.n	800a82c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a830:	69bb      	ldr	r3, [r7, #24]
 800a832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a834:	683a      	ldr	r2, [r7, #0]
 800a836:	429a      	cmp	r2, r3
 800a838:	d902      	bls.n	800a840 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	61fb      	str	r3, [r7, #28]
 800a83e:	e002      	b.n	800a846 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a844:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a846:	69bb      	ldr	r3, [r7, #24]
 800a848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a84a:	69fa      	ldr	r2, [r7, #28]
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d059      	beq.n	800a904 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a850:	69bb      	ldr	r3, [r7, #24]
 800a852:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a854:	697a      	ldr	r2, [r7, #20]
 800a856:	429a      	cmp	r2, r3
 800a858:	d154      	bne.n	800a904 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a85a:	4b2c      	ldr	r3, [pc, #176]	@ (800a90c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	69ba      	ldr	r2, [r7, #24]
 800a860:	429a      	cmp	r2, r3
 800a862:	d10b      	bne.n	800a87c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800a864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a868:	f383 8811 	msr	BASEPRI, r3
 800a86c:	f3bf 8f6f 	isb	sy
 800a870:	f3bf 8f4f 	dsb	sy
 800a874:	60bb      	str	r3, [r7, #8]
}
 800a876:	bf00      	nop
 800a878:	bf00      	nop
 800a87a:	e7fd      	b.n	800a878 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a87c:	69bb      	ldr	r3, [r7, #24]
 800a87e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a880:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a882:	69bb      	ldr	r3, [r7, #24]
 800a884:	69fa      	ldr	r2, [r7, #28]
 800a886:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a888:	69bb      	ldr	r3, [r7, #24]
 800a88a:	699b      	ldr	r3, [r3, #24]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	db04      	blt.n	800a89a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a890:	69fb      	ldr	r3, [r7, #28]
 800a892:	f1c3 0207 	rsb	r2, r3, #7
 800a896:	69bb      	ldr	r3, [r7, #24]
 800a898:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a89a:	69bb      	ldr	r3, [r7, #24]
 800a89c:	6959      	ldr	r1, [r3, #20]
 800a89e:	693a      	ldr	r2, [r7, #16]
 800a8a0:	4613      	mov	r3, r2
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	4413      	add	r3, r2
 800a8a6:	009b      	lsls	r3, r3, #2
 800a8a8:	4a19      	ldr	r2, [pc, #100]	@ (800a910 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a8aa:	4413      	add	r3, r2
 800a8ac:	4299      	cmp	r1, r3
 800a8ae:	d129      	bne.n	800a904 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8b0:	69bb      	ldr	r3, [r7, #24]
 800a8b2:	3304      	adds	r3, #4
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7fe f925 	bl	8008b04 <uxListRemove>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d10a      	bne.n	800a8d6 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a8c0:	69bb      	ldr	r3, [r7, #24]
 800a8c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8c4:	2201      	movs	r2, #1
 800a8c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ca:	43da      	mvns	r2, r3
 800a8cc:	4b11      	ldr	r3, [pc, #68]	@ (800a914 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4013      	ands	r3, r2
 800a8d2:	4a10      	ldr	r2, [pc, #64]	@ (800a914 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a8d4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a8d6:	69bb      	ldr	r3, [r7, #24]
 800a8d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8da:	2201      	movs	r2, #1
 800a8dc:	409a      	lsls	r2, r3
 800a8de:	4b0d      	ldr	r3, [pc, #52]	@ (800a914 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	4a0b      	ldr	r2, [pc, #44]	@ (800a914 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a8e6:	6013      	str	r3, [r2, #0]
 800a8e8:	69bb      	ldr	r3, [r7, #24]
 800a8ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8ec:	4613      	mov	r3, r2
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	4413      	add	r3, r2
 800a8f2:	009b      	lsls	r3, r3, #2
 800a8f4:	4a06      	ldr	r2, [pc, #24]	@ (800a910 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a8f6:	441a      	add	r2, r3
 800a8f8:	69bb      	ldr	r3, [r7, #24]
 800a8fa:	3304      	adds	r3, #4
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	4610      	mov	r0, r2
 800a900:	f7fe f8a3 	bl	8008a4a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a904:	bf00      	nop
 800a906:	3720      	adds	r7, #32
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}
 800a90c:	200005c4 	.word	0x200005c4
 800a910:	200005c8 	.word	0x200005c8
 800a914:	200006cc 	.word	0x200006cc

0800a918 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a918:	b480      	push	{r7}
 800a91a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a91c:	4b07      	ldr	r3, [pc, #28]	@ (800a93c <pvTaskIncrementMutexHeldCount+0x24>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d004      	beq.n	800a92e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a924:	4b05      	ldr	r3, [pc, #20]	@ (800a93c <pvTaskIncrementMutexHeldCount+0x24>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a92a:	3201      	adds	r2, #1
 800a92c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800a92e:	4b03      	ldr	r3, [pc, #12]	@ (800a93c <pvTaskIncrementMutexHeldCount+0x24>)
 800a930:	681b      	ldr	r3, [r3, #0]
	}
 800a932:	4618      	mov	r0, r3
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr
 800a93c:	200005c4 	.word	0x200005c4

0800a940 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b084      	sub	sp, #16
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a94a:	4b29      	ldr	r3, [pc, #164]	@ (800a9f0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a950:	4b28      	ldr	r3, [pc, #160]	@ (800a9f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	3304      	adds	r3, #4
 800a956:	4618      	mov	r0, r3
 800a958:	f7fe f8d4 	bl	8008b04 <uxListRemove>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d10b      	bne.n	800a97a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a962:	4b24      	ldr	r3, [pc, #144]	@ (800a9f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a968:	2201      	movs	r2, #1
 800a96a:	fa02 f303 	lsl.w	r3, r2, r3
 800a96e:	43da      	mvns	r2, r3
 800a970:	4b21      	ldr	r3, [pc, #132]	@ (800a9f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4013      	ands	r3, r2
 800a976:	4a20      	ldr	r2, [pc, #128]	@ (800a9f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a978:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a980:	d10a      	bne.n	800a998 <prvAddCurrentTaskToDelayedList+0x58>
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d007      	beq.n	800a998 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a988:	4b1a      	ldr	r3, [pc, #104]	@ (800a9f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	3304      	adds	r3, #4
 800a98e:	4619      	mov	r1, r3
 800a990:	481a      	ldr	r0, [pc, #104]	@ (800a9fc <prvAddCurrentTaskToDelayedList+0xbc>)
 800a992:	f7fe f85a 	bl	8008a4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a996:	e026      	b.n	800a9e6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a998:	68fa      	ldr	r2, [r7, #12]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	4413      	add	r3, r2
 800a99e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a9a0:	4b14      	ldr	r3, [pc, #80]	@ (800a9f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	68ba      	ldr	r2, [r7, #8]
 800a9a6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a9a8:	68ba      	ldr	r2, [r7, #8]
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d209      	bcs.n	800a9c4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9b0:	4b13      	ldr	r3, [pc, #76]	@ (800aa00 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a9b2:	681a      	ldr	r2, [r3, #0]
 800a9b4:	4b0f      	ldr	r3, [pc, #60]	@ (800a9f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	3304      	adds	r3, #4
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	4610      	mov	r0, r2
 800a9be:	f7fe f868 	bl	8008a92 <vListInsert>
}
 800a9c2:	e010      	b.n	800a9e6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9c4:	4b0f      	ldr	r3, [pc, #60]	@ (800aa04 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a9c6:	681a      	ldr	r2, [r3, #0]
 800a9c8:	4b0a      	ldr	r3, [pc, #40]	@ (800a9f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	3304      	adds	r3, #4
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	4610      	mov	r0, r2
 800a9d2:	f7fe f85e 	bl	8008a92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a9d6:	4b0c      	ldr	r3, [pc, #48]	@ (800aa08 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	68ba      	ldr	r2, [r7, #8]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d202      	bcs.n	800a9e6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a9e0:	4a09      	ldr	r2, [pc, #36]	@ (800aa08 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	6013      	str	r3, [r2, #0]
}
 800a9e6:	bf00      	nop
 800a9e8:	3710      	adds	r7, #16
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop
 800a9f0:	200006c8 	.word	0x200006c8
 800a9f4:	200005c4 	.word	0x200005c4
 800a9f8:	200006cc 	.word	0x200006cc
 800a9fc:	200006b0 	.word	0x200006b0
 800aa00:	20000680 	.word	0x20000680
 800aa04:	2000067c 	.word	0x2000067c
 800aa08:	200006e4 	.word	0x200006e4

0800aa0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b085      	sub	sp, #20
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	60f8      	str	r0, [r7, #12]
 800aa14:	60b9      	str	r1, [r7, #8]
 800aa16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	3b04      	subs	r3, #4
 800aa1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800aa24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	3b04      	subs	r3, #4
 800aa2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	f023 0201 	bic.w	r2, r3, #1
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	3b04      	subs	r3, #4
 800aa3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aa3c:	4a0c      	ldr	r2, [pc, #48]	@ (800aa70 <pxPortInitialiseStack+0x64>)
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	3b14      	subs	r3, #20
 800aa46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aa48:	687a      	ldr	r2, [r7, #4]
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	3b04      	subs	r3, #4
 800aa52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f06f 0202 	mvn.w	r2, #2
 800aa5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	3b20      	subs	r3, #32
 800aa60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aa62:	68fb      	ldr	r3, [r7, #12]
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3714      	adds	r7, #20
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr
 800aa70:	0800aa75 	.word	0x0800aa75

0800aa74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aa74:	b480      	push	{r7}
 800aa76:	b085      	sub	sp, #20
 800aa78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aa7e:	4b13      	ldr	r3, [pc, #76]	@ (800aacc <prvTaskExitError+0x58>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa86:	d00b      	beq.n	800aaa0 <prvTaskExitError+0x2c>
	__asm volatile
 800aa88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa8c:	f383 8811 	msr	BASEPRI, r3
 800aa90:	f3bf 8f6f 	isb	sy
 800aa94:	f3bf 8f4f 	dsb	sy
 800aa98:	60fb      	str	r3, [r7, #12]
}
 800aa9a:	bf00      	nop
 800aa9c:	bf00      	nop
 800aa9e:	e7fd      	b.n	800aa9c <prvTaskExitError+0x28>
	__asm volatile
 800aaa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaa4:	f383 8811 	msr	BASEPRI, r3
 800aaa8:	f3bf 8f6f 	isb	sy
 800aaac:	f3bf 8f4f 	dsb	sy
 800aab0:	60bb      	str	r3, [r7, #8]
}
 800aab2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aab4:	bf00      	nop
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d0fc      	beq.n	800aab6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aabc:	bf00      	nop
 800aabe:	bf00      	nop
 800aac0:	3714      	adds	r7, #20
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop
 800aacc:	20000024 	.word	0x20000024

0800aad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aad0:	4b07      	ldr	r3, [pc, #28]	@ (800aaf0 <pxCurrentTCBConst2>)
 800aad2:	6819      	ldr	r1, [r3, #0]
 800aad4:	6808      	ldr	r0, [r1, #0]
 800aad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aada:	f380 8809 	msr	PSP, r0
 800aade:	f3bf 8f6f 	isb	sy
 800aae2:	f04f 0000 	mov.w	r0, #0
 800aae6:	f380 8811 	msr	BASEPRI, r0
 800aaea:	4770      	bx	lr
 800aaec:	f3af 8000 	nop.w

0800aaf0 <pxCurrentTCBConst2>:
 800aaf0:	200005c4 	.word	0x200005c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aaf4:	bf00      	nop
 800aaf6:	bf00      	nop

0800aaf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aaf8:	4808      	ldr	r0, [pc, #32]	@ (800ab1c <prvPortStartFirstTask+0x24>)
 800aafa:	6800      	ldr	r0, [r0, #0]
 800aafc:	6800      	ldr	r0, [r0, #0]
 800aafe:	f380 8808 	msr	MSP, r0
 800ab02:	f04f 0000 	mov.w	r0, #0
 800ab06:	f380 8814 	msr	CONTROL, r0
 800ab0a:	b662      	cpsie	i
 800ab0c:	b661      	cpsie	f
 800ab0e:	f3bf 8f4f 	dsb	sy
 800ab12:	f3bf 8f6f 	isb	sy
 800ab16:	df00      	svc	0
 800ab18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ab1a:	bf00      	nop
 800ab1c:	e000ed08 	.word	0xe000ed08

0800ab20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b086      	sub	sp, #24
 800ab24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ab26:	4b47      	ldr	r3, [pc, #284]	@ (800ac44 <xPortStartScheduler+0x124>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a47      	ldr	r2, [pc, #284]	@ (800ac48 <xPortStartScheduler+0x128>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d10b      	bne.n	800ab48 <xPortStartScheduler+0x28>
	__asm volatile
 800ab30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab34:	f383 8811 	msr	BASEPRI, r3
 800ab38:	f3bf 8f6f 	isb	sy
 800ab3c:	f3bf 8f4f 	dsb	sy
 800ab40:	613b      	str	r3, [r7, #16]
}
 800ab42:	bf00      	nop
 800ab44:	bf00      	nop
 800ab46:	e7fd      	b.n	800ab44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ab48:	4b3e      	ldr	r3, [pc, #248]	@ (800ac44 <xPortStartScheduler+0x124>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a3f      	ldr	r2, [pc, #252]	@ (800ac4c <xPortStartScheduler+0x12c>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d10b      	bne.n	800ab6a <xPortStartScheduler+0x4a>
	__asm volatile
 800ab52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab56:	f383 8811 	msr	BASEPRI, r3
 800ab5a:	f3bf 8f6f 	isb	sy
 800ab5e:	f3bf 8f4f 	dsb	sy
 800ab62:	60fb      	str	r3, [r7, #12]
}
 800ab64:	bf00      	nop
 800ab66:	bf00      	nop
 800ab68:	e7fd      	b.n	800ab66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ab6a:	4b39      	ldr	r3, [pc, #228]	@ (800ac50 <xPortStartScheduler+0x130>)
 800ab6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	22ff      	movs	r2, #255	@ 0xff
 800ab7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ab84:	78fb      	ldrb	r3, [r7, #3]
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ab8c:	b2da      	uxtb	r2, r3
 800ab8e:	4b31      	ldr	r3, [pc, #196]	@ (800ac54 <xPortStartScheduler+0x134>)
 800ab90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ab92:	4b31      	ldr	r3, [pc, #196]	@ (800ac58 <xPortStartScheduler+0x138>)
 800ab94:	2207      	movs	r2, #7
 800ab96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab98:	e009      	b.n	800abae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ab9a:	4b2f      	ldr	r3, [pc, #188]	@ (800ac58 <xPortStartScheduler+0x138>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	3b01      	subs	r3, #1
 800aba0:	4a2d      	ldr	r2, [pc, #180]	@ (800ac58 <xPortStartScheduler+0x138>)
 800aba2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aba4:	78fb      	ldrb	r3, [r7, #3]
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	005b      	lsls	r3, r3, #1
 800abaa:	b2db      	uxtb	r3, r3
 800abac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800abae:	78fb      	ldrb	r3, [r7, #3]
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abb6:	2b80      	cmp	r3, #128	@ 0x80
 800abb8:	d0ef      	beq.n	800ab9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800abba:	4b27      	ldr	r3, [pc, #156]	@ (800ac58 <xPortStartScheduler+0x138>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f1c3 0307 	rsb	r3, r3, #7
 800abc2:	2b04      	cmp	r3, #4
 800abc4:	d00b      	beq.n	800abde <xPortStartScheduler+0xbe>
	__asm volatile
 800abc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abca:	f383 8811 	msr	BASEPRI, r3
 800abce:	f3bf 8f6f 	isb	sy
 800abd2:	f3bf 8f4f 	dsb	sy
 800abd6:	60bb      	str	r3, [r7, #8]
}
 800abd8:	bf00      	nop
 800abda:	bf00      	nop
 800abdc:	e7fd      	b.n	800abda <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800abde:	4b1e      	ldr	r3, [pc, #120]	@ (800ac58 <xPortStartScheduler+0x138>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	021b      	lsls	r3, r3, #8
 800abe4:	4a1c      	ldr	r2, [pc, #112]	@ (800ac58 <xPortStartScheduler+0x138>)
 800abe6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800abe8:	4b1b      	ldr	r3, [pc, #108]	@ (800ac58 <xPortStartScheduler+0x138>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800abf0:	4a19      	ldr	r2, [pc, #100]	@ (800ac58 <xPortStartScheduler+0x138>)
 800abf2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	b2da      	uxtb	r2, r3
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800abfc:	4b17      	ldr	r3, [pc, #92]	@ (800ac5c <xPortStartScheduler+0x13c>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a16      	ldr	r2, [pc, #88]	@ (800ac5c <xPortStartScheduler+0x13c>)
 800ac02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ac06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ac08:	4b14      	ldr	r3, [pc, #80]	@ (800ac5c <xPortStartScheduler+0x13c>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	4a13      	ldr	r2, [pc, #76]	@ (800ac5c <xPortStartScheduler+0x13c>)
 800ac0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ac12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ac14:	f000 f8da 	bl	800adcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ac18:	4b11      	ldr	r3, [pc, #68]	@ (800ac60 <xPortStartScheduler+0x140>)
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ac1e:	f000 f8f9 	bl	800ae14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ac22:	4b10      	ldr	r3, [pc, #64]	@ (800ac64 <xPortStartScheduler+0x144>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	4a0f      	ldr	r2, [pc, #60]	@ (800ac64 <xPortStartScheduler+0x144>)
 800ac28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ac2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ac2e:	f7ff ff63 	bl	800aaf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ac32:	f7ff fa83 	bl	800a13c <vTaskSwitchContext>
	prvTaskExitError();
 800ac36:	f7ff ff1d 	bl	800aa74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ac3a:	2300      	movs	r3, #0
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3718      	adds	r7, #24
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}
 800ac44:	e000ed00 	.word	0xe000ed00
 800ac48:	410fc271 	.word	0x410fc271
 800ac4c:	410fc270 	.word	0x410fc270
 800ac50:	e000e400 	.word	0xe000e400
 800ac54:	200006f0 	.word	0x200006f0
 800ac58:	200006f4 	.word	0x200006f4
 800ac5c:	e000ed20 	.word	0xe000ed20
 800ac60:	20000024 	.word	0x20000024
 800ac64:	e000ef34 	.word	0xe000ef34

0800ac68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b083      	sub	sp, #12
 800ac6c:	af00      	add	r7, sp, #0
	__asm volatile
 800ac6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac72:	f383 8811 	msr	BASEPRI, r3
 800ac76:	f3bf 8f6f 	isb	sy
 800ac7a:	f3bf 8f4f 	dsb	sy
 800ac7e:	607b      	str	r3, [r7, #4]
}
 800ac80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ac82:	4b10      	ldr	r3, [pc, #64]	@ (800acc4 <vPortEnterCritical+0x5c>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	3301      	adds	r3, #1
 800ac88:	4a0e      	ldr	r2, [pc, #56]	@ (800acc4 <vPortEnterCritical+0x5c>)
 800ac8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ac8c:	4b0d      	ldr	r3, [pc, #52]	@ (800acc4 <vPortEnterCritical+0x5c>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	d110      	bne.n	800acb6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ac94:	4b0c      	ldr	r3, [pc, #48]	@ (800acc8 <vPortEnterCritical+0x60>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	b2db      	uxtb	r3, r3
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d00b      	beq.n	800acb6 <vPortEnterCritical+0x4e>
	__asm volatile
 800ac9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aca2:	f383 8811 	msr	BASEPRI, r3
 800aca6:	f3bf 8f6f 	isb	sy
 800acaa:	f3bf 8f4f 	dsb	sy
 800acae:	603b      	str	r3, [r7, #0]
}
 800acb0:	bf00      	nop
 800acb2:	bf00      	nop
 800acb4:	e7fd      	b.n	800acb2 <vPortEnterCritical+0x4a>
	}
}
 800acb6:	bf00      	nop
 800acb8:	370c      	adds	r7, #12
 800acba:	46bd      	mov	sp, r7
 800acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc0:	4770      	bx	lr
 800acc2:	bf00      	nop
 800acc4:	20000024 	.word	0x20000024
 800acc8:	e000ed04 	.word	0xe000ed04

0800accc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800accc:	b480      	push	{r7}
 800acce:	b083      	sub	sp, #12
 800acd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800acd2:	4b12      	ldr	r3, [pc, #72]	@ (800ad1c <vPortExitCritical+0x50>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d10b      	bne.n	800acf2 <vPortExitCritical+0x26>
	__asm volatile
 800acda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acde:	f383 8811 	msr	BASEPRI, r3
 800ace2:	f3bf 8f6f 	isb	sy
 800ace6:	f3bf 8f4f 	dsb	sy
 800acea:	607b      	str	r3, [r7, #4]
}
 800acec:	bf00      	nop
 800acee:	bf00      	nop
 800acf0:	e7fd      	b.n	800acee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800acf2:	4b0a      	ldr	r3, [pc, #40]	@ (800ad1c <vPortExitCritical+0x50>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	3b01      	subs	r3, #1
 800acf8:	4a08      	ldr	r2, [pc, #32]	@ (800ad1c <vPortExitCritical+0x50>)
 800acfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800acfc:	4b07      	ldr	r3, [pc, #28]	@ (800ad1c <vPortExitCritical+0x50>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d105      	bne.n	800ad10 <vPortExitCritical+0x44>
 800ad04:	2300      	movs	r3, #0
 800ad06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	f383 8811 	msr	BASEPRI, r3
}
 800ad0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ad10:	bf00      	nop
 800ad12:	370c      	adds	r7, #12
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr
 800ad1c:	20000024 	.word	0x20000024

0800ad20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ad20:	f3ef 8009 	mrs	r0, PSP
 800ad24:	f3bf 8f6f 	isb	sy
 800ad28:	4b15      	ldr	r3, [pc, #84]	@ (800ad80 <pxCurrentTCBConst>)
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	f01e 0f10 	tst.w	lr, #16
 800ad30:	bf08      	it	eq
 800ad32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ad36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad3a:	6010      	str	r0, [r2, #0]
 800ad3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ad40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ad44:	f380 8811 	msr	BASEPRI, r0
 800ad48:	f3bf 8f4f 	dsb	sy
 800ad4c:	f3bf 8f6f 	isb	sy
 800ad50:	f7ff f9f4 	bl	800a13c <vTaskSwitchContext>
 800ad54:	f04f 0000 	mov.w	r0, #0
 800ad58:	f380 8811 	msr	BASEPRI, r0
 800ad5c:	bc09      	pop	{r0, r3}
 800ad5e:	6819      	ldr	r1, [r3, #0]
 800ad60:	6808      	ldr	r0, [r1, #0]
 800ad62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad66:	f01e 0f10 	tst.w	lr, #16
 800ad6a:	bf08      	it	eq
 800ad6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ad70:	f380 8809 	msr	PSP, r0
 800ad74:	f3bf 8f6f 	isb	sy
 800ad78:	4770      	bx	lr
 800ad7a:	bf00      	nop
 800ad7c:	f3af 8000 	nop.w

0800ad80 <pxCurrentTCBConst>:
 800ad80:	200005c4 	.word	0x200005c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ad84:	bf00      	nop
 800ad86:	bf00      	nop

0800ad88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b082      	sub	sp, #8
 800ad8c:	af00      	add	r7, sp, #0
	__asm volatile
 800ad8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad92:	f383 8811 	msr	BASEPRI, r3
 800ad96:	f3bf 8f6f 	isb	sy
 800ad9a:	f3bf 8f4f 	dsb	sy
 800ad9e:	607b      	str	r3, [r7, #4]
}
 800ada0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ada2:	f7ff f911 	bl	8009fc8 <xTaskIncrementTick>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d003      	beq.n	800adb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800adac:	4b06      	ldr	r3, [pc, #24]	@ (800adc8 <SysTick_Handler+0x40>)
 800adae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800adb2:	601a      	str	r2, [r3, #0]
 800adb4:	2300      	movs	r3, #0
 800adb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	f383 8811 	msr	BASEPRI, r3
}
 800adbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800adc0:	bf00      	nop
 800adc2:	3708      	adds	r7, #8
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	e000ed04 	.word	0xe000ed04

0800adcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800adcc:	b480      	push	{r7}
 800adce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800add0:	4b0b      	ldr	r3, [pc, #44]	@ (800ae00 <vPortSetupTimerInterrupt+0x34>)
 800add2:	2200      	movs	r2, #0
 800add4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800add6:	4b0b      	ldr	r3, [pc, #44]	@ (800ae04 <vPortSetupTimerInterrupt+0x38>)
 800add8:	2200      	movs	r2, #0
 800adda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800addc:	4b0a      	ldr	r3, [pc, #40]	@ (800ae08 <vPortSetupTimerInterrupt+0x3c>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a0a      	ldr	r2, [pc, #40]	@ (800ae0c <vPortSetupTimerInterrupt+0x40>)
 800ade2:	fba2 2303 	umull	r2, r3, r2, r3
 800ade6:	099b      	lsrs	r3, r3, #6
 800ade8:	4a09      	ldr	r2, [pc, #36]	@ (800ae10 <vPortSetupTimerInterrupt+0x44>)
 800adea:	3b01      	subs	r3, #1
 800adec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800adee:	4b04      	ldr	r3, [pc, #16]	@ (800ae00 <vPortSetupTimerInterrupt+0x34>)
 800adf0:	2207      	movs	r2, #7
 800adf2:	601a      	str	r2, [r3, #0]
}
 800adf4:	bf00      	nop
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr
 800adfe:	bf00      	nop
 800ae00:	e000e010 	.word	0xe000e010
 800ae04:	e000e018 	.word	0xe000e018
 800ae08:	20000000 	.word	0x20000000
 800ae0c:	10624dd3 	.word	0x10624dd3
 800ae10:	e000e014 	.word	0xe000e014

0800ae14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ae14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ae24 <vPortEnableVFP+0x10>
 800ae18:	6801      	ldr	r1, [r0, #0]
 800ae1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ae1e:	6001      	str	r1, [r0, #0]
 800ae20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ae22:	bf00      	nop
 800ae24:	e000ed88 	.word	0xe000ed88

0800ae28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ae28:	b480      	push	{r7}
 800ae2a:	b085      	sub	sp, #20
 800ae2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ae2e:	f3ef 8305 	mrs	r3, IPSR
 800ae32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2b0f      	cmp	r3, #15
 800ae38:	d915      	bls.n	800ae66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ae3a:	4a18      	ldr	r2, [pc, #96]	@ (800ae9c <vPortValidateInterruptPriority+0x74>)
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	4413      	add	r3, r2
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ae44:	4b16      	ldr	r3, [pc, #88]	@ (800aea0 <vPortValidateInterruptPriority+0x78>)
 800ae46:	781b      	ldrb	r3, [r3, #0]
 800ae48:	7afa      	ldrb	r2, [r7, #11]
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d20b      	bcs.n	800ae66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ae4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae52:	f383 8811 	msr	BASEPRI, r3
 800ae56:	f3bf 8f6f 	isb	sy
 800ae5a:	f3bf 8f4f 	dsb	sy
 800ae5e:	607b      	str	r3, [r7, #4]
}
 800ae60:	bf00      	nop
 800ae62:	bf00      	nop
 800ae64:	e7fd      	b.n	800ae62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ae66:	4b0f      	ldr	r3, [pc, #60]	@ (800aea4 <vPortValidateInterruptPriority+0x7c>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ae6e:	4b0e      	ldr	r3, [pc, #56]	@ (800aea8 <vPortValidateInterruptPriority+0x80>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d90b      	bls.n	800ae8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ae76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae7a:	f383 8811 	msr	BASEPRI, r3
 800ae7e:	f3bf 8f6f 	isb	sy
 800ae82:	f3bf 8f4f 	dsb	sy
 800ae86:	603b      	str	r3, [r7, #0]
}
 800ae88:	bf00      	nop
 800ae8a:	bf00      	nop
 800ae8c:	e7fd      	b.n	800ae8a <vPortValidateInterruptPriority+0x62>
	}
 800ae8e:	bf00      	nop
 800ae90:	3714      	adds	r7, #20
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr
 800ae9a:	bf00      	nop
 800ae9c:	e000e3f0 	.word	0xe000e3f0
 800aea0:	200006f0 	.word	0x200006f0
 800aea4:	e000ed0c 	.word	0xe000ed0c
 800aea8:	200006f4 	.word	0x200006f4

0800aeac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b08a      	sub	sp, #40	@ 0x28
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aeb8:	f7fe ffda 	bl	8009e70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aebc:	4b5c      	ldr	r3, [pc, #368]	@ (800b030 <pvPortMalloc+0x184>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d101      	bne.n	800aec8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aec4:	f000 f924 	bl	800b110 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aec8:	4b5a      	ldr	r3, [pc, #360]	@ (800b034 <pvPortMalloc+0x188>)
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	4013      	ands	r3, r2
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	f040 8095 	bne.w	800b000 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d01e      	beq.n	800af1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800aedc:	2208      	movs	r2, #8
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	4413      	add	r3, r2
 800aee2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f003 0307 	and.w	r3, r3, #7
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d015      	beq.n	800af1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f023 0307 	bic.w	r3, r3, #7
 800aef4:	3308      	adds	r3, #8
 800aef6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f003 0307 	and.w	r3, r3, #7
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d00b      	beq.n	800af1a <pvPortMalloc+0x6e>
	__asm volatile
 800af02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af06:	f383 8811 	msr	BASEPRI, r3
 800af0a:	f3bf 8f6f 	isb	sy
 800af0e:	f3bf 8f4f 	dsb	sy
 800af12:	617b      	str	r3, [r7, #20]
}
 800af14:	bf00      	nop
 800af16:	bf00      	nop
 800af18:	e7fd      	b.n	800af16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d06f      	beq.n	800b000 <pvPortMalloc+0x154>
 800af20:	4b45      	ldr	r3, [pc, #276]	@ (800b038 <pvPortMalloc+0x18c>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	687a      	ldr	r2, [r7, #4]
 800af26:	429a      	cmp	r2, r3
 800af28:	d86a      	bhi.n	800b000 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800af2a:	4b44      	ldr	r3, [pc, #272]	@ (800b03c <pvPortMalloc+0x190>)
 800af2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800af2e:	4b43      	ldr	r3, [pc, #268]	@ (800b03c <pvPortMalloc+0x190>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af34:	e004      	b.n	800af40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800af36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800af3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	429a      	cmp	r2, r3
 800af48:	d903      	bls.n	800af52 <pvPortMalloc+0xa6>
 800af4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d1f1      	bne.n	800af36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800af52:	4b37      	ldr	r3, [pc, #220]	@ (800b030 <pvPortMalloc+0x184>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af58:	429a      	cmp	r2, r3
 800af5a:	d051      	beq.n	800b000 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800af5c:	6a3b      	ldr	r3, [r7, #32]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	2208      	movs	r2, #8
 800af62:	4413      	add	r3, r2
 800af64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800af66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af68:	681a      	ldr	r2, [r3, #0]
 800af6a:	6a3b      	ldr	r3, [r7, #32]
 800af6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800af6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af70:	685a      	ldr	r2, [r3, #4]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	1ad2      	subs	r2, r2, r3
 800af76:	2308      	movs	r3, #8
 800af78:	005b      	lsls	r3, r3, #1
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d920      	bls.n	800afc0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800af7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	4413      	add	r3, r2
 800af84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af86:	69bb      	ldr	r3, [r7, #24]
 800af88:	f003 0307 	and.w	r3, r3, #7
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d00b      	beq.n	800afa8 <pvPortMalloc+0xfc>
	__asm volatile
 800af90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af94:	f383 8811 	msr	BASEPRI, r3
 800af98:	f3bf 8f6f 	isb	sy
 800af9c:	f3bf 8f4f 	dsb	sy
 800afa0:	613b      	str	r3, [r7, #16]
}
 800afa2:	bf00      	nop
 800afa4:	bf00      	nop
 800afa6:	e7fd      	b.n	800afa4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800afa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afaa:	685a      	ldr	r2, [r3, #4]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	1ad2      	subs	r2, r2, r3
 800afb0:	69bb      	ldr	r3, [r7, #24]
 800afb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800afb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afb6:	687a      	ldr	r2, [r7, #4]
 800afb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800afba:	69b8      	ldr	r0, [r7, #24]
 800afbc:	f000 f90a 	bl	800b1d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800afc0:	4b1d      	ldr	r3, [pc, #116]	@ (800b038 <pvPortMalloc+0x18c>)
 800afc2:	681a      	ldr	r2, [r3, #0]
 800afc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	1ad3      	subs	r3, r2, r3
 800afca:	4a1b      	ldr	r2, [pc, #108]	@ (800b038 <pvPortMalloc+0x18c>)
 800afcc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800afce:	4b1a      	ldr	r3, [pc, #104]	@ (800b038 <pvPortMalloc+0x18c>)
 800afd0:	681a      	ldr	r2, [r3, #0]
 800afd2:	4b1b      	ldr	r3, [pc, #108]	@ (800b040 <pvPortMalloc+0x194>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d203      	bcs.n	800afe2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800afda:	4b17      	ldr	r3, [pc, #92]	@ (800b038 <pvPortMalloc+0x18c>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4a18      	ldr	r2, [pc, #96]	@ (800b040 <pvPortMalloc+0x194>)
 800afe0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800afe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afe4:	685a      	ldr	r2, [r3, #4]
 800afe6:	4b13      	ldr	r3, [pc, #76]	@ (800b034 <pvPortMalloc+0x188>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	431a      	orrs	r2, r3
 800afec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aff2:	2200      	movs	r2, #0
 800aff4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aff6:	4b13      	ldr	r3, [pc, #76]	@ (800b044 <pvPortMalloc+0x198>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	3301      	adds	r3, #1
 800affc:	4a11      	ldr	r2, [pc, #68]	@ (800b044 <pvPortMalloc+0x198>)
 800affe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b000:	f7fe ff44 	bl	8009e8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b004:	69fb      	ldr	r3, [r7, #28]
 800b006:	f003 0307 	and.w	r3, r3, #7
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d00b      	beq.n	800b026 <pvPortMalloc+0x17a>
	__asm volatile
 800b00e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b012:	f383 8811 	msr	BASEPRI, r3
 800b016:	f3bf 8f6f 	isb	sy
 800b01a:	f3bf 8f4f 	dsb	sy
 800b01e:	60fb      	str	r3, [r7, #12]
}
 800b020:	bf00      	nop
 800b022:	bf00      	nop
 800b024:	e7fd      	b.n	800b022 <pvPortMalloc+0x176>
	return pvReturn;
 800b026:	69fb      	ldr	r3, [r7, #28]
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3728      	adds	r7, #40	@ 0x28
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}
 800b030:	20004300 	.word	0x20004300
 800b034:	20004314 	.word	0x20004314
 800b038:	20004304 	.word	0x20004304
 800b03c:	200042f8 	.word	0x200042f8
 800b040:	20004308 	.word	0x20004308
 800b044:	2000430c 	.word	0x2000430c

0800b048 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b086      	sub	sp, #24
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d04f      	beq.n	800b0fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b05a:	2308      	movs	r3, #8
 800b05c:	425b      	negs	r3, r3
 800b05e:	697a      	ldr	r2, [r7, #20]
 800b060:	4413      	add	r3, r2
 800b062:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	685a      	ldr	r2, [r3, #4]
 800b06c:	4b25      	ldr	r3, [pc, #148]	@ (800b104 <vPortFree+0xbc>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	4013      	ands	r3, r2
 800b072:	2b00      	cmp	r3, #0
 800b074:	d10b      	bne.n	800b08e <vPortFree+0x46>
	__asm volatile
 800b076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b07a:	f383 8811 	msr	BASEPRI, r3
 800b07e:	f3bf 8f6f 	isb	sy
 800b082:	f3bf 8f4f 	dsb	sy
 800b086:	60fb      	str	r3, [r7, #12]
}
 800b088:	bf00      	nop
 800b08a:	bf00      	nop
 800b08c:	e7fd      	b.n	800b08a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d00b      	beq.n	800b0ae <vPortFree+0x66>
	__asm volatile
 800b096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b09a:	f383 8811 	msr	BASEPRI, r3
 800b09e:	f3bf 8f6f 	isb	sy
 800b0a2:	f3bf 8f4f 	dsb	sy
 800b0a6:	60bb      	str	r3, [r7, #8]
}
 800b0a8:	bf00      	nop
 800b0aa:	bf00      	nop
 800b0ac:	e7fd      	b.n	800b0aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	685a      	ldr	r2, [r3, #4]
 800b0b2:	4b14      	ldr	r3, [pc, #80]	@ (800b104 <vPortFree+0xbc>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4013      	ands	r3, r2
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d01e      	beq.n	800b0fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d11a      	bne.n	800b0fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	685a      	ldr	r2, [r3, #4]
 800b0c8:	4b0e      	ldr	r3, [pc, #56]	@ (800b104 <vPortFree+0xbc>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	43db      	mvns	r3, r3
 800b0ce:	401a      	ands	r2, r3
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b0d4:	f7fe fecc 	bl	8009e70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	685a      	ldr	r2, [r3, #4]
 800b0dc:	4b0a      	ldr	r3, [pc, #40]	@ (800b108 <vPortFree+0xc0>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4413      	add	r3, r2
 800b0e2:	4a09      	ldr	r2, [pc, #36]	@ (800b108 <vPortFree+0xc0>)
 800b0e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b0e6:	6938      	ldr	r0, [r7, #16]
 800b0e8:	f000 f874 	bl	800b1d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b0ec:	4b07      	ldr	r3, [pc, #28]	@ (800b10c <vPortFree+0xc4>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	3301      	adds	r3, #1
 800b0f2:	4a06      	ldr	r2, [pc, #24]	@ (800b10c <vPortFree+0xc4>)
 800b0f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b0f6:	f7fe fec9 	bl	8009e8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b0fa:	bf00      	nop
 800b0fc:	3718      	adds	r7, #24
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	20004314 	.word	0x20004314
 800b108:	20004304 	.word	0x20004304
 800b10c:	20004310 	.word	0x20004310

0800b110 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b110:	b480      	push	{r7}
 800b112:	b085      	sub	sp, #20
 800b114:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b116:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b11a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b11c:	4b27      	ldr	r3, [pc, #156]	@ (800b1bc <prvHeapInit+0xac>)
 800b11e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	f003 0307 	and.w	r3, r3, #7
 800b126:	2b00      	cmp	r3, #0
 800b128:	d00c      	beq.n	800b144 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	3307      	adds	r3, #7
 800b12e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	f023 0307 	bic.w	r3, r3, #7
 800b136:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b138:	68ba      	ldr	r2, [r7, #8]
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	1ad3      	subs	r3, r2, r3
 800b13e:	4a1f      	ldr	r2, [pc, #124]	@ (800b1bc <prvHeapInit+0xac>)
 800b140:	4413      	add	r3, r2
 800b142:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b148:	4a1d      	ldr	r2, [pc, #116]	@ (800b1c0 <prvHeapInit+0xb0>)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b14e:	4b1c      	ldr	r3, [pc, #112]	@ (800b1c0 <prvHeapInit+0xb0>)
 800b150:	2200      	movs	r2, #0
 800b152:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	68ba      	ldr	r2, [r7, #8]
 800b158:	4413      	add	r3, r2
 800b15a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b15c:	2208      	movs	r2, #8
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	1a9b      	subs	r3, r3, r2
 800b162:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f023 0307 	bic.w	r3, r3, #7
 800b16a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	4a15      	ldr	r2, [pc, #84]	@ (800b1c4 <prvHeapInit+0xb4>)
 800b170:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b172:	4b14      	ldr	r3, [pc, #80]	@ (800b1c4 <prvHeapInit+0xb4>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	2200      	movs	r2, #0
 800b178:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b17a:	4b12      	ldr	r3, [pc, #72]	@ (800b1c4 <prvHeapInit+0xb4>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	2200      	movs	r2, #0
 800b180:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	68fa      	ldr	r2, [r7, #12]
 800b18a:	1ad2      	subs	r2, r2, r3
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b190:	4b0c      	ldr	r3, [pc, #48]	@ (800b1c4 <prvHeapInit+0xb4>)
 800b192:	681a      	ldr	r2, [r3, #0]
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	685b      	ldr	r3, [r3, #4]
 800b19c:	4a0a      	ldr	r2, [pc, #40]	@ (800b1c8 <prvHeapInit+0xb8>)
 800b19e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	685b      	ldr	r3, [r3, #4]
 800b1a4:	4a09      	ldr	r2, [pc, #36]	@ (800b1cc <prvHeapInit+0xbc>)
 800b1a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b1a8:	4b09      	ldr	r3, [pc, #36]	@ (800b1d0 <prvHeapInit+0xc0>)
 800b1aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b1ae:	601a      	str	r2, [r3, #0]
}
 800b1b0:	bf00      	nop
 800b1b2:	3714      	adds	r7, #20
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr
 800b1bc:	200006f8 	.word	0x200006f8
 800b1c0:	200042f8 	.word	0x200042f8
 800b1c4:	20004300 	.word	0x20004300
 800b1c8:	20004308 	.word	0x20004308
 800b1cc:	20004304 	.word	0x20004304
 800b1d0:	20004314 	.word	0x20004314

0800b1d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b085      	sub	sp, #20
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b1dc:	4b28      	ldr	r3, [pc, #160]	@ (800b280 <prvInsertBlockIntoFreeList+0xac>)
 800b1de:	60fb      	str	r3, [r7, #12]
 800b1e0:	e002      	b.n	800b1e8 <prvInsertBlockIntoFreeList+0x14>
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	60fb      	str	r3, [r7, #12]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	687a      	ldr	r2, [r7, #4]
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	d8f7      	bhi.n	800b1e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	685b      	ldr	r3, [r3, #4]
 800b1fa:	68ba      	ldr	r2, [r7, #8]
 800b1fc:	4413      	add	r3, r2
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	429a      	cmp	r2, r3
 800b202:	d108      	bne.n	800b216 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	685a      	ldr	r2, [r3, #4]
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	441a      	add	r2, r3
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	68ba      	ldr	r2, [r7, #8]
 800b220:	441a      	add	r2, r3
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	429a      	cmp	r2, r3
 800b228:	d118      	bne.n	800b25c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681a      	ldr	r2, [r3, #0]
 800b22e:	4b15      	ldr	r3, [pc, #84]	@ (800b284 <prvInsertBlockIntoFreeList+0xb0>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	429a      	cmp	r2, r3
 800b234:	d00d      	beq.n	800b252 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	685a      	ldr	r2, [r3, #4]
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	441a      	add	r2, r3
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	601a      	str	r2, [r3, #0]
 800b250:	e008      	b.n	800b264 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b252:	4b0c      	ldr	r3, [pc, #48]	@ (800b284 <prvInsertBlockIntoFreeList+0xb0>)
 800b254:	681a      	ldr	r2, [r3, #0]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	601a      	str	r2, [r3, #0]
 800b25a:	e003      	b.n	800b264 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681a      	ldr	r2, [r3, #0]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b264:	68fa      	ldr	r2, [r7, #12]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	429a      	cmp	r2, r3
 800b26a:	d002      	beq.n	800b272 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	687a      	ldr	r2, [r7, #4]
 800b270:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b272:	bf00      	nop
 800b274:	3714      	adds	r7, #20
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop
 800b280:	200042f8 	.word	0x200042f8
 800b284:	20004300 	.word	0x20004300

0800b288 <abort>:
 800b288:	b508      	push	{r3, lr}
 800b28a:	2006      	movs	r0, #6
 800b28c:	f000 f92c 	bl	800b4e8 <raise>
 800b290:	2001      	movs	r0, #1
 800b292:	f7f7 f8f5 	bl	8002480 <_exit>
	...

0800b298 <malloc>:
 800b298:	4b02      	ldr	r3, [pc, #8]	@ (800b2a4 <malloc+0xc>)
 800b29a:	4601      	mov	r1, r0
 800b29c:	6818      	ldr	r0, [r3, #0]
 800b29e:	f000 b82d 	b.w	800b2fc <_malloc_r>
 800b2a2:	bf00      	nop
 800b2a4:	20000028 	.word	0x20000028

0800b2a8 <free>:
 800b2a8:	4b02      	ldr	r3, [pc, #8]	@ (800b2b4 <free+0xc>)
 800b2aa:	4601      	mov	r1, r0
 800b2ac:	6818      	ldr	r0, [r3, #0]
 800b2ae:	f000 b981 	b.w	800b5b4 <_free_r>
 800b2b2:	bf00      	nop
 800b2b4:	20000028 	.word	0x20000028

0800b2b8 <sbrk_aligned>:
 800b2b8:	b570      	push	{r4, r5, r6, lr}
 800b2ba:	4e0f      	ldr	r6, [pc, #60]	@ (800b2f8 <sbrk_aligned+0x40>)
 800b2bc:	460c      	mov	r4, r1
 800b2be:	6831      	ldr	r1, [r6, #0]
 800b2c0:	4605      	mov	r5, r0
 800b2c2:	b911      	cbnz	r1, 800b2ca <sbrk_aligned+0x12>
 800b2c4:	f000 f92c 	bl	800b520 <_sbrk_r>
 800b2c8:	6030      	str	r0, [r6, #0]
 800b2ca:	4621      	mov	r1, r4
 800b2cc:	4628      	mov	r0, r5
 800b2ce:	f000 f927 	bl	800b520 <_sbrk_r>
 800b2d2:	1c43      	adds	r3, r0, #1
 800b2d4:	d103      	bne.n	800b2de <sbrk_aligned+0x26>
 800b2d6:	f04f 34ff 	mov.w	r4, #4294967295
 800b2da:	4620      	mov	r0, r4
 800b2dc:	bd70      	pop	{r4, r5, r6, pc}
 800b2de:	1cc4      	adds	r4, r0, #3
 800b2e0:	f024 0403 	bic.w	r4, r4, #3
 800b2e4:	42a0      	cmp	r0, r4
 800b2e6:	d0f8      	beq.n	800b2da <sbrk_aligned+0x22>
 800b2e8:	1a21      	subs	r1, r4, r0
 800b2ea:	4628      	mov	r0, r5
 800b2ec:	f000 f918 	bl	800b520 <_sbrk_r>
 800b2f0:	3001      	adds	r0, #1
 800b2f2:	d1f2      	bne.n	800b2da <sbrk_aligned+0x22>
 800b2f4:	e7ef      	b.n	800b2d6 <sbrk_aligned+0x1e>
 800b2f6:	bf00      	nop
 800b2f8:	20004318 	.word	0x20004318

0800b2fc <_malloc_r>:
 800b2fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b300:	1ccd      	adds	r5, r1, #3
 800b302:	f025 0503 	bic.w	r5, r5, #3
 800b306:	3508      	adds	r5, #8
 800b308:	2d0c      	cmp	r5, #12
 800b30a:	bf38      	it	cc
 800b30c:	250c      	movcc	r5, #12
 800b30e:	2d00      	cmp	r5, #0
 800b310:	4606      	mov	r6, r0
 800b312:	db01      	blt.n	800b318 <_malloc_r+0x1c>
 800b314:	42a9      	cmp	r1, r5
 800b316:	d904      	bls.n	800b322 <_malloc_r+0x26>
 800b318:	230c      	movs	r3, #12
 800b31a:	6033      	str	r3, [r6, #0]
 800b31c:	2000      	movs	r0, #0
 800b31e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b322:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b3f8 <_malloc_r+0xfc>
 800b326:	f000 f869 	bl	800b3fc <__malloc_lock>
 800b32a:	f8d8 3000 	ldr.w	r3, [r8]
 800b32e:	461c      	mov	r4, r3
 800b330:	bb44      	cbnz	r4, 800b384 <_malloc_r+0x88>
 800b332:	4629      	mov	r1, r5
 800b334:	4630      	mov	r0, r6
 800b336:	f7ff ffbf 	bl	800b2b8 <sbrk_aligned>
 800b33a:	1c43      	adds	r3, r0, #1
 800b33c:	4604      	mov	r4, r0
 800b33e:	d158      	bne.n	800b3f2 <_malloc_r+0xf6>
 800b340:	f8d8 4000 	ldr.w	r4, [r8]
 800b344:	4627      	mov	r7, r4
 800b346:	2f00      	cmp	r7, #0
 800b348:	d143      	bne.n	800b3d2 <_malloc_r+0xd6>
 800b34a:	2c00      	cmp	r4, #0
 800b34c:	d04b      	beq.n	800b3e6 <_malloc_r+0xea>
 800b34e:	6823      	ldr	r3, [r4, #0]
 800b350:	4639      	mov	r1, r7
 800b352:	4630      	mov	r0, r6
 800b354:	eb04 0903 	add.w	r9, r4, r3
 800b358:	f000 f8e2 	bl	800b520 <_sbrk_r>
 800b35c:	4581      	cmp	r9, r0
 800b35e:	d142      	bne.n	800b3e6 <_malloc_r+0xea>
 800b360:	6821      	ldr	r1, [r4, #0]
 800b362:	1a6d      	subs	r5, r5, r1
 800b364:	4629      	mov	r1, r5
 800b366:	4630      	mov	r0, r6
 800b368:	f7ff ffa6 	bl	800b2b8 <sbrk_aligned>
 800b36c:	3001      	adds	r0, #1
 800b36e:	d03a      	beq.n	800b3e6 <_malloc_r+0xea>
 800b370:	6823      	ldr	r3, [r4, #0]
 800b372:	442b      	add	r3, r5
 800b374:	6023      	str	r3, [r4, #0]
 800b376:	f8d8 3000 	ldr.w	r3, [r8]
 800b37a:	685a      	ldr	r2, [r3, #4]
 800b37c:	bb62      	cbnz	r2, 800b3d8 <_malloc_r+0xdc>
 800b37e:	f8c8 7000 	str.w	r7, [r8]
 800b382:	e00f      	b.n	800b3a4 <_malloc_r+0xa8>
 800b384:	6822      	ldr	r2, [r4, #0]
 800b386:	1b52      	subs	r2, r2, r5
 800b388:	d420      	bmi.n	800b3cc <_malloc_r+0xd0>
 800b38a:	2a0b      	cmp	r2, #11
 800b38c:	d917      	bls.n	800b3be <_malloc_r+0xc2>
 800b38e:	1961      	adds	r1, r4, r5
 800b390:	42a3      	cmp	r3, r4
 800b392:	6025      	str	r5, [r4, #0]
 800b394:	bf18      	it	ne
 800b396:	6059      	strne	r1, [r3, #4]
 800b398:	6863      	ldr	r3, [r4, #4]
 800b39a:	bf08      	it	eq
 800b39c:	f8c8 1000 	streq.w	r1, [r8]
 800b3a0:	5162      	str	r2, [r4, r5]
 800b3a2:	604b      	str	r3, [r1, #4]
 800b3a4:	4630      	mov	r0, r6
 800b3a6:	f000 f82f 	bl	800b408 <__malloc_unlock>
 800b3aa:	f104 000b 	add.w	r0, r4, #11
 800b3ae:	1d23      	adds	r3, r4, #4
 800b3b0:	f020 0007 	bic.w	r0, r0, #7
 800b3b4:	1ac2      	subs	r2, r0, r3
 800b3b6:	bf1c      	itt	ne
 800b3b8:	1a1b      	subne	r3, r3, r0
 800b3ba:	50a3      	strne	r3, [r4, r2]
 800b3bc:	e7af      	b.n	800b31e <_malloc_r+0x22>
 800b3be:	6862      	ldr	r2, [r4, #4]
 800b3c0:	42a3      	cmp	r3, r4
 800b3c2:	bf0c      	ite	eq
 800b3c4:	f8c8 2000 	streq.w	r2, [r8]
 800b3c8:	605a      	strne	r2, [r3, #4]
 800b3ca:	e7eb      	b.n	800b3a4 <_malloc_r+0xa8>
 800b3cc:	4623      	mov	r3, r4
 800b3ce:	6864      	ldr	r4, [r4, #4]
 800b3d0:	e7ae      	b.n	800b330 <_malloc_r+0x34>
 800b3d2:	463c      	mov	r4, r7
 800b3d4:	687f      	ldr	r7, [r7, #4]
 800b3d6:	e7b6      	b.n	800b346 <_malloc_r+0x4a>
 800b3d8:	461a      	mov	r2, r3
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	42a3      	cmp	r3, r4
 800b3de:	d1fb      	bne.n	800b3d8 <_malloc_r+0xdc>
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	6053      	str	r3, [r2, #4]
 800b3e4:	e7de      	b.n	800b3a4 <_malloc_r+0xa8>
 800b3e6:	230c      	movs	r3, #12
 800b3e8:	6033      	str	r3, [r6, #0]
 800b3ea:	4630      	mov	r0, r6
 800b3ec:	f000 f80c 	bl	800b408 <__malloc_unlock>
 800b3f0:	e794      	b.n	800b31c <_malloc_r+0x20>
 800b3f2:	6005      	str	r5, [r0, #0]
 800b3f4:	e7d6      	b.n	800b3a4 <_malloc_r+0xa8>
 800b3f6:	bf00      	nop
 800b3f8:	2000431c 	.word	0x2000431c

0800b3fc <__malloc_lock>:
 800b3fc:	4801      	ldr	r0, [pc, #4]	@ (800b404 <__malloc_lock+0x8>)
 800b3fe:	f000 b8c9 	b.w	800b594 <__retarget_lock_acquire_recursive>
 800b402:	bf00      	nop
 800b404:	2000445c 	.word	0x2000445c

0800b408 <__malloc_unlock>:
 800b408:	4801      	ldr	r0, [pc, #4]	@ (800b410 <__malloc_unlock+0x8>)
 800b40a:	f000 b8c4 	b.w	800b596 <__retarget_lock_release_recursive>
 800b40e:	bf00      	nop
 800b410:	2000445c 	.word	0x2000445c

0800b414 <_vsniprintf_r>:
 800b414:	b530      	push	{r4, r5, lr}
 800b416:	4614      	mov	r4, r2
 800b418:	2c00      	cmp	r4, #0
 800b41a:	b09b      	sub	sp, #108	@ 0x6c
 800b41c:	4605      	mov	r5, r0
 800b41e:	461a      	mov	r2, r3
 800b420:	da05      	bge.n	800b42e <_vsniprintf_r+0x1a>
 800b422:	238b      	movs	r3, #139	@ 0x8b
 800b424:	6003      	str	r3, [r0, #0]
 800b426:	f04f 30ff 	mov.w	r0, #4294967295
 800b42a:	b01b      	add	sp, #108	@ 0x6c
 800b42c:	bd30      	pop	{r4, r5, pc}
 800b42e:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b432:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b436:	bf14      	ite	ne
 800b438:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b43c:	4623      	moveq	r3, r4
 800b43e:	9302      	str	r3, [sp, #8]
 800b440:	9305      	str	r3, [sp, #20]
 800b442:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b446:	9100      	str	r1, [sp, #0]
 800b448:	9104      	str	r1, [sp, #16]
 800b44a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b44e:	4669      	mov	r1, sp
 800b450:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b452:	f000 f955 	bl	800b700 <_svfiprintf_r>
 800b456:	1c43      	adds	r3, r0, #1
 800b458:	bfbc      	itt	lt
 800b45a:	238b      	movlt	r3, #139	@ 0x8b
 800b45c:	602b      	strlt	r3, [r5, #0]
 800b45e:	2c00      	cmp	r4, #0
 800b460:	d0e3      	beq.n	800b42a <_vsniprintf_r+0x16>
 800b462:	9b00      	ldr	r3, [sp, #0]
 800b464:	2200      	movs	r2, #0
 800b466:	701a      	strb	r2, [r3, #0]
 800b468:	e7df      	b.n	800b42a <_vsniprintf_r+0x16>
	...

0800b46c <vsniprintf>:
 800b46c:	b507      	push	{r0, r1, r2, lr}
 800b46e:	9300      	str	r3, [sp, #0]
 800b470:	4613      	mov	r3, r2
 800b472:	460a      	mov	r2, r1
 800b474:	4601      	mov	r1, r0
 800b476:	4803      	ldr	r0, [pc, #12]	@ (800b484 <vsniprintf+0x18>)
 800b478:	6800      	ldr	r0, [r0, #0]
 800b47a:	f7ff ffcb 	bl	800b414 <_vsniprintf_r>
 800b47e:	b003      	add	sp, #12
 800b480:	f85d fb04 	ldr.w	pc, [sp], #4
 800b484:	20000028 	.word	0x20000028

0800b488 <memset>:
 800b488:	4402      	add	r2, r0
 800b48a:	4603      	mov	r3, r0
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d100      	bne.n	800b492 <memset+0xa>
 800b490:	4770      	bx	lr
 800b492:	f803 1b01 	strb.w	r1, [r3], #1
 800b496:	e7f9      	b.n	800b48c <memset+0x4>

0800b498 <_raise_r>:
 800b498:	291f      	cmp	r1, #31
 800b49a:	b538      	push	{r3, r4, r5, lr}
 800b49c:	4605      	mov	r5, r0
 800b49e:	460c      	mov	r4, r1
 800b4a0:	d904      	bls.n	800b4ac <_raise_r+0x14>
 800b4a2:	2316      	movs	r3, #22
 800b4a4:	6003      	str	r3, [r0, #0]
 800b4a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b4aa:	bd38      	pop	{r3, r4, r5, pc}
 800b4ac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b4ae:	b112      	cbz	r2, 800b4b6 <_raise_r+0x1e>
 800b4b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b4b4:	b94b      	cbnz	r3, 800b4ca <_raise_r+0x32>
 800b4b6:	4628      	mov	r0, r5
 800b4b8:	f000 f830 	bl	800b51c <_getpid_r>
 800b4bc:	4622      	mov	r2, r4
 800b4be:	4601      	mov	r1, r0
 800b4c0:	4628      	mov	r0, r5
 800b4c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4c6:	f000 b817 	b.w	800b4f8 <_kill_r>
 800b4ca:	2b01      	cmp	r3, #1
 800b4cc:	d00a      	beq.n	800b4e4 <_raise_r+0x4c>
 800b4ce:	1c59      	adds	r1, r3, #1
 800b4d0:	d103      	bne.n	800b4da <_raise_r+0x42>
 800b4d2:	2316      	movs	r3, #22
 800b4d4:	6003      	str	r3, [r0, #0]
 800b4d6:	2001      	movs	r0, #1
 800b4d8:	e7e7      	b.n	800b4aa <_raise_r+0x12>
 800b4da:	2100      	movs	r1, #0
 800b4dc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b4e0:	4620      	mov	r0, r4
 800b4e2:	4798      	blx	r3
 800b4e4:	2000      	movs	r0, #0
 800b4e6:	e7e0      	b.n	800b4aa <_raise_r+0x12>

0800b4e8 <raise>:
 800b4e8:	4b02      	ldr	r3, [pc, #8]	@ (800b4f4 <raise+0xc>)
 800b4ea:	4601      	mov	r1, r0
 800b4ec:	6818      	ldr	r0, [r3, #0]
 800b4ee:	f7ff bfd3 	b.w	800b498 <_raise_r>
 800b4f2:	bf00      	nop
 800b4f4:	20000028 	.word	0x20000028

0800b4f8 <_kill_r>:
 800b4f8:	b538      	push	{r3, r4, r5, lr}
 800b4fa:	4d07      	ldr	r5, [pc, #28]	@ (800b518 <_kill_r+0x20>)
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	4604      	mov	r4, r0
 800b500:	4608      	mov	r0, r1
 800b502:	4611      	mov	r1, r2
 800b504:	602b      	str	r3, [r5, #0]
 800b506:	f7f6 ffab 	bl	8002460 <_kill>
 800b50a:	1c43      	adds	r3, r0, #1
 800b50c:	d102      	bne.n	800b514 <_kill_r+0x1c>
 800b50e:	682b      	ldr	r3, [r5, #0]
 800b510:	b103      	cbz	r3, 800b514 <_kill_r+0x1c>
 800b512:	6023      	str	r3, [r4, #0]
 800b514:	bd38      	pop	{r3, r4, r5, pc}
 800b516:	bf00      	nop
 800b518:	20004458 	.word	0x20004458

0800b51c <_getpid_r>:
 800b51c:	f7f6 bf98 	b.w	8002450 <_getpid>

0800b520 <_sbrk_r>:
 800b520:	b538      	push	{r3, r4, r5, lr}
 800b522:	4d06      	ldr	r5, [pc, #24]	@ (800b53c <_sbrk_r+0x1c>)
 800b524:	2300      	movs	r3, #0
 800b526:	4604      	mov	r4, r0
 800b528:	4608      	mov	r0, r1
 800b52a:	602b      	str	r3, [r5, #0]
 800b52c:	f7f6 ffb4 	bl	8002498 <_sbrk>
 800b530:	1c43      	adds	r3, r0, #1
 800b532:	d102      	bne.n	800b53a <_sbrk_r+0x1a>
 800b534:	682b      	ldr	r3, [r5, #0]
 800b536:	b103      	cbz	r3, 800b53a <_sbrk_r+0x1a>
 800b538:	6023      	str	r3, [r4, #0]
 800b53a:	bd38      	pop	{r3, r4, r5, pc}
 800b53c:	20004458 	.word	0x20004458

0800b540 <__errno>:
 800b540:	4b01      	ldr	r3, [pc, #4]	@ (800b548 <__errno+0x8>)
 800b542:	6818      	ldr	r0, [r3, #0]
 800b544:	4770      	bx	lr
 800b546:	bf00      	nop
 800b548:	20000028 	.word	0x20000028

0800b54c <__libc_init_array>:
 800b54c:	b570      	push	{r4, r5, r6, lr}
 800b54e:	4d0d      	ldr	r5, [pc, #52]	@ (800b584 <__libc_init_array+0x38>)
 800b550:	4c0d      	ldr	r4, [pc, #52]	@ (800b588 <__libc_init_array+0x3c>)
 800b552:	1b64      	subs	r4, r4, r5
 800b554:	10a4      	asrs	r4, r4, #2
 800b556:	2600      	movs	r6, #0
 800b558:	42a6      	cmp	r6, r4
 800b55a:	d109      	bne.n	800b570 <__libc_init_array+0x24>
 800b55c:	4d0b      	ldr	r5, [pc, #44]	@ (800b58c <__libc_init_array+0x40>)
 800b55e:	4c0c      	ldr	r4, [pc, #48]	@ (800b590 <__libc_init_array+0x44>)
 800b560:	f001 fb08 	bl	800cb74 <_init>
 800b564:	1b64      	subs	r4, r4, r5
 800b566:	10a4      	asrs	r4, r4, #2
 800b568:	2600      	movs	r6, #0
 800b56a:	42a6      	cmp	r6, r4
 800b56c:	d105      	bne.n	800b57a <__libc_init_array+0x2e>
 800b56e:	bd70      	pop	{r4, r5, r6, pc}
 800b570:	f855 3b04 	ldr.w	r3, [r5], #4
 800b574:	4798      	blx	r3
 800b576:	3601      	adds	r6, #1
 800b578:	e7ee      	b.n	800b558 <__libc_init_array+0xc>
 800b57a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b57e:	4798      	blx	r3
 800b580:	3601      	adds	r6, #1
 800b582:	e7f2      	b.n	800b56a <__libc_init_array+0x1e>
 800b584:	0800d400 	.word	0x0800d400
 800b588:	0800d400 	.word	0x0800d400
 800b58c:	0800d400 	.word	0x0800d400
 800b590:	0800d404 	.word	0x0800d404

0800b594 <__retarget_lock_acquire_recursive>:
 800b594:	4770      	bx	lr

0800b596 <__retarget_lock_release_recursive>:
 800b596:	4770      	bx	lr

0800b598 <memcpy>:
 800b598:	440a      	add	r2, r1
 800b59a:	4291      	cmp	r1, r2
 800b59c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5a0:	d100      	bne.n	800b5a4 <memcpy+0xc>
 800b5a2:	4770      	bx	lr
 800b5a4:	b510      	push	{r4, lr}
 800b5a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5ae:	4291      	cmp	r1, r2
 800b5b0:	d1f9      	bne.n	800b5a6 <memcpy+0xe>
 800b5b2:	bd10      	pop	{r4, pc}

0800b5b4 <_free_r>:
 800b5b4:	b538      	push	{r3, r4, r5, lr}
 800b5b6:	4605      	mov	r5, r0
 800b5b8:	2900      	cmp	r1, #0
 800b5ba:	d041      	beq.n	800b640 <_free_r+0x8c>
 800b5bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5c0:	1f0c      	subs	r4, r1, #4
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	bfb8      	it	lt
 800b5c6:	18e4      	addlt	r4, r4, r3
 800b5c8:	f7ff ff18 	bl	800b3fc <__malloc_lock>
 800b5cc:	4a1d      	ldr	r2, [pc, #116]	@ (800b644 <_free_r+0x90>)
 800b5ce:	6813      	ldr	r3, [r2, #0]
 800b5d0:	b933      	cbnz	r3, 800b5e0 <_free_r+0x2c>
 800b5d2:	6063      	str	r3, [r4, #4]
 800b5d4:	6014      	str	r4, [r2, #0]
 800b5d6:	4628      	mov	r0, r5
 800b5d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5dc:	f7ff bf14 	b.w	800b408 <__malloc_unlock>
 800b5e0:	42a3      	cmp	r3, r4
 800b5e2:	d908      	bls.n	800b5f6 <_free_r+0x42>
 800b5e4:	6820      	ldr	r0, [r4, #0]
 800b5e6:	1821      	adds	r1, r4, r0
 800b5e8:	428b      	cmp	r3, r1
 800b5ea:	bf01      	itttt	eq
 800b5ec:	6819      	ldreq	r1, [r3, #0]
 800b5ee:	685b      	ldreq	r3, [r3, #4]
 800b5f0:	1809      	addeq	r1, r1, r0
 800b5f2:	6021      	streq	r1, [r4, #0]
 800b5f4:	e7ed      	b.n	800b5d2 <_free_r+0x1e>
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	b10b      	cbz	r3, 800b600 <_free_r+0x4c>
 800b5fc:	42a3      	cmp	r3, r4
 800b5fe:	d9fa      	bls.n	800b5f6 <_free_r+0x42>
 800b600:	6811      	ldr	r1, [r2, #0]
 800b602:	1850      	adds	r0, r2, r1
 800b604:	42a0      	cmp	r0, r4
 800b606:	d10b      	bne.n	800b620 <_free_r+0x6c>
 800b608:	6820      	ldr	r0, [r4, #0]
 800b60a:	4401      	add	r1, r0
 800b60c:	1850      	adds	r0, r2, r1
 800b60e:	4283      	cmp	r3, r0
 800b610:	6011      	str	r1, [r2, #0]
 800b612:	d1e0      	bne.n	800b5d6 <_free_r+0x22>
 800b614:	6818      	ldr	r0, [r3, #0]
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	6053      	str	r3, [r2, #4]
 800b61a:	4408      	add	r0, r1
 800b61c:	6010      	str	r0, [r2, #0]
 800b61e:	e7da      	b.n	800b5d6 <_free_r+0x22>
 800b620:	d902      	bls.n	800b628 <_free_r+0x74>
 800b622:	230c      	movs	r3, #12
 800b624:	602b      	str	r3, [r5, #0]
 800b626:	e7d6      	b.n	800b5d6 <_free_r+0x22>
 800b628:	6820      	ldr	r0, [r4, #0]
 800b62a:	1821      	adds	r1, r4, r0
 800b62c:	428b      	cmp	r3, r1
 800b62e:	bf04      	itt	eq
 800b630:	6819      	ldreq	r1, [r3, #0]
 800b632:	685b      	ldreq	r3, [r3, #4]
 800b634:	6063      	str	r3, [r4, #4]
 800b636:	bf04      	itt	eq
 800b638:	1809      	addeq	r1, r1, r0
 800b63a:	6021      	streq	r1, [r4, #0]
 800b63c:	6054      	str	r4, [r2, #4]
 800b63e:	e7ca      	b.n	800b5d6 <_free_r+0x22>
 800b640:	bd38      	pop	{r3, r4, r5, pc}
 800b642:	bf00      	nop
 800b644:	2000431c 	.word	0x2000431c

0800b648 <__ssputs_r>:
 800b648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b64c:	688e      	ldr	r6, [r1, #8]
 800b64e:	461f      	mov	r7, r3
 800b650:	42be      	cmp	r6, r7
 800b652:	680b      	ldr	r3, [r1, #0]
 800b654:	4682      	mov	sl, r0
 800b656:	460c      	mov	r4, r1
 800b658:	4690      	mov	r8, r2
 800b65a:	d82d      	bhi.n	800b6b8 <__ssputs_r+0x70>
 800b65c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b660:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b664:	d026      	beq.n	800b6b4 <__ssputs_r+0x6c>
 800b666:	6965      	ldr	r5, [r4, #20]
 800b668:	6909      	ldr	r1, [r1, #16]
 800b66a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b66e:	eba3 0901 	sub.w	r9, r3, r1
 800b672:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b676:	1c7b      	adds	r3, r7, #1
 800b678:	444b      	add	r3, r9
 800b67a:	106d      	asrs	r5, r5, #1
 800b67c:	429d      	cmp	r5, r3
 800b67e:	bf38      	it	cc
 800b680:	461d      	movcc	r5, r3
 800b682:	0553      	lsls	r3, r2, #21
 800b684:	d527      	bpl.n	800b6d6 <__ssputs_r+0x8e>
 800b686:	4629      	mov	r1, r5
 800b688:	f7ff fe38 	bl	800b2fc <_malloc_r>
 800b68c:	4606      	mov	r6, r0
 800b68e:	b360      	cbz	r0, 800b6ea <__ssputs_r+0xa2>
 800b690:	6921      	ldr	r1, [r4, #16]
 800b692:	464a      	mov	r2, r9
 800b694:	f7ff ff80 	bl	800b598 <memcpy>
 800b698:	89a3      	ldrh	r3, [r4, #12]
 800b69a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b69e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6a2:	81a3      	strh	r3, [r4, #12]
 800b6a4:	6126      	str	r6, [r4, #16]
 800b6a6:	6165      	str	r5, [r4, #20]
 800b6a8:	444e      	add	r6, r9
 800b6aa:	eba5 0509 	sub.w	r5, r5, r9
 800b6ae:	6026      	str	r6, [r4, #0]
 800b6b0:	60a5      	str	r5, [r4, #8]
 800b6b2:	463e      	mov	r6, r7
 800b6b4:	42be      	cmp	r6, r7
 800b6b6:	d900      	bls.n	800b6ba <__ssputs_r+0x72>
 800b6b8:	463e      	mov	r6, r7
 800b6ba:	6820      	ldr	r0, [r4, #0]
 800b6bc:	4632      	mov	r2, r6
 800b6be:	4641      	mov	r1, r8
 800b6c0:	f000 faa8 	bl	800bc14 <memmove>
 800b6c4:	68a3      	ldr	r3, [r4, #8]
 800b6c6:	1b9b      	subs	r3, r3, r6
 800b6c8:	60a3      	str	r3, [r4, #8]
 800b6ca:	6823      	ldr	r3, [r4, #0]
 800b6cc:	4433      	add	r3, r6
 800b6ce:	6023      	str	r3, [r4, #0]
 800b6d0:	2000      	movs	r0, #0
 800b6d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6d6:	462a      	mov	r2, r5
 800b6d8:	f000 fab6 	bl	800bc48 <_realloc_r>
 800b6dc:	4606      	mov	r6, r0
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	d1e0      	bne.n	800b6a4 <__ssputs_r+0x5c>
 800b6e2:	6921      	ldr	r1, [r4, #16]
 800b6e4:	4650      	mov	r0, sl
 800b6e6:	f7ff ff65 	bl	800b5b4 <_free_r>
 800b6ea:	230c      	movs	r3, #12
 800b6ec:	f8ca 3000 	str.w	r3, [sl]
 800b6f0:	89a3      	ldrh	r3, [r4, #12]
 800b6f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6f6:	81a3      	strh	r3, [r4, #12]
 800b6f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6fc:	e7e9      	b.n	800b6d2 <__ssputs_r+0x8a>
	...

0800b700 <_svfiprintf_r>:
 800b700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b704:	4698      	mov	r8, r3
 800b706:	898b      	ldrh	r3, [r1, #12]
 800b708:	061b      	lsls	r3, r3, #24
 800b70a:	b09d      	sub	sp, #116	@ 0x74
 800b70c:	4607      	mov	r7, r0
 800b70e:	460d      	mov	r5, r1
 800b710:	4614      	mov	r4, r2
 800b712:	d510      	bpl.n	800b736 <_svfiprintf_r+0x36>
 800b714:	690b      	ldr	r3, [r1, #16]
 800b716:	b973      	cbnz	r3, 800b736 <_svfiprintf_r+0x36>
 800b718:	2140      	movs	r1, #64	@ 0x40
 800b71a:	f7ff fdef 	bl	800b2fc <_malloc_r>
 800b71e:	6028      	str	r0, [r5, #0]
 800b720:	6128      	str	r0, [r5, #16]
 800b722:	b930      	cbnz	r0, 800b732 <_svfiprintf_r+0x32>
 800b724:	230c      	movs	r3, #12
 800b726:	603b      	str	r3, [r7, #0]
 800b728:	f04f 30ff 	mov.w	r0, #4294967295
 800b72c:	b01d      	add	sp, #116	@ 0x74
 800b72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b732:	2340      	movs	r3, #64	@ 0x40
 800b734:	616b      	str	r3, [r5, #20]
 800b736:	2300      	movs	r3, #0
 800b738:	9309      	str	r3, [sp, #36]	@ 0x24
 800b73a:	2320      	movs	r3, #32
 800b73c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b740:	f8cd 800c 	str.w	r8, [sp, #12]
 800b744:	2330      	movs	r3, #48	@ 0x30
 800b746:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b8e4 <_svfiprintf_r+0x1e4>
 800b74a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b74e:	f04f 0901 	mov.w	r9, #1
 800b752:	4623      	mov	r3, r4
 800b754:	469a      	mov	sl, r3
 800b756:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b75a:	b10a      	cbz	r2, 800b760 <_svfiprintf_r+0x60>
 800b75c:	2a25      	cmp	r2, #37	@ 0x25
 800b75e:	d1f9      	bne.n	800b754 <_svfiprintf_r+0x54>
 800b760:	ebba 0b04 	subs.w	fp, sl, r4
 800b764:	d00b      	beq.n	800b77e <_svfiprintf_r+0x7e>
 800b766:	465b      	mov	r3, fp
 800b768:	4622      	mov	r2, r4
 800b76a:	4629      	mov	r1, r5
 800b76c:	4638      	mov	r0, r7
 800b76e:	f7ff ff6b 	bl	800b648 <__ssputs_r>
 800b772:	3001      	adds	r0, #1
 800b774:	f000 80a7 	beq.w	800b8c6 <_svfiprintf_r+0x1c6>
 800b778:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b77a:	445a      	add	r2, fp
 800b77c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b77e:	f89a 3000 	ldrb.w	r3, [sl]
 800b782:	2b00      	cmp	r3, #0
 800b784:	f000 809f 	beq.w	800b8c6 <_svfiprintf_r+0x1c6>
 800b788:	2300      	movs	r3, #0
 800b78a:	f04f 32ff 	mov.w	r2, #4294967295
 800b78e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b792:	f10a 0a01 	add.w	sl, sl, #1
 800b796:	9304      	str	r3, [sp, #16]
 800b798:	9307      	str	r3, [sp, #28]
 800b79a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b79e:	931a      	str	r3, [sp, #104]	@ 0x68
 800b7a0:	4654      	mov	r4, sl
 800b7a2:	2205      	movs	r2, #5
 800b7a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7a8:	484e      	ldr	r0, [pc, #312]	@ (800b8e4 <_svfiprintf_r+0x1e4>)
 800b7aa:	f7f4 fd39 	bl	8000220 <memchr>
 800b7ae:	9a04      	ldr	r2, [sp, #16]
 800b7b0:	b9d8      	cbnz	r0, 800b7ea <_svfiprintf_r+0xea>
 800b7b2:	06d0      	lsls	r0, r2, #27
 800b7b4:	bf44      	itt	mi
 800b7b6:	2320      	movmi	r3, #32
 800b7b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b7bc:	0711      	lsls	r1, r2, #28
 800b7be:	bf44      	itt	mi
 800b7c0:	232b      	movmi	r3, #43	@ 0x2b
 800b7c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b7c6:	f89a 3000 	ldrb.w	r3, [sl]
 800b7ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7cc:	d015      	beq.n	800b7fa <_svfiprintf_r+0xfa>
 800b7ce:	9a07      	ldr	r2, [sp, #28]
 800b7d0:	4654      	mov	r4, sl
 800b7d2:	2000      	movs	r0, #0
 800b7d4:	f04f 0c0a 	mov.w	ip, #10
 800b7d8:	4621      	mov	r1, r4
 800b7da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7de:	3b30      	subs	r3, #48	@ 0x30
 800b7e0:	2b09      	cmp	r3, #9
 800b7e2:	d94b      	bls.n	800b87c <_svfiprintf_r+0x17c>
 800b7e4:	b1b0      	cbz	r0, 800b814 <_svfiprintf_r+0x114>
 800b7e6:	9207      	str	r2, [sp, #28]
 800b7e8:	e014      	b.n	800b814 <_svfiprintf_r+0x114>
 800b7ea:	eba0 0308 	sub.w	r3, r0, r8
 800b7ee:	fa09 f303 	lsl.w	r3, r9, r3
 800b7f2:	4313      	orrs	r3, r2
 800b7f4:	9304      	str	r3, [sp, #16]
 800b7f6:	46a2      	mov	sl, r4
 800b7f8:	e7d2      	b.n	800b7a0 <_svfiprintf_r+0xa0>
 800b7fa:	9b03      	ldr	r3, [sp, #12]
 800b7fc:	1d19      	adds	r1, r3, #4
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	9103      	str	r1, [sp, #12]
 800b802:	2b00      	cmp	r3, #0
 800b804:	bfbb      	ittet	lt
 800b806:	425b      	neglt	r3, r3
 800b808:	f042 0202 	orrlt.w	r2, r2, #2
 800b80c:	9307      	strge	r3, [sp, #28]
 800b80e:	9307      	strlt	r3, [sp, #28]
 800b810:	bfb8      	it	lt
 800b812:	9204      	strlt	r2, [sp, #16]
 800b814:	7823      	ldrb	r3, [r4, #0]
 800b816:	2b2e      	cmp	r3, #46	@ 0x2e
 800b818:	d10a      	bne.n	800b830 <_svfiprintf_r+0x130>
 800b81a:	7863      	ldrb	r3, [r4, #1]
 800b81c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b81e:	d132      	bne.n	800b886 <_svfiprintf_r+0x186>
 800b820:	9b03      	ldr	r3, [sp, #12]
 800b822:	1d1a      	adds	r2, r3, #4
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	9203      	str	r2, [sp, #12]
 800b828:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b82c:	3402      	adds	r4, #2
 800b82e:	9305      	str	r3, [sp, #20]
 800b830:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b8f4 <_svfiprintf_r+0x1f4>
 800b834:	7821      	ldrb	r1, [r4, #0]
 800b836:	2203      	movs	r2, #3
 800b838:	4650      	mov	r0, sl
 800b83a:	f7f4 fcf1 	bl	8000220 <memchr>
 800b83e:	b138      	cbz	r0, 800b850 <_svfiprintf_r+0x150>
 800b840:	9b04      	ldr	r3, [sp, #16]
 800b842:	eba0 000a 	sub.w	r0, r0, sl
 800b846:	2240      	movs	r2, #64	@ 0x40
 800b848:	4082      	lsls	r2, r0
 800b84a:	4313      	orrs	r3, r2
 800b84c:	3401      	adds	r4, #1
 800b84e:	9304      	str	r3, [sp, #16]
 800b850:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b854:	4824      	ldr	r0, [pc, #144]	@ (800b8e8 <_svfiprintf_r+0x1e8>)
 800b856:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b85a:	2206      	movs	r2, #6
 800b85c:	f7f4 fce0 	bl	8000220 <memchr>
 800b860:	2800      	cmp	r0, #0
 800b862:	d036      	beq.n	800b8d2 <_svfiprintf_r+0x1d2>
 800b864:	4b21      	ldr	r3, [pc, #132]	@ (800b8ec <_svfiprintf_r+0x1ec>)
 800b866:	bb1b      	cbnz	r3, 800b8b0 <_svfiprintf_r+0x1b0>
 800b868:	9b03      	ldr	r3, [sp, #12]
 800b86a:	3307      	adds	r3, #7
 800b86c:	f023 0307 	bic.w	r3, r3, #7
 800b870:	3308      	adds	r3, #8
 800b872:	9303      	str	r3, [sp, #12]
 800b874:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b876:	4433      	add	r3, r6
 800b878:	9309      	str	r3, [sp, #36]	@ 0x24
 800b87a:	e76a      	b.n	800b752 <_svfiprintf_r+0x52>
 800b87c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b880:	460c      	mov	r4, r1
 800b882:	2001      	movs	r0, #1
 800b884:	e7a8      	b.n	800b7d8 <_svfiprintf_r+0xd8>
 800b886:	2300      	movs	r3, #0
 800b888:	3401      	adds	r4, #1
 800b88a:	9305      	str	r3, [sp, #20]
 800b88c:	4619      	mov	r1, r3
 800b88e:	f04f 0c0a 	mov.w	ip, #10
 800b892:	4620      	mov	r0, r4
 800b894:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b898:	3a30      	subs	r2, #48	@ 0x30
 800b89a:	2a09      	cmp	r2, #9
 800b89c:	d903      	bls.n	800b8a6 <_svfiprintf_r+0x1a6>
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d0c6      	beq.n	800b830 <_svfiprintf_r+0x130>
 800b8a2:	9105      	str	r1, [sp, #20]
 800b8a4:	e7c4      	b.n	800b830 <_svfiprintf_r+0x130>
 800b8a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8aa:	4604      	mov	r4, r0
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	e7f0      	b.n	800b892 <_svfiprintf_r+0x192>
 800b8b0:	ab03      	add	r3, sp, #12
 800b8b2:	9300      	str	r3, [sp, #0]
 800b8b4:	462a      	mov	r2, r5
 800b8b6:	4b0e      	ldr	r3, [pc, #56]	@ (800b8f0 <_svfiprintf_r+0x1f0>)
 800b8b8:	a904      	add	r1, sp, #16
 800b8ba:	4638      	mov	r0, r7
 800b8bc:	f3af 8000 	nop.w
 800b8c0:	1c42      	adds	r2, r0, #1
 800b8c2:	4606      	mov	r6, r0
 800b8c4:	d1d6      	bne.n	800b874 <_svfiprintf_r+0x174>
 800b8c6:	89ab      	ldrh	r3, [r5, #12]
 800b8c8:	065b      	lsls	r3, r3, #25
 800b8ca:	f53f af2d 	bmi.w	800b728 <_svfiprintf_r+0x28>
 800b8ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b8d0:	e72c      	b.n	800b72c <_svfiprintf_r+0x2c>
 800b8d2:	ab03      	add	r3, sp, #12
 800b8d4:	9300      	str	r3, [sp, #0]
 800b8d6:	462a      	mov	r2, r5
 800b8d8:	4b05      	ldr	r3, [pc, #20]	@ (800b8f0 <_svfiprintf_r+0x1f0>)
 800b8da:	a904      	add	r1, sp, #16
 800b8dc:	4638      	mov	r0, r7
 800b8de:	f000 f879 	bl	800b9d4 <_printf_i>
 800b8e2:	e7ed      	b.n	800b8c0 <_svfiprintf_r+0x1c0>
 800b8e4:	0800d394 	.word	0x0800d394
 800b8e8:	0800d39e 	.word	0x0800d39e
 800b8ec:	00000000 	.word	0x00000000
 800b8f0:	0800b649 	.word	0x0800b649
 800b8f4:	0800d39a 	.word	0x0800d39a

0800b8f8 <_printf_common>:
 800b8f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8fc:	4616      	mov	r6, r2
 800b8fe:	4698      	mov	r8, r3
 800b900:	688a      	ldr	r2, [r1, #8]
 800b902:	690b      	ldr	r3, [r1, #16]
 800b904:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b908:	4293      	cmp	r3, r2
 800b90a:	bfb8      	it	lt
 800b90c:	4613      	movlt	r3, r2
 800b90e:	6033      	str	r3, [r6, #0]
 800b910:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b914:	4607      	mov	r7, r0
 800b916:	460c      	mov	r4, r1
 800b918:	b10a      	cbz	r2, 800b91e <_printf_common+0x26>
 800b91a:	3301      	adds	r3, #1
 800b91c:	6033      	str	r3, [r6, #0]
 800b91e:	6823      	ldr	r3, [r4, #0]
 800b920:	0699      	lsls	r1, r3, #26
 800b922:	bf42      	ittt	mi
 800b924:	6833      	ldrmi	r3, [r6, #0]
 800b926:	3302      	addmi	r3, #2
 800b928:	6033      	strmi	r3, [r6, #0]
 800b92a:	6825      	ldr	r5, [r4, #0]
 800b92c:	f015 0506 	ands.w	r5, r5, #6
 800b930:	d106      	bne.n	800b940 <_printf_common+0x48>
 800b932:	f104 0a19 	add.w	sl, r4, #25
 800b936:	68e3      	ldr	r3, [r4, #12]
 800b938:	6832      	ldr	r2, [r6, #0]
 800b93a:	1a9b      	subs	r3, r3, r2
 800b93c:	42ab      	cmp	r3, r5
 800b93e:	dc26      	bgt.n	800b98e <_printf_common+0x96>
 800b940:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b944:	6822      	ldr	r2, [r4, #0]
 800b946:	3b00      	subs	r3, #0
 800b948:	bf18      	it	ne
 800b94a:	2301      	movne	r3, #1
 800b94c:	0692      	lsls	r2, r2, #26
 800b94e:	d42b      	bmi.n	800b9a8 <_printf_common+0xb0>
 800b950:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b954:	4641      	mov	r1, r8
 800b956:	4638      	mov	r0, r7
 800b958:	47c8      	blx	r9
 800b95a:	3001      	adds	r0, #1
 800b95c:	d01e      	beq.n	800b99c <_printf_common+0xa4>
 800b95e:	6823      	ldr	r3, [r4, #0]
 800b960:	6922      	ldr	r2, [r4, #16]
 800b962:	f003 0306 	and.w	r3, r3, #6
 800b966:	2b04      	cmp	r3, #4
 800b968:	bf02      	ittt	eq
 800b96a:	68e5      	ldreq	r5, [r4, #12]
 800b96c:	6833      	ldreq	r3, [r6, #0]
 800b96e:	1aed      	subeq	r5, r5, r3
 800b970:	68a3      	ldr	r3, [r4, #8]
 800b972:	bf0c      	ite	eq
 800b974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b978:	2500      	movne	r5, #0
 800b97a:	4293      	cmp	r3, r2
 800b97c:	bfc4      	itt	gt
 800b97e:	1a9b      	subgt	r3, r3, r2
 800b980:	18ed      	addgt	r5, r5, r3
 800b982:	2600      	movs	r6, #0
 800b984:	341a      	adds	r4, #26
 800b986:	42b5      	cmp	r5, r6
 800b988:	d11a      	bne.n	800b9c0 <_printf_common+0xc8>
 800b98a:	2000      	movs	r0, #0
 800b98c:	e008      	b.n	800b9a0 <_printf_common+0xa8>
 800b98e:	2301      	movs	r3, #1
 800b990:	4652      	mov	r2, sl
 800b992:	4641      	mov	r1, r8
 800b994:	4638      	mov	r0, r7
 800b996:	47c8      	blx	r9
 800b998:	3001      	adds	r0, #1
 800b99a:	d103      	bne.n	800b9a4 <_printf_common+0xac>
 800b99c:	f04f 30ff 	mov.w	r0, #4294967295
 800b9a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9a4:	3501      	adds	r5, #1
 800b9a6:	e7c6      	b.n	800b936 <_printf_common+0x3e>
 800b9a8:	18e1      	adds	r1, r4, r3
 800b9aa:	1c5a      	adds	r2, r3, #1
 800b9ac:	2030      	movs	r0, #48	@ 0x30
 800b9ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b9b2:	4422      	add	r2, r4
 800b9b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b9b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b9bc:	3302      	adds	r3, #2
 800b9be:	e7c7      	b.n	800b950 <_printf_common+0x58>
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	4622      	mov	r2, r4
 800b9c4:	4641      	mov	r1, r8
 800b9c6:	4638      	mov	r0, r7
 800b9c8:	47c8      	blx	r9
 800b9ca:	3001      	adds	r0, #1
 800b9cc:	d0e6      	beq.n	800b99c <_printf_common+0xa4>
 800b9ce:	3601      	adds	r6, #1
 800b9d0:	e7d9      	b.n	800b986 <_printf_common+0x8e>
	...

0800b9d4 <_printf_i>:
 800b9d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9d8:	7e0f      	ldrb	r7, [r1, #24]
 800b9da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b9dc:	2f78      	cmp	r7, #120	@ 0x78
 800b9de:	4691      	mov	r9, r2
 800b9e0:	4680      	mov	r8, r0
 800b9e2:	460c      	mov	r4, r1
 800b9e4:	469a      	mov	sl, r3
 800b9e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b9ea:	d807      	bhi.n	800b9fc <_printf_i+0x28>
 800b9ec:	2f62      	cmp	r7, #98	@ 0x62
 800b9ee:	d80a      	bhi.n	800ba06 <_printf_i+0x32>
 800b9f0:	2f00      	cmp	r7, #0
 800b9f2:	f000 80d2 	beq.w	800bb9a <_printf_i+0x1c6>
 800b9f6:	2f58      	cmp	r7, #88	@ 0x58
 800b9f8:	f000 80b9 	beq.w	800bb6e <_printf_i+0x19a>
 800b9fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ba00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ba04:	e03a      	b.n	800ba7c <_printf_i+0xa8>
 800ba06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ba0a:	2b15      	cmp	r3, #21
 800ba0c:	d8f6      	bhi.n	800b9fc <_printf_i+0x28>
 800ba0e:	a101      	add	r1, pc, #4	@ (adr r1, 800ba14 <_printf_i+0x40>)
 800ba10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ba14:	0800ba6d 	.word	0x0800ba6d
 800ba18:	0800ba81 	.word	0x0800ba81
 800ba1c:	0800b9fd 	.word	0x0800b9fd
 800ba20:	0800b9fd 	.word	0x0800b9fd
 800ba24:	0800b9fd 	.word	0x0800b9fd
 800ba28:	0800b9fd 	.word	0x0800b9fd
 800ba2c:	0800ba81 	.word	0x0800ba81
 800ba30:	0800b9fd 	.word	0x0800b9fd
 800ba34:	0800b9fd 	.word	0x0800b9fd
 800ba38:	0800b9fd 	.word	0x0800b9fd
 800ba3c:	0800b9fd 	.word	0x0800b9fd
 800ba40:	0800bb81 	.word	0x0800bb81
 800ba44:	0800baab 	.word	0x0800baab
 800ba48:	0800bb3b 	.word	0x0800bb3b
 800ba4c:	0800b9fd 	.word	0x0800b9fd
 800ba50:	0800b9fd 	.word	0x0800b9fd
 800ba54:	0800bba3 	.word	0x0800bba3
 800ba58:	0800b9fd 	.word	0x0800b9fd
 800ba5c:	0800baab 	.word	0x0800baab
 800ba60:	0800b9fd 	.word	0x0800b9fd
 800ba64:	0800b9fd 	.word	0x0800b9fd
 800ba68:	0800bb43 	.word	0x0800bb43
 800ba6c:	6833      	ldr	r3, [r6, #0]
 800ba6e:	1d1a      	adds	r2, r3, #4
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	6032      	str	r2, [r6, #0]
 800ba74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ba78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	e09d      	b.n	800bbbc <_printf_i+0x1e8>
 800ba80:	6833      	ldr	r3, [r6, #0]
 800ba82:	6820      	ldr	r0, [r4, #0]
 800ba84:	1d19      	adds	r1, r3, #4
 800ba86:	6031      	str	r1, [r6, #0]
 800ba88:	0606      	lsls	r6, r0, #24
 800ba8a:	d501      	bpl.n	800ba90 <_printf_i+0xbc>
 800ba8c:	681d      	ldr	r5, [r3, #0]
 800ba8e:	e003      	b.n	800ba98 <_printf_i+0xc4>
 800ba90:	0645      	lsls	r5, r0, #25
 800ba92:	d5fb      	bpl.n	800ba8c <_printf_i+0xb8>
 800ba94:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ba98:	2d00      	cmp	r5, #0
 800ba9a:	da03      	bge.n	800baa4 <_printf_i+0xd0>
 800ba9c:	232d      	movs	r3, #45	@ 0x2d
 800ba9e:	426d      	negs	r5, r5
 800baa0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800baa4:	4859      	ldr	r0, [pc, #356]	@ (800bc0c <_printf_i+0x238>)
 800baa6:	230a      	movs	r3, #10
 800baa8:	e011      	b.n	800bace <_printf_i+0xfa>
 800baaa:	6821      	ldr	r1, [r4, #0]
 800baac:	6833      	ldr	r3, [r6, #0]
 800baae:	0608      	lsls	r0, r1, #24
 800bab0:	f853 5b04 	ldr.w	r5, [r3], #4
 800bab4:	d402      	bmi.n	800babc <_printf_i+0xe8>
 800bab6:	0649      	lsls	r1, r1, #25
 800bab8:	bf48      	it	mi
 800baba:	b2ad      	uxthmi	r5, r5
 800babc:	2f6f      	cmp	r7, #111	@ 0x6f
 800babe:	4853      	ldr	r0, [pc, #332]	@ (800bc0c <_printf_i+0x238>)
 800bac0:	6033      	str	r3, [r6, #0]
 800bac2:	bf14      	ite	ne
 800bac4:	230a      	movne	r3, #10
 800bac6:	2308      	moveq	r3, #8
 800bac8:	2100      	movs	r1, #0
 800baca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bace:	6866      	ldr	r6, [r4, #4]
 800bad0:	60a6      	str	r6, [r4, #8]
 800bad2:	2e00      	cmp	r6, #0
 800bad4:	bfa2      	ittt	ge
 800bad6:	6821      	ldrge	r1, [r4, #0]
 800bad8:	f021 0104 	bicge.w	r1, r1, #4
 800badc:	6021      	strge	r1, [r4, #0]
 800bade:	b90d      	cbnz	r5, 800bae4 <_printf_i+0x110>
 800bae0:	2e00      	cmp	r6, #0
 800bae2:	d04b      	beq.n	800bb7c <_printf_i+0x1a8>
 800bae4:	4616      	mov	r6, r2
 800bae6:	fbb5 f1f3 	udiv	r1, r5, r3
 800baea:	fb03 5711 	mls	r7, r3, r1, r5
 800baee:	5dc7      	ldrb	r7, [r0, r7]
 800baf0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800baf4:	462f      	mov	r7, r5
 800baf6:	42bb      	cmp	r3, r7
 800baf8:	460d      	mov	r5, r1
 800bafa:	d9f4      	bls.n	800bae6 <_printf_i+0x112>
 800bafc:	2b08      	cmp	r3, #8
 800bafe:	d10b      	bne.n	800bb18 <_printf_i+0x144>
 800bb00:	6823      	ldr	r3, [r4, #0]
 800bb02:	07df      	lsls	r7, r3, #31
 800bb04:	d508      	bpl.n	800bb18 <_printf_i+0x144>
 800bb06:	6923      	ldr	r3, [r4, #16]
 800bb08:	6861      	ldr	r1, [r4, #4]
 800bb0a:	4299      	cmp	r1, r3
 800bb0c:	bfde      	ittt	le
 800bb0e:	2330      	movle	r3, #48	@ 0x30
 800bb10:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bb14:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bb18:	1b92      	subs	r2, r2, r6
 800bb1a:	6122      	str	r2, [r4, #16]
 800bb1c:	f8cd a000 	str.w	sl, [sp]
 800bb20:	464b      	mov	r3, r9
 800bb22:	aa03      	add	r2, sp, #12
 800bb24:	4621      	mov	r1, r4
 800bb26:	4640      	mov	r0, r8
 800bb28:	f7ff fee6 	bl	800b8f8 <_printf_common>
 800bb2c:	3001      	adds	r0, #1
 800bb2e:	d14a      	bne.n	800bbc6 <_printf_i+0x1f2>
 800bb30:	f04f 30ff 	mov.w	r0, #4294967295
 800bb34:	b004      	add	sp, #16
 800bb36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb3a:	6823      	ldr	r3, [r4, #0]
 800bb3c:	f043 0320 	orr.w	r3, r3, #32
 800bb40:	6023      	str	r3, [r4, #0]
 800bb42:	4833      	ldr	r0, [pc, #204]	@ (800bc10 <_printf_i+0x23c>)
 800bb44:	2778      	movs	r7, #120	@ 0x78
 800bb46:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bb4a:	6823      	ldr	r3, [r4, #0]
 800bb4c:	6831      	ldr	r1, [r6, #0]
 800bb4e:	061f      	lsls	r7, r3, #24
 800bb50:	f851 5b04 	ldr.w	r5, [r1], #4
 800bb54:	d402      	bmi.n	800bb5c <_printf_i+0x188>
 800bb56:	065f      	lsls	r7, r3, #25
 800bb58:	bf48      	it	mi
 800bb5a:	b2ad      	uxthmi	r5, r5
 800bb5c:	6031      	str	r1, [r6, #0]
 800bb5e:	07d9      	lsls	r1, r3, #31
 800bb60:	bf44      	itt	mi
 800bb62:	f043 0320 	orrmi.w	r3, r3, #32
 800bb66:	6023      	strmi	r3, [r4, #0]
 800bb68:	b11d      	cbz	r5, 800bb72 <_printf_i+0x19e>
 800bb6a:	2310      	movs	r3, #16
 800bb6c:	e7ac      	b.n	800bac8 <_printf_i+0xf4>
 800bb6e:	4827      	ldr	r0, [pc, #156]	@ (800bc0c <_printf_i+0x238>)
 800bb70:	e7e9      	b.n	800bb46 <_printf_i+0x172>
 800bb72:	6823      	ldr	r3, [r4, #0]
 800bb74:	f023 0320 	bic.w	r3, r3, #32
 800bb78:	6023      	str	r3, [r4, #0]
 800bb7a:	e7f6      	b.n	800bb6a <_printf_i+0x196>
 800bb7c:	4616      	mov	r6, r2
 800bb7e:	e7bd      	b.n	800bafc <_printf_i+0x128>
 800bb80:	6833      	ldr	r3, [r6, #0]
 800bb82:	6825      	ldr	r5, [r4, #0]
 800bb84:	6961      	ldr	r1, [r4, #20]
 800bb86:	1d18      	adds	r0, r3, #4
 800bb88:	6030      	str	r0, [r6, #0]
 800bb8a:	062e      	lsls	r6, r5, #24
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	d501      	bpl.n	800bb94 <_printf_i+0x1c0>
 800bb90:	6019      	str	r1, [r3, #0]
 800bb92:	e002      	b.n	800bb9a <_printf_i+0x1c6>
 800bb94:	0668      	lsls	r0, r5, #25
 800bb96:	d5fb      	bpl.n	800bb90 <_printf_i+0x1bc>
 800bb98:	8019      	strh	r1, [r3, #0]
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	6123      	str	r3, [r4, #16]
 800bb9e:	4616      	mov	r6, r2
 800bba0:	e7bc      	b.n	800bb1c <_printf_i+0x148>
 800bba2:	6833      	ldr	r3, [r6, #0]
 800bba4:	1d1a      	adds	r2, r3, #4
 800bba6:	6032      	str	r2, [r6, #0]
 800bba8:	681e      	ldr	r6, [r3, #0]
 800bbaa:	6862      	ldr	r2, [r4, #4]
 800bbac:	2100      	movs	r1, #0
 800bbae:	4630      	mov	r0, r6
 800bbb0:	f7f4 fb36 	bl	8000220 <memchr>
 800bbb4:	b108      	cbz	r0, 800bbba <_printf_i+0x1e6>
 800bbb6:	1b80      	subs	r0, r0, r6
 800bbb8:	6060      	str	r0, [r4, #4]
 800bbba:	6863      	ldr	r3, [r4, #4]
 800bbbc:	6123      	str	r3, [r4, #16]
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bbc4:	e7aa      	b.n	800bb1c <_printf_i+0x148>
 800bbc6:	6923      	ldr	r3, [r4, #16]
 800bbc8:	4632      	mov	r2, r6
 800bbca:	4649      	mov	r1, r9
 800bbcc:	4640      	mov	r0, r8
 800bbce:	47d0      	blx	sl
 800bbd0:	3001      	adds	r0, #1
 800bbd2:	d0ad      	beq.n	800bb30 <_printf_i+0x15c>
 800bbd4:	6823      	ldr	r3, [r4, #0]
 800bbd6:	079b      	lsls	r3, r3, #30
 800bbd8:	d413      	bmi.n	800bc02 <_printf_i+0x22e>
 800bbda:	68e0      	ldr	r0, [r4, #12]
 800bbdc:	9b03      	ldr	r3, [sp, #12]
 800bbde:	4298      	cmp	r0, r3
 800bbe0:	bfb8      	it	lt
 800bbe2:	4618      	movlt	r0, r3
 800bbe4:	e7a6      	b.n	800bb34 <_printf_i+0x160>
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	4632      	mov	r2, r6
 800bbea:	4649      	mov	r1, r9
 800bbec:	4640      	mov	r0, r8
 800bbee:	47d0      	blx	sl
 800bbf0:	3001      	adds	r0, #1
 800bbf2:	d09d      	beq.n	800bb30 <_printf_i+0x15c>
 800bbf4:	3501      	adds	r5, #1
 800bbf6:	68e3      	ldr	r3, [r4, #12]
 800bbf8:	9903      	ldr	r1, [sp, #12]
 800bbfa:	1a5b      	subs	r3, r3, r1
 800bbfc:	42ab      	cmp	r3, r5
 800bbfe:	dcf2      	bgt.n	800bbe6 <_printf_i+0x212>
 800bc00:	e7eb      	b.n	800bbda <_printf_i+0x206>
 800bc02:	2500      	movs	r5, #0
 800bc04:	f104 0619 	add.w	r6, r4, #25
 800bc08:	e7f5      	b.n	800bbf6 <_printf_i+0x222>
 800bc0a:	bf00      	nop
 800bc0c:	0800d3a5 	.word	0x0800d3a5
 800bc10:	0800d3b6 	.word	0x0800d3b6

0800bc14 <memmove>:
 800bc14:	4288      	cmp	r0, r1
 800bc16:	b510      	push	{r4, lr}
 800bc18:	eb01 0402 	add.w	r4, r1, r2
 800bc1c:	d902      	bls.n	800bc24 <memmove+0x10>
 800bc1e:	4284      	cmp	r4, r0
 800bc20:	4623      	mov	r3, r4
 800bc22:	d807      	bhi.n	800bc34 <memmove+0x20>
 800bc24:	1e43      	subs	r3, r0, #1
 800bc26:	42a1      	cmp	r1, r4
 800bc28:	d008      	beq.n	800bc3c <memmove+0x28>
 800bc2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc32:	e7f8      	b.n	800bc26 <memmove+0x12>
 800bc34:	4402      	add	r2, r0
 800bc36:	4601      	mov	r1, r0
 800bc38:	428a      	cmp	r2, r1
 800bc3a:	d100      	bne.n	800bc3e <memmove+0x2a>
 800bc3c:	bd10      	pop	{r4, pc}
 800bc3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc46:	e7f7      	b.n	800bc38 <memmove+0x24>

0800bc48 <_realloc_r>:
 800bc48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc4c:	4680      	mov	r8, r0
 800bc4e:	4615      	mov	r5, r2
 800bc50:	460c      	mov	r4, r1
 800bc52:	b921      	cbnz	r1, 800bc5e <_realloc_r+0x16>
 800bc54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc58:	4611      	mov	r1, r2
 800bc5a:	f7ff bb4f 	b.w	800b2fc <_malloc_r>
 800bc5e:	b92a      	cbnz	r2, 800bc6c <_realloc_r+0x24>
 800bc60:	f7ff fca8 	bl	800b5b4 <_free_r>
 800bc64:	2400      	movs	r4, #0
 800bc66:	4620      	mov	r0, r4
 800bc68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc6c:	f000 f81a 	bl	800bca4 <_malloc_usable_size_r>
 800bc70:	4285      	cmp	r5, r0
 800bc72:	4606      	mov	r6, r0
 800bc74:	d802      	bhi.n	800bc7c <_realloc_r+0x34>
 800bc76:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bc7a:	d8f4      	bhi.n	800bc66 <_realloc_r+0x1e>
 800bc7c:	4629      	mov	r1, r5
 800bc7e:	4640      	mov	r0, r8
 800bc80:	f7ff fb3c 	bl	800b2fc <_malloc_r>
 800bc84:	4607      	mov	r7, r0
 800bc86:	2800      	cmp	r0, #0
 800bc88:	d0ec      	beq.n	800bc64 <_realloc_r+0x1c>
 800bc8a:	42b5      	cmp	r5, r6
 800bc8c:	462a      	mov	r2, r5
 800bc8e:	4621      	mov	r1, r4
 800bc90:	bf28      	it	cs
 800bc92:	4632      	movcs	r2, r6
 800bc94:	f7ff fc80 	bl	800b598 <memcpy>
 800bc98:	4621      	mov	r1, r4
 800bc9a:	4640      	mov	r0, r8
 800bc9c:	f7ff fc8a 	bl	800b5b4 <_free_r>
 800bca0:	463c      	mov	r4, r7
 800bca2:	e7e0      	b.n	800bc66 <_realloc_r+0x1e>

0800bca4 <_malloc_usable_size_r>:
 800bca4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bca8:	1f18      	subs	r0, r3, #4
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	bfbc      	itt	lt
 800bcae:	580b      	ldrlt	r3, [r1, r0]
 800bcb0:	18c0      	addlt	r0, r0, r3
 800bcb2:	4770      	bx	lr

0800bcb4 <pow>:
 800bcb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcb6:	ed2d 8b02 	vpush	{d8}
 800bcba:	eeb0 8a40 	vmov.f32	s16, s0
 800bcbe:	eef0 8a60 	vmov.f32	s17, s1
 800bcc2:	ec55 4b11 	vmov	r4, r5, d1
 800bcc6:	f000 f873 	bl	800bdb0 <__ieee754_pow>
 800bcca:	4622      	mov	r2, r4
 800bccc:	462b      	mov	r3, r5
 800bcce:	4620      	mov	r0, r4
 800bcd0:	4629      	mov	r1, r5
 800bcd2:	ec57 6b10 	vmov	r6, r7, d0
 800bcd6:	f7f4 ff49 	bl	8000b6c <__aeabi_dcmpun>
 800bcda:	2800      	cmp	r0, #0
 800bcdc:	d13b      	bne.n	800bd56 <pow+0xa2>
 800bcde:	ec51 0b18 	vmov	r0, r1, d8
 800bce2:	2200      	movs	r2, #0
 800bce4:	2300      	movs	r3, #0
 800bce6:	f7f4 ff0f 	bl	8000b08 <__aeabi_dcmpeq>
 800bcea:	b1b8      	cbz	r0, 800bd1c <pow+0x68>
 800bcec:	2200      	movs	r2, #0
 800bcee:	2300      	movs	r3, #0
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	4629      	mov	r1, r5
 800bcf4:	f7f4 ff08 	bl	8000b08 <__aeabi_dcmpeq>
 800bcf8:	2800      	cmp	r0, #0
 800bcfa:	d146      	bne.n	800bd8a <pow+0xd6>
 800bcfc:	ec45 4b10 	vmov	d0, r4, r5
 800bd00:	f000 f848 	bl	800bd94 <finite>
 800bd04:	b338      	cbz	r0, 800bd56 <pow+0xa2>
 800bd06:	2200      	movs	r2, #0
 800bd08:	2300      	movs	r3, #0
 800bd0a:	4620      	mov	r0, r4
 800bd0c:	4629      	mov	r1, r5
 800bd0e:	f7f4 ff05 	bl	8000b1c <__aeabi_dcmplt>
 800bd12:	b300      	cbz	r0, 800bd56 <pow+0xa2>
 800bd14:	f7ff fc14 	bl	800b540 <__errno>
 800bd18:	2322      	movs	r3, #34	@ 0x22
 800bd1a:	e01b      	b.n	800bd54 <pow+0xa0>
 800bd1c:	ec47 6b10 	vmov	d0, r6, r7
 800bd20:	f000 f838 	bl	800bd94 <finite>
 800bd24:	b9e0      	cbnz	r0, 800bd60 <pow+0xac>
 800bd26:	eeb0 0a48 	vmov.f32	s0, s16
 800bd2a:	eef0 0a68 	vmov.f32	s1, s17
 800bd2e:	f000 f831 	bl	800bd94 <finite>
 800bd32:	b1a8      	cbz	r0, 800bd60 <pow+0xac>
 800bd34:	ec45 4b10 	vmov	d0, r4, r5
 800bd38:	f000 f82c 	bl	800bd94 <finite>
 800bd3c:	b180      	cbz	r0, 800bd60 <pow+0xac>
 800bd3e:	4632      	mov	r2, r6
 800bd40:	463b      	mov	r3, r7
 800bd42:	4630      	mov	r0, r6
 800bd44:	4639      	mov	r1, r7
 800bd46:	f7f4 ff11 	bl	8000b6c <__aeabi_dcmpun>
 800bd4a:	2800      	cmp	r0, #0
 800bd4c:	d0e2      	beq.n	800bd14 <pow+0x60>
 800bd4e:	f7ff fbf7 	bl	800b540 <__errno>
 800bd52:	2321      	movs	r3, #33	@ 0x21
 800bd54:	6003      	str	r3, [r0, #0]
 800bd56:	ecbd 8b02 	vpop	{d8}
 800bd5a:	ec47 6b10 	vmov	d0, r6, r7
 800bd5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd60:	2200      	movs	r2, #0
 800bd62:	2300      	movs	r3, #0
 800bd64:	4630      	mov	r0, r6
 800bd66:	4639      	mov	r1, r7
 800bd68:	f7f4 fece 	bl	8000b08 <__aeabi_dcmpeq>
 800bd6c:	2800      	cmp	r0, #0
 800bd6e:	d0f2      	beq.n	800bd56 <pow+0xa2>
 800bd70:	eeb0 0a48 	vmov.f32	s0, s16
 800bd74:	eef0 0a68 	vmov.f32	s1, s17
 800bd78:	f000 f80c 	bl	800bd94 <finite>
 800bd7c:	2800      	cmp	r0, #0
 800bd7e:	d0ea      	beq.n	800bd56 <pow+0xa2>
 800bd80:	ec45 4b10 	vmov	d0, r4, r5
 800bd84:	f000 f806 	bl	800bd94 <finite>
 800bd88:	e7c3      	b.n	800bd12 <pow+0x5e>
 800bd8a:	4f01      	ldr	r7, [pc, #4]	@ (800bd90 <pow+0xdc>)
 800bd8c:	2600      	movs	r6, #0
 800bd8e:	e7e2      	b.n	800bd56 <pow+0xa2>
 800bd90:	3ff00000 	.word	0x3ff00000

0800bd94 <finite>:
 800bd94:	b082      	sub	sp, #8
 800bd96:	ed8d 0b00 	vstr	d0, [sp]
 800bd9a:	9801      	ldr	r0, [sp, #4]
 800bd9c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800bda0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800bda4:	0fc0      	lsrs	r0, r0, #31
 800bda6:	b002      	add	sp, #8
 800bda8:	4770      	bx	lr
 800bdaa:	0000      	movs	r0, r0
 800bdac:	0000      	movs	r0, r0
	...

0800bdb0 <__ieee754_pow>:
 800bdb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdb4:	b091      	sub	sp, #68	@ 0x44
 800bdb6:	ed8d 1b00 	vstr	d1, [sp]
 800bdba:	e9dd 1900 	ldrd	r1, r9, [sp]
 800bdbe:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800bdc2:	ea5a 0001 	orrs.w	r0, sl, r1
 800bdc6:	ec57 6b10 	vmov	r6, r7, d0
 800bdca:	d113      	bne.n	800bdf4 <__ieee754_pow+0x44>
 800bdcc:	19b3      	adds	r3, r6, r6
 800bdce:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800bdd2:	4152      	adcs	r2, r2
 800bdd4:	4298      	cmp	r0, r3
 800bdd6:	4b98      	ldr	r3, [pc, #608]	@ (800c038 <__ieee754_pow+0x288>)
 800bdd8:	4193      	sbcs	r3, r2
 800bdda:	f080 84ea 	bcs.w	800c7b2 <__ieee754_pow+0xa02>
 800bdde:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bde2:	4630      	mov	r0, r6
 800bde4:	4639      	mov	r1, r7
 800bde6:	f7f4 fa71 	bl	80002cc <__adddf3>
 800bdea:	ec41 0b10 	vmov	d0, r0, r1
 800bdee:	b011      	add	sp, #68	@ 0x44
 800bdf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdf4:	4a91      	ldr	r2, [pc, #580]	@ (800c03c <__ieee754_pow+0x28c>)
 800bdf6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800bdfa:	4590      	cmp	r8, r2
 800bdfc:	463d      	mov	r5, r7
 800bdfe:	4633      	mov	r3, r6
 800be00:	d806      	bhi.n	800be10 <__ieee754_pow+0x60>
 800be02:	d101      	bne.n	800be08 <__ieee754_pow+0x58>
 800be04:	2e00      	cmp	r6, #0
 800be06:	d1ea      	bne.n	800bdde <__ieee754_pow+0x2e>
 800be08:	4592      	cmp	sl, r2
 800be0a:	d801      	bhi.n	800be10 <__ieee754_pow+0x60>
 800be0c:	d10e      	bne.n	800be2c <__ieee754_pow+0x7c>
 800be0e:	b169      	cbz	r1, 800be2c <__ieee754_pow+0x7c>
 800be10:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800be14:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800be18:	431d      	orrs	r5, r3
 800be1a:	d1e0      	bne.n	800bdde <__ieee754_pow+0x2e>
 800be1c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800be20:	18db      	adds	r3, r3, r3
 800be22:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800be26:	4152      	adcs	r2, r2
 800be28:	429d      	cmp	r5, r3
 800be2a:	e7d4      	b.n	800bdd6 <__ieee754_pow+0x26>
 800be2c:	2d00      	cmp	r5, #0
 800be2e:	46c3      	mov	fp, r8
 800be30:	da3a      	bge.n	800bea8 <__ieee754_pow+0xf8>
 800be32:	4a83      	ldr	r2, [pc, #524]	@ (800c040 <__ieee754_pow+0x290>)
 800be34:	4592      	cmp	sl, r2
 800be36:	d84d      	bhi.n	800bed4 <__ieee754_pow+0x124>
 800be38:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800be3c:	4592      	cmp	sl, r2
 800be3e:	f240 84c7 	bls.w	800c7d0 <__ieee754_pow+0xa20>
 800be42:	ea4f 522a 	mov.w	r2, sl, asr #20
 800be46:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800be4a:	2a14      	cmp	r2, #20
 800be4c:	dd0f      	ble.n	800be6e <__ieee754_pow+0xbe>
 800be4e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800be52:	fa21 f402 	lsr.w	r4, r1, r2
 800be56:	fa04 f202 	lsl.w	r2, r4, r2
 800be5a:	428a      	cmp	r2, r1
 800be5c:	f040 84b8 	bne.w	800c7d0 <__ieee754_pow+0xa20>
 800be60:	f004 0401 	and.w	r4, r4, #1
 800be64:	f1c4 0402 	rsb	r4, r4, #2
 800be68:	2900      	cmp	r1, #0
 800be6a:	d158      	bne.n	800bf1e <__ieee754_pow+0x16e>
 800be6c:	e00e      	b.n	800be8c <__ieee754_pow+0xdc>
 800be6e:	2900      	cmp	r1, #0
 800be70:	d154      	bne.n	800bf1c <__ieee754_pow+0x16c>
 800be72:	f1c2 0214 	rsb	r2, r2, #20
 800be76:	fa4a f402 	asr.w	r4, sl, r2
 800be7a:	fa04 f202 	lsl.w	r2, r4, r2
 800be7e:	4552      	cmp	r2, sl
 800be80:	f040 84a3 	bne.w	800c7ca <__ieee754_pow+0xa1a>
 800be84:	f004 0401 	and.w	r4, r4, #1
 800be88:	f1c4 0402 	rsb	r4, r4, #2
 800be8c:	4a6d      	ldr	r2, [pc, #436]	@ (800c044 <__ieee754_pow+0x294>)
 800be8e:	4592      	cmp	sl, r2
 800be90:	d12e      	bne.n	800bef0 <__ieee754_pow+0x140>
 800be92:	f1b9 0f00 	cmp.w	r9, #0
 800be96:	f280 8494 	bge.w	800c7c2 <__ieee754_pow+0xa12>
 800be9a:	496a      	ldr	r1, [pc, #424]	@ (800c044 <__ieee754_pow+0x294>)
 800be9c:	4632      	mov	r2, r6
 800be9e:	463b      	mov	r3, r7
 800bea0:	2000      	movs	r0, #0
 800bea2:	f7f4 fcf3 	bl	800088c <__aeabi_ddiv>
 800bea6:	e7a0      	b.n	800bdea <__ieee754_pow+0x3a>
 800bea8:	2400      	movs	r4, #0
 800beaa:	bbc1      	cbnz	r1, 800bf1e <__ieee754_pow+0x16e>
 800beac:	4a63      	ldr	r2, [pc, #396]	@ (800c03c <__ieee754_pow+0x28c>)
 800beae:	4592      	cmp	sl, r2
 800beb0:	d1ec      	bne.n	800be8c <__ieee754_pow+0xdc>
 800beb2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800beb6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800beba:	431a      	orrs	r2, r3
 800bebc:	f000 8479 	beq.w	800c7b2 <__ieee754_pow+0xa02>
 800bec0:	4b61      	ldr	r3, [pc, #388]	@ (800c048 <__ieee754_pow+0x298>)
 800bec2:	4598      	cmp	r8, r3
 800bec4:	d908      	bls.n	800bed8 <__ieee754_pow+0x128>
 800bec6:	f1b9 0f00 	cmp.w	r9, #0
 800beca:	f2c0 8476 	blt.w	800c7ba <__ieee754_pow+0xa0a>
 800bece:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bed2:	e78a      	b.n	800bdea <__ieee754_pow+0x3a>
 800bed4:	2402      	movs	r4, #2
 800bed6:	e7e8      	b.n	800beaa <__ieee754_pow+0xfa>
 800bed8:	f1b9 0f00 	cmp.w	r9, #0
 800bedc:	f04f 0000 	mov.w	r0, #0
 800bee0:	f04f 0100 	mov.w	r1, #0
 800bee4:	da81      	bge.n	800bdea <__ieee754_pow+0x3a>
 800bee6:	e9dd 0300 	ldrd	r0, r3, [sp]
 800beea:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800beee:	e77c      	b.n	800bdea <__ieee754_pow+0x3a>
 800bef0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800bef4:	d106      	bne.n	800bf04 <__ieee754_pow+0x154>
 800bef6:	4632      	mov	r2, r6
 800bef8:	463b      	mov	r3, r7
 800befa:	4630      	mov	r0, r6
 800befc:	4639      	mov	r1, r7
 800befe:	f7f4 fb9b 	bl	8000638 <__aeabi_dmul>
 800bf02:	e772      	b.n	800bdea <__ieee754_pow+0x3a>
 800bf04:	4a51      	ldr	r2, [pc, #324]	@ (800c04c <__ieee754_pow+0x29c>)
 800bf06:	4591      	cmp	r9, r2
 800bf08:	d109      	bne.n	800bf1e <__ieee754_pow+0x16e>
 800bf0a:	2d00      	cmp	r5, #0
 800bf0c:	db07      	blt.n	800bf1e <__ieee754_pow+0x16e>
 800bf0e:	ec47 6b10 	vmov	d0, r6, r7
 800bf12:	b011      	add	sp, #68	@ 0x44
 800bf14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf18:	f000 bd52 	b.w	800c9c0 <__ieee754_sqrt>
 800bf1c:	2400      	movs	r4, #0
 800bf1e:	ec47 6b10 	vmov	d0, r6, r7
 800bf22:	9302      	str	r3, [sp, #8]
 800bf24:	f000 fc88 	bl	800c838 <fabs>
 800bf28:	9b02      	ldr	r3, [sp, #8]
 800bf2a:	ec51 0b10 	vmov	r0, r1, d0
 800bf2e:	bb53      	cbnz	r3, 800bf86 <__ieee754_pow+0x1d6>
 800bf30:	4b44      	ldr	r3, [pc, #272]	@ (800c044 <__ieee754_pow+0x294>)
 800bf32:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d002      	beq.n	800bf40 <__ieee754_pow+0x190>
 800bf3a:	f1b8 0f00 	cmp.w	r8, #0
 800bf3e:	d122      	bne.n	800bf86 <__ieee754_pow+0x1d6>
 800bf40:	f1b9 0f00 	cmp.w	r9, #0
 800bf44:	da05      	bge.n	800bf52 <__ieee754_pow+0x1a2>
 800bf46:	4602      	mov	r2, r0
 800bf48:	460b      	mov	r3, r1
 800bf4a:	2000      	movs	r0, #0
 800bf4c:	493d      	ldr	r1, [pc, #244]	@ (800c044 <__ieee754_pow+0x294>)
 800bf4e:	f7f4 fc9d 	bl	800088c <__aeabi_ddiv>
 800bf52:	2d00      	cmp	r5, #0
 800bf54:	f6bf af49 	bge.w	800bdea <__ieee754_pow+0x3a>
 800bf58:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800bf5c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800bf60:	ea58 0804 	orrs.w	r8, r8, r4
 800bf64:	d108      	bne.n	800bf78 <__ieee754_pow+0x1c8>
 800bf66:	4602      	mov	r2, r0
 800bf68:	460b      	mov	r3, r1
 800bf6a:	4610      	mov	r0, r2
 800bf6c:	4619      	mov	r1, r3
 800bf6e:	f7f4 f9ab 	bl	80002c8 <__aeabi_dsub>
 800bf72:	4602      	mov	r2, r0
 800bf74:	460b      	mov	r3, r1
 800bf76:	e794      	b.n	800bea2 <__ieee754_pow+0xf2>
 800bf78:	2c01      	cmp	r4, #1
 800bf7a:	f47f af36 	bne.w	800bdea <__ieee754_pow+0x3a>
 800bf7e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bf82:	4619      	mov	r1, r3
 800bf84:	e731      	b.n	800bdea <__ieee754_pow+0x3a>
 800bf86:	0feb      	lsrs	r3, r5, #31
 800bf88:	3b01      	subs	r3, #1
 800bf8a:	ea53 0204 	orrs.w	r2, r3, r4
 800bf8e:	d102      	bne.n	800bf96 <__ieee754_pow+0x1e6>
 800bf90:	4632      	mov	r2, r6
 800bf92:	463b      	mov	r3, r7
 800bf94:	e7e9      	b.n	800bf6a <__ieee754_pow+0x1ba>
 800bf96:	3c01      	subs	r4, #1
 800bf98:	431c      	orrs	r4, r3
 800bf9a:	d016      	beq.n	800bfca <__ieee754_pow+0x21a>
 800bf9c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800c028 <__ieee754_pow+0x278>
 800bfa0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800bfa4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bfa8:	f240 8112 	bls.w	800c1d0 <__ieee754_pow+0x420>
 800bfac:	4b28      	ldr	r3, [pc, #160]	@ (800c050 <__ieee754_pow+0x2a0>)
 800bfae:	459a      	cmp	sl, r3
 800bfb0:	4b25      	ldr	r3, [pc, #148]	@ (800c048 <__ieee754_pow+0x298>)
 800bfb2:	d916      	bls.n	800bfe2 <__ieee754_pow+0x232>
 800bfb4:	4598      	cmp	r8, r3
 800bfb6:	d80b      	bhi.n	800bfd0 <__ieee754_pow+0x220>
 800bfb8:	f1b9 0f00 	cmp.w	r9, #0
 800bfbc:	da0b      	bge.n	800bfd6 <__ieee754_pow+0x226>
 800bfbe:	2000      	movs	r0, #0
 800bfc0:	b011      	add	sp, #68	@ 0x44
 800bfc2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc6:	f000 bcf3 	b.w	800c9b0 <__math_oflow>
 800bfca:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800c030 <__ieee754_pow+0x280>
 800bfce:	e7e7      	b.n	800bfa0 <__ieee754_pow+0x1f0>
 800bfd0:	f1b9 0f00 	cmp.w	r9, #0
 800bfd4:	dcf3      	bgt.n	800bfbe <__ieee754_pow+0x20e>
 800bfd6:	2000      	movs	r0, #0
 800bfd8:	b011      	add	sp, #68	@ 0x44
 800bfda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfde:	f000 bcdf 	b.w	800c9a0 <__math_uflow>
 800bfe2:	4598      	cmp	r8, r3
 800bfe4:	d20c      	bcs.n	800c000 <__ieee754_pow+0x250>
 800bfe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfea:	2200      	movs	r2, #0
 800bfec:	2300      	movs	r3, #0
 800bfee:	f7f4 fd95 	bl	8000b1c <__aeabi_dcmplt>
 800bff2:	3800      	subs	r0, #0
 800bff4:	bf18      	it	ne
 800bff6:	2001      	movne	r0, #1
 800bff8:	f1b9 0f00 	cmp.w	r9, #0
 800bffc:	daec      	bge.n	800bfd8 <__ieee754_pow+0x228>
 800bffe:	e7df      	b.n	800bfc0 <__ieee754_pow+0x210>
 800c000:	4b10      	ldr	r3, [pc, #64]	@ (800c044 <__ieee754_pow+0x294>)
 800c002:	4598      	cmp	r8, r3
 800c004:	f04f 0200 	mov.w	r2, #0
 800c008:	d924      	bls.n	800c054 <__ieee754_pow+0x2a4>
 800c00a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c00e:	2300      	movs	r3, #0
 800c010:	f7f4 fd84 	bl	8000b1c <__aeabi_dcmplt>
 800c014:	3800      	subs	r0, #0
 800c016:	bf18      	it	ne
 800c018:	2001      	movne	r0, #1
 800c01a:	f1b9 0f00 	cmp.w	r9, #0
 800c01e:	dccf      	bgt.n	800bfc0 <__ieee754_pow+0x210>
 800c020:	e7da      	b.n	800bfd8 <__ieee754_pow+0x228>
 800c022:	bf00      	nop
 800c024:	f3af 8000 	nop.w
 800c028:	00000000 	.word	0x00000000
 800c02c:	3ff00000 	.word	0x3ff00000
 800c030:	00000000 	.word	0x00000000
 800c034:	bff00000 	.word	0xbff00000
 800c038:	fff00000 	.word	0xfff00000
 800c03c:	7ff00000 	.word	0x7ff00000
 800c040:	433fffff 	.word	0x433fffff
 800c044:	3ff00000 	.word	0x3ff00000
 800c048:	3fefffff 	.word	0x3fefffff
 800c04c:	3fe00000 	.word	0x3fe00000
 800c050:	43f00000 	.word	0x43f00000
 800c054:	4b5a      	ldr	r3, [pc, #360]	@ (800c1c0 <__ieee754_pow+0x410>)
 800c056:	f7f4 f937 	bl	80002c8 <__aeabi_dsub>
 800c05a:	a351      	add	r3, pc, #324	@ (adr r3, 800c1a0 <__ieee754_pow+0x3f0>)
 800c05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c060:	4604      	mov	r4, r0
 800c062:	460d      	mov	r5, r1
 800c064:	f7f4 fae8 	bl	8000638 <__aeabi_dmul>
 800c068:	a34f      	add	r3, pc, #316	@ (adr r3, 800c1a8 <__ieee754_pow+0x3f8>)
 800c06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c06e:	4606      	mov	r6, r0
 800c070:	460f      	mov	r7, r1
 800c072:	4620      	mov	r0, r4
 800c074:	4629      	mov	r1, r5
 800c076:	f7f4 fadf 	bl	8000638 <__aeabi_dmul>
 800c07a:	4b52      	ldr	r3, [pc, #328]	@ (800c1c4 <__ieee754_pow+0x414>)
 800c07c:	4682      	mov	sl, r0
 800c07e:	468b      	mov	fp, r1
 800c080:	2200      	movs	r2, #0
 800c082:	4620      	mov	r0, r4
 800c084:	4629      	mov	r1, r5
 800c086:	f7f4 fad7 	bl	8000638 <__aeabi_dmul>
 800c08a:	4602      	mov	r2, r0
 800c08c:	460b      	mov	r3, r1
 800c08e:	a148      	add	r1, pc, #288	@ (adr r1, 800c1b0 <__ieee754_pow+0x400>)
 800c090:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c094:	f7f4 f918 	bl	80002c8 <__aeabi_dsub>
 800c098:	4622      	mov	r2, r4
 800c09a:	462b      	mov	r3, r5
 800c09c:	f7f4 facc 	bl	8000638 <__aeabi_dmul>
 800c0a0:	4602      	mov	r2, r0
 800c0a2:	460b      	mov	r3, r1
 800c0a4:	2000      	movs	r0, #0
 800c0a6:	4948      	ldr	r1, [pc, #288]	@ (800c1c8 <__ieee754_pow+0x418>)
 800c0a8:	f7f4 f90e 	bl	80002c8 <__aeabi_dsub>
 800c0ac:	4622      	mov	r2, r4
 800c0ae:	4680      	mov	r8, r0
 800c0b0:	4689      	mov	r9, r1
 800c0b2:	462b      	mov	r3, r5
 800c0b4:	4620      	mov	r0, r4
 800c0b6:	4629      	mov	r1, r5
 800c0b8:	f7f4 fabe 	bl	8000638 <__aeabi_dmul>
 800c0bc:	4602      	mov	r2, r0
 800c0be:	460b      	mov	r3, r1
 800c0c0:	4640      	mov	r0, r8
 800c0c2:	4649      	mov	r1, r9
 800c0c4:	f7f4 fab8 	bl	8000638 <__aeabi_dmul>
 800c0c8:	a33b      	add	r3, pc, #236	@ (adr r3, 800c1b8 <__ieee754_pow+0x408>)
 800c0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ce:	f7f4 fab3 	bl	8000638 <__aeabi_dmul>
 800c0d2:	4602      	mov	r2, r0
 800c0d4:	460b      	mov	r3, r1
 800c0d6:	4650      	mov	r0, sl
 800c0d8:	4659      	mov	r1, fp
 800c0da:	f7f4 f8f5 	bl	80002c8 <__aeabi_dsub>
 800c0de:	4602      	mov	r2, r0
 800c0e0:	460b      	mov	r3, r1
 800c0e2:	4680      	mov	r8, r0
 800c0e4:	4689      	mov	r9, r1
 800c0e6:	4630      	mov	r0, r6
 800c0e8:	4639      	mov	r1, r7
 800c0ea:	f7f4 f8ef 	bl	80002cc <__adddf3>
 800c0ee:	2400      	movs	r4, #0
 800c0f0:	4632      	mov	r2, r6
 800c0f2:	463b      	mov	r3, r7
 800c0f4:	4620      	mov	r0, r4
 800c0f6:	460d      	mov	r5, r1
 800c0f8:	f7f4 f8e6 	bl	80002c8 <__aeabi_dsub>
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	460b      	mov	r3, r1
 800c100:	4640      	mov	r0, r8
 800c102:	4649      	mov	r1, r9
 800c104:	f7f4 f8e0 	bl	80002c8 <__aeabi_dsub>
 800c108:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c10c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c110:	2300      	movs	r3, #0
 800c112:	9304      	str	r3, [sp, #16]
 800c114:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800c118:	4606      	mov	r6, r0
 800c11a:	460f      	mov	r7, r1
 800c11c:	4652      	mov	r2, sl
 800c11e:	465b      	mov	r3, fp
 800c120:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c124:	f7f4 f8d0 	bl	80002c8 <__aeabi_dsub>
 800c128:	4622      	mov	r2, r4
 800c12a:	462b      	mov	r3, r5
 800c12c:	f7f4 fa84 	bl	8000638 <__aeabi_dmul>
 800c130:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c134:	4680      	mov	r8, r0
 800c136:	4689      	mov	r9, r1
 800c138:	4630      	mov	r0, r6
 800c13a:	4639      	mov	r1, r7
 800c13c:	f7f4 fa7c 	bl	8000638 <__aeabi_dmul>
 800c140:	4602      	mov	r2, r0
 800c142:	460b      	mov	r3, r1
 800c144:	4640      	mov	r0, r8
 800c146:	4649      	mov	r1, r9
 800c148:	f7f4 f8c0 	bl	80002cc <__adddf3>
 800c14c:	4652      	mov	r2, sl
 800c14e:	465b      	mov	r3, fp
 800c150:	4606      	mov	r6, r0
 800c152:	460f      	mov	r7, r1
 800c154:	4620      	mov	r0, r4
 800c156:	4629      	mov	r1, r5
 800c158:	f7f4 fa6e 	bl	8000638 <__aeabi_dmul>
 800c15c:	460b      	mov	r3, r1
 800c15e:	4602      	mov	r2, r0
 800c160:	4680      	mov	r8, r0
 800c162:	4689      	mov	r9, r1
 800c164:	4630      	mov	r0, r6
 800c166:	4639      	mov	r1, r7
 800c168:	f7f4 f8b0 	bl	80002cc <__adddf3>
 800c16c:	4b17      	ldr	r3, [pc, #92]	@ (800c1cc <__ieee754_pow+0x41c>)
 800c16e:	4299      	cmp	r1, r3
 800c170:	4604      	mov	r4, r0
 800c172:	460d      	mov	r5, r1
 800c174:	468a      	mov	sl, r1
 800c176:	468b      	mov	fp, r1
 800c178:	f340 82ef 	ble.w	800c75a <__ieee754_pow+0x9aa>
 800c17c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800c180:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800c184:	4303      	orrs	r3, r0
 800c186:	f000 81e8 	beq.w	800c55a <__ieee754_pow+0x7aa>
 800c18a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c18e:	2200      	movs	r2, #0
 800c190:	2300      	movs	r3, #0
 800c192:	f7f4 fcc3 	bl	8000b1c <__aeabi_dcmplt>
 800c196:	3800      	subs	r0, #0
 800c198:	bf18      	it	ne
 800c19a:	2001      	movne	r0, #1
 800c19c:	e710      	b.n	800bfc0 <__ieee754_pow+0x210>
 800c19e:	bf00      	nop
 800c1a0:	60000000 	.word	0x60000000
 800c1a4:	3ff71547 	.word	0x3ff71547
 800c1a8:	f85ddf44 	.word	0xf85ddf44
 800c1ac:	3e54ae0b 	.word	0x3e54ae0b
 800c1b0:	55555555 	.word	0x55555555
 800c1b4:	3fd55555 	.word	0x3fd55555
 800c1b8:	652b82fe 	.word	0x652b82fe
 800c1bc:	3ff71547 	.word	0x3ff71547
 800c1c0:	3ff00000 	.word	0x3ff00000
 800c1c4:	3fd00000 	.word	0x3fd00000
 800c1c8:	3fe00000 	.word	0x3fe00000
 800c1cc:	408fffff 	.word	0x408fffff
 800c1d0:	4bd5      	ldr	r3, [pc, #852]	@ (800c528 <__ieee754_pow+0x778>)
 800c1d2:	402b      	ands	r3, r5
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	b92b      	cbnz	r3, 800c1e4 <__ieee754_pow+0x434>
 800c1d8:	4bd4      	ldr	r3, [pc, #848]	@ (800c52c <__ieee754_pow+0x77c>)
 800c1da:	f7f4 fa2d 	bl	8000638 <__aeabi_dmul>
 800c1de:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800c1e2:	468b      	mov	fp, r1
 800c1e4:	ea4f 532b 	mov.w	r3, fp, asr #20
 800c1e8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800c1ec:	4413      	add	r3, r2
 800c1ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1f0:	4bcf      	ldr	r3, [pc, #828]	@ (800c530 <__ieee754_pow+0x780>)
 800c1f2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800c1f6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800c1fa:	459b      	cmp	fp, r3
 800c1fc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c200:	dd08      	ble.n	800c214 <__ieee754_pow+0x464>
 800c202:	4bcc      	ldr	r3, [pc, #816]	@ (800c534 <__ieee754_pow+0x784>)
 800c204:	459b      	cmp	fp, r3
 800c206:	f340 81a5 	ble.w	800c554 <__ieee754_pow+0x7a4>
 800c20a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c20c:	3301      	adds	r3, #1
 800c20e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c210:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800c214:	f04f 0a00 	mov.w	sl, #0
 800c218:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800c21c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c21e:	4bc6      	ldr	r3, [pc, #792]	@ (800c538 <__ieee754_pow+0x788>)
 800c220:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c224:	ed93 7b00 	vldr	d7, [r3]
 800c228:	4629      	mov	r1, r5
 800c22a:	ec53 2b17 	vmov	r2, r3, d7
 800c22e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c232:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c236:	f7f4 f847 	bl	80002c8 <__aeabi_dsub>
 800c23a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c23e:	4606      	mov	r6, r0
 800c240:	460f      	mov	r7, r1
 800c242:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c246:	f7f4 f841 	bl	80002cc <__adddf3>
 800c24a:	4602      	mov	r2, r0
 800c24c:	460b      	mov	r3, r1
 800c24e:	2000      	movs	r0, #0
 800c250:	49ba      	ldr	r1, [pc, #744]	@ (800c53c <__ieee754_pow+0x78c>)
 800c252:	f7f4 fb1b 	bl	800088c <__aeabi_ddiv>
 800c256:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800c25a:	4602      	mov	r2, r0
 800c25c:	460b      	mov	r3, r1
 800c25e:	4630      	mov	r0, r6
 800c260:	4639      	mov	r1, r7
 800c262:	f7f4 f9e9 	bl	8000638 <__aeabi_dmul>
 800c266:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c26a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800c26e:	106d      	asrs	r5, r5, #1
 800c270:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800c274:	f04f 0b00 	mov.w	fp, #0
 800c278:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800c27c:	4661      	mov	r1, ip
 800c27e:	2200      	movs	r2, #0
 800c280:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800c284:	4658      	mov	r0, fp
 800c286:	46e1      	mov	r9, ip
 800c288:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800c28c:	4614      	mov	r4, r2
 800c28e:	461d      	mov	r5, r3
 800c290:	f7f4 f9d2 	bl	8000638 <__aeabi_dmul>
 800c294:	4602      	mov	r2, r0
 800c296:	460b      	mov	r3, r1
 800c298:	4630      	mov	r0, r6
 800c29a:	4639      	mov	r1, r7
 800c29c:	f7f4 f814 	bl	80002c8 <__aeabi_dsub>
 800c2a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c2a4:	4606      	mov	r6, r0
 800c2a6:	460f      	mov	r7, r1
 800c2a8:	4620      	mov	r0, r4
 800c2aa:	4629      	mov	r1, r5
 800c2ac:	f7f4 f80c 	bl	80002c8 <__aeabi_dsub>
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	460b      	mov	r3, r1
 800c2b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c2b8:	f7f4 f806 	bl	80002c8 <__aeabi_dsub>
 800c2bc:	465a      	mov	r2, fp
 800c2be:	464b      	mov	r3, r9
 800c2c0:	f7f4 f9ba 	bl	8000638 <__aeabi_dmul>
 800c2c4:	4602      	mov	r2, r0
 800c2c6:	460b      	mov	r3, r1
 800c2c8:	4630      	mov	r0, r6
 800c2ca:	4639      	mov	r1, r7
 800c2cc:	f7f3 fffc 	bl	80002c8 <__aeabi_dsub>
 800c2d0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c2d4:	f7f4 f9b0 	bl	8000638 <__aeabi_dmul>
 800c2d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c2dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c2e0:	4610      	mov	r0, r2
 800c2e2:	4619      	mov	r1, r3
 800c2e4:	f7f4 f9a8 	bl	8000638 <__aeabi_dmul>
 800c2e8:	a37d      	add	r3, pc, #500	@ (adr r3, 800c4e0 <__ieee754_pow+0x730>)
 800c2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ee:	4604      	mov	r4, r0
 800c2f0:	460d      	mov	r5, r1
 800c2f2:	f7f4 f9a1 	bl	8000638 <__aeabi_dmul>
 800c2f6:	a37c      	add	r3, pc, #496	@ (adr r3, 800c4e8 <__ieee754_pow+0x738>)
 800c2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2fc:	f7f3 ffe6 	bl	80002cc <__adddf3>
 800c300:	4622      	mov	r2, r4
 800c302:	462b      	mov	r3, r5
 800c304:	f7f4 f998 	bl	8000638 <__aeabi_dmul>
 800c308:	a379      	add	r3, pc, #484	@ (adr r3, 800c4f0 <__ieee754_pow+0x740>)
 800c30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c30e:	f7f3 ffdd 	bl	80002cc <__adddf3>
 800c312:	4622      	mov	r2, r4
 800c314:	462b      	mov	r3, r5
 800c316:	f7f4 f98f 	bl	8000638 <__aeabi_dmul>
 800c31a:	a377      	add	r3, pc, #476	@ (adr r3, 800c4f8 <__ieee754_pow+0x748>)
 800c31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c320:	f7f3 ffd4 	bl	80002cc <__adddf3>
 800c324:	4622      	mov	r2, r4
 800c326:	462b      	mov	r3, r5
 800c328:	f7f4 f986 	bl	8000638 <__aeabi_dmul>
 800c32c:	a374      	add	r3, pc, #464	@ (adr r3, 800c500 <__ieee754_pow+0x750>)
 800c32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c332:	f7f3 ffcb 	bl	80002cc <__adddf3>
 800c336:	4622      	mov	r2, r4
 800c338:	462b      	mov	r3, r5
 800c33a:	f7f4 f97d 	bl	8000638 <__aeabi_dmul>
 800c33e:	a372      	add	r3, pc, #456	@ (adr r3, 800c508 <__ieee754_pow+0x758>)
 800c340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c344:	f7f3 ffc2 	bl	80002cc <__adddf3>
 800c348:	4622      	mov	r2, r4
 800c34a:	4606      	mov	r6, r0
 800c34c:	460f      	mov	r7, r1
 800c34e:	462b      	mov	r3, r5
 800c350:	4620      	mov	r0, r4
 800c352:	4629      	mov	r1, r5
 800c354:	f7f4 f970 	bl	8000638 <__aeabi_dmul>
 800c358:	4602      	mov	r2, r0
 800c35a:	460b      	mov	r3, r1
 800c35c:	4630      	mov	r0, r6
 800c35e:	4639      	mov	r1, r7
 800c360:	f7f4 f96a 	bl	8000638 <__aeabi_dmul>
 800c364:	465a      	mov	r2, fp
 800c366:	4604      	mov	r4, r0
 800c368:	460d      	mov	r5, r1
 800c36a:	464b      	mov	r3, r9
 800c36c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c370:	f7f3 ffac 	bl	80002cc <__adddf3>
 800c374:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c378:	f7f4 f95e 	bl	8000638 <__aeabi_dmul>
 800c37c:	4622      	mov	r2, r4
 800c37e:	462b      	mov	r3, r5
 800c380:	f7f3 ffa4 	bl	80002cc <__adddf3>
 800c384:	465a      	mov	r2, fp
 800c386:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c38a:	464b      	mov	r3, r9
 800c38c:	4658      	mov	r0, fp
 800c38e:	4649      	mov	r1, r9
 800c390:	f7f4 f952 	bl	8000638 <__aeabi_dmul>
 800c394:	4b6a      	ldr	r3, [pc, #424]	@ (800c540 <__ieee754_pow+0x790>)
 800c396:	2200      	movs	r2, #0
 800c398:	4606      	mov	r6, r0
 800c39a:	460f      	mov	r7, r1
 800c39c:	f7f3 ff96 	bl	80002cc <__adddf3>
 800c3a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c3a4:	f7f3 ff92 	bl	80002cc <__adddf3>
 800c3a8:	46d8      	mov	r8, fp
 800c3aa:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800c3ae:	460d      	mov	r5, r1
 800c3b0:	465a      	mov	r2, fp
 800c3b2:	460b      	mov	r3, r1
 800c3b4:	4640      	mov	r0, r8
 800c3b6:	4649      	mov	r1, r9
 800c3b8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800c3bc:	f7f4 f93c 	bl	8000638 <__aeabi_dmul>
 800c3c0:	465c      	mov	r4, fp
 800c3c2:	4680      	mov	r8, r0
 800c3c4:	4689      	mov	r9, r1
 800c3c6:	4b5e      	ldr	r3, [pc, #376]	@ (800c540 <__ieee754_pow+0x790>)
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	4629      	mov	r1, r5
 800c3ce:	f7f3 ff7b 	bl	80002c8 <__aeabi_dsub>
 800c3d2:	4632      	mov	r2, r6
 800c3d4:	463b      	mov	r3, r7
 800c3d6:	f7f3 ff77 	bl	80002c8 <__aeabi_dsub>
 800c3da:	4602      	mov	r2, r0
 800c3dc:	460b      	mov	r3, r1
 800c3de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c3e2:	f7f3 ff71 	bl	80002c8 <__aeabi_dsub>
 800c3e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3ea:	f7f4 f925 	bl	8000638 <__aeabi_dmul>
 800c3ee:	4622      	mov	r2, r4
 800c3f0:	4606      	mov	r6, r0
 800c3f2:	460f      	mov	r7, r1
 800c3f4:	462b      	mov	r3, r5
 800c3f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3fa:	f7f4 f91d 	bl	8000638 <__aeabi_dmul>
 800c3fe:	4602      	mov	r2, r0
 800c400:	460b      	mov	r3, r1
 800c402:	4630      	mov	r0, r6
 800c404:	4639      	mov	r1, r7
 800c406:	f7f3 ff61 	bl	80002cc <__adddf3>
 800c40a:	4606      	mov	r6, r0
 800c40c:	460f      	mov	r7, r1
 800c40e:	4602      	mov	r2, r0
 800c410:	460b      	mov	r3, r1
 800c412:	4640      	mov	r0, r8
 800c414:	4649      	mov	r1, r9
 800c416:	f7f3 ff59 	bl	80002cc <__adddf3>
 800c41a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800c41e:	a33c      	add	r3, pc, #240	@ (adr r3, 800c510 <__ieee754_pow+0x760>)
 800c420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c424:	4658      	mov	r0, fp
 800c426:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800c42a:	460d      	mov	r5, r1
 800c42c:	f7f4 f904 	bl	8000638 <__aeabi_dmul>
 800c430:	465c      	mov	r4, fp
 800c432:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c436:	4642      	mov	r2, r8
 800c438:	464b      	mov	r3, r9
 800c43a:	4620      	mov	r0, r4
 800c43c:	4629      	mov	r1, r5
 800c43e:	f7f3 ff43 	bl	80002c8 <__aeabi_dsub>
 800c442:	4602      	mov	r2, r0
 800c444:	460b      	mov	r3, r1
 800c446:	4630      	mov	r0, r6
 800c448:	4639      	mov	r1, r7
 800c44a:	f7f3 ff3d 	bl	80002c8 <__aeabi_dsub>
 800c44e:	a332      	add	r3, pc, #200	@ (adr r3, 800c518 <__ieee754_pow+0x768>)
 800c450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c454:	f7f4 f8f0 	bl	8000638 <__aeabi_dmul>
 800c458:	a331      	add	r3, pc, #196	@ (adr r3, 800c520 <__ieee754_pow+0x770>)
 800c45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c45e:	4606      	mov	r6, r0
 800c460:	460f      	mov	r7, r1
 800c462:	4620      	mov	r0, r4
 800c464:	4629      	mov	r1, r5
 800c466:	f7f4 f8e7 	bl	8000638 <__aeabi_dmul>
 800c46a:	4602      	mov	r2, r0
 800c46c:	460b      	mov	r3, r1
 800c46e:	4630      	mov	r0, r6
 800c470:	4639      	mov	r1, r7
 800c472:	f7f3 ff2b 	bl	80002cc <__adddf3>
 800c476:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c478:	4b32      	ldr	r3, [pc, #200]	@ (800c544 <__ieee754_pow+0x794>)
 800c47a:	4413      	add	r3, r2
 800c47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c480:	f7f3 ff24 	bl	80002cc <__adddf3>
 800c484:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c488:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c48a:	f7f4 f86b 	bl	8000564 <__aeabi_i2d>
 800c48e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c490:	4b2d      	ldr	r3, [pc, #180]	@ (800c548 <__ieee754_pow+0x798>)
 800c492:	4413      	add	r3, r2
 800c494:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c498:	4606      	mov	r6, r0
 800c49a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c49e:	460f      	mov	r7, r1
 800c4a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c4a4:	f7f3 ff12 	bl	80002cc <__adddf3>
 800c4a8:	4642      	mov	r2, r8
 800c4aa:	464b      	mov	r3, r9
 800c4ac:	f7f3 ff0e 	bl	80002cc <__adddf3>
 800c4b0:	4632      	mov	r2, r6
 800c4b2:	463b      	mov	r3, r7
 800c4b4:	f7f3 ff0a 	bl	80002cc <__adddf3>
 800c4b8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800c4bc:	4632      	mov	r2, r6
 800c4be:	463b      	mov	r3, r7
 800c4c0:	4658      	mov	r0, fp
 800c4c2:	460d      	mov	r5, r1
 800c4c4:	f7f3 ff00 	bl	80002c8 <__aeabi_dsub>
 800c4c8:	4642      	mov	r2, r8
 800c4ca:	464b      	mov	r3, r9
 800c4cc:	f7f3 fefc 	bl	80002c8 <__aeabi_dsub>
 800c4d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4d4:	f7f3 fef8 	bl	80002c8 <__aeabi_dsub>
 800c4d8:	465c      	mov	r4, fp
 800c4da:	4602      	mov	r2, r0
 800c4dc:	e036      	b.n	800c54c <__ieee754_pow+0x79c>
 800c4de:	bf00      	nop
 800c4e0:	4a454eef 	.word	0x4a454eef
 800c4e4:	3fca7e28 	.word	0x3fca7e28
 800c4e8:	93c9db65 	.word	0x93c9db65
 800c4ec:	3fcd864a 	.word	0x3fcd864a
 800c4f0:	a91d4101 	.word	0xa91d4101
 800c4f4:	3fd17460 	.word	0x3fd17460
 800c4f8:	518f264d 	.word	0x518f264d
 800c4fc:	3fd55555 	.word	0x3fd55555
 800c500:	db6fabff 	.word	0xdb6fabff
 800c504:	3fdb6db6 	.word	0x3fdb6db6
 800c508:	33333303 	.word	0x33333303
 800c50c:	3fe33333 	.word	0x3fe33333
 800c510:	e0000000 	.word	0xe0000000
 800c514:	3feec709 	.word	0x3feec709
 800c518:	dc3a03fd 	.word	0xdc3a03fd
 800c51c:	3feec709 	.word	0x3feec709
 800c520:	145b01f5 	.word	0x145b01f5
 800c524:	be3e2fe0 	.word	0xbe3e2fe0
 800c528:	7ff00000 	.word	0x7ff00000
 800c52c:	43400000 	.word	0x43400000
 800c530:	0003988e 	.word	0x0003988e
 800c534:	000bb679 	.word	0x000bb679
 800c538:	0800d3e8 	.word	0x0800d3e8
 800c53c:	3ff00000 	.word	0x3ff00000
 800c540:	40080000 	.word	0x40080000
 800c544:	0800d3c8 	.word	0x0800d3c8
 800c548:	0800d3d8 	.word	0x0800d3d8
 800c54c:	460b      	mov	r3, r1
 800c54e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c552:	e5d7      	b.n	800c104 <__ieee754_pow+0x354>
 800c554:	f04f 0a01 	mov.w	sl, #1
 800c558:	e65e      	b.n	800c218 <__ieee754_pow+0x468>
 800c55a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800c82c <__ieee754_pow+0xa7c>)
 800c55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c560:	4630      	mov	r0, r6
 800c562:	4639      	mov	r1, r7
 800c564:	f7f3 feb2 	bl	80002cc <__adddf3>
 800c568:	4642      	mov	r2, r8
 800c56a:	e9cd 0100 	strd	r0, r1, [sp]
 800c56e:	464b      	mov	r3, r9
 800c570:	4620      	mov	r0, r4
 800c572:	4629      	mov	r1, r5
 800c574:	f7f3 fea8 	bl	80002c8 <__aeabi_dsub>
 800c578:	4602      	mov	r2, r0
 800c57a:	460b      	mov	r3, r1
 800c57c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c580:	f7f4 faea 	bl	8000b58 <__aeabi_dcmpgt>
 800c584:	2800      	cmp	r0, #0
 800c586:	f47f ae00 	bne.w	800c18a <__ieee754_pow+0x3da>
 800c58a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800c58e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c592:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800c596:	fa43 fa0a 	asr.w	sl, r3, sl
 800c59a:	44da      	add	sl, fp
 800c59c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c5a0:	489d      	ldr	r0, [pc, #628]	@ (800c818 <__ieee754_pow+0xa68>)
 800c5a2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800c5a6:	4108      	asrs	r0, r1
 800c5a8:	ea00 030a 	and.w	r3, r0, sl
 800c5ac:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c5b0:	f1c1 0114 	rsb	r1, r1, #20
 800c5b4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800c5b8:	fa4a fa01 	asr.w	sl, sl, r1
 800c5bc:	f1bb 0f00 	cmp.w	fp, #0
 800c5c0:	4640      	mov	r0, r8
 800c5c2:	4649      	mov	r1, r9
 800c5c4:	f04f 0200 	mov.w	r2, #0
 800c5c8:	bfb8      	it	lt
 800c5ca:	f1ca 0a00 	rsblt	sl, sl, #0
 800c5ce:	f7f3 fe7b 	bl	80002c8 <__aeabi_dsub>
 800c5d2:	4680      	mov	r8, r0
 800c5d4:	4689      	mov	r9, r1
 800c5d6:	4632      	mov	r2, r6
 800c5d8:	463b      	mov	r3, r7
 800c5da:	4640      	mov	r0, r8
 800c5dc:	4649      	mov	r1, r9
 800c5de:	f7f3 fe75 	bl	80002cc <__adddf3>
 800c5e2:	2400      	movs	r4, #0
 800c5e4:	a37c      	add	r3, pc, #496	@ (adr r3, 800c7d8 <__ieee754_pow+0xa28>)
 800c5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ea:	4620      	mov	r0, r4
 800c5ec:	460d      	mov	r5, r1
 800c5ee:	f7f4 f823 	bl	8000638 <__aeabi_dmul>
 800c5f2:	4642      	mov	r2, r8
 800c5f4:	e9cd 0100 	strd	r0, r1, [sp]
 800c5f8:	464b      	mov	r3, r9
 800c5fa:	4620      	mov	r0, r4
 800c5fc:	4629      	mov	r1, r5
 800c5fe:	f7f3 fe63 	bl	80002c8 <__aeabi_dsub>
 800c602:	4602      	mov	r2, r0
 800c604:	460b      	mov	r3, r1
 800c606:	4630      	mov	r0, r6
 800c608:	4639      	mov	r1, r7
 800c60a:	f7f3 fe5d 	bl	80002c8 <__aeabi_dsub>
 800c60e:	a374      	add	r3, pc, #464	@ (adr r3, 800c7e0 <__ieee754_pow+0xa30>)
 800c610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c614:	f7f4 f810 	bl	8000638 <__aeabi_dmul>
 800c618:	a373      	add	r3, pc, #460	@ (adr r3, 800c7e8 <__ieee754_pow+0xa38>)
 800c61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c61e:	4680      	mov	r8, r0
 800c620:	4689      	mov	r9, r1
 800c622:	4620      	mov	r0, r4
 800c624:	4629      	mov	r1, r5
 800c626:	f7f4 f807 	bl	8000638 <__aeabi_dmul>
 800c62a:	4602      	mov	r2, r0
 800c62c:	460b      	mov	r3, r1
 800c62e:	4640      	mov	r0, r8
 800c630:	4649      	mov	r1, r9
 800c632:	f7f3 fe4b 	bl	80002cc <__adddf3>
 800c636:	4604      	mov	r4, r0
 800c638:	460d      	mov	r5, r1
 800c63a:	4602      	mov	r2, r0
 800c63c:	460b      	mov	r3, r1
 800c63e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c642:	f7f3 fe43 	bl	80002cc <__adddf3>
 800c646:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c64a:	4680      	mov	r8, r0
 800c64c:	4689      	mov	r9, r1
 800c64e:	f7f3 fe3b 	bl	80002c8 <__aeabi_dsub>
 800c652:	4602      	mov	r2, r0
 800c654:	460b      	mov	r3, r1
 800c656:	4620      	mov	r0, r4
 800c658:	4629      	mov	r1, r5
 800c65a:	f7f3 fe35 	bl	80002c8 <__aeabi_dsub>
 800c65e:	4642      	mov	r2, r8
 800c660:	4606      	mov	r6, r0
 800c662:	460f      	mov	r7, r1
 800c664:	464b      	mov	r3, r9
 800c666:	4640      	mov	r0, r8
 800c668:	4649      	mov	r1, r9
 800c66a:	f7f3 ffe5 	bl	8000638 <__aeabi_dmul>
 800c66e:	a360      	add	r3, pc, #384	@ (adr r3, 800c7f0 <__ieee754_pow+0xa40>)
 800c670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c674:	4604      	mov	r4, r0
 800c676:	460d      	mov	r5, r1
 800c678:	f7f3 ffde 	bl	8000638 <__aeabi_dmul>
 800c67c:	a35e      	add	r3, pc, #376	@ (adr r3, 800c7f8 <__ieee754_pow+0xa48>)
 800c67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c682:	f7f3 fe21 	bl	80002c8 <__aeabi_dsub>
 800c686:	4622      	mov	r2, r4
 800c688:	462b      	mov	r3, r5
 800c68a:	f7f3 ffd5 	bl	8000638 <__aeabi_dmul>
 800c68e:	a35c      	add	r3, pc, #368	@ (adr r3, 800c800 <__ieee754_pow+0xa50>)
 800c690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c694:	f7f3 fe1a 	bl	80002cc <__adddf3>
 800c698:	4622      	mov	r2, r4
 800c69a:	462b      	mov	r3, r5
 800c69c:	f7f3 ffcc 	bl	8000638 <__aeabi_dmul>
 800c6a0:	a359      	add	r3, pc, #356	@ (adr r3, 800c808 <__ieee754_pow+0xa58>)
 800c6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a6:	f7f3 fe0f 	bl	80002c8 <__aeabi_dsub>
 800c6aa:	4622      	mov	r2, r4
 800c6ac:	462b      	mov	r3, r5
 800c6ae:	f7f3 ffc3 	bl	8000638 <__aeabi_dmul>
 800c6b2:	a357      	add	r3, pc, #348	@ (adr r3, 800c810 <__ieee754_pow+0xa60>)
 800c6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b8:	f7f3 fe08 	bl	80002cc <__adddf3>
 800c6bc:	4622      	mov	r2, r4
 800c6be:	462b      	mov	r3, r5
 800c6c0:	f7f3 ffba 	bl	8000638 <__aeabi_dmul>
 800c6c4:	4602      	mov	r2, r0
 800c6c6:	460b      	mov	r3, r1
 800c6c8:	4640      	mov	r0, r8
 800c6ca:	4649      	mov	r1, r9
 800c6cc:	f7f3 fdfc 	bl	80002c8 <__aeabi_dsub>
 800c6d0:	4604      	mov	r4, r0
 800c6d2:	460d      	mov	r5, r1
 800c6d4:	4602      	mov	r2, r0
 800c6d6:	460b      	mov	r3, r1
 800c6d8:	4640      	mov	r0, r8
 800c6da:	4649      	mov	r1, r9
 800c6dc:	f7f3 ffac 	bl	8000638 <__aeabi_dmul>
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	e9cd 0100 	strd	r0, r1, [sp]
 800c6e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c6ea:	4620      	mov	r0, r4
 800c6ec:	4629      	mov	r1, r5
 800c6ee:	f7f3 fdeb 	bl	80002c8 <__aeabi_dsub>
 800c6f2:	4602      	mov	r2, r0
 800c6f4:	460b      	mov	r3, r1
 800c6f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c6fa:	f7f4 f8c7 	bl	800088c <__aeabi_ddiv>
 800c6fe:	4632      	mov	r2, r6
 800c700:	4604      	mov	r4, r0
 800c702:	460d      	mov	r5, r1
 800c704:	463b      	mov	r3, r7
 800c706:	4640      	mov	r0, r8
 800c708:	4649      	mov	r1, r9
 800c70a:	f7f3 ff95 	bl	8000638 <__aeabi_dmul>
 800c70e:	4632      	mov	r2, r6
 800c710:	463b      	mov	r3, r7
 800c712:	f7f3 fddb 	bl	80002cc <__adddf3>
 800c716:	4602      	mov	r2, r0
 800c718:	460b      	mov	r3, r1
 800c71a:	4620      	mov	r0, r4
 800c71c:	4629      	mov	r1, r5
 800c71e:	f7f3 fdd3 	bl	80002c8 <__aeabi_dsub>
 800c722:	4642      	mov	r2, r8
 800c724:	464b      	mov	r3, r9
 800c726:	f7f3 fdcf 	bl	80002c8 <__aeabi_dsub>
 800c72a:	460b      	mov	r3, r1
 800c72c:	4602      	mov	r2, r0
 800c72e:	493b      	ldr	r1, [pc, #236]	@ (800c81c <__ieee754_pow+0xa6c>)
 800c730:	2000      	movs	r0, #0
 800c732:	f7f3 fdc9 	bl	80002c8 <__aeabi_dsub>
 800c736:	ec41 0b10 	vmov	d0, r0, r1
 800c73a:	ee10 3a90 	vmov	r3, s1
 800c73e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c742:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c746:	da30      	bge.n	800c7aa <__ieee754_pow+0x9fa>
 800c748:	4650      	mov	r0, sl
 800c74a:	f000 f87d 	bl	800c848 <scalbn>
 800c74e:	ec51 0b10 	vmov	r0, r1, d0
 800c752:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c756:	f7ff bbd2 	b.w	800befe <__ieee754_pow+0x14e>
 800c75a:	4c31      	ldr	r4, [pc, #196]	@ (800c820 <__ieee754_pow+0xa70>)
 800c75c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c760:	42a3      	cmp	r3, r4
 800c762:	d91a      	bls.n	800c79a <__ieee754_pow+0x9ea>
 800c764:	4b2f      	ldr	r3, [pc, #188]	@ (800c824 <__ieee754_pow+0xa74>)
 800c766:	440b      	add	r3, r1
 800c768:	4303      	orrs	r3, r0
 800c76a:	d009      	beq.n	800c780 <__ieee754_pow+0x9d0>
 800c76c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c770:	2200      	movs	r2, #0
 800c772:	2300      	movs	r3, #0
 800c774:	f7f4 f9d2 	bl	8000b1c <__aeabi_dcmplt>
 800c778:	3800      	subs	r0, #0
 800c77a:	bf18      	it	ne
 800c77c:	2001      	movne	r0, #1
 800c77e:	e42b      	b.n	800bfd8 <__ieee754_pow+0x228>
 800c780:	4642      	mov	r2, r8
 800c782:	464b      	mov	r3, r9
 800c784:	f7f3 fda0 	bl	80002c8 <__aeabi_dsub>
 800c788:	4632      	mov	r2, r6
 800c78a:	463b      	mov	r3, r7
 800c78c:	f7f4 f9da 	bl	8000b44 <__aeabi_dcmpge>
 800c790:	2800      	cmp	r0, #0
 800c792:	d1eb      	bne.n	800c76c <__ieee754_pow+0x9bc>
 800c794:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800c834 <__ieee754_pow+0xa84>
 800c798:	e6f7      	b.n	800c58a <__ieee754_pow+0x7da>
 800c79a:	469a      	mov	sl, r3
 800c79c:	4b22      	ldr	r3, [pc, #136]	@ (800c828 <__ieee754_pow+0xa78>)
 800c79e:	459a      	cmp	sl, r3
 800c7a0:	f63f aef3 	bhi.w	800c58a <__ieee754_pow+0x7da>
 800c7a4:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c7a8:	e715      	b.n	800c5d6 <__ieee754_pow+0x826>
 800c7aa:	ec51 0b10 	vmov	r0, r1, d0
 800c7ae:	4619      	mov	r1, r3
 800c7b0:	e7cf      	b.n	800c752 <__ieee754_pow+0x9a2>
 800c7b2:	491a      	ldr	r1, [pc, #104]	@ (800c81c <__ieee754_pow+0xa6c>)
 800c7b4:	2000      	movs	r0, #0
 800c7b6:	f7ff bb18 	b.w	800bdea <__ieee754_pow+0x3a>
 800c7ba:	2000      	movs	r0, #0
 800c7bc:	2100      	movs	r1, #0
 800c7be:	f7ff bb14 	b.w	800bdea <__ieee754_pow+0x3a>
 800c7c2:	4630      	mov	r0, r6
 800c7c4:	4639      	mov	r1, r7
 800c7c6:	f7ff bb10 	b.w	800bdea <__ieee754_pow+0x3a>
 800c7ca:	460c      	mov	r4, r1
 800c7cc:	f7ff bb5e 	b.w	800be8c <__ieee754_pow+0xdc>
 800c7d0:	2400      	movs	r4, #0
 800c7d2:	f7ff bb49 	b.w	800be68 <__ieee754_pow+0xb8>
 800c7d6:	bf00      	nop
 800c7d8:	00000000 	.word	0x00000000
 800c7dc:	3fe62e43 	.word	0x3fe62e43
 800c7e0:	fefa39ef 	.word	0xfefa39ef
 800c7e4:	3fe62e42 	.word	0x3fe62e42
 800c7e8:	0ca86c39 	.word	0x0ca86c39
 800c7ec:	be205c61 	.word	0xbe205c61
 800c7f0:	72bea4d0 	.word	0x72bea4d0
 800c7f4:	3e663769 	.word	0x3e663769
 800c7f8:	c5d26bf1 	.word	0xc5d26bf1
 800c7fc:	3ebbbd41 	.word	0x3ebbbd41
 800c800:	af25de2c 	.word	0xaf25de2c
 800c804:	3f11566a 	.word	0x3f11566a
 800c808:	16bebd93 	.word	0x16bebd93
 800c80c:	3f66c16c 	.word	0x3f66c16c
 800c810:	5555553e 	.word	0x5555553e
 800c814:	3fc55555 	.word	0x3fc55555
 800c818:	fff00000 	.word	0xfff00000
 800c81c:	3ff00000 	.word	0x3ff00000
 800c820:	4090cbff 	.word	0x4090cbff
 800c824:	3f6f3400 	.word	0x3f6f3400
 800c828:	3fe00000 	.word	0x3fe00000
 800c82c:	652b82fe 	.word	0x652b82fe
 800c830:	3c971547 	.word	0x3c971547
 800c834:	4090cc00 	.word	0x4090cc00

0800c838 <fabs>:
 800c838:	ec51 0b10 	vmov	r0, r1, d0
 800c83c:	4602      	mov	r2, r0
 800c83e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c842:	ec43 2b10 	vmov	d0, r2, r3
 800c846:	4770      	bx	lr

0800c848 <scalbn>:
 800c848:	b570      	push	{r4, r5, r6, lr}
 800c84a:	ec55 4b10 	vmov	r4, r5, d0
 800c84e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c852:	4606      	mov	r6, r0
 800c854:	462b      	mov	r3, r5
 800c856:	b991      	cbnz	r1, 800c87e <scalbn+0x36>
 800c858:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c85c:	4323      	orrs	r3, r4
 800c85e:	d03d      	beq.n	800c8dc <scalbn+0x94>
 800c860:	4b35      	ldr	r3, [pc, #212]	@ (800c938 <scalbn+0xf0>)
 800c862:	4620      	mov	r0, r4
 800c864:	4629      	mov	r1, r5
 800c866:	2200      	movs	r2, #0
 800c868:	f7f3 fee6 	bl	8000638 <__aeabi_dmul>
 800c86c:	4b33      	ldr	r3, [pc, #204]	@ (800c93c <scalbn+0xf4>)
 800c86e:	429e      	cmp	r6, r3
 800c870:	4604      	mov	r4, r0
 800c872:	460d      	mov	r5, r1
 800c874:	da0f      	bge.n	800c896 <scalbn+0x4e>
 800c876:	a328      	add	r3, pc, #160	@ (adr r3, 800c918 <scalbn+0xd0>)
 800c878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c87c:	e01e      	b.n	800c8bc <scalbn+0x74>
 800c87e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800c882:	4291      	cmp	r1, r2
 800c884:	d10b      	bne.n	800c89e <scalbn+0x56>
 800c886:	4622      	mov	r2, r4
 800c888:	4620      	mov	r0, r4
 800c88a:	4629      	mov	r1, r5
 800c88c:	f7f3 fd1e 	bl	80002cc <__adddf3>
 800c890:	4604      	mov	r4, r0
 800c892:	460d      	mov	r5, r1
 800c894:	e022      	b.n	800c8dc <scalbn+0x94>
 800c896:	460b      	mov	r3, r1
 800c898:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c89c:	3936      	subs	r1, #54	@ 0x36
 800c89e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c8a2:	4296      	cmp	r6, r2
 800c8a4:	dd0d      	ble.n	800c8c2 <scalbn+0x7a>
 800c8a6:	2d00      	cmp	r5, #0
 800c8a8:	a11d      	add	r1, pc, #116	@ (adr r1, 800c920 <scalbn+0xd8>)
 800c8aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8ae:	da02      	bge.n	800c8b6 <scalbn+0x6e>
 800c8b0:	a11d      	add	r1, pc, #116	@ (adr r1, 800c928 <scalbn+0xe0>)
 800c8b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8b6:	a31a      	add	r3, pc, #104	@ (adr r3, 800c920 <scalbn+0xd8>)
 800c8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8bc:	f7f3 febc 	bl	8000638 <__aeabi_dmul>
 800c8c0:	e7e6      	b.n	800c890 <scalbn+0x48>
 800c8c2:	1872      	adds	r2, r6, r1
 800c8c4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c8c8:	428a      	cmp	r2, r1
 800c8ca:	dcec      	bgt.n	800c8a6 <scalbn+0x5e>
 800c8cc:	2a00      	cmp	r2, #0
 800c8ce:	dd08      	ble.n	800c8e2 <scalbn+0x9a>
 800c8d0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c8d4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c8d8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c8dc:	ec45 4b10 	vmov	d0, r4, r5
 800c8e0:	bd70      	pop	{r4, r5, r6, pc}
 800c8e2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c8e6:	da08      	bge.n	800c8fa <scalbn+0xb2>
 800c8e8:	2d00      	cmp	r5, #0
 800c8ea:	a10b      	add	r1, pc, #44	@ (adr r1, 800c918 <scalbn+0xd0>)
 800c8ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8f0:	dac1      	bge.n	800c876 <scalbn+0x2e>
 800c8f2:	a10f      	add	r1, pc, #60	@ (adr r1, 800c930 <scalbn+0xe8>)
 800c8f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8f8:	e7bd      	b.n	800c876 <scalbn+0x2e>
 800c8fa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c8fe:	3236      	adds	r2, #54	@ 0x36
 800c900:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c904:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c908:	4620      	mov	r0, r4
 800c90a:	4b0d      	ldr	r3, [pc, #52]	@ (800c940 <scalbn+0xf8>)
 800c90c:	4629      	mov	r1, r5
 800c90e:	2200      	movs	r2, #0
 800c910:	e7d4      	b.n	800c8bc <scalbn+0x74>
 800c912:	bf00      	nop
 800c914:	f3af 8000 	nop.w
 800c918:	c2f8f359 	.word	0xc2f8f359
 800c91c:	01a56e1f 	.word	0x01a56e1f
 800c920:	8800759c 	.word	0x8800759c
 800c924:	7e37e43c 	.word	0x7e37e43c
 800c928:	8800759c 	.word	0x8800759c
 800c92c:	fe37e43c 	.word	0xfe37e43c
 800c930:	c2f8f359 	.word	0xc2f8f359
 800c934:	81a56e1f 	.word	0x81a56e1f
 800c938:	43500000 	.word	0x43500000
 800c93c:	ffff3cb0 	.word	0xffff3cb0
 800c940:	3c900000 	.word	0x3c900000

0800c944 <with_errno>:
 800c944:	b510      	push	{r4, lr}
 800c946:	ed2d 8b02 	vpush	{d8}
 800c94a:	eeb0 8a40 	vmov.f32	s16, s0
 800c94e:	eef0 8a60 	vmov.f32	s17, s1
 800c952:	4604      	mov	r4, r0
 800c954:	f7fe fdf4 	bl	800b540 <__errno>
 800c958:	eeb0 0a48 	vmov.f32	s0, s16
 800c95c:	eef0 0a68 	vmov.f32	s1, s17
 800c960:	ecbd 8b02 	vpop	{d8}
 800c964:	6004      	str	r4, [r0, #0]
 800c966:	bd10      	pop	{r4, pc}

0800c968 <xflow>:
 800c968:	4603      	mov	r3, r0
 800c96a:	b507      	push	{r0, r1, r2, lr}
 800c96c:	ec51 0b10 	vmov	r0, r1, d0
 800c970:	b183      	cbz	r3, 800c994 <xflow+0x2c>
 800c972:	4602      	mov	r2, r0
 800c974:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c978:	e9cd 2300 	strd	r2, r3, [sp]
 800c97c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c980:	f7f3 fe5a 	bl	8000638 <__aeabi_dmul>
 800c984:	ec41 0b10 	vmov	d0, r0, r1
 800c988:	2022      	movs	r0, #34	@ 0x22
 800c98a:	b003      	add	sp, #12
 800c98c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c990:	f7ff bfd8 	b.w	800c944 <with_errno>
 800c994:	4602      	mov	r2, r0
 800c996:	460b      	mov	r3, r1
 800c998:	e7ee      	b.n	800c978 <xflow+0x10>
 800c99a:	0000      	movs	r0, r0
 800c99c:	0000      	movs	r0, r0
	...

0800c9a0 <__math_uflow>:
 800c9a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c9a8 <__math_uflow+0x8>
 800c9a4:	f7ff bfe0 	b.w	800c968 <xflow>
 800c9a8:	00000000 	.word	0x00000000
 800c9ac:	10000000 	.word	0x10000000

0800c9b0 <__math_oflow>:
 800c9b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c9b8 <__math_oflow+0x8>
 800c9b4:	f7ff bfd8 	b.w	800c968 <xflow>
 800c9b8:	00000000 	.word	0x00000000
 800c9bc:	70000000 	.word	0x70000000

0800c9c0 <__ieee754_sqrt>:
 800c9c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9c4:	4a68      	ldr	r2, [pc, #416]	@ (800cb68 <__ieee754_sqrt+0x1a8>)
 800c9c6:	ec55 4b10 	vmov	r4, r5, d0
 800c9ca:	43aa      	bics	r2, r5
 800c9cc:	462b      	mov	r3, r5
 800c9ce:	4621      	mov	r1, r4
 800c9d0:	d110      	bne.n	800c9f4 <__ieee754_sqrt+0x34>
 800c9d2:	4622      	mov	r2, r4
 800c9d4:	4620      	mov	r0, r4
 800c9d6:	4629      	mov	r1, r5
 800c9d8:	f7f3 fe2e 	bl	8000638 <__aeabi_dmul>
 800c9dc:	4602      	mov	r2, r0
 800c9de:	460b      	mov	r3, r1
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	4629      	mov	r1, r5
 800c9e4:	f7f3 fc72 	bl	80002cc <__adddf3>
 800c9e8:	4604      	mov	r4, r0
 800c9ea:	460d      	mov	r5, r1
 800c9ec:	ec45 4b10 	vmov	d0, r4, r5
 800c9f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9f4:	2d00      	cmp	r5, #0
 800c9f6:	dc0e      	bgt.n	800ca16 <__ieee754_sqrt+0x56>
 800c9f8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800c9fc:	4322      	orrs	r2, r4
 800c9fe:	d0f5      	beq.n	800c9ec <__ieee754_sqrt+0x2c>
 800ca00:	b19d      	cbz	r5, 800ca2a <__ieee754_sqrt+0x6a>
 800ca02:	4622      	mov	r2, r4
 800ca04:	4620      	mov	r0, r4
 800ca06:	4629      	mov	r1, r5
 800ca08:	f7f3 fc5e 	bl	80002c8 <__aeabi_dsub>
 800ca0c:	4602      	mov	r2, r0
 800ca0e:	460b      	mov	r3, r1
 800ca10:	f7f3 ff3c 	bl	800088c <__aeabi_ddiv>
 800ca14:	e7e8      	b.n	800c9e8 <__ieee754_sqrt+0x28>
 800ca16:	152a      	asrs	r2, r5, #20
 800ca18:	d115      	bne.n	800ca46 <__ieee754_sqrt+0x86>
 800ca1a:	2000      	movs	r0, #0
 800ca1c:	e009      	b.n	800ca32 <__ieee754_sqrt+0x72>
 800ca1e:	0acb      	lsrs	r3, r1, #11
 800ca20:	3a15      	subs	r2, #21
 800ca22:	0549      	lsls	r1, r1, #21
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d0fa      	beq.n	800ca1e <__ieee754_sqrt+0x5e>
 800ca28:	e7f7      	b.n	800ca1a <__ieee754_sqrt+0x5a>
 800ca2a:	462a      	mov	r2, r5
 800ca2c:	e7fa      	b.n	800ca24 <__ieee754_sqrt+0x64>
 800ca2e:	005b      	lsls	r3, r3, #1
 800ca30:	3001      	adds	r0, #1
 800ca32:	02dc      	lsls	r4, r3, #11
 800ca34:	d5fb      	bpl.n	800ca2e <__ieee754_sqrt+0x6e>
 800ca36:	1e44      	subs	r4, r0, #1
 800ca38:	1b12      	subs	r2, r2, r4
 800ca3a:	f1c0 0420 	rsb	r4, r0, #32
 800ca3e:	fa21 f404 	lsr.w	r4, r1, r4
 800ca42:	4323      	orrs	r3, r4
 800ca44:	4081      	lsls	r1, r0
 800ca46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca4a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800ca4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ca52:	07d2      	lsls	r2, r2, #31
 800ca54:	bf5c      	itt	pl
 800ca56:	005b      	lslpl	r3, r3, #1
 800ca58:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800ca5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ca60:	bf58      	it	pl
 800ca62:	0049      	lslpl	r1, r1, #1
 800ca64:	2600      	movs	r6, #0
 800ca66:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800ca6a:	106d      	asrs	r5, r5, #1
 800ca6c:	0049      	lsls	r1, r1, #1
 800ca6e:	2016      	movs	r0, #22
 800ca70:	4632      	mov	r2, r6
 800ca72:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800ca76:	1917      	adds	r7, r2, r4
 800ca78:	429f      	cmp	r7, r3
 800ca7a:	bfde      	ittt	le
 800ca7c:	193a      	addle	r2, r7, r4
 800ca7e:	1bdb      	suble	r3, r3, r7
 800ca80:	1936      	addle	r6, r6, r4
 800ca82:	0fcf      	lsrs	r7, r1, #31
 800ca84:	3801      	subs	r0, #1
 800ca86:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800ca8a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ca8e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ca92:	d1f0      	bne.n	800ca76 <__ieee754_sqrt+0xb6>
 800ca94:	4604      	mov	r4, r0
 800ca96:	2720      	movs	r7, #32
 800ca98:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ca9c:	429a      	cmp	r2, r3
 800ca9e:	eb00 0e0c 	add.w	lr, r0, ip
 800caa2:	db02      	blt.n	800caaa <__ieee754_sqrt+0xea>
 800caa4:	d113      	bne.n	800cace <__ieee754_sqrt+0x10e>
 800caa6:	458e      	cmp	lr, r1
 800caa8:	d811      	bhi.n	800cace <__ieee754_sqrt+0x10e>
 800caaa:	f1be 0f00 	cmp.w	lr, #0
 800caae:	eb0e 000c 	add.w	r0, lr, ip
 800cab2:	da42      	bge.n	800cb3a <__ieee754_sqrt+0x17a>
 800cab4:	2800      	cmp	r0, #0
 800cab6:	db40      	blt.n	800cb3a <__ieee754_sqrt+0x17a>
 800cab8:	f102 0801 	add.w	r8, r2, #1
 800cabc:	1a9b      	subs	r3, r3, r2
 800cabe:	458e      	cmp	lr, r1
 800cac0:	bf88      	it	hi
 800cac2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800cac6:	eba1 010e 	sub.w	r1, r1, lr
 800caca:	4464      	add	r4, ip
 800cacc:	4642      	mov	r2, r8
 800cace:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800cad2:	3f01      	subs	r7, #1
 800cad4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800cad8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800cadc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800cae0:	d1dc      	bne.n	800ca9c <__ieee754_sqrt+0xdc>
 800cae2:	4319      	orrs	r1, r3
 800cae4:	d01b      	beq.n	800cb1e <__ieee754_sqrt+0x15e>
 800cae6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800cb6c <__ieee754_sqrt+0x1ac>
 800caea:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800cb70 <__ieee754_sqrt+0x1b0>
 800caee:	e9da 0100 	ldrd	r0, r1, [sl]
 800caf2:	e9db 2300 	ldrd	r2, r3, [fp]
 800caf6:	f7f3 fbe7 	bl	80002c8 <__aeabi_dsub>
 800cafa:	e9da 8900 	ldrd	r8, r9, [sl]
 800cafe:	4602      	mov	r2, r0
 800cb00:	460b      	mov	r3, r1
 800cb02:	4640      	mov	r0, r8
 800cb04:	4649      	mov	r1, r9
 800cb06:	f7f4 f813 	bl	8000b30 <__aeabi_dcmple>
 800cb0a:	b140      	cbz	r0, 800cb1e <__ieee754_sqrt+0x15e>
 800cb0c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800cb10:	e9da 0100 	ldrd	r0, r1, [sl]
 800cb14:	e9db 2300 	ldrd	r2, r3, [fp]
 800cb18:	d111      	bne.n	800cb3e <__ieee754_sqrt+0x17e>
 800cb1a:	3601      	adds	r6, #1
 800cb1c:	463c      	mov	r4, r7
 800cb1e:	1072      	asrs	r2, r6, #1
 800cb20:	0863      	lsrs	r3, r4, #1
 800cb22:	07f1      	lsls	r1, r6, #31
 800cb24:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800cb28:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800cb2c:	bf48      	it	mi
 800cb2e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800cb32:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800cb36:	4618      	mov	r0, r3
 800cb38:	e756      	b.n	800c9e8 <__ieee754_sqrt+0x28>
 800cb3a:	4690      	mov	r8, r2
 800cb3c:	e7be      	b.n	800cabc <__ieee754_sqrt+0xfc>
 800cb3e:	f7f3 fbc5 	bl	80002cc <__adddf3>
 800cb42:	e9da 8900 	ldrd	r8, r9, [sl]
 800cb46:	4602      	mov	r2, r0
 800cb48:	460b      	mov	r3, r1
 800cb4a:	4640      	mov	r0, r8
 800cb4c:	4649      	mov	r1, r9
 800cb4e:	f7f3 ffe5 	bl	8000b1c <__aeabi_dcmplt>
 800cb52:	b120      	cbz	r0, 800cb5e <__ieee754_sqrt+0x19e>
 800cb54:	1ca0      	adds	r0, r4, #2
 800cb56:	bf08      	it	eq
 800cb58:	3601      	addeq	r6, #1
 800cb5a:	3402      	adds	r4, #2
 800cb5c:	e7df      	b.n	800cb1e <__ieee754_sqrt+0x15e>
 800cb5e:	1c63      	adds	r3, r4, #1
 800cb60:	f023 0401 	bic.w	r4, r3, #1
 800cb64:	e7db      	b.n	800cb1e <__ieee754_sqrt+0x15e>
 800cb66:	bf00      	nop
 800cb68:	7ff00000 	.word	0x7ff00000
 800cb6c:	20000080 	.word	0x20000080
 800cb70:	20000078 	.word	0x20000078

0800cb74 <_init>:
 800cb74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb76:	bf00      	nop
 800cb78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb7a:	bc08      	pop	{r3}
 800cb7c:	469e      	mov	lr, r3
 800cb7e:	4770      	bx	lr

0800cb80 <_fini>:
 800cb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb82:	bf00      	nop
 800cb84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb86:	bc08      	pop	{r3}
 800cb88:	469e      	mov	lr, r3
 800cb8a:	4770      	bx	lr
